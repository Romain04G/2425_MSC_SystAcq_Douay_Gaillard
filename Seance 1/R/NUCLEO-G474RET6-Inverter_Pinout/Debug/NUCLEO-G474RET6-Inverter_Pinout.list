
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008620  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08008800  08008800  00009800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b38  08008b38  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008b38  08008b38  00009b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b40  08008b40  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b40  08008b40  00009b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b44  08008b44  00009b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008b48  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000068  08008bb0  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08008bb0  0000a500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018df9  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f2a  00000000  00000000  00022e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  00025dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ae  00000000  00000000  00027330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029720  00000000  00000000  000283de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c7b  00000000  00000000  00051afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114497  00000000  00000000  0006a779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017ec10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000660c  00000000  00000000  0017ec54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  00185260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080087e8 	.word	0x080087e8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080087e8 	.word	0x080087e8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b09e      	sub	sp, #120	@ 0x78
 80005d4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	673b      	str	r3, [r7, #112]	@ 0x70
	char*		token;
	int 		newCmdReady = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	66bb      	str	r3, [r7, #104]	@ 0x68
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005de:	f001 f8f8 	bl	80017d2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005e2:	f000 f90d 	bl	8000800 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005e6:	f000 fbc3 	bl	8000d70 <MX_GPIO_Init>
	MX_ADC2_Init();
 80005ea:	f000 f9cb 	bl	8000984 <MX_ADC2_Init>
	MX_ADC1_Init();
 80005ee:	f000 f951 	bl	8000894 <MX_ADC1_Init>
	MX_TIM1_Init();
 80005f2:	f000 fa2d 	bl	8000a50 <MX_TIM1_Init>
	MX_TIM3_Init();
 80005f6:	f000 fad7 	bl	8000ba8 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 80005fa:	f000 fb21 	bl	8000c40 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80005fe:	f000 fb6b 	bl	8000cd8 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2224      	movs	r2, #36	@ 0x24
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f007 f9f6 	bl	80079fa <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 800060e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000612:	2240      	movs	r2, #64	@ 0x40
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f007 f9ef 	bl	80079fa <memset>
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
 800061c:	4b67      	ldr	r3, [pc, #412]	@ (80007bc <main+0x1ec>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000622:	2240      	movs	r2, #64	@ 0x40
 8000624:	2100      	movs	r1, #0
 8000626:	4866      	ldr	r0, [pc, #408]	@ (80007c0 <main+0x1f0>)
 8000628:	f007 f9e7 	bl	80079fa <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800062c:	2201      	movs	r2, #1
 800062e:	4963      	ldr	r1, [pc, #396]	@ (80007bc <main+0x1ec>)
 8000630:	4864      	ldr	r0, [pc, #400]	@ (80007c4 <main+0x1f4>)
 8000632:	f005 f94d 	bl	80058d0 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8000636:	200a      	movs	r0, #10
 8000638:	f001 f902 	bl	8001840 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	2266      	movs	r2, #102	@ 0x66
 8000642:	4961      	ldr	r1, [pc, #388]	@ (80007c8 <main+0x1f8>)
 8000644:	485f      	ldr	r0, [pc, #380]	@ (80007c4 <main+0x1f4>)
 8000646:	f005 f8ad 	bl	80057a4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	2218      	movs	r2, #24
 8000650:	495e      	ldr	r1, [pc, #376]	@ (80007cc <main+0x1fc>)
 8000652:	485c      	ldr	r0, [pc, #368]	@ (80007c4 <main+0x1f4>)
 8000654:	f005 f8a6 	bl	80057a4 <HAL_UART_Transmit>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 8000658:	4b5d      	ldr	r3, [pc, #372]	@ (80007d0 <main+0x200>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d058      	beq.n	8000712 <main+0x142>
			switch(uartRxBuffer[0]){
 8000660:	4b56      	ldr	r3, [pc, #344]	@ (80007bc <main+0x1ec>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b0d      	cmp	r3, #13
 8000666:	d002      	beq.n	800066e <main+0x9e>
 8000668:	2b7f      	cmp	r3, #127	@ 0x7f
 800066a:	d02f      	beq.n	80006cc <main+0xfc>
 800066c:	e03e      	b.n	80006ec <main+0x11c>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newLine, sizeof(newLine), HAL_MAX_DELAY);
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	2203      	movs	r2, #3
 8000674:	4957      	ldr	r1, [pc, #348]	@ (80007d4 <main+0x204>)
 8000676:	4853      	ldr	r0, [pc, #332]	@ (80007c4 <main+0x1f4>)
 8000678:	f005 f894 	bl	80057a4 <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 800067c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000680:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000682:	4413      	add	r3, r2
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	673b      	str	r3, [r7, #112]	@ 0x70
				token = strtok(cmdBuffer, " ");
 800068c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000690:	4951      	ldr	r1, [pc, #324]	@ (80007d8 <main+0x208>)
 8000692:	4618      	mov	r0, r3
 8000694:	f007 f9ba 	bl	8007a0c <strtok>
 8000698:	4603      	mov	r3, r0
 800069a:	66fb      	str	r3, [r7, #108]	@ 0x6c
				while(token!=NULL){
 800069c:	e00e      	b.n	80006bc <main+0xec>
					argv[argc++] = token;
 800069e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	673a      	str	r2, [r7, #112]	@ 0x70
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	3378      	adds	r3, #120	@ 0x78
 80006a8:	443b      	add	r3, r7
 80006aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80006ac:	f843 2c74 	str.w	r2, [r3, #-116]
					token = strtok(NULL, " ");
 80006b0:	4949      	ldr	r1, [pc, #292]	@ (80007d8 <main+0x208>)
 80006b2:	2000      	movs	r0, #0
 80006b4:	f007 f9aa 	bl	8007a0c <strtok>
 80006b8:	4603      	mov	r3, r0
 80006ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
				while(token!=NULL){
 80006bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d1ed      	bne.n	800069e <main+0xce>
				}

				idx_cmd = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	677b      	str	r3, [r7, #116]	@ 0x74
				newCmdReady = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	66bb      	str	r3, [r7, #104]	@ 0x68
				break;
 80006ca:	e01f      	b.n	800070c <main+0x13c>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 80006cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80006ce:	1e5a      	subs	r2, r3, #1
 80006d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80006d2:	3378      	adds	r3, #120	@ 0x78
 80006d4:	443b      	add	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	2201      	movs	r2, #1
 80006e2:	4936      	ldr	r1, [pc, #216]	@ (80007bc <main+0x1ec>)
 80006e4:	4837      	ldr	r0, [pc, #220]	@ (80007c4 <main+0x1f4>)
 80006e6:	f005 f85d 	bl	80057a4 <HAL_UART_Transmit>
				break;
 80006ea:	e00f      	b.n	800070c <main+0x13c>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80006ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	677a      	str	r2, [r7, #116]	@ 0x74
 80006f2:	4a32      	ldr	r2, [pc, #200]	@ (80007bc <main+0x1ec>)
 80006f4:	7812      	ldrb	r2, [r2, #0]
 80006f6:	3378      	adds	r3, #120	@ 0x78
 80006f8:	443b      	add	r3, r7
 80006fa:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	2201      	movs	r2, #1
 8000704:	492d      	ldr	r1, [pc, #180]	@ (80007bc <main+0x1ec>)
 8000706:	482f      	ldr	r0, [pc, #188]	@ (80007c4 <main+0x1f4>)
 8000708:	f005 f84c 	bl	80057a4 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 800070c:	4b30      	ldr	r3, [pc, #192]	@ (80007d0 <main+0x200>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8000712:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000714:	2b00      	cmp	r3, #0
 8000716:	d09f      	beq.n	8000658 <main+0x88>
		    if (strcmp(argv[0], "help") == 0) {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4930      	ldr	r1, [pc, #192]	@ (80007dc <main+0x20c>)
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fd7f 	bl	8000220 <strcmp>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d107      	bne.n	8000738 <main+0x168>
		        HAL_UART_Transmit(&huart2, (uint8_t*)help, strlen(help), HAL_MAX_DELAY);
 8000728:	f04f 33ff 	mov.w	r3, #4294967295
 800072c:	22c5      	movs	r2, #197	@ 0xc5
 800072e:	492c      	ldr	r1, [pc, #176]	@ (80007e0 <main+0x210>)
 8000730:	4824      	ldr	r0, [pc, #144]	@ (80007c4 <main+0x1f4>)
 8000732:	f005 f837 	bl	80057a4 <HAL_UART_Transmit>
 8000736:	e036      	b.n	80007a6 <main+0x1d6>
		    }
		    else if (strcmp(argv[0], "pinout") == 0) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	492a      	ldr	r1, [pc, #168]	@ (80007e4 <main+0x214>)
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fd6f 	bl	8000220 <strcmp>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d107      	bne.n	8000758 <main+0x188>
		        HAL_UART_Transmit(&huart2, (uint8_t*)pinout, strlen(pinout), HAL_MAX_DELAY);
 8000748:	f04f 33ff 	mov.w	r3, #4294967295
 800074c:	2278      	movs	r2, #120	@ 0x78
 800074e:	4926      	ldr	r1, [pc, #152]	@ (80007e8 <main+0x218>)
 8000750:	481c      	ldr	r0, [pc, #112]	@ (80007c4 <main+0x1f4>)
 8000752:	f005 f827 	bl	80057a4 <HAL_UART_Transmit>
 8000756:	e026      	b.n	80007a6 <main+0x1d6>
		    }
		    else if (strcmp(argv[0], "start") == 0) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4924      	ldr	r1, [pc, #144]	@ (80007ec <main+0x21c>)
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fd5f 	bl	8000220 <strcmp>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d107      	bne.n	8000778 <main+0x1a8>
		        HAL_UART_Transmit(&huart2, (uint8_t*)powerOn, strlen(powerOn), HAL_MAX_DELAY);
 8000768:	f04f 33ff 	mov.w	r3, #4294967295
 800076c:	220a      	movs	r2, #10
 800076e:	4920      	ldr	r1, [pc, #128]	@ (80007f0 <main+0x220>)
 8000770:	4814      	ldr	r0, [pc, #80]	@ (80007c4 <main+0x1f4>)
 8000772:	f005 f817 	bl	80057a4 <HAL_UART_Transmit>
 8000776:	e016      	b.n	80007a6 <main+0x1d6>
		    }
		    else if (strcmp(argv[0], "stop") == 0) {;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	491e      	ldr	r1, [pc, #120]	@ (80007f4 <main+0x224>)
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd4f 	bl	8000220 <strcmp>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d107      	bne.n	8000798 <main+0x1c8>
		        HAL_UART_Transmit(&huart2, (uint8_t*)powerOff, strlen(powerOff), HAL_MAX_DELAY);
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
 800078c:	220b      	movs	r2, #11
 800078e:	491a      	ldr	r1, [pc, #104]	@ (80007f8 <main+0x228>)
 8000790:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <main+0x1f4>)
 8000792:	f005 f807 	bl	80057a4 <HAL_UART_Transmit>
 8000796:	e006      	b.n	80007a6 <main+0x1d6>
		    }
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000798:	f04f 33ff 	mov.w	r3, #4294967295
 800079c:	2214      	movs	r2, #20
 800079e:	4917      	ldr	r1, [pc, #92]	@ (80007fc <main+0x22c>)
 80007a0:	4808      	ldr	r0, [pc, #32]	@ (80007c4 <main+0x1f4>)
 80007a2:	f004 ffff 	bl	80057a4 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	2218      	movs	r2, #24
 80007ac:	4907      	ldr	r1, [pc, #28]	@ (80007cc <main+0x1fc>)
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <main+0x1f4>)
 80007b0:	f004 fff8 	bl	80057a4 <HAL_UART_Transmit>
			newCmdReady = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	66bb      	str	r3, [r7, #104]	@ 0x68
		if(uartRxReceived){
 80007b8:	e74e      	b.n	8000658 <main+0x88>
 80007ba:	bf00      	nop
 80007bc:	20000318 	.word	0x20000318
 80007c0:	2000031c 	.word	0x2000031c
 80007c4:	200001f4 	.word	0x200001f4
 80007c8:	0800883c 	.word	0x0800883c
 80007cc:	08008824 	.word	0x08008824
 80007d0:	20000314 	.word	0x20000314
 80007d4:	080088a4 	.word	0x080088a4
 80007d8:	08008800 	.word	0x08008800
 80007dc:	08008804 	.word	0x08008804
 80007e0:	080088a8 	.word	0x080088a8
 80007e4:	0800880c 	.word	0x0800880c
 80007e8:	08008970 	.word	0x08008970
 80007ec:	08008814 	.word	0x08008814
 80007f0:	080089ec 	.word	0x080089ec
 80007f4:	0800881c 	.word	0x0800881c
 80007f8:	080089f8 	.word	0x080089f8
 80007fc:	08008a04 	.word	0x08008a04

08000800 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	@ 0x50
 8000804:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0318 	add.w	r3, r7, #24
 800080a:	2238      	movs	r2, #56	@ 0x38
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f007 f8f3 	bl	80079fa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000822:	2000      	movs	r0, #0
 8000824:	f002 fc96 	bl	8003154 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000828:	2301      	movs	r3, #1
 800082a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000830:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000836:	2303      	movs	r3, #3
 8000838:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800083a:	2306      	movs	r3, #6
 800083c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800083e:	2355      	movs	r3, #85	@ 0x55
 8000840:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000842:	2302      	movs	r3, #2
 8000844:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000846:	2302      	movs	r3, #2
 8000848:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800084a:	2302      	movs	r3, #2
 800084c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 0318 	add.w	r3, r7, #24
 8000852:	4618      	mov	r0, r3
 8000854:	f002 fd32 	bl	80032bc <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x62>
	{
		Error_Handler();
 800085e:	f000 fb3f 	bl	8000ee0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	230f      	movs	r3, #15
 8000864:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000866:	2303      	movs	r3, #3
 8000868:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2104      	movs	r1, #4
 800087a:	4618      	mov	r0, r3
 800087c:	f003 f836 	bl	80038ec <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000886:	f000 fb2b 	bl	8000ee0 <Error_Handler>
	}
}
 800088a:	bf00      	nop
 800088c:	3750      	adds	r7, #80	@ 0x50
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	@ 0x30
 8000898:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 800089a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2220      	movs	r2, #32
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f007 f8a4 	bl	80079fa <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80008b2:	4b32      	ldr	r3, [pc, #200]	@ (800097c <MX_ADC1_Init+0xe8>)
 80008b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008b8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008ba:	4b30      	ldr	r3, [pc, #192]	@ (800097c <MX_ADC1_Init+0xe8>)
 80008bc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008c0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008c2:	4b2e      	ldr	r3, [pc, #184]	@ (800097c <MX_ADC1_Init+0xe8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c8:	4b2c      	ldr	r3, [pc, #176]	@ (800097c <MX_ADC1_Init+0xe8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 80008ce:	4b2b      	ldr	r3, [pc, #172]	@ (800097c <MX_ADC1_Init+0xe8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d4:	4b29      	ldr	r3, [pc, #164]	@ (800097c <MX_ADC1_Init+0xe8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008da:	4b28      	ldr	r3, [pc, #160]	@ (800097c <MX_ADC1_Init+0xe8>)
 80008dc:	2204      	movs	r2, #4
 80008de:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80008e0:	4b26      	ldr	r3, [pc, #152]	@ (800097c <MX_ADC1_Init+0xe8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80008e6:	4b25      	ldr	r3, [pc, #148]	@ (800097c <MX_ADC1_Init+0xe8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 80008ec:	4b23      	ldr	r3, [pc, #140]	@ (800097c <MX_ADC1_Init+0xe8>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f2:	4b22      	ldr	r3, [pc, #136]	@ (800097c <MX_ADC1_Init+0xe8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008fa:	4b20      	ldr	r3, [pc, #128]	@ (800097c <MX_ADC1_Init+0xe8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000900:	4b1e      	ldr	r3, [pc, #120]	@ (800097c <MX_ADC1_Init+0xe8>)
 8000902:	2200      	movs	r2, #0
 8000904:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000906:	4b1d      	ldr	r3, [pc, #116]	@ (800097c <MX_ADC1_Init+0xe8>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800090e:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <MX_ADC1_Init+0xe8>)
 8000910:	2200      	movs	r2, #0
 8000912:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8000914:	4b19      	ldr	r3, [pc, #100]	@ (800097c <MX_ADC1_Init+0xe8>)
 8000916:	2200      	movs	r2, #0
 8000918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800091c:	4817      	ldr	r0, [pc, #92]	@ (800097c <MX_ADC1_Init+0xe8>)
 800091e:	f001 f98b 	bl	8001c38 <HAL_ADC_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0x98>
	{
		Error_Handler();
 8000928:	f000 fada 	bl	8000ee0 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000934:	4619      	mov	r1, r3
 8000936:	4811      	ldr	r0, [pc, #68]	@ (800097c <MX_ADC1_Init+0xe8>)
 8000938:	f001 ffa6 	bl	8002888 <HAL_ADCEx_MultiModeConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC1_Init+0xb2>
	{
		Error_Handler();
 8000942:	f000 facd 	bl	8000ee0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <MX_ADC1_Init+0xec>)
 8000948:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800094a:	2306      	movs	r3, #6
 800094c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000952:	237f      	movs	r3, #127	@ 0x7f
 8000954:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000956:	2304      	movs	r3, #4
 8000958:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4619      	mov	r1, r3
 8000962:	4806      	ldr	r0, [pc, #24]	@ (800097c <MX_ADC1_Init+0xe8>)
 8000964:	f001 fb2a 	bl	8001fbc <HAL_ADC_ConfigChannel>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_ADC1_Init+0xde>
	{
		Error_Handler();
 800096e:	f000 fab7 	bl	8000ee0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	3730      	adds	r7, #48	@ 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000084 	.word	0x20000084
 8000980:	21800100 	.word	0x21800100

08000984 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800098a:	463b      	mov	r3, r7
 800098c:	2220      	movs	r2, #32
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f007 f832 	bl	80079fa <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8000996:	4b2b      	ldr	r3, [pc, #172]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 8000998:	4a2b      	ldr	r2, [pc, #172]	@ (8000a48 <MX_ADC2_Init+0xc4>)
 800099a:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800099c:	4b29      	ldr	r3, [pc, #164]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 800099e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009a2:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80009a4:	4b27      	ldr	r3, [pc, #156]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009aa:	4b26      	ldr	r3, [pc, #152]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 80009b0:	4b24      	ldr	r3, [pc, #144]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b6:	4b23      	ldr	r3, [pc, #140]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009bc:	4b21      	ldr	r3, [pc, #132]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 80009be:	2204      	movs	r2, #4
 80009c0:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 80009c2:	4b20      	ldr	r3, [pc, #128]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 1;
 80009ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009dc:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e2:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc2.Init.DMAContinuousRequests = DISABLE;
 80009e8:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 80009f6:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009fe:	4811      	ldr	r0, [pc, #68]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 8000a00:	f001 f91a 	bl	8001c38 <HAL_ADC_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_ADC2_Init+0x8a>
	{
		Error_Handler();
 8000a0a:	f000 fa69 	bl	8000ee0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <MX_ADC2_Init+0xc8>)
 8000a10:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a12:	2306      	movs	r3, #6
 8000a14:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a1a:	237f      	movs	r3, #127	@ 0x7f
 8000a1c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a26:	463b      	mov	r3, r7
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4806      	ldr	r0, [pc, #24]	@ (8000a44 <MX_ADC2_Init+0xc0>)
 8000a2c:	f001 fac6 	bl	8001fbc <HAL_ADC_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ADC2_Init+0xb6>
	{
		Error_Handler();
 8000a36:	f000 fa53 	bl	8000ee0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	3720      	adds	r7, #32
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000f0 	.word	0x200000f0
 8000a48:	50000100 	.word	0x50000100
 8000a4c:	19200040 	.word	0x19200040

08000a50 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b098      	sub	sp, #96	@ 0x60
 8000a54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000a62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]
 8000a72:	615a      	str	r2, [r3, #20]
 8000a74:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2234      	movs	r2, #52	@ 0x34
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f006 ffbc 	bl	80079fa <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000a82:	4b47      	ldr	r3, [pc, #284]	@ (8000ba0 <MX_TIM1_Init+0x150>)
 8000a84:	4a47      	ldr	r2, [pc, #284]	@ (8000ba4 <MX_TIM1_Init+0x154>)
 8000a86:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000a88:	4b45      	ldr	r3, [pc, #276]	@ (8000ba0 <MX_TIM1_Init+0x150>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b44      	ldr	r3, [pc, #272]	@ (8000ba0 <MX_TIM1_Init+0x150>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000a94:	4b42      	ldr	r3, [pc, #264]	@ (8000ba0 <MX_TIM1_Init+0x150>)
 8000a96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a9a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b40      	ldr	r3, [pc, #256]	@ (8000ba0 <MX_TIM1_Init+0x150>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000aa2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ba0 <MX_TIM1_Init+0x150>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ba0 <MX_TIM1_Init+0x150>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aae:	483c      	ldr	r0, [pc, #240]	@ (8000ba0 <MX_TIM1_Init+0x150>)
 8000ab0:	f003 fc92 	bl	80043d8 <HAL_TIM_PWM_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 8000aba:	f000 fa11 	bl	8000ee0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4833      	ldr	r0, [pc, #204]	@ (8000ba0 <MX_TIM1_Init+0x150>)
 8000ad2:	f004 fc89 	bl	80053e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8000adc:	f000 fa00 	bl	8000ee0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae0:	2360      	movs	r3, #96	@ 0x60
 8000ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aec:	2300      	movs	r3, #0
 8000aee:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000afc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b00:	2200      	movs	r2, #0
 8000b02:	4619      	mov	r1, r3
 8000b04:	4826      	ldr	r0, [pc, #152]	@ (8000ba0 <MX_TIM1_Init+0x150>)
 8000b06:	f003 fe3d 	bl	8004784 <HAL_TIM_PWM_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 8000b10:	f000 f9e6 	bl	8000ee0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b18:	2204      	movs	r2, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4820      	ldr	r0, [pc, #128]	@ (8000ba0 <MX_TIM1_Init+0x150>)
 8000b1e:	f003 fe31 	bl	8004784 <HAL_TIM_PWM_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0xdc>
	{
		Error_Handler();
 8000b28:	f000 f9da 	bl	8000ee0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b2c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b30:	2208      	movs	r2, #8
 8000b32:	4619      	mov	r1, r3
 8000b34:	481a      	ldr	r0, [pc, #104]	@ (8000ba0 <MX_TIM1_Init+0x150>)
 8000b36:	f003 fe25 	bl	8004784 <HAL_TIM_PWM_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0xf4>
	{
		Error_Handler();
 8000b40:	f000 f9ce 	bl	8000ee0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b5c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4807      	ldr	r0, [pc, #28]	@ (8000ba0 <MX_TIM1_Init+0x150>)
 8000b82:	f004 fcc7 	bl	8005514 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM1_Init+0x140>
	{
		Error_Handler();
 8000b8c:	f000 f9a8 	bl	8000ee0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000b90:	4803      	ldr	r0, [pc, #12]	@ (8000ba0 <MX_TIM1_Init+0x150>)
 8000b92:	f000 fb4b 	bl	800122c <HAL_TIM_MspPostInit>

}
 8000b96:	bf00      	nop
 8000b98:	3760      	adds	r7, #96	@ 0x60
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000015c 	.word	0x2000015c
 8000ba4:	40012c00 	.word	0x40012c00

08000ba8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_HallSensor_InitTypeDef sConfig = {0};
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <MX_TIM3_Init+0x90>)
 8000bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c3c <MX_TIM3_Init+0x94>)
 8000bca:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <MX_TIM3_Init+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <MX_TIM3_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <MX_TIM3_Init+0x90>)
 8000bda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bde:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MX_TIM3_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <MX_TIM3_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Filter = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
	sConfig.Commutation_Delay = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4619      	mov	r1, r3
 8000c02:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <MX_TIM3_Init+0x90>)
 8000c04:	f004 fb40 	bl	8005288 <HAL_TIMEx_HallSensor_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM3_Init+0x6a>
	{
		Error_Handler();
 8000c0e:	f000 f967 	bl	8000ee0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000c12:	2350      	movs	r3, #80	@ 0x50
 8000c14:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <MX_TIM3_Init+0x90>)
 8000c20:	f004 fbe2 	bl	80053e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM3_Init+0x86>
	{
		Error_Handler();
 8000c2a:	f000 f959 	bl	8000ee0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	3720      	adds	r7, #32
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200001a8 	.word	0x200001a8
 8000c3c:	40000400 	.word	0x40000400

08000c40 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000c44:	4b22      	ldr	r3, [pc, #136]	@ (8000cd0 <MX_USART2_UART_Init+0x90>)
 8000c46:	4a23      	ldr	r2, [pc, #140]	@ (8000cd4 <MX_USART2_UART_Init+0x94>)
 8000c48:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <MX_USART2_UART_Init+0x90>)
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c50:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <MX_USART2_UART_Init+0x90>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <MX_USART2_UART_Init+0x90>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <MX_USART2_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MX_USART2_UART_Init+0x90>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <MX_USART2_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_USART2_UART_Init+0x90>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c76:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <MX_USART2_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_USART2_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c82:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <MX_USART2_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c88:	4811      	ldr	r0, [pc, #68]	@ (8000cd0 <MX_USART2_UART_Init+0x90>)
 8000c8a:	f004 fd3b 	bl	8005704 <HAL_UART_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8000c94:	f000 f924 	bl	8000ee0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <MX_USART2_UART_Init+0x90>)
 8000c9c:	f006 fcdd 	bl	800765a <HAL_UARTEx_SetTxFifoThreshold>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8000ca6:	f000 f91b 	bl	8000ee0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4808      	ldr	r0, [pc, #32]	@ (8000cd0 <MX_USART2_UART_Init+0x90>)
 8000cae:	f006 fd12 	bl	80076d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8000cb8:	f000 f912 	bl	8000ee0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cbc:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <MX_USART2_UART_Init+0x90>)
 8000cbe:	f006 fc93 	bl	80075e8 <HAL_UARTEx_DisableFifoMode>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8000cc8:	f000 f90a 	bl	8000ee0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200001f4 	.word	0x200001f4
 8000cd4:	40004400 	.word	0x40004400

08000cd8 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000cdc:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000cde:	4a23      	ldr	r2, [pc, #140]	@ (8000d6c <MX_USART3_UART_Init+0x94>)
 8000ce0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000ce4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d14:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	@ 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d20:	4811      	ldr	r0, [pc, #68]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d22:	f004 fcef 	bl	8005704 <HAL_UART_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8000d2c:	f000 f8d8 	bl	8000ee0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d30:	2100      	movs	r1, #0
 8000d32:	480d      	ldr	r0, [pc, #52]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d34:	f006 fc91 	bl	800765a <HAL_UARTEx_SetTxFifoThreshold>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART3_UART_Init+0x6a>
	{
		Error_Handler();
 8000d3e:	f000 f8cf 	bl	8000ee0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d42:	2100      	movs	r1, #0
 8000d44:	4808      	ldr	r0, [pc, #32]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d46:	f006 fcc6 	bl	80076d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART3_UART_Init+0x7c>
	{
		Error_Handler();
 8000d50:	f000 f8c6 	bl	8000ee0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d54:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d56:	f006 fc47 	bl	80075e8 <HAL_UARTEx_DisableFifoMode>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8000d60:	f000 f8be 	bl	8000ee0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000284 	.word	0x20000284
 8000d6c:	40004800 	.word	0x40004800

08000d70 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b3f      	ldr	r3, [pc, #252]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	4a3e      	ldr	r2, [pc, #248]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d92:	4b3c      	ldr	r3, [pc, #240]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000d9e:	4b39      	ldr	r3, [pc, #228]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	4a38      	ldr	r2, [pc, #224]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000da4:	f043 0320 	orr.w	r3, r3, #32
 8000da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000daa:	4b36      	ldr	r3, [pc, #216]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	f003 0320 	and.w	r3, r3, #32
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b33      	ldr	r3, [pc, #204]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	4a32      	ldr	r2, [pc, #200]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc2:	4b30      	ldr	r3, [pc, #192]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b2d      	ldr	r3, [pc, #180]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dda:	4b2a      	ldr	r3, [pc, #168]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000de6:	4b27      	ldr	r3, [pc, #156]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	4a26      	ldr	r2, [pc, #152]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df2:	4b24      	ldr	r3, [pc, #144]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2120      	movs	r1, #32
 8000e02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e06:	f002 f969 	bl	80030dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	481e      	ldr	r0, [pc, #120]	@ (8000e88 <MX_GPIO_Init+0x118>)
 8000e10:	f002 f964 	bl	80030dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USR_BTN_Pin */
	GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000e14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4818      	ldr	r0, [pc, #96]	@ (8000e8c <MX_GPIO_Init+0x11c>)
 8000e2c:	f001 ffd4 	bl	8002dd8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USR_LED_Pin */
	GPIO_InitStruct.Pin = USR_LED_Pin;
 8000e30:	2320      	movs	r3, #32
 8000e32:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e4a:	f001 ffc5 	bl	8002dd8 <HAL_GPIO_Init>

	/*Configure GPIO pin : NRST_SafetyUC_Pin */
	GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4808      	ldr	r0, [pc, #32]	@ (8000e88 <MX_GPIO_Init+0x118>)
 8000e66:	f001 ffb7 	bl	8002dd8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2028      	movs	r0, #40	@ 0x28
 8000e70:	f001 feca 	bl	8002c08 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e74:	2028      	movs	r0, #40	@ 0x28
 8000e76:	f001 fee1 	bl	8002c3c <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	@ 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48000c00 	.word	0x48000c00
 8000e8c:	48000800 	.word	0x48000800

08000e90 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x20>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4904      	ldr	r1, [pc, #16]	@ (8000eb4 <HAL_UART_RxCpltCallback+0x24>)
 8000ea2:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <HAL_UART_RxCpltCallback+0x28>)
 8000ea4:	f004 fd14 	bl	80058d0 <HAL_UART_Receive_IT>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000314 	.word	0x20000314
 8000eb4:	20000318 	.word	0x20000318
 8000eb8:	200001f4 	.word	0x200001f4

08000ebc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a04      	ldr	r2, [pc, #16]	@ (8000edc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000ece:	f000 fc99 	bl	8001804 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40001000 	.word	0x40001000

08000ee0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <Error_Handler+0x8>

08000eec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <HAL_MspInit+0x44>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f30 <HAL_MspInit+0x44>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000efe:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0e:	4a08      	ldr	r2, [pc, #32]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f22:	f002 f9bb 	bl	800329c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0a4      	sub	sp, #144	@ 0x90
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f50:	2254      	movs	r2, #84	@ 0x54
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f006 fd50 	bl	80079fa <memset>
  if(hadc->Instance==ADC1)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f62:	d174      	bne.n	800104e <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f6a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 ff07 	bl	8003d88 <HAL_RCCEx_PeriphCLKConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f80:	f7ff ffae 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f84:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <HAL_ADC_MspInit+0x1e0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	4a62      	ldr	r2, [pc, #392]	@ (8001114 <HAL_ADC_MspInit+0x1e0>)
 8000f8c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f8e:	4b61      	ldr	r3, [pc, #388]	@ (8001114 <HAL_ADC_MspInit+0x1e0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d10b      	bne.n	8000fae <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f96:	4b60      	ldr	r3, [pc, #384]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	4a5f      	ldr	r2, [pc, #380]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 8000f9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	4b5a      	ldr	r3, [pc, #360]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	4a59      	ldr	r2, [pc, #356]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fba:	4b57      	ldr	r3, [pc, #348]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	623b      	str	r3, [r7, #32]
 8000fc4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b54      	ldr	r3, [pc, #336]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	4a53      	ldr	r2, [pc, #332]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd2:	4b51      	ldr	r3, [pc, #324]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b4e      	ldr	r3, [pc, #312]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	4a4d      	ldr	r2, [pc, #308]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fea:	4b4b      	ldr	r3, [pc, #300]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	61bb      	str	r3, [r7, #24]
 8000ff4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800100a:	4619      	mov	r1, r3
 800100c:	4843      	ldr	r0, [pc, #268]	@ (800111c <HAL_ADC_MspInit+0x1e8>)
 800100e:	f001 fee3 	bl	8002dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001012:	2302      	movs	r3, #2
 8001014:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001016:	2303      	movs	r3, #3
 8001018:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001026:	4619      	mov	r1, r3
 8001028:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102c:	f001 fed4 	bl	8002dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001030:	2303      	movs	r3, #3
 8001032:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001040:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001044:	4619      	mov	r1, r3
 8001046:	4836      	ldr	r0, [pc, #216]	@ (8001120 <HAL_ADC_MspInit+0x1ec>)
 8001048:	f001 fec6 	bl	8002dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800104c:	e05e      	b.n	800110c <HAL_ADC_MspInit+0x1d8>
  else if(hadc->Instance==ADC2)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a34      	ldr	r2, [pc, #208]	@ (8001124 <HAL_ADC_MspInit+0x1f0>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d159      	bne.n	800110c <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001058:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800105c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800105e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001062:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001064:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001068:	4618      	mov	r0, r3
 800106a:	f002 fe8d 	bl	8003d88 <HAL_RCCEx_PeriphCLKConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8001074:	f7ff ff34 	bl	8000ee0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001078:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <HAL_ADC_MspInit+0x1e0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	4a25      	ldr	r2, [pc, #148]	@ (8001114 <HAL_ADC_MspInit+0x1e0>)
 8001080:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001082:	4b24      	ldr	r3, [pc, #144]	@ (8001114 <HAL_ADC_MspInit+0x1e0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d10b      	bne.n	80010a2 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800108a:	4b23      	ldr	r3, [pc, #140]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	4a22      	ldr	r2, [pc, #136]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 8001090:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001096:	4b20      	ldr	r3, [pc, #128]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	4a16      	ldr	r2, [pc, #88]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c6:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <HAL_ADC_MspInit+0x1e4>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80010d2:	230b      	movs	r3, #11
 80010d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d6:	2303      	movs	r3, #3
 80010d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80010e6:	4619      	mov	r1, r3
 80010e8:	480c      	ldr	r0, [pc, #48]	@ (800111c <HAL_ADC_MspInit+0x1e8>)
 80010ea:	f001 fe75 	bl	8002dd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80010ee:	2301      	movs	r3, #1
 80010f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f2:	2303      	movs	r3, #3
 80010f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001108:	f001 fe66 	bl	8002dd8 <HAL_GPIO_Init>
}
 800110c:	bf00      	nop
 800110e:	3790      	adds	r7, #144	@ 0x90
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000035c 	.word	0x2000035c
 8001118:	40021000 	.word	0x40021000
 800111c:	48000800 	.word	0x48000800
 8001120:	48000400 	.word	0x48000400
 8001124:	50000100 	.word	0x50000100

08001128 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <HAL_TIM_PWM_MspInit+0x38>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d10b      	bne.n	8001152 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <HAL_TIM_PWM_MspInit+0x3c>)
 800113c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800113e:	4a09      	ldr	r2, [pc, #36]	@ (8001164 <HAL_TIM_PWM_MspInit+0x3c>)
 8001140:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001144:	6613      	str	r3, [r2, #96]	@ 0x60
 8001146:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <HAL_TIM_PWM_MspInit+0x3c>)
 8001148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800114a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40012c00 	.word	0x40012c00
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	@ 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM3)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a26      	ldr	r2, [pc, #152]	@ (8001220 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d145      	bne.n	8001216 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800118a:	4b26      	ldr	r3, [pc, #152]	@ (8001224 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118e:	4a25      	ldr	r2, [pc, #148]	@ (8001224 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6593      	str	r3, [r2, #88]	@ 0x58
 8001196:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	4b20      	ldr	r3, [pc, #128]	@ (8001224 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001224 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	4a19      	ldr	r2, [pc, #100]	@ (8001224 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c6:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80011d2:	2350      	movs	r3, #80	@ 0x50
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011e2:	2302      	movs	r3, #2
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f0:	f001 fdf2 	bl	8002dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001206:	2302      	movs	r3, #2
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	@ (8001228 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001212:	f001 fde1 	bl	8002dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	@ 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40000400 	.word	0x40000400
 8001224:	40021000 	.word	0x40021000
 8001228:	48000800 	.word	0x48000800

0800122c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	@ 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a29      	ldr	r2, [pc, #164]	@ (80012f0 <HAL_TIM_MspPostInit+0xc4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d14b      	bne.n	80012e6 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b29      	ldr	r3, [pc, #164]	@ (80012f4 <HAL_TIM_MspPostInit+0xc8>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	4a28      	ldr	r2, [pc, #160]	@ (80012f4 <HAL_TIM_MspPostInit+0xc8>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125a:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <HAL_TIM_MspPostInit+0xc8>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b23      	ldr	r3, [pc, #140]	@ (80012f4 <HAL_TIM_MspPostInit+0xc8>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a22      	ldr	r2, [pc, #136]	@ (80012f4 <HAL_TIM_MspPostInit+0xc8>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <HAL_TIM_MspPostInit+0xc8>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800127e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001290:	2306      	movs	r3, #6
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4817      	ldr	r0, [pc, #92]	@ (80012f8 <HAL_TIM_MspPostInit+0xcc>)
 800129c:	f001 fd9c 	bl	8002dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80012a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80012b2:	2304      	movs	r3, #4
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	480e      	ldr	r0, [pc, #56]	@ (80012f8 <HAL_TIM_MspPostInit+0xcc>)
 80012be:	f001 fd8b 	bl	8002dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80012c2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012d4:	2306      	movs	r3, #6
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e2:	f001 fd79 	bl	8002dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	@ 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40012c00 	.word	0x40012c00
 80012f4:	40021000 	.word	0x40021000
 80012f8:	48000400 	.word	0x48000400

080012fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0a0      	sub	sp, #128	@ 0x80
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001314:	f107 0318 	add.w	r3, r7, #24
 8001318:	2254      	movs	r2, #84	@ 0x54
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f006 fb6c 	bl	80079fa <memset>
  if(huart->Instance==USART2)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a45      	ldr	r2, [pc, #276]	@ (800143c <HAL_UART_MspInit+0x140>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d13f      	bne.n	80013ac <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800132c:	2302      	movs	r3, #2
 800132e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001334:	f107 0318 	add.w	r3, r7, #24
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fd25 	bl	8003d88 <HAL_RCCEx_PeriphCLKConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001344:	f7ff fdcc 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001348:	4b3d      	ldr	r3, [pc, #244]	@ (8001440 <HAL_UART_MspInit+0x144>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134c:	4a3c      	ldr	r2, [pc, #240]	@ (8001440 <HAL_UART_MspInit+0x144>)
 800134e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001352:	6593      	str	r3, [r2, #88]	@ 0x58
 8001354:	4b3a      	ldr	r3, [pc, #232]	@ (8001440 <HAL_UART_MspInit+0x144>)
 8001356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b37      	ldr	r3, [pc, #220]	@ (8001440 <HAL_UART_MspInit+0x144>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001364:	4a36      	ldr	r2, [pc, #216]	@ (8001440 <HAL_UART_MspInit+0x144>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136c:	4b34      	ldr	r3, [pc, #208]	@ (8001440 <HAL_UART_MspInit+0x144>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001378:	230c      	movs	r3, #12
 800137a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001388:	2307      	movs	r3, #7
 800138a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001390:	4619      	mov	r1, r3
 8001392:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001396:	f001 fd1f 	bl	8002dd8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	2026      	movs	r0, #38	@ 0x26
 80013a0:	f001 fc32 	bl	8002c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013a4:	2026      	movs	r0, #38	@ 0x26
 80013a6:	f001 fc49 	bl	8002c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013aa:	e043      	b.n	8001434 <HAL_UART_MspInit+0x138>
  else if(huart->Instance==USART3)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a24      	ldr	r2, [pc, #144]	@ (8001444 <HAL_UART_MspInit+0x148>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d13e      	bne.n	8001434 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013b6:	2304      	movs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013be:	f107 0318 	add.w	r3, r7, #24
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 fce0 	bl	8003d88 <HAL_RCCEx_PeriphCLKConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80013ce:	f7ff fd87 	bl	8000ee0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <HAL_UART_MspInit+0x144>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001440 <HAL_UART_MspInit+0x144>)
 80013d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013de:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <HAL_UART_MspInit+0x144>)
 80013e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <HAL_UART_MspInit+0x144>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	4a14      	ldr	r2, [pc, #80]	@ (8001440 <HAL_UART_MspInit+0x144>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <HAL_UART_MspInit+0x144>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001402:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001406:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001414:	2307      	movs	r3, #7
 8001416:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001418:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800141c:	4619      	mov	r1, r3
 800141e:	480a      	ldr	r0, [pc, #40]	@ (8001448 <HAL_UART_MspInit+0x14c>)
 8001420:	f001 fcda 	bl	8002dd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	2027      	movs	r0, #39	@ 0x27
 800142a:	f001 fbed 	bl	8002c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800142e:	2027      	movs	r0, #39	@ 0x27
 8001430:	f001 fc04 	bl	8002c3c <HAL_NVIC_EnableIRQ>
}
 8001434:	bf00      	nop
 8001436:	3780      	adds	r7, #128	@ 0x80
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40004400 	.word	0x40004400
 8001440:	40021000 	.word	0x40021000
 8001444:	40004800 	.word	0x40004800
 8001448:	48000800 	.word	0x48000800

0800144c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08c      	sub	sp, #48	@ 0x30
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800145c:	4b2c      	ldr	r3, [pc, #176]	@ (8001510 <HAL_InitTick+0xc4>)
 800145e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001460:	4a2b      	ldr	r2, [pc, #172]	@ (8001510 <HAL_InitTick+0xc4>)
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	6593      	str	r3, [r2, #88]	@ 0x58
 8001468:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <HAL_InitTick+0xc4>)
 800146a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146c:	f003 0310 	and.w	r3, r3, #16
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001474:	f107 020c 	add.w	r2, r7, #12
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f002 fc0a 	bl	8003c98 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001484:	f002 fbdc 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 8001488:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800148a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148c:	4a21      	ldr	r2, [pc, #132]	@ (8001514 <HAL_InitTick+0xc8>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	0c9b      	lsrs	r3, r3, #18
 8001494:	3b01      	subs	r3, #1
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001498:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <HAL_InitTick+0xcc>)
 800149a:	4a20      	ldr	r2, [pc, #128]	@ (800151c <HAL_InitTick+0xd0>)
 800149c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800149e:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <HAL_InitTick+0xcc>)
 80014a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001518 <HAL_InitTick+0xcc>)
 80014a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <HAL_InitTick+0xcc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b2:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <HAL_InitTick+0xcc>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80014b8:	4817      	ldr	r0, [pc, #92]	@ (8001518 <HAL_InitTick+0xcc>)
 80014ba:	f002 feb3 	bl	8004224 <HAL_TIM_Base_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80014c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d11b      	bne.n	8001504 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014cc:	4812      	ldr	r0, [pc, #72]	@ (8001518 <HAL_InitTick+0xcc>)
 80014ce:	f002 ff0b 	bl	80042e8 <HAL_TIM_Base_Start_IT>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80014d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d111      	bne.n	8001504 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014e0:	2036      	movs	r0, #54	@ 0x36
 80014e2:	f001 fbab 	bl	8002c3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d808      	bhi.n	80014fe <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	2036      	movs	r0, #54	@ 0x36
 80014f2:	f001 fb89 	bl	8002c08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <HAL_InitTick+0xd4>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	e002      	b.n	8001504 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001504:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001508:	4618      	mov	r0, r3
 800150a:	3730      	adds	r7, #48	@ 0x30
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	431bde83 	.word	0x431bde83
 8001518:	20000360 	.word	0x20000360
 800151c:	40001000 	.word	0x40001000
 8001520:	20000004 	.word	0x20000004

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <NMI_Handler+0x4>

0800152c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <MemManage_Handler+0x4>

0800153c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <UsageFault_Handler+0x4>

0800154c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001588:	4802      	ldr	r0, [pc, #8]	@ (8001594 <USART2_IRQHandler+0x10>)
 800158a:	f004 f9f7 	bl	800597c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200001f4 	.word	0x200001f4

08001598 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800159c:	4802      	ldr	r0, [pc, #8]	@ (80015a8 <USART3_IRQHandler+0x10>)
 800159e:	f004 f9ed 	bl	800597c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000284 	.word	0x20000284

080015ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80015b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015b4:	f001 fdaa 	bl	800310c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015c0:	4802      	ldr	r0, [pc, #8]	@ (80015cc <TIM6_DAC_IRQHandler+0x10>)
 80015c2:	f002 ff60 	bl	8004486 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000360 	.word	0x20000360

080015d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return 1;
 80015d4:	2301      	movs	r3, #1
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_kill>:

int _kill(int pid, int sig)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ea:	f006 fab1 	bl	8007b50 <__errno>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2216      	movs	r2, #22
 80015f2:	601a      	str	r2, [r3, #0]
  return -1;
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_exit>:

void _exit (int status)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ffe7 	bl	80015e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001612:	bf00      	nop
 8001614:	e7fd      	b.n	8001612 <_exit+0x12>

08001616 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e00a      	b.n	800163e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001628:	f3af 8000 	nop.w
 800162c:	4601      	mov	r1, r0
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	60ba      	str	r2, [r7, #8]
 8001634:	b2ca      	uxtb	r2, r1
 8001636:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	dbf0      	blt.n	8001628 <_read+0x12>
  }

  return len;
 8001646:	687b      	ldr	r3, [r7, #4]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e009      	b.n	8001676 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	60ba      	str	r2, [r7, #8]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	3301      	adds	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	429a      	cmp	r2, r3
 800167c:	dbf1      	blt.n	8001662 <_write+0x12>
  }
  return len;
 800167e:	687b      	ldr	r3, [r7, #4]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_close>:

int _close(int file)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016b0:	605a      	str	r2, [r3, #4]
  return 0;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_isatty>:

int _isatty(int file)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016c8:	2301      	movs	r3, #1
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b085      	sub	sp, #20
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	@ (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	@ (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f006 fa16 	bl	8007b50 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	@ (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20020000 	.word	0x20020000
 8001750:	00000400 	.word	0x00000400
 8001754:	200003ac 	.word	0x200003ac
 8001758:	20000500 	.word	0x20000500

0800175c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <SystemInit+0x20>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001766:	4a05      	ldr	r2, [pc, #20]	@ (800177c <SystemInit+0x20>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001780:	480d      	ldr	r0, [pc, #52]	@ (80017b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001782:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001784:	480d      	ldr	r0, [pc, #52]	@ (80017bc <LoopForever+0x6>)
  ldr r1, =_edata
 8001786:	490e      	ldr	r1, [pc, #56]	@ (80017c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001788:	4a0e      	ldr	r2, [pc, #56]	@ (80017c4 <LoopForever+0xe>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a0b      	ldr	r2, [pc, #44]	@ (80017c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800179c:	4c0b      	ldr	r4, [pc, #44]	@ (80017cc <LoopForever+0x16>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017aa:	f7ff ffd7 	bl	800175c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ae:	f006 f9d5 	bl	8007b5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017b2:	f7fe ff0d 	bl	80005d0 <main>

080017b6 <LoopForever>:

LoopForever:
    b LoopForever
 80017b6:	e7fe      	b.n	80017b6 <LoopForever>
  ldr   r0, =_estack
 80017b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80017c4:	08008b48 	.word	0x08008b48
  ldr r2, =_sbss
 80017c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80017cc:	20000500 	.word	0x20000500

080017d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC1_2_IRQHandler>

080017d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f001 fa08 	bl	8002bf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e2:	200f      	movs	r0, #15
 80017e4:	f7ff fe32 	bl	800144c <HAL_InitTick>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	71fb      	strb	r3, [r7, #7]
 80017f2:	e001      	b.n	80017f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017f4:	f7ff fb7a 	bl	8000eec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017f8:	79fb      	ldrb	r3, [r7, #7]

}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <HAL_IncTick+0x1c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b05      	ldr	r3, [pc, #20]	@ (8001824 <HAL_IncTick+0x20>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4413      	add	r3, r2
 8001812:	4a03      	ldr	r2, [pc, #12]	@ (8001820 <HAL_IncTick+0x1c>)
 8001814:	6013      	str	r3, [r2, #0]
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	200003b0 	.word	0x200003b0
 8001824:	20000008 	.word	0x20000008

08001828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;
 800182c:	4b03      	ldr	r3, [pc, #12]	@ (800183c <HAL_GetTick+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	200003b0 	.word	0x200003b0

08001840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001848:	f7ff ffee 	bl	8001828 <HAL_GetTick>
 800184c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001858:	d004      	beq.n	8001864 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <HAL_Delay+0x40>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4413      	add	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001864:	bf00      	nop
 8001866:	f7ff ffdf 	bl	8001828 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	429a      	cmp	r2, r3
 8001874:	d8f7      	bhi.n	8001866 <HAL_Delay+0x26>
  {
  }
}
 8001876:	bf00      	nop
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000008 	.word	0x20000008

08001884 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	609a      	str	r2, [r3, #8]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	609a      	str	r2, [r3, #8]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3360      	adds	r3, #96	@ 0x60
 80018fe:	461a      	mov	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <LL_ADC_SetOffset+0x44>)
 800190e:	4013      	ands	r3, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	4313      	orrs	r3, r2
 800191c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001924:	bf00      	nop
 8001926:	371c      	adds	r7, #28
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	03fff000 	.word	0x03fff000

08001934 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3360      	adds	r3, #96	@ 0x60
 8001942:	461a      	mov	r2, r3
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3360      	adds	r3, #96	@ 0x60
 8001970:	461a      	mov	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	431a      	orrs	r2, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800198a:	bf00      	nop
 800198c:	371c      	adds	r7, #28
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001996:	b480      	push	{r7}
 8001998:	b087      	sub	sp, #28
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3360      	adds	r3, #96	@ 0x60
 80019a6:	461a      	mov	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80019c0:	bf00      	nop
 80019c2:	371c      	adds	r7, #28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3360      	adds	r3, #96	@ 0x60
 80019dc:	461a      	mov	r2, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80019f6:	bf00      	nop
 80019f8:	371c      	adds	r7, #28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	615a      	str	r2, [r3, #20]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3330      	adds	r3, #48	@ 0x30
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	4413      	add	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f003 031f 	and.w	r3, r3, #31
 8001a52:	211f      	movs	r1, #31
 8001a54:	fa01 f303 	lsl.w	r3, r1, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	0e9b      	lsrs	r3, r3, #26
 8001a60:	f003 011f 	and.w	r1, r3, #31
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f003 031f 	and.w	r3, r3, #31
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3314      	adds	r3, #20
 8001a90:	461a      	mov	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	0e5b      	lsrs	r3, r3, #25
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	4413      	add	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	0d1b      	lsrs	r3, r3, #20
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	2107      	movs	r1, #7
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	401a      	ands	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	0d1b      	lsrs	r3, r3, #20
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001aca:	bf00      	nop
 8001acc:	371c      	adds	r7, #28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8001b24 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d10a      	bne.n	8001b02 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af8:	431a      	orrs	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001b00:	e00a      	b.n	8001b18 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	401a      	ands	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	407f0000 	.word	0x407f0000

08001b28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6093      	str	r3, [r2, #8]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b60:	d101      	bne.n	8001b66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bb0:	d101      	bne.n	8001bb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <LL_ADC_IsEnabled+0x18>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <LL_ADC_IsEnabled+0x1a>
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d101      	bne.n	8001c02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d101      	bne.n	8001c28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b089      	sub	sp, #36	@ 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e1af      	b.n	8001fb2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d109      	bne.n	8001c74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff f967 	bl	8000f34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff67 	bl	8001b4c <LL_ADC_IsDeepPowerDownEnabled>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d004      	beq.n	8001c8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff4d 	bl	8001b28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ff82 	bl	8001b9c <LL_ADC_IsInternalRegulatorEnabled>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d115      	bne.n	8001cca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff ff66 	bl	8001b74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ca8:	4b9f      	ldr	r3, [pc, #636]	@ (8001f28 <HAL_ADC_Init+0x2f0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	099b      	lsrs	r3, r3, #6
 8001cae:	4a9f      	ldr	r2, [pc, #636]	@ (8001f2c <HAL_ADC_Init+0x2f4>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	099b      	lsrs	r3, r3, #6
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cbc:	e002      	b.n	8001cc4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f9      	bne.n	8001cbe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ff64 	bl	8001b9c <LL_ADC_IsInternalRegulatorEnabled>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10d      	bne.n	8001cf6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cde:	f043 0210 	orr.w	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff75 	bl	8001bea <LL_ADC_REG_IsConversionOngoing>
 8001d00:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 8148 	bne.w	8001fa0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 8144 	bne.w	8001fa0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d20:	f043 0202 	orr.w	r2, r3, #2
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff49 	bl	8001bc4 <LL_ADC_IsEnabled>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d141      	bne.n	8001dbc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d40:	d004      	beq.n	8001d4c <HAL_ADC_Init+0x114>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a7a      	ldr	r2, [pc, #488]	@ (8001f30 <HAL_ADC_Init+0x2f8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d10f      	bne.n	8001d6c <HAL_ADC_Init+0x134>
 8001d4c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001d50:	f7ff ff38 	bl	8001bc4 <LL_ADC_IsEnabled>
 8001d54:	4604      	mov	r4, r0
 8001d56:	4876      	ldr	r0, [pc, #472]	@ (8001f30 <HAL_ADC_Init+0x2f8>)
 8001d58:	f7ff ff34 	bl	8001bc4 <LL_ADC_IsEnabled>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4323      	orrs	r3, r4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	e012      	b.n	8001d92 <HAL_ADC_Init+0x15a>
 8001d6c:	4871      	ldr	r0, [pc, #452]	@ (8001f34 <HAL_ADC_Init+0x2fc>)
 8001d6e:	f7ff ff29 	bl	8001bc4 <LL_ADC_IsEnabled>
 8001d72:	4604      	mov	r4, r0
 8001d74:	4870      	ldr	r0, [pc, #448]	@ (8001f38 <HAL_ADC_Init+0x300>)
 8001d76:	f7ff ff25 	bl	8001bc4 <LL_ADC_IsEnabled>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	431c      	orrs	r4, r3
 8001d7e:	486f      	ldr	r0, [pc, #444]	@ (8001f3c <HAL_ADC_Init+0x304>)
 8001d80:	f7ff ff20 	bl	8001bc4 <LL_ADC_IsEnabled>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4323      	orrs	r3, r4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2301      	moveq	r3, #1
 8001d8e:	2300      	movne	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d012      	beq.n	8001dbc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d9e:	d004      	beq.n	8001daa <HAL_ADC_Init+0x172>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a62      	ldr	r2, [pc, #392]	@ (8001f30 <HAL_ADC_Init+0x2f8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d101      	bne.n	8001dae <HAL_ADC_Init+0x176>
 8001daa:	4a65      	ldr	r2, [pc, #404]	@ (8001f40 <HAL_ADC_Init+0x308>)
 8001dac:	e000      	b.n	8001db0 <HAL_ADC_Init+0x178>
 8001dae:	4a65      	ldr	r2, [pc, #404]	@ (8001f44 <HAL_ADC_Init+0x30c>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4619      	mov	r1, r3
 8001db6:	4610      	mov	r0, r2
 8001db8:	f7ff fd64 	bl	8001884 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7f5b      	ldrb	r3, [r3, #29]
 8001dc0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dc6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001dcc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001dd2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dda:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d106      	bne.n	8001df8 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dee:	3b01      	subs	r3, #1
 8001df0:	045b      	lsls	r3, r3, #17
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e04:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	4b4b      	ldr	r3, [pc, #300]	@ (8001f48 <HAL_ADC_Init+0x310>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	69b9      	ldr	r1, [r7, #24]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fed1 	bl	8001bea <LL_ADC_REG_IsConversionOngoing>
 8001e48:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fede 	bl	8001c10 <LL_ADC_INJ_IsConversionOngoing>
 8001e54:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d17f      	bne.n	8001f5c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d17c      	bne.n	8001f5c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e66:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e6e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e7e:	f023 0302 	bic.w	r3, r3, #2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	69b9      	ldr	r1, [r7, #24]
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d017      	beq.n	8001ec4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001ea2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001eac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001eb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6911      	ldr	r1, [r2, #16]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001ec2:	e013      	b.n	8001eec <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001ed2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ee4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ee8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d12a      	bne.n	8001f4c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f0c:	4311      	orrs	r1, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f12:	4311      	orrs	r1, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0201 	orr.w	r2, r2, #1
 8001f24:	611a      	str	r2, [r3, #16]
 8001f26:	e019      	b.n	8001f5c <HAL_ADC_Init+0x324>
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	053e2d63 	.word	0x053e2d63
 8001f30:	50000100 	.word	0x50000100
 8001f34:	50000400 	.word	0x50000400
 8001f38:	50000500 	.word	0x50000500
 8001f3c:	50000600 	.word	0x50000600
 8001f40:	50000300 	.word	0x50000300
 8001f44:	50000700 	.word	0x50000700
 8001f48:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0201 	bic.w	r2, r2, #1
 8001f5a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d10c      	bne.n	8001f7e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f023 010f 	bic.w	r1, r3, #15
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	1e5a      	subs	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f7c:	e007      	b.n	8001f8e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 020f 	bic.w	r2, r2, #15
 8001f8c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f92:	f023 0303 	bic.w	r3, r3, #3
 8001f96:	f043 0201 	orr.w	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f9e:	e007      	b.n	8001fb0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa4:	f043 0210 	orr.w	r2, r3, #16
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3724      	adds	r7, #36	@ 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd90      	pop	{r4, r7, pc}
 8001fba:	bf00      	nop

08001fbc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0b6      	sub	sp, #216	@ 0xd8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d102      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x24>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	f000 bc13 	b.w	8002806 <HAL_ADC_ConfigChannel+0x84a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fdfc 	bl	8001bea <LL_ADC_REG_IsConversionOngoing>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f040 83f3 	bne.w	80027e0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6859      	ldr	r1, [r3, #4]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	f7ff fd0e 	bl	8001a28 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fdea 	bl	8001bea <LL_ADC_REG_IsConversionOngoing>
 8002016:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fdf6 	bl	8001c10 <LL_ADC_INJ_IsConversionOngoing>
 8002024:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002028:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800202c:	2b00      	cmp	r3, #0
 800202e:	f040 81d9 	bne.w	80023e4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002032:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002036:	2b00      	cmp	r3, #0
 8002038:	f040 81d4 	bne.w	80023e4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002044:	d10f      	bne.n	8002066 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2200      	movs	r2, #0
 8002050:	4619      	mov	r1, r3
 8002052:	f7ff fd15 	bl	8001a80 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fccf 	bl	8001a02 <LL_ADC_SetSamplingTimeCommonConfig>
 8002064:	e00e      	b.n	8002084 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6819      	ldr	r1, [r3, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	461a      	mov	r2, r3
 8002074:	f7ff fd04 	bl	8001a80 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fcbf 	bl	8001a02 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	08db      	lsrs	r3, r3, #3
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d022      	beq.n	80020ec <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6919      	ldr	r1, [r3, #16]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80020b6:	f7ff fc19 	bl	80018ec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6919      	ldr	r1, [r3, #16]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	461a      	mov	r2, r3
 80020c8:	f7ff fc65 	bl	8001996 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6919      	ldr	r1, [r3, #16]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	7f1b      	ldrb	r3, [r3, #28]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d102      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x126>
 80020dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020e0:	e000      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x128>
 80020e2:	2300      	movs	r3, #0
 80020e4:	461a      	mov	r2, r3
 80020e6:	f7ff fc71 	bl	80019cc <LL_ADC_SetOffsetSaturation>
 80020ea:	e17b      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fc1e 	bl	8001934 <LL_ADC_GetOffsetChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10a      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x15c>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fc13 	bl	8001934 <LL_ADC_GetOffsetChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	0e9b      	lsrs	r3, r3, #26
 8002112:	f003 021f 	and.w	r2, r3, #31
 8002116:	e01e      	b.n	8002156 <HAL_ADC_ConfigChannel+0x19a>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fc08 	bl	8001934 <LL_ADC_GetOffsetChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002136:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800213a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800213e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002146:	2320      	movs	r3, #32
 8002148:	e004      	b.n	8002154 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800214a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215e:	2b00      	cmp	r3, #0
 8002160:	d105      	bne.n	800216e <HAL_ADC_ConfigChannel+0x1b2>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	0e9b      	lsrs	r3, r3, #26
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	e018      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x1e4>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002186:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800218a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002192:	2320      	movs	r3, #32
 8002194:	e004      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d106      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2200      	movs	r2, #0
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fbd7 	bl	8001960 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2101      	movs	r1, #1
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fbbb 	bl	8001934 <LL_ADC_GetOffsetChannel>
 80021be:	4603      	mov	r3, r0
 80021c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10a      	bne.n	80021de <HAL_ADC_ConfigChannel+0x222>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2101      	movs	r1, #1
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff fbb0 	bl	8001934 <LL_ADC_GetOffsetChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	0e9b      	lsrs	r3, r3, #26
 80021d8:	f003 021f 	and.w	r2, r3, #31
 80021dc:	e01e      	b.n	800221c <HAL_ADC_ConfigChannel+0x260>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2101      	movs	r1, #1
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fba5 	bl	8001934 <LL_ADC_GetOffsetChannel>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80021fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002200:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002204:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800220c:	2320      	movs	r3, #32
 800220e:	e004      	b.n	800221a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002224:	2b00      	cmp	r3, #0
 8002226:	d105      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x278>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	e018      	b.n	8002266 <HAL_ADC_ConfigChannel+0x2aa>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002248:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800224c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002250:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002258:	2320      	movs	r3, #32
 800225a:	e004      	b.n	8002266 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800225c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002266:	429a      	cmp	r2, r3
 8002268:	d106      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	2101      	movs	r1, #1
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fb74 	bl	8001960 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2102      	movs	r1, #2
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fb58 	bl	8001934 <LL_ADC_GetOffsetChannel>
 8002284:	4603      	mov	r3, r0
 8002286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10a      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x2e8>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2102      	movs	r1, #2
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fb4d 	bl	8001934 <LL_ADC_GetOffsetChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	f003 021f 	and.w	r2, r3, #31
 80022a2:	e01e      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x326>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2102      	movs	r1, #2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fb42 	bl	8001934 <LL_ADC_GetOffsetChannel>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80022c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80022ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80022d2:	2320      	movs	r3, #32
 80022d4:	e004      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80022d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d105      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x33e>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	0e9b      	lsrs	r3, r3, #26
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	e016      	b.n	8002328 <HAL_ADC_ConfigChannel+0x36c>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800230c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800230e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002312:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800231a:	2320      	movs	r3, #32
 800231c:	e004      	b.n	8002328 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800231e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002328:	429a      	cmp	r2, r3
 800232a:	d106      	bne.n	800233a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	2102      	movs	r1, #2
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fb13 	bl	8001960 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2103      	movs	r1, #3
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff faf7 	bl	8001934 <LL_ADC_GetOffsetChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10a      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x3aa>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2103      	movs	r1, #3
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff faec 	bl	8001934 <LL_ADC_GetOffsetChannel>
 800235c:	4603      	mov	r3, r0
 800235e:	0e9b      	lsrs	r3, r3, #26
 8002360:	f003 021f 	and.w	r2, r3, #31
 8002364:	e017      	b.n	8002396 <HAL_ADC_ConfigChannel+0x3da>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2103      	movs	r1, #3
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fae1 	bl	8001934 <LL_ADC_GetOffsetChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800237e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002380:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002382:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002388:	2320      	movs	r3, #32
 800238a:	e003      	b.n	8002394 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800238c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d105      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x3f2>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	0e9b      	lsrs	r3, r3, #26
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	e011      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x416>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80023bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80023c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80023c6:	2320      	movs	r3, #32
 80023c8:	e003      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80023ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023cc:	fab3 f383 	clz	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d106      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2200      	movs	r2, #0
 80023dc:	2103      	movs	r1, #3
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fabe 	bl	8001960 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fbeb 	bl	8001bc4 <LL_ADC_IsEnabled>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 813d 	bne.w	8002670 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6819      	ldr	r1, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	461a      	mov	r2, r3
 8002404:	f7ff fb68 	bl	8001ad8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4aa2      	ldr	r2, [pc, #648]	@ (8002698 <HAL_ADC_ConfigChannel+0x6dc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	f040 812e 	bne.w	8002670 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10b      	bne.n	800243c <HAL_ADC_ConfigChannel+0x480>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0e9b      	lsrs	r3, r3, #26
 800242a:	3301      	adds	r3, #1
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	2b09      	cmp	r3, #9
 8002432:	bf94      	ite	ls
 8002434:	2301      	movls	r3, #1
 8002436:	2300      	movhi	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	e019      	b.n	8002470 <HAL_ADC_ConfigChannel+0x4b4>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800244a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800244c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800244e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e003      	b.n	8002460 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002458:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	3301      	adds	r3, #1
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	2b09      	cmp	r3, #9
 8002468:	bf94      	ite	ls
 800246a:	2301      	movls	r3, #1
 800246c:	2300      	movhi	r3, #0
 800246e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002470:	2b00      	cmp	r3, #0
 8002472:	d079      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x4d4>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e9b      	lsrs	r3, r3, #26
 8002486:	3301      	adds	r3, #1
 8002488:	069b      	lsls	r3, r3, #26
 800248a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800248e:	e015      	b.n	80024bc <HAL_ADC_ConfigChannel+0x500>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800249e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80024a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e003      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80024ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	069b      	lsls	r3, r3, #26
 80024b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x520>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0e9b      	lsrs	r3, r3, #26
 80024ce:	3301      	adds	r3, #1
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	2101      	movs	r1, #1
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	e017      	b.n	800250c <HAL_ADC_ConfigChannel+0x550>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80024ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80024ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80024f4:	2320      	movs	r3, #32
 80024f6:	e003      	b.n	8002500 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80024f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	3301      	adds	r3, #1
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	ea42 0103 	orr.w	r1, r2, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10a      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x576>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0e9b      	lsrs	r3, r3, #26
 8002522:	3301      	adds	r3, #1
 8002524:	f003 021f 	and.w	r2, r3, #31
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	051b      	lsls	r3, r3, #20
 8002530:	e018      	b.n	8002564 <HAL_ADC_ConfigChannel+0x5a8>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002542:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800254a:	2320      	movs	r3, #32
 800254c:	e003      	b.n	8002556 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800254e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	3301      	adds	r3, #1
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002564:	430b      	orrs	r3, r1
 8002566:	e07e      	b.n	8002666 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002570:	2b00      	cmp	r3, #0
 8002572:	d107      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x5c8>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0e9b      	lsrs	r3, r3, #26
 800257a:	3301      	adds	r3, #1
 800257c:	069b      	lsls	r3, r3, #26
 800257e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002582:	e015      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x5f4>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002594:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800259c:	2320      	movs	r3, #32
 800259e:	e003      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80025a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	3301      	adds	r3, #1
 80025aa:	069b      	lsls	r3, r3, #26
 80025ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x614>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	3301      	adds	r3, #1
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	2101      	movs	r1, #1
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	e017      	b.n	8002600 <HAL_ADC_ConfigChannel+0x644>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	61fb      	str	r3, [r7, #28]
  return result;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80025e8:	2320      	movs	r3, #32
 80025ea:	e003      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	ea42 0103 	orr.w	r1, r2, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10d      	bne.n	800262c <HAL_ADC_ConfigChannel+0x670>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0e9b      	lsrs	r3, r3, #26
 8002616:	3301      	adds	r3, #1
 8002618:	f003 021f 	and.w	r2, r3, #31
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	3b1e      	subs	r3, #30
 8002624:	051b      	lsls	r3, r3, #20
 8002626:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800262a:	e01b      	b.n	8002664 <HAL_ADC_ConfigChannel+0x6a8>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	613b      	str	r3, [r7, #16]
  return result;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	e003      	b.n	8002650 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f003 021f 	and.w	r2, r3, #31
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	3b1e      	subs	r3, #30
 800265e:	051b      	lsls	r3, r3, #20
 8002660:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002664:	430b      	orrs	r3, r1
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	6892      	ldr	r2, [r2, #8]
 800266a:	4619      	mov	r1, r3
 800266c:	f7ff fa08 	bl	8001a80 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_ADC_ConfigChannel+0x6e0>)
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80be 	beq.w	80027fa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002686:	d004      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x6d6>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a04      	ldr	r2, [pc, #16]	@ (80026a0 <HAL_ADC_ConfigChannel+0x6e4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10a      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x6ec>
 8002692:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <HAL_ADC_ConfigChannel+0x6e8>)
 8002694:	e009      	b.n	80026aa <HAL_ADC_ConfigChannel+0x6ee>
 8002696:	bf00      	nop
 8002698:	407f0000 	.word	0x407f0000
 800269c:	80080000 	.word	0x80080000
 80026a0:	50000100 	.word	0x50000100
 80026a4:	50000300 	.word	0x50000300
 80026a8:	4b59      	ldr	r3, [pc, #356]	@ (8002810 <HAL_ADC_ConfigChannel+0x854>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff f910 	bl	80018d0 <LL_ADC_GetCommonPathInternalCh>
 80026b0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a56      	ldr	r2, [pc, #344]	@ (8002814 <HAL_ADC_ConfigChannel+0x858>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d004      	beq.n	80026c8 <HAL_ADC_ConfigChannel+0x70c>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a55      	ldr	r2, [pc, #340]	@ (8002818 <HAL_ADC_ConfigChannel+0x85c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d13a      	bne.n	800273e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d134      	bne.n	800273e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026dc:	d005      	beq.n	80026ea <HAL_ADC_ConfigChannel+0x72e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a4e      	ldr	r2, [pc, #312]	@ (800281c <HAL_ADC_ConfigChannel+0x860>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	f040 8085 	bne.w	80027f4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026f2:	d004      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x742>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a49      	ldr	r2, [pc, #292]	@ (8002820 <HAL_ADC_ConfigChannel+0x864>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x746>
 80026fe:	4a49      	ldr	r2, [pc, #292]	@ (8002824 <HAL_ADC_ConfigChannel+0x868>)
 8002700:	e000      	b.n	8002704 <HAL_ADC_ConfigChannel+0x748>
 8002702:	4a43      	ldr	r2, [pc, #268]	@ (8002810 <HAL_ADC_ConfigChannel+0x854>)
 8002704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002708:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800270c:	4619      	mov	r1, r3
 800270e:	4610      	mov	r0, r2
 8002710:	f7ff f8cb 	bl	80018aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002714:	4b44      	ldr	r3, [pc, #272]	@ (8002828 <HAL_ADC_ConfigChannel+0x86c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	099b      	lsrs	r3, r3, #6
 800271a:	4a44      	ldr	r2, [pc, #272]	@ (800282c <HAL_ADC_ConfigChannel+0x870>)
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	099b      	lsrs	r3, r3, #6
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	4613      	mov	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800272e:	e002      	b.n	8002736 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3b01      	subs	r3, #1
 8002734:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f9      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800273c:	e05a      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a3b      	ldr	r2, [pc, #236]	@ (8002830 <HAL_ADC_ConfigChannel+0x874>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d125      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x7d8>
 8002748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800274c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d11f      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a31      	ldr	r2, [pc, #196]	@ (8002820 <HAL_ADC_ConfigChannel+0x864>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d104      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x7ac>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a34      	ldr	r2, [pc, #208]	@ (8002834 <HAL_ADC_ConfigChannel+0x878>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d047      	beq.n	80027f8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002770:	d004      	beq.n	800277c <HAL_ADC_ConfigChannel+0x7c0>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a2a      	ldr	r2, [pc, #168]	@ (8002820 <HAL_ADC_ConfigChannel+0x864>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x7c4>
 800277c:	4a29      	ldr	r2, [pc, #164]	@ (8002824 <HAL_ADC_ConfigChannel+0x868>)
 800277e:	e000      	b.n	8002782 <HAL_ADC_ConfigChannel+0x7c6>
 8002780:	4a23      	ldr	r2, [pc, #140]	@ (8002810 <HAL_ADC_ConfigChannel+0x854>)
 8002782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002786:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800278a:	4619      	mov	r1, r3
 800278c:	4610      	mov	r0, r2
 800278e:	f7ff f88c 	bl	80018aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002792:	e031      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a27      	ldr	r2, [pc, #156]	@ (8002838 <HAL_ADC_ConfigChannel+0x87c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d12d      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800279e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d127      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002820 <HAL_ADC_ConfigChannel+0x864>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d022      	beq.n	80027fa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027bc:	d004      	beq.n	80027c8 <HAL_ADC_ConfigChannel+0x80c>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a17      	ldr	r2, [pc, #92]	@ (8002820 <HAL_ADC_ConfigChannel+0x864>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x810>
 80027c8:	4a16      	ldr	r2, [pc, #88]	@ (8002824 <HAL_ADC_ConfigChannel+0x868>)
 80027ca:	e000      	b.n	80027ce <HAL_ADC_ConfigChannel+0x812>
 80027cc:	4a10      	ldr	r2, [pc, #64]	@ (8002810 <HAL_ADC_ConfigChannel+0x854>)
 80027ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027d6:	4619      	mov	r1, r3
 80027d8:	4610      	mov	r0, r2
 80027da:	f7ff f866 	bl	80018aa <LL_ADC_SetCommonPathInternalCh>
 80027de:	e00c      	b.n	80027fa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80027f2:	e002      	b.n	80027fa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027f4:	bf00      	nop
 80027f6:	e000      	b.n	80027fa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002802:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002806:	4618      	mov	r0, r3
 8002808:	37d8      	adds	r7, #216	@ 0xd8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	50000700 	.word	0x50000700
 8002814:	c3210000 	.word	0xc3210000
 8002818:	90c00010 	.word	0x90c00010
 800281c:	50000600 	.word	0x50000600
 8002820:	50000100 	.word	0x50000100
 8002824:	50000300 	.word	0x50000300
 8002828:	20000000 	.word	0x20000000
 800282c:	053e2d63 	.word	0x053e2d63
 8002830:	c7520000 	.word	0xc7520000
 8002834:	50000500 	.word	0x50000500
 8002838:	cb840000 	.word	0xcb840000

0800283c <LL_ADC_IsEnabled>:
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <LL_ADC_IsEnabled+0x18>
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <LL_ADC_IsEnabled+0x1a>
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <LL_ADC_REG_IsConversionOngoing>:
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b04      	cmp	r3, #4
 8002874:	d101      	bne.n	800287a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b0a1      	sub	sp, #132	@ 0x84
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e0e7      	b.n	8002a76 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80028ae:	2300      	movs	r3, #0
 80028b0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80028b2:	2300      	movs	r3, #0
 80028b4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028be:	d102      	bne.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	e009      	b.n	80028da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d102      	bne.n	80028d6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80028d0:	4b6d      	ldr	r3, [pc, #436]	@ (8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	e001      	b.n	80028da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10b      	bne.n	80028f8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e4:	f043 0220 	orr.w	r2, r3, #32
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0be      	b.n	8002a76 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ffb1 	bl	8002862 <LL_ADC_REG_IsConversionOngoing>
 8002900:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ffab 	bl	8002862 <LL_ADC_REG_IsConversionOngoing>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 80a0 	bne.w	8002a54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 809c 	bne.w	8002a54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002924:	d004      	beq.n	8002930 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a55      	ldr	r2, [pc, #340]	@ (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d101      	bne.n	8002934 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002930:	4b56      	ldr	r3, [pc, #344]	@ (8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002932:	e000      	b.n	8002936 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002934:	4b56      	ldr	r3, [pc, #344]	@ (8002a90 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002936:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d04b      	beq.n	80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002940:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002952:	035b      	lsls	r3, r3, #13
 8002954:	430b      	orrs	r3, r1
 8002956:	431a      	orrs	r2, r3
 8002958:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800295a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002964:	d004      	beq.n	8002970 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a45      	ldr	r2, [pc, #276]	@ (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d10f      	bne.n	8002990 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002970:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002974:	f7ff ff62 	bl	800283c <LL_ADC_IsEnabled>
 8002978:	4604      	mov	r4, r0
 800297a:	4841      	ldr	r0, [pc, #260]	@ (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800297c:	f7ff ff5e 	bl	800283c <LL_ADC_IsEnabled>
 8002980:	4603      	mov	r3, r0
 8002982:	4323      	orrs	r3, r4
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	e012      	b.n	80029b6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002990:	483c      	ldr	r0, [pc, #240]	@ (8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002992:	f7ff ff53 	bl	800283c <LL_ADC_IsEnabled>
 8002996:	4604      	mov	r4, r0
 8002998:	483b      	ldr	r0, [pc, #236]	@ (8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800299a:	f7ff ff4f 	bl	800283c <LL_ADC_IsEnabled>
 800299e:	4603      	mov	r3, r0
 80029a0:	431c      	orrs	r4, r3
 80029a2:	483c      	ldr	r0, [pc, #240]	@ (8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029a4:	f7ff ff4a 	bl	800283c <LL_ADC_IsEnabled>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4323      	orrs	r3, r4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d056      	beq.n	8002a68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80029c2:	f023 030f 	bic.w	r3, r3, #15
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	6811      	ldr	r1, [r2, #0]
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	6892      	ldr	r2, [r2, #8]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	431a      	orrs	r2, r3
 80029d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029d4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029d6:	e047      	b.n	8002a68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029ec:	d004      	beq.n	80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a23      	ldr	r2, [pc, #140]	@ (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d10f      	bne.n	8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80029f8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80029fc:	f7ff ff1e 	bl	800283c <LL_ADC_IsEnabled>
 8002a00:	4604      	mov	r4, r0
 8002a02:	481f      	ldr	r0, [pc, #124]	@ (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a04:	f7ff ff1a 	bl	800283c <LL_ADC_IsEnabled>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4323      	orrs	r3, r4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	e012      	b.n	8002a3e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002a18:	481a      	ldr	r0, [pc, #104]	@ (8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a1a:	f7ff ff0f 	bl	800283c <LL_ADC_IsEnabled>
 8002a1e:	4604      	mov	r4, r0
 8002a20:	4819      	ldr	r0, [pc, #100]	@ (8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a22:	f7ff ff0b 	bl	800283c <LL_ADC_IsEnabled>
 8002a26:	4603      	mov	r3, r0
 8002a28:	431c      	orrs	r4, r3
 8002a2a:	481a      	ldr	r0, [pc, #104]	@ (8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a2c:	f7ff ff06 	bl	800283c <LL_ADC_IsEnabled>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4323      	orrs	r3, r4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d012      	beq.n	8002a68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a4a:	f023 030f 	bic.w	r3, r3, #15
 8002a4e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a50:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a52:	e009      	b.n	8002a68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a58:	f043 0220 	orr.w	r2, r3, #32
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002a66:	e000      	b.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a72:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3784      	adds	r7, #132	@ 0x84
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd90      	pop	{r4, r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	50000100 	.word	0x50000100
 8002a84:	50000400 	.word	0x50000400
 8002a88:	50000500 	.word	0x50000500
 8002a8c:	50000300 	.word	0x50000300
 8002a90:	50000700 	.word	0x50000700
 8002a94:	50000600 	.word	0x50000600

08002a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aca:	4a04      	ldr	r2, [pc, #16]	@ (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	60d3      	str	r3, [r2, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae4:	4b04      	ldr	r3, [pc, #16]	@ (8002af8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	f003 0307 	and.w	r3, r3, #7
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	db0b      	blt.n	8002b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	f003 021f 	and.w	r2, r3, #31
 8002b14:	4907      	ldr	r1, [pc, #28]	@ (8002b34 <__NVIC_EnableIRQ+0x38>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000e100 	.word	0xe000e100

08002b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	6039      	str	r1, [r7, #0]
 8002b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	db0a      	blt.n	8002b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	490c      	ldr	r1, [pc, #48]	@ (8002b84 <__NVIC_SetPriority+0x4c>)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	0112      	lsls	r2, r2, #4
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b60:	e00a      	b.n	8002b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4908      	ldr	r1, [pc, #32]	@ (8002b88 <__NVIC_SetPriority+0x50>)
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	3b04      	subs	r3, #4
 8002b70:	0112      	lsls	r2, r2, #4
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	440b      	add	r3, r1
 8002b76:	761a      	strb	r2, [r3, #24]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000e100 	.word	0xe000e100
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	@ 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f1c3 0307 	rsb	r3, r3, #7
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	bf28      	it	cs
 8002baa:	2304      	movcs	r3, #4
 8002bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	2b06      	cmp	r3, #6
 8002bb4:	d902      	bls.n	8002bbc <NVIC_EncodePriority+0x30>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3b03      	subs	r3, #3
 8002bba:	e000      	b.n	8002bbe <NVIC_EncodePriority+0x32>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	401a      	ands	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	fa01 f303 	lsl.w	r3, r1, r3
 8002bde:	43d9      	mvns	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	4313      	orrs	r3, r2
         );
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3724      	adds	r7, #36	@ 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ff4c 	bl	8002a98 <__NVIC_SetPriorityGrouping>
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c16:	f7ff ff63 	bl	8002ae0 <__NVIC_GetPriorityGrouping>
 8002c1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	6978      	ldr	r0, [r7, #20]
 8002c22:	f7ff ffb3 	bl	8002b8c <NVIC_EncodePriority>
 8002c26:	4602      	mov	r2, r0
 8002c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ff82 	bl	8002b38 <__NVIC_SetPriority>
}
 8002c34:	bf00      	nop
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff ff56 	bl	8002afc <__NVIC_EnableIRQ>
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d005      	beq.n	8002c7c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2204      	movs	r2, #4
 8002c74:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
 8002c7a:	e037      	b.n	8002cec <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 020e 	bic.w	r2, r2, #14
 8002c8a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c9a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb0:	f003 021f 	and.w	r2, r3, #31
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	2101      	movs	r1, #1
 8002cba:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbe:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002cc8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00c      	beq.n	8002cec <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ce0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002cea:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d00d      	beq.n	8002d3e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2204      	movs	r2, #4
 8002d26:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	e047      	b.n	8002dce <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 020e 	bic.w	r2, r2, #14
 8002d4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d72:	f003 021f 	and.w	r2, r3, #31
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d80:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d8a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00c      	beq.n	8002dae <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002da2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002dac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
    }
  }
  return status;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002de6:	e15a      	b.n	800309e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2101      	movs	r1, #1
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	fa01 f303 	lsl.w	r3, r1, r3
 8002df4:	4013      	ands	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 814c 	beq.w	8003098 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d005      	beq.n	8002e18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d130      	bne.n	8002e7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	2203      	movs	r2, #3
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e4e:	2201      	movs	r2, #1
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	091b      	lsrs	r3, r3, #4
 8002e64:	f003 0201 	and.w	r2, r3, #1
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d017      	beq.n	8002eb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	2203      	movs	r2, #3
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d123      	bne.n	8002f0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	08da      	lsrs	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3208      	adds	r2, #8
 8002eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ece:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	220f      	movs	r2, #15
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	08da      	lsrs	r2, r3, #3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3208      	adds	r2, #8
 8002f04:	6939      	ldr	r1, [r7, #16]
 8002f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	2203      	movs	r2, #3
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0203 	and.w	r2, r3, #3
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80a6 	beq.w	8003098 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4c:	4b5b      	ldr	r3, [pc, #364]	@ (80030bc <HAL_GPIO_Init+0x2e4>)
 8002f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f50:	4a5a      	ldr	r2, [pc, #360]	@ (80030bc <HAL_GPIO_Init+0x2e4>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f58:	4b58      	ldr	r3, [pc, #352]	@ (80030bc <HAL_GPIO_Init+0x2e4>)
 8002f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f64:	4a56      	ldr	r2, [pc, #344]	@ (80030c0 <HAL_GPIO_Init+0x2e8>)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	220f      	movs	r2, #15
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f8e:	d01f      	beq.n	8002fd0 <HAL_GPIO_Init+0x1f8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a4c      	ldr	r2, [pc, #304]	@ (80030c4 <HAL_GPIO_Init+0x2ec>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d019      	beq.n	8002fcc <HAL_GPIO_Init+0x1f4>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a4b      	ldr	r2, [pc, #300]	@ (80030c8 <HAL_GPIO_Init+0x2f0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d013      	beq.n	8002fc8 <HAL_GPIO_Init+0x1f0>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a4a      	ldr	r2, [pc, #296]	@ (80030cc <HAL_GPIO_Init+0x2f4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_GPIO_Init+0x1ec>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a49      	ldr	r2, [pc, #292]	@ (80030d0 <HAL_GPIO_Init+0x2f8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d007      	beq.n	8002fc0 <HAL_GPIO_Init+0x1e8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a48      	ldr	r2, [pc, #288]	@ (80030d4 <HAL_GPIO_Init+0x2fc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d101      	bne.n	8002fbc <HAL_GPIO_Init+0x1e4>
 8002fb8:	2305      	movs	r3, #5
 8002fba:	e00a      	b.n	8002fd2 <HAL_GPIO_Init+0x1fa>
 8002fbc:	2306      	movs	r3, #6
 8002fbe:	e008      	b.n	8002fd2 <HAL_GPIO_Init+0x1fa>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	e006      	b.n	8002fd2 <HAL_GPIO_Init+0x1fa>
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e004      	b.n	8002fd2 <HAL_GPIO_Init+0x1fa>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e002      	b.n	8002fd2 <HAL_GPIO_Init+0x1fa>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <HAL_GPIO_Init+0x1fa>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	f002 0203 	and.w	r2, r2, #3
 8002fd8:	0092      	lsls	r2, r2, #2
 8002fda:	4093      	lsls	r3, r2
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fe2:	4937      	ldr	r1, [pc, #220]	@ (80030c0 <HAL_GPIO_Init+0x2e8>)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	089b      	lsrs	r3, r3, #2
 8002fe8:	3302      	adds	r3, #2
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ff0:	4b39      	ldr	r3, [pc, #228]	@ (80030d8 <HAL_GPIO_Init+0x300>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003014:	4a30      	ldr	r2, [pc, #192]	@ (80030d8 <HAL_GPIO_Init+0x300>)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800301a:	4b2f      	ldr	r3, [pc, #188]	@ (80030d8 <HAL_GPIO_Init+0x300>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	43db      	mvns	r3, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800303e:	4a26      	ldr	r2, [pc, #152]	@ (80030d8 <HAL_GPIO_Init+0x300>)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003044:	4b24      	ldr	r3, [pc, #144]	@ (80030d8 <HAL_GPIO_Init+0x300>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	43db      	mvns	r3, r3
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4013      	ands	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003068:	4a1b      	ldr	r2, [pc, #108]	@ (80030d8 <HAL_GPIO_Init+0x300>)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800306e:	4b1a      	ldr	r3, [pc, #104]	@ (80030d8 <HAL_GPIO_Init+0x300>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	43db      	mvns	r3, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4013      	ands	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003092:	4a11      	ldr	r2, [pc, #68]	@ (80030d8 <HAL_GPIO_Init+0x300>)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	3301      	adds	r3, #1
 800309c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f47f ae9d 	bne.w	8002de8 <HAL_GPIO_Init+0x10>
  }
}
 80030ae:	bf00      	nop
 80030b0:	bf00      	nop
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40010000 	.word	0x40010000
 80030c4:	48000400 	.word	0x48000400
 80030c8:	48000800 	.word	0x48000800
 80030cc:	48000c00 	.word	0x48000c00
 80030d0:	48001000 	.word	0x48001000
 80030d4:	48001400 	.word	0x48001400
 80030d8:	40010400 	.word	0x40010400

080030dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	807b      	strh	r3, [r7, #2]
 80030e8:	4613      	mov	r3, r2
 80030ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030ec:	787b      	ldrb	r3, [r7, #1]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030f2:	887a      	ldrh	r2, [r7, #2]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030f8:	e002      	b.n	8003100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030fa:	887a      	ldrh	r2, [r7, #2]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003116:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003122:	4a05      	ldr	r2, [pc, #20]	@ (8003138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 f806 	bl	800313c <HAL_GPIO_EXTI_Callback>
  }
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40010400 	.word	0x40010400

0800313c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d141      	bne.n	80031e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003162:	4b4b      	ldr	r3, [pc, #300]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316e:	d131      	bne.n	80031d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003170:	4b47      	ldr	r3, [pc, #284]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003176:	4a46      	ldr	r2, [pc, #280]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800317c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003180:	4b43      	ldr	r3, [pc, #268]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003188:	4a41      	ldr	r2, [pc, #260]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800318e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003190:	4b40      	ldr	r3, [pc, #256]	@ (8003294 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2232      	movs	r2, #50	@ 0x32
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	4a3f      	ldr	r2, [pc, #252]	@ (8003298 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	0c9b      	lsrs	r3, r3, #18
 80031a2:	3301      	adds	r3, #1
 80031a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031a6:	e002      	b.n	80031ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031ae:	4b38      	ldr	r3, [pc, #224]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ba:	d102      	bne.n	80031c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f2      	bne.n	80031a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031c2:	4b33      	ldr	r3, [pc, #204]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ce:	d158      	bne.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e057      	b.n	8003284 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031da:	4a2d      	ldr	r2, [pc, #180]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80031e4:	e04d      	b.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031ec:	d141      	bne.n	8003272 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ee:	4b28      	ldr	r3, [pc, #160]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fa:	d131      	bne.n	8003260 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031fc:	4b24      	ldr	r3, [pc, #144]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003202:	4a23      	ldr	r2, [pc, #140]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003208:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800320c:	4b20      	ldr	r3, [pc, #128]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003214:	4a1e      	ldr	r2, [pc, #120]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800321a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800321c:	4b1d      	ldr	r3, [pc, #116]	@ (8003294 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2232      	movs	r2, #50	@ 0x32
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	4a1c      	ldr	r2, [pc, #112]	@ (8003298 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	0c9b      	lsrs	r3, r3, #18
 800322e:	3301      	adds	r3, #1
 8003230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003232:	e002      	b.n	800323a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3b01      	subs	r3, #1
 8003238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800323a:	4b15      	ldr	r3, [pc, #84]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003246:	d102      	bne.n	800324e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f2      	bne.n	8003234 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800324e:	4b10      	ldr	r3, [pc, #64]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325a:	d112      	bne.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e011      	b.n	8003284 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003260:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003266:	4a0a      	ldr	r2, [pc, #40]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800326c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003270:	e007      	b.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003272:	4b07      	ldr	r3, [pc, #28]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800327a:	4a05      	ldr	r2, [pc, #20]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003280:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40007000 	.word	0x40007000
 8003294:	20000000 	.word	0x20000000
 8003298:	431bde83 	.word	0x431bde83

0800329c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80032a0:	4b05      	ldr	r3, [pc, #20]	@ (80032b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a04      	ldr	r2, [pc, #16]	@ (80032b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032aa:	6093      	str	r3, [r2, #8]
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40007000 	.word	0x40007000

080032bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e306      	b.n	80038dc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d075      	beq.n	80033c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032da:	4b97      	ldr	r3, [pc, #604]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e4:	4b94      	ldr	r3, [pc, #592]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b0c      	cmp	r3, #12
 80032f2:	d102      	bne.n	80032fa <HAL_RCC_OscConfig+0x3e>
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d002      	beq.n	8003300 <HAL_RCC_OscConfig+0x44>
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d10b      	bne.n	8003318 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	4b8d      	ldr	r3, [pc, #564]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d05b      	beq.n	80033c4 <HAL_RCC_OscConfig+0x108>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d157      	bne.n	80033c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e2e1      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003320:	d106      	bne.n	8003330 <HAL_RCC_OscConfig+0x74>
 8003322:	4b85      	ldr	r3, [pc, #532]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a84      	ldr	r2, [pc, #528]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e01d      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0x98>
 800333a:	4b7f      	ldr	r3, [pc, #508]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a7e      	ldr	r2, [pc, #504]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b7c      	ldr	r3, [pc, #496]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a7b      	ldr	r2, [pc, #492]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e00b      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003354:	4b78      	ldr	r3, [pc, #480]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a77      	ldr	r2, [pc, #476]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 800335a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b75      	ldr	r3, [pc, #468]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a74      	ldr	r2, [pc, #464]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800336a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe fa58 	bl	8001828 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800337c:	f7fe fa54 	bl	8001828 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	@ 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e2a6      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800338e:	4b6a      	ldr	r3, [pc, #424]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0xc0>
 800339a:	e014      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe fa44 	bl	8001828 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fe fa40 	bl	8001828 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	@ 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e292      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033b6:	4b60      	ldr	r3, [pc, #384]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0xe8>
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d075      	beq.n	80034be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d2:	4b59      	ldr	r3, [pc, #356]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033dc:	4b56      	ldr	r3, [pc, #344]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	d102      	bne.n	80033f2 <HAL_RCC_OscConfig+0x136>
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d002      	beq.n	80033f8 <HAL_RCC_OscConfig+0x13c>
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d11f      	bne.n	8003438 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_OscConfig+0x154>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e265      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b49      	ldr	r3, [pc, #292]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	4946      	ldr	r1, [pc, #280]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003424:	4b45      	ldr	r3, [pc, #276]	@ (800353c <HAL_RCC_OscConfig+0x280>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe f80f 	bl	800144c <HAL_InitTick>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d043      	beq.n	80034bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e251      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d023      	beq.n	8003488 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003440:	4b3d      	ldr	r3, [pc, #244]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a3c      	ldr	r2, [pc, #240]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800344a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fe f9ec 	bl	8001828 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003454:	f7fe f9e8 	bl	8001828 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e23a      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003466:	4b34      	ldr	r3, [pc, #208]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003472:	4b31      	ldr	r3, [pc, #196]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	061b      	lsls	r3, r3, #24
 8003480:	492d      	ldr	r1, [pc, #180]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003482:	4313      	orrs	r3, r2
 8003484:	604b      	str	r3, [r1, #4]
 8003486:	e01a      	b.n	80034be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003488:	4b2b      	ldr	r3, [pc, #172]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a2a      	ldr	r2, [pc, #168]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 800348e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fe f9c8 	bl	8001828 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800349c:	f7fe f9c4 	bl	8001828 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e216      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034ae:	4b22      	ldr	r3, [pc, #136]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x1e0>
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d041      	beq.n	800354e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d01c      	beq.n	800350c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d2:	4b19      	ldr	r3, [pc, #100]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80034d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d8:	4a17      	ldr	r2, [pc, #92]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e2:	f7fe f9a1 	bl	8001828 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ea:	f7fe f99d 	bl	8001828 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e1ef      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80034fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0ef      	beq.n	80034ea <HAL_RCC_OscConfig+0x22e>
 800350a:	e020      	b.n	800354e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800350c:	4b0a      	ldr	r3, [pc, #40]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 800350e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003512:	4a09      	ldr	r2, [pc, #36]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fe f984 	bl	8001828 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003522:	e00d      	b.n	8003540 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003524:	f7fe f980 	bl	8001828 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d906      	bls.n	8003540 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e1d2      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003540:	4b8c      	ldr	r3, [pc, #560]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1ea      	bne.n	8003524 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80a6 	beq.w	80036a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355c:	2300      	movs	r3, #0
 800355e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003560:	4b84      	ldr	r3, [pc, #528]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_OscConfig+0x2b4>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <HAL_RCC_OscConfig+0x2b6>
 8003570:	2300      	movs	r3, #0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00d      	beq.n	8003592 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003576:	4b7f      	ldr	r3, [pc, #508]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357a:	4a7e      	ldr	r2, [pc, #504]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003580:	6593      	str	r3, [r2, #88]	@ 0x58
 8003582:	4b7c      	ldr	r3, [pc, #496]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800358e:	2301      	movs	r3, #1
 8003590:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003592:	4b79      	ldr	r3, [pc, #484]	@ (8003778 <HAL_RCC_OscConfig+0x4bc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d118      	bne.n	80035d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800359e:	4b76      	ldr	r3, [pc, #472]	@ (8003778 <HAL_RCC_OscConfig+0x4bc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a75      	ldr	r2, [pc, #468]	@ (8003778 <HAL_RCC_OscConfig+0x4bc>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035aa:	f7fe f93d 	bl	8001828 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b2:	f7fe f939 	bl	8001828 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e18b      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003778 <HAL_RCC_OscConfig+0x4bc>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d108      	bne.n	80035ea <HAL_RCC_OscConfig+0x32e>
 80035d8:	4b66      	ldr	r3, [pc, #408]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035de:	4a65      	ldr	r2, [pc, #404]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035e8:	e024      	b.n	8003634 <HAL_RCC_OscConfig+0x378>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b05      	cmp	r3, #5
 80035f0:	d110      	bne.n	8003614 <HAL_RCC_OscConfig+0x358>
 80035f2:	4b60      	ldr	r3, [pc, #384]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f8:	4a5e      	ldr	r2, [pc, #376]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80035fa:	f043 0304 	orr.w	r3, r3, #4
 80035fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003602:	4b5c      	ldr	r3, [pc, #368]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003608:	4a5a      	ldr	r2, [pc, #360]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003612:	e00f      	b.n	8003634 <HAL_RCC_OscConfig+0x378>
 8003614:	4b57      	ldr	r3, [pc, #348]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361a:	4a56      	ldr	r2, [pc, #344]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003624:	4b53      	ldr	r3, [pc, #332]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	4a52      	ldr	r2, [pc, #328]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800362c:	f023 0304 	bic.w	r3, r3, #4
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d016      	beq.n	800366a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fe f8f4 	bl	8001828 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003642:	e00a      	b.n	800365a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7fe f8f0 	bl	8001828 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e140      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800365a:	4b46      	ldr	r3, [pc, #280]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ed      	beq.n	8003644 <HAL_RCC_OscConfig+0x388>
 8003668:	e015      	b.n	8003696 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366a:	f7fe f8dd 	bl	8001828 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fe f8d9 	bl	8001828 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e129      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003688:	4b3a      	ldr	r3, [pc, #232]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1ed      	bne.n	8003672 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003696:	7ffb      	ldrb	r3, [r7, #31]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d105      	bne.n	80036a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369c:	4b35      	ldr	r3, [pc, #212]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a0:	4a34      	ldr	r2, [pc, #208]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d03c      	beq.n	800372e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01c      	beq.n	80036f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fe f8ac 	bl	8001828 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036d4:	f7fe f8a8 	bl	8001828 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e0fa      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036e6:	4b23      	ldr	r3, [pc, #140]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ef      	beq.n	80036d4 <HAL_RCC_OscConfig+0x418>
 80036f4:	e01b      	b.n	800372e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003706:	f7fe f88f 	bl	8001828 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800370e:	f7fe f88b 	bl	8001828 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e0dd      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003720:	4b14      	ldr	r3, [pc, #80]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003722:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ef      	bne.n	800370e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 80d1 	beq.w	80038da <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003738:	4b0e      	ldr	r3, [pc, #56]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b0c      	cmp	r3, #12
 8003742:	f000 808b 	beq.w	800385c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d15e      	bne.n	800380c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374e:	4b09      	ldr	r3, [pc, #36]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a08      	ldr	r2, [pc, #32]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003754:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fe f865 	bl	8001828 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003760:	e00c      	b.n	800377c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003762:	f7fe f861 	bl	8001828 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d905      	bls.n	800377c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e0b3      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
 8003774:	40021000 	.word	0x40021000
 8003778:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800377c:	4b59      	ldr	r3, [pc, #356]	@ (80038e4 <HAL_RCC_OscConfig+0x628>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1ec      	bne.n	8003762 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003788:	4b56      	ldr	r3, [pc, #344]	@ (80038e4 <HAL_RCC_OscConfig+0x628>)
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	4b56      	ldr	r3, [pc, #344]	@ (80038e8 <HAL_RCC_OscConfig+0x62c>)
 800378e:	4013      	ands	r3, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6a11      	ldr	r1, [r2, #32]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003798:	3a01      	subs	r2, #1
 800379a:	0112      	lsls	r2, r2, #4
 800379c:	4311      	orrs	r1, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80037a2:	0212      	lsls	r2, r2, #8
 80037a4:	4311      	orrs	r1, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80037aa:	0852      	lsrs	r2, r2, #1
 80037ac:	3a01      	subs	r2, #1
 80037ae:	0552      	lsls	r2, r2, #21
 80037b0:	4311      	orrs	r1, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037b6:	0852      	lsrs	r2, r2, #1
 80037b8:	3a01      	subs	r2, #1
 80037ba:	0652      	lsls	r2, r2, #25
 80037bc:	4311      	orrs	r1, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80037c2:	06d2      	lsls	r2, r2, #27
 80037c4:	430a      	orrs	r2, r1
 80037c6:	4947      	ldr	r1, [pc, #284]	@ (80038e4 <HAL_RCC_OscConfig+0x628>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037cc:	4b45      	ldr	r3, [pc, #276]	@ (80038e4 <HAL_RCC_OscConfig+0x628>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a44      	ldr	r2, [pc, #272]	@ (80038e4 <HAL_RCC_OscConfig+0x628>)
 80037d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037d8:	4b42      	ldr	r3, [pc, #264]	@ (80038e4 <HAL_RCC_OscConfig+0x628>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a41      	ldr	r2, [pc, #260]	@ (80038e4 <HAL_RCC_OscConfig+0x628>)
 80037de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fe f820 	bl	8001828 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fe f81c 	bl	8001828 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e06e      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fe:	4b39      	ldr	r3, [pc, #228]	@ (80038e4 <HAL_RCC_OscConfig+0x628>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x530>
 800380a:	e066      	b.n	80038da <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380c:	4b35      	ldr	r3, [pc, #212]	@ (80038e4 <HAL_RCC_OscConfig+0x628>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a34      	ldr	r2, [pc, #208]	@ (80038e4 <HAL_RCC_OscConfig+0x628>)
 8003812:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003816:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003818:	4b32      	ldr	r3, [pc, #200]	@ (80038e4 <HAL_RCC_OscConfig+0x628>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	4a31      	ldr	r2, [pc, #196]	@ (80038e4 <HAL_RCC_OscConfig+0x628>)
 800381e:	f023 0303 	bic.w	r3, r3, #3
 8003822:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003824:	4b2f      	ldr	r3, [pc, #188]	@ (80038e4 <HAL_RCC_OscConfig+0x628>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4a2e      	ldr	r2, [pc, #184]	@ (80038e4 <HAL_RCC_OscConfig+0x628>)
 800382a:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800382e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003832:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fd fff8 	bl	8001828 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383c:	f7fd fff4 	bl	8001828 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e046      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800384e:	4b25      	ldr	r3, [pc, #148]	@ (80038e4 <HAL_RCC_OscConfig+0x628>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x580>
 800385a:	e03e      	b.n	80038da <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e039      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003868:	4b1e      	ldr	r3, [pc, #120]	@ (80038e4 <HAL_RCC_OscConfig+0x628>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0203 	and.w	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	429a      	cmp	r2, r3
 800387a:	d12c      	bne.n	80038d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	3b01      	subs	r3, #1
 8003888:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d123      	bne.n	80038d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d11b      	bne.n	80038d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d113      	bne.n	80038d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b8:	085b      	lsrs	r3, r3, #1
 80038ba:	3b01      	subs	r3, #1
 80038bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038cc:	085b      	lsrs	r3, r3, #1
 80038ce:	3b01      	subs	r3, #1
 80038d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d001      	beq.n	80038da <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000
 80038e8:	019f800c 	.word	0x019f800c

080038ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e11e      	b.n	8003b42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003904:	4b91      	ldr	r3, [pc, #580]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d910      	bls.n	8003934 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003912:	4b8e      	ldr	r3, [pc, #568]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 020f 	bic.w	r2, r3, #15
 800391a:	498c      	ldr	r1, [pc, #560]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003922:	4b8a      	ldr	r3, [pc, #552]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e106      	b.n	8003b42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d073      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d129      	bne.n	800399c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003948:	4b81      	ldr	r3, [pc, #516]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0f4      	b.n	8003b42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003958:	f000 f9d0 	bl	8003cfc <RCC_GetSysClockFreqFromPLLSource>
 800395c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4a7c      	ldr	r2, [pc, #496]	@ (8003b54 <HAL_RCC_ClockConfig+0x268>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d93f      	bls.n	80039e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003966:	4b7a      	ldr	r3, [pc, #488]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800397a:	2b00      	cmp	r3, #0
 800397c:	d033      	beq.n	80039e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003982:	2b00      	cmp	r3, #0
 8003984:	d12f      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003986:	4b72      	ldr	r3, [pc, #456]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800398e:	4a70      	ldr	r2, [pc, #448]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003994:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003996:	2380      	movs	r3, #128	@ 0x80
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	e024      	b.n	80039e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d107      	bne.n	80039b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d109      	bne.n	80039c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0c6      	b.n	8003b42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039b4:	4b66      	ldr	r3, [pc, #408]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0be      	b.n	8003b42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80039c4:	f000 f8ce 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 80039c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4a61      	ldr	r2, [pc, #388]	@ (8003b54 <HAL_RCC_ClockConfig+0x268>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d909      	bls.n	80039e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039da:	4a5d      	ldr	r2, [pc, #372]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 80039dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039e2:	2380      	movs	r3, #128	@ 0x80
 80039e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 0203 	bic.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4957      	ldr	r1, [pc, #348]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f8:	f7fd ff16 	bl	8001828 <HAL_GetTick>
 80039fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	e00a      	b.n	8003a16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a00:	f7fd ff12 	bl	8001828 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e095      	b.n	8003b42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	4b4e      	ldr	r3, [pc, #312]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 020c 	and.w	r2, r3, #12
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d1eb      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d023      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a40:	4b43      	ldr	r3, [pc, #268]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a42      	ldr	r2, [pc, #264]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003a46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d007      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a58:	4b3d      	ldr	r3, [pc, #244]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a60:	4a3b      	ldr	r2, [pc, #236]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003a62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a68:	4b39      	ldr	r3, [pc, #228]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4936      	ldr	r1, [pc, #216]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2b80      	cmp	r3, #128	@ 0x80
 8003a80:	d105      	bne.n	8003a8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a82:	4b33      	ldr	r3, [pc, #204]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	4a32      	ldr	r2, [pc, #200]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003a88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d21d      	bcs.n	8003ad8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f023 020f 	bic.w	r2, r3, #15
 8003aa4:	4929      	ldr	r1, [pc, #164]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003aac:	f7fd febc 	bl	8001828 <HAL_GetTick>
 8003ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab4:	f7fd feb8 	bl	8001828 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e03b      	b.n	8003b42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aca:	4b20      	ldr	r3, [pc, #128]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d1ed      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4917      	ldr	r1, [pc, #92]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d009      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b02:	4b13      	ldr	r3, [pc, #76]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	490f      	ldr	r1, [pc, #60]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b16:	f000 f825 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b50 <HAL_RCC_ClockConfig+0x264>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	490c      	ldr	r1, [pc, #48]	@ (8003b58 <HAL_RCC_ClockConfig+0x26c>)
 8003b28:	5ccb      	ldrb	r3, [r1, r3]
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b32:	4a0a      	ldr	r2, [pc, #40]	@ (8003b5c <HAL_RCC_ClockConfig+0x270>)
 8003b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b36:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <HAL_RCC_ClockConfig+0x274>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fd fc86 	bl	800144c <HAL_InitTick>
 8003b40:	4603      	mov	r3, r0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40022000 	.word	0x40022000
 8003b50:	40021000 	.word	0x40021000
 8003b54:	04c4b400 	.word	0x04c4b400
 8003b58:	08008a18 	.word	0x08008a18
 8003b5c:	20000000 	.word	0x20000000
 8003b60:	20000004 	.word	0x20000004

08003b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d102      	bne.n	8003b7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b76:	4b2a      	ldr	r3, [pc, #168]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	e047      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b7c:	4b27      	ldr	r3, [pc, #156]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 030c 	and.w	r3, r3, #12
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d102      	bne.n	8003b8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b88:	4b26      	ldr	r3, [pc, #152]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	e03e      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b8e:	4b23      	ldr	r3, [pc, #140]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b0c      	cmp	r3, #12
 8003b98:	d136      	bne.n	8003c08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b9a:	4b20      	ldr	r3, [pc, #128]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	091b      	lsrs	r3, r3, #4
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	3301      	adds	r3, #1
 8003bb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d10c      	bne.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc0:	4a16      	ldr	r2, [pc, #88]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc2:	68d2      	ldr	r2, [r2, #12]
 8003bc4:	0a12      	lsrs	r2, r2, #8
 8003bc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bca:	fb02 f303 	mul.w	r3, r2, r3
 8003bce:	617b      	str	r3, [r7, #20]
      break;
 8003bd0:	e00c      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bd2:	4a13      	ldr	r2, [pc, #76]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	4a10      	ldr	r2, [pc, #64]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bdc:	68d2      	ldr	r2, [r2, #12]
 8003bde:	0a12      	lsrs	r2, r2, #8
 8003be0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003be4:	fb02 f303 	mul.w	r3, r2, r3
 8003be8:	617b      	str	r3, [r7, #20]
      break;
 8003bea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bec:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	0e5b      	lsrs	r3, r3, #25
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	e001      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c0c:	693b      	ldr	r3, [r7, #16]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	00f42400 	.word	0x00f42400
 8003c24:	016e3600 	.word	0x016e3600

08003c28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c2c:	4b03      	ldr	r3, [pc, #12]	@ (8003c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20000000 	.word	0x20000000

08003c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c44:	f7ff fff0 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	4904      	ldr	r1, [pc, #16]	@ (8003c68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000
 8003c68:	08008a28 	.word	0x08008a28

08003c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c70:	f7ff ffda 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b06      	ldr	r3, [pc, #24]	@ (8003c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	0adb      	lsrs	r3, r3, #11
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4904      	ldr	r1, [pc, #16]	@ (8003c94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000
 8003c94:	08008a28 	.word	0x08008a28

08003c98 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	220f      	movs	r2, #15
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ca8:	4b12      	ldr	r3, [pc, #72]	@ (8003cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0203 	and.w	r2, r3, #3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003ccc:	4b09      	ldr	r3, [pc, #36]	@ (8003cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	08db      	lsrs	r3, r3, #3
 8003cd2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003cda:	4b07      	ldr	r3, [pc, #28]	@ (8003cf8 <HAL_RCC_GetClockConfig+0x60>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 020f 	and.w	r2, r3, #15
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	601a      	str	r2, [r3, #0]
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40022000 	.word	0x40022000

08003cfc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d02:	4b1e      	ldr	r3, [pc, #120]	@ (8003d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	3301      	adds	r3, #1
 8003d18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d10c      	bne.n	8003d3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d20:	4a17      	ldr	r2, [pc, #92]	@ (8003d80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d28:	4a14      	ldr	r2, [pc, #80]	@ (8003d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d2a:	68d2      	ldr	r2, [r2, #12]
 8003d2c:	0a12      	lsrs	r2, r2, #8
 8003d2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	617b      	str	r3, [r7, #20]
    break;
 8003d38:	e00c      	b.n	8003d54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d3a:	4a12      	ldr	r2, [pc, #72]	@ (8003d84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d42:	4a0e      	ldr	r2, [pc, #56]	@ (8003d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d44:	68d2      	ldr	r2, [r2, #12]
 8003d46:	0a12      	lsrs	r2, r2, #8
 8003d48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	617b      	str	r3, [r7, #20]
    break;
 8003d52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d54:	4b09      	ldr	r3, [pc, #36]	@ (8003d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	0e5b      	lsrs	r3, r3, #25
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d6e:	687b      	ldr	r3, [r7, #4]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	016e3600 	.word	0x016e3600
 8003d84:	00f42400 	.word	0x00f42400

08003d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d90:	2300      	movs	r3, #0
 8003d92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d94:	2300      	movs	r3, #0
 8003d96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8098 	beq.w	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da6:	2300      	movs	r3, #0
 8003da8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003daa:	4b43      	ldr	r3, [pc, #268]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10d      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db6:	4b40      	ldr	r3, [pc, #256]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dba:	4a3f      	ldr	r2, [pc, #252]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a39      	ldr	r2, [pc, #228]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ddc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dde:	f7fd fd23 	bl	8001828 <HAL_GetTick>
 8003de2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003de4:	e009      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de6:	f7fd fd1f 	bl	8001828 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d902      	bls.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	74fb      	strb	r3, [r7, #19]
        break;
 8003df8:	e005      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dfa:	4b30      	ldr	r3, [pc, #192]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0ef      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e06:	7cfb      	ldrb	r3, [r7, #19]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d159      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d01e      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d019      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e28:	4b23      	ldr	r3, [pc, #140]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e34:	4b20      	ldr	r3, [pc, #128]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e44:	4b1c      	ldr	r3, [pc, #112]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e54:	4a18      	ldr	r2, [pc, #96]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d016      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7fd fcdf 	bl	8001828 <HAL_GetTick>
 8003e6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6c:	e00b      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6e:	f7fd fcdb 	bl	8001828 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d902      	bls.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	74fb      	strb	r3, [r7, #19]
            break;
 8003e84:	e006      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e86:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ec      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e94:	7cfb      	ldrb	r3, [r7, #19]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10b      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e9a:	4b07      	ldr	r3, [pc, #28]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea8:	4903      	ldr	r1, [pc, #12]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eb2:	7cfb      	ldrb	r3, [r7, #19]
 8003eb4:	74bb      	strb	r3, [r7, #18]
 8003eb6:	e005      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec4:	7c7b      	ldrb	r3, [r7, #17]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d105      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eca:	4ba7      	ldr	r3, [pc, #668]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ece:	4aa6      	ldr	r2, [pc, #664]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ed4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ee2:	4ba1      	ldr	r3, [pc, #644]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee8:	f023 0203 	bic.w	r2, r3, #3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	499d      	ldr	r1, [pc, #628]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f04:	4b98      	ldr	r3, [pc, #608]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0a:	f023 020c 	bic.w	r2, r3, #12
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	4995      	ldr	r1, [pc, #596]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f26:	4b90      	ldr	r3, [pc, #576]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	498c      	ldr	r1, [pc, #560]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f48:	4b87      	ldr	r3, [pc, #540]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	4984      	ldr	r1, [pc, #528]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	497b      	ldr	r1, [pc, #492]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f8c:	4b76      	ldr	r3, [pc, #472]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	4973      	ldr	r1, [pc, #460]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fae:	4b6e      	ldr	r3, [pc, #440]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	496a      	ldr	r1, [pc, #424]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fd0:	4b65      	ldr	r3, [pc, #404]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	4962      	ldr	r1, [pc, #392]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	4959      	ldr	r1, [pc, #356]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004014:	4b54      	ldr	r3, [pc, #336]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004016:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800401a:	f023 0203 	bic.w	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004022:	4951      	ldr	r1, [pc, #324]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004036:	4b4c      	ldr	r3, [pc, #304]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004044:	4948      	ldr	r1, [pc, #288]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004054:	2b00      	cmp	r3, #0
 8004056:	d015      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004058:	4b43      	ldr	r3, [pc, #268]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004066:	4940      	ldr	r1, [pc, #256]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004076:	d105      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004078:	4b3b      	ldr	r3, [pc, #236]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4a3a      	ldr	r2, [pc, #232]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004082:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800408c:	2b00      	cmp	r3, #0
 800408e:	d015      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004090:	4b35      	ldr	r3, [pc, #212]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004096:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409e:	4932      	ldr	r1, [pc, #200]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040ae:	d105      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d015      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040c8:	4b27      	ldr	r3, [pc, #156]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d6:	4924      	ldr	r1, [pc, #144]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040e6:	d105      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d015      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004100:	4b19      	ldr	r3, [pc, #100]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004106:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410e:	4916      	ldr	r1, [pc, #88]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800411a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800411e:	d105      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004120:	4b11      	ldr	r3, [pc, #68]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	4a10      	ldr	r2, [pc, #64]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800412a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d019      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004138:	4b0b      	ldr	r3, [pc, #44]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	4908      	ldr	r1, [pc, #32]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004152:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004156:	d109      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004158:	4b03      	ldr	r3, [pc, #12]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4a02      	ldr	r2, [pc, #8]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004162:	60d3      	str	r3, [r2, #12]
 8004164:	e002      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d015      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004178:	4b29      	ldr	r3, [pc, #164]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004186:	4926      	ldr	r1, [pc, #152]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004196:	d105      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004198:	4b21      	ldr	r3, [pc, #132]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4a20      	ldr	r2, [pc, #128]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800419e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d015      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80041b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041be:	4918      	ldr	r1, [pc, #96]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ce:	d105      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041d0:	4b13      	ldr	r3, [pc, #76]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4a12      	ldr	r2, [pc, #72]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d015      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80041e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f6:	490a      	ldr	r1, [pc, #40]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004202:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004206:	d105      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004208:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4a04      	ldr	r2, [pc, #16]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800420e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004212:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004214:	7cbb      	ldrb	r3, [r7, #18]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40021000 	.word	0x40021000

08004224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e049      	b.n	80042ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f841 	bl	80042d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3304      	adds	r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f000 fbca 	bl	80049fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
	...

080042e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d001      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e054      	b.n	80043aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a26      	ldr	r2, [pc, #152]	@ (80043b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d022      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x80>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800432a:	d01d      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x80>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a22      	ldr	r2, [pc, #136]	@ (80043bc <HAL_TIM_Base_Start_IT+0xd4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d018      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x80>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a21      	ldr	r2, [pc, #132]	@ (80043c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d013      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x80>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1f      	ldr	r2, [pc, #124]	@ (80043c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00e      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x80>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1e      	ldr	r2, [pc, #120]	@ (80043c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d009      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x80>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1c      	ldr	r2, [pc, #112]	@ (80043cc <HAL_TIM_Base_Start_IT+0xe4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d004      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x80>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1b      	ldr	r2, [pc, #108]	@ (80043d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d115      	bne.n	8004394 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	4b19      	ldr	r3, [pc, #100]	@ (80043d4 <HAL_TIM_Base_Start_IT+0xec>)
 8004370:	4013      	ands	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b06      	cmp	r3, #6
 8004378:	d015      	beq.n	80043a6 <HAL_TIM_Base_Start_IT+0xbe>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004380:	d011      	beq.n	80043a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0201 	orr.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004392:	e008      	b.n	80043a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e000      	b.n	80043a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40012c00 	.word	0x40012c00
 80043bc:	40000400 	.word	0x40000400
 80043c0:	40000800 	.word	0x40000800
 80043c4:	40000c00 	.word	0x40000c00
 80043c8:	40013400 	.word	0x40013400
 80043cc:	40014000 	.word	0x40014000
 80043d0:	40015000 	.word	0x40015000
 80043d4:	00010007 	.word	0x00010007

080043d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e049      	b.n	800447e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fc fe92 	bl	8001128 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	4619      	mov	r1, r3
 8004416:	4610      	mov	r0, r2
 8004418:	f000 faf0 	bl	80049fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b02      	cmp	r3, #2
 800449a:	d122      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d11b      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f06f 0202 	mvn.w	r2, #2
 80044b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fa79 	bl	80049c0 <HAL_TIM_IC_CaptureCallback>
 80044ce:	e005      	b.n	80044dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fa6b 	bl	80049ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fa7c 	bl	80049d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d122      	bne.n	8004536 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d11b      	bne.n	8004536 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f06f 0204 	mvn.w	r2, #4
 8004506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fa4f 	bl	80049c0 <HAL_TIM_IC_CaptureCallback>
 8004522:	e005      	b.n	8004530 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fa41 	bl	80049ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa52 	bl	80049d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b08      	cmp	r3, #8
 8004542:	d122      	bne.n	800458a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b08      	cmp	r3, #8
 8004550:	d11b      	bne.n	800458a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f06f 0208 	mvn.w	r2, #8
 800455a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2204      	movs	r2, #4
 8004560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fa25 	bl	80049c0 <HAL_TIM_IC_CaptureCallback>
 8004576:	e005      	b.n	8004584 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fa17 	bl	80049ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa28 	bl	80049d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b10      	cmp	r3, #16
 8004596:	d122      	bne.n	80045de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d11b      	bne.n	80045de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f06f 0210 	mvn.w	r2, #16
 80045ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2208      	movs	r2, #8
 80045b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f9fb 	bl	80049c0 <HAL_TIM_IC_CaptureCallback>
 80045ca:	e005      	b.n	80045d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f9ed 	bl	80049ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f9fe 	bl	80049d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10e      	bne.n	800460a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d107      	bne.n	800460a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f06f 0201 	mvn.w	r2, #1
 8004602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7fc fc59 	bl	8000ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004614:	2b80      	cmp	r3, #128	@ 0x80
 8004616:	d10e      	bne.n	8004636 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004622:	2b80      	cmp	r3, #128	@ 0x80
 8004624:	d107      	bne.n	8004636 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800462e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f001 f82b 	bl	800568c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004644:	d10e      	bne.n	8004664 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004650:	2b80      	cmp	r3, #128	@ 0x80
 8004652:	d107      	bne.n	8004664 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800465c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f001 f81e 	bl	80056a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466e:	2b40      	cmp	r3, #64	@ 0x40
 8004670:	d10e      	bne.n	8004690 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467c:	2b40      	cmp	r3, #64	@ 0x40
 800467e:	d107      	bne.n	8004690 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f9ac 	bl	80049e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b20      	cmp	r3, #32
 800469c:	d10e      	bne.n	80046bc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d107      	bne.n	80046bc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0220 	mvn.w	r2, #32
 80046b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 ffde 	bl	8005678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046ca:	d10f      	bne.n	80046ec <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046da:	d107      	bne.n	80046ec <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 ffe4 	bl	80056b4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046fa:	d10f      	bne.n	800471c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004706:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800470a:	d107      	bne.n	800471c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 ffd6 	bl	80056c8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004726:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800472a:	d10f      	bne.n	800474c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004736:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800473a:	d107      	bne.n	800474c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 ffc8 	bl	80056dc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004756:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800475a:	d10f      	bne.n	800477c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004766:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800476a:	d107      	bne.n	800477c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 ffba 	bl	80056f0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800479e:	2302      	movs	r3, #2
 80047a0:	e0ff      	b.n	80049a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b14      	cmp	r3, #20
 80047ae:	f200 80f0 	bhi.w	8004992 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80047b2:	a201      	add	r2, pc, #4	@ (adr r2, 80047b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b8:	0800480d 	.word	0x0800480d
 80047bc:	08004993 	.word	0x08004993
 80047c0:	08004993 	.word	0x08004993
 80047c4:	08004993 	.word	0x08004993
 80047c8:	0800484d 	.word	0x0800484d
 80047cc:	08004993 	.word	0x08004993
 80047d0:	08004993 	.word	0x08004993
 80047d4:	08004993 	.word	0x08004993
 80047d8:	0800488f 	.word	0x0800488f
 80047dc:	08004993 	.word	0x08004993
 80047e0:	08004993 	.word	0x08004993
 80047e4:	08004993 	.word	0x08004993
 80047e8:	080048cf 	.word	0x080048cf
 80047ec:	08004993 	.word	0x08004993
 80047f0:	08004993 	.word	0x08004993
 80047f4:	08004993 	.word	0x08004993
 80047f8:	08004911 	.word	0x08004911
 80047fc:	08004993 	.word	0x08004993
 8004800:	08004993 	.word	0x08004993
 8004804:	08004993 	.word	0x08004993
 8004808:	08004951 	.word	0x08004951
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f99a 	bl	8004b4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699a      	ldr	r2, [r3, #24]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0208 	orr.w	r2, r2, #8
 8004826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0204 	bic.w	r2, r2, #4
 8004836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6999      	ldr	r1, [r3, #24]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	619a      	str	r2, [r3, #24]
      break;
 800484a:	e0a5      	b.n	8004998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fa14 	bl	8004c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6999      	ldr	r1, [r3, #24]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	021a      	lsls	r2, r3, #8
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	619a      	str	r2, [r3, #24]
      break;
 800488c:	e084      	b.n	8004998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fa87 	bl	8004da8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f042 0208 	orr.w	r2, r2, #8
 80048a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69da      	ldr	r2, [r3, #28]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0204 	bic.w	r2, r2, #4
 80048b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69d9      	ldr	r1, [r3, #28]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	61da      	str	r2, [r3, #28]
      break;
 80048cc:	e064      	b.n	8004998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 faf9 	bl	8004ecc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69da      	ldr	r2, [r3, #28]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69da      	ldr	r2, [r3, #28]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69d9      	ldr	r1, [r3, #28]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	021a      	lsls	r2, r3, #8
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	61da      	str	r2, [r3, #28]
      break;
 800490e:	e043      	b.n	8004998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fb6c 	bl	8004ff4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0208 	orr.w	r2, r2, #8
 800492a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0204 	bic.w	r2, r2, #4
 800493a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800494e:	e023      	b.n	8004998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fbb6 	bl	80050c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800496a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800497a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	021a      	lsls	r2, r3, #8
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004990:	e002      	b.n	8004998 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	75fb      	strb	r3, [r7, #23]
      break;
 8004996:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop

080049ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a46      	ldr	r2, [pc, #280]	@ (8004b28 <TIM_Base_SetConfig+0x12c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d017      	beq.n	8004a44 <TIM_Base_SetConfig+0x48>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a1a:	d013      	beq.n	8004a44 <TIM_Base_SetConfig+0x48>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a43      	ldr	r2, [pc, #268]	@ (8004b2c <TIM_Base_SetConfig+0x130>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00f      	beq.n	8004a44 <TIM_Base_SetConfig+0x48>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a42      	ldr	r2, [pc, #264]	@ (8004b30 <TIM_Base_SetConfig+0x134>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00b      	beq.n	8004a44 <TIM_Base_SetConfig+0x48>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a41      	ldr	r2, [pc, #260]	@ (8004b34 <TIM_Base_SetConfig+0x138>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d007      	beq.n	8004a44 <TIM_Base_SetConfig+0x48>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a40      	ldr	r2, [pc, #256]	@ (8004b38 <TIM_Base_SetConfig+0x13c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d003      	beq.n	8004a44 <TIM_Base_SetConfig+0x48>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a3f      	ldr	r2, [pc, #252]	@ (8004b3c <TIM_Base_SetConfig+0x140>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d108      	bne.n	8004a56 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a33      	ldr	r2, [pc, #204]	@ (8004b28 <TIM_Base_SetConfig+0x12c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d023      	beq.n	8004aa6 <TIM_Base_SetConfig+0xaa>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a64:	d01f      	beq.n	8004aa6 <TIM_Base_SetConfig+0xaa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a30      	ldr	r2, [pc, #192]	@ (8004b2c <TIM_Base_SetConfig+0x130>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d01b      	beq.n	8004aa6 <TIM_Base_SetConfig+0xaa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a2f      	ldr	r2, [pc, #188]	@ (8004b30 <TIM_Base_SetConfig+0x134>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d017      	beq.n	8004aa6 <TIM_Base_SetConfig+0xaa>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a2e      	ldr	r2, [pc, #184]	@ (8004b34 <TIM_Base_SetConfig+0x138>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <TIM_Base_SetConfig+0xaa>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2d      	ldr	r2, [pc, #180]	@ (8004b38 <TIM_Base_SetConfig+0x13c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00f      	beq.n	8004aa6 <TIM_Base_SetConfig+0xaa>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a2d      	ldr	r2, [pc, #180]	@ (8004b40 <TIM_Base_SetConfig+0x144>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00b      	beq.n	8004aa6 <TIM_Base_SetConfig+0xaa>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a2c      	ldr	r2, [pc, #176]	@ (8004b44 <TIM_Base_SetConfig+0x148>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d007      	beq.n	8004aa6 <TIM_Base_SetConfig+0xaa>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a2b      	ldr	r2, [pc, #172]	@ (8004b48 <TIM_Base_SetConfig+0x14c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d003      	beq.n	8004aa6 <TIM_Base_SetConfig+0xaa>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a26      	ldr	r2, [pc, #152]	@ (8004b3c <TIM_Base_SetConfig+0x140>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d108      	bne.n	8004ab8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a12      	ldr	r2, [pc, #72]	@ (8004b28 <TIM_Base_SetConfig+0x12c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d013      	beq.n	8004b0c <TIM_Base_SetConfig+0x110>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a14      	ldr	r2, [pc, #80]	@ (8004b38 <TIM_Base_SetConfig+0x13c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00f      	beq.n	8004b0c <TIM_Base_SetConfig+0x110>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a14      	ldr	r2, [pc, #80]	@ (8004b40 <TIM_Base_SetConfig+0x144>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00b      	beq.n	8004b0c <TIM_Base_SetConfig+0x110>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a13      	ldr	r2, [pc, #76]	@ (8004b44 <TIM_Base_SetConfig+0x148>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <TIM_Base_SetConfig+0x110>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a12      	ldr	r2, [pc, #72]	@ (8004b48 <TIM_Base_SetConfig+0x14c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_Base_SetConfig+0x110>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a0d      	ldr	r2, [pc, #52]	@ (8004b3c <TIM_Base_SetConfig+0x140>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d103      	bne.n	8004b14 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	615a      	str	r2, [r3, #20]
}
 8004b1a:	bf00      	nop
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40000400 	.word	0x40000400
 8004b30:	40000800 	.word	0x40000800
 8004b34:	40000c00 	.word	0x40000c00
 8004b38:	40013400 	.word	0x40013400
 8004b3c:	40015000 	.word	0x40015000
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40014400 	.word	0x40014400
 8004b48:	40014800 	.word	0x40014800

08004b4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f023 0201 	bic.w	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0303 	bic.w	r3, r3, #3
 8004b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f023 0302 	bic.w	r3, r3, #2
 8004b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a30      	ldr	r2, [pc, #192]	@ (8004c68 <TIM_OC1_SetConfig+0x11c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d013      	beq.n	8004bd4 <TIM_OC1_SetConfig+0x88>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a2f      	ldr	r2, [pc, #188]	@ (8004c6c <TIM_OC1_SetConfig+0x120>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00f      	beq.n	8004bd4 <TIM_OC1_SetConfig+0x88>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a2e      	ldr	r2, [pc, #184]	@ (8004c70 <TIM_OC1_SetConfig+0x124>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00b      	beq.n	8004bd4 <TIM_OC1_SetConfig+0x88>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a2d      	ldr	r2, [pc, #180]	@ (8004c74 <TIM_OC1_SetConfig+0x128>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d007      	beq.n	8004bd4 <TIM_OC1_SetConfig+0x88>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a2c      	ldr	r2, [pc, #176]	@ (8004c78 <TIM_OC1_SetConfig+0x12c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d003      	beq.n	8004bd4 <TIM_OC1_SetConfig+0x88>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a2b      	ldr	r2, [pc, #172]	@ (8004c7c <TIM_OC1_SetConfig+0x130>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d10c      	bne.n	8004bee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f023 0308 	bic.w	r3, r3, #8
 8004bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f023 0304 	bic.w	r3, r3, #4
 8004bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c68 <TIM_OC1_SetConfig+0x11c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d013      	beq.n	8004c1e <TIM_OC1_SetConfig+0xd2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8004c6c <TIM_OC1_SetConfig+0x120>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00f      	beq.n	8004c1e <TIM_OC1_SetConfig+0xd2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a1b      	ldr	r2, [pc, #108]	@ (8004c70 <TIM_OC1_SetConfig+0x124>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00b      	beq.n	8004c1e <TIM_OC1_SetConfig+0xd2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a1a      	ldr	r2, [pc, #104]	@ (8004c74 <TIM_OC1_SetConfig+0x128>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d007      	beq.n	8004c1e <TIM_OC1_SetConfig+0xd2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a19      	ldr	r2, [pc, #100]	@ (8004c78 <TIM_OC1_SetConfig+0x12c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d003      	beq.n	8004c1e <TIM_OC1_SetConfig+0xd2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a18      	ldr	r2, [pc, #96]	@ (8004c7c <TIM_OC1_SetConfig+0x130>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d111      	bne.n	8004c42 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	40012c00 	.word	0x40012c00
 8004c6c:	40013400 	.word	0x40013400
 8004c70:	40014000 	.word	0x40014000
 8004c74:	40014400 	.word	0x40014400
 8004c78:	40014800 	.word	0x40014800
 8004c7c:	40015000 	.word	0x40015000

08004c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0210 	bic.w	r2, r3, #16
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	021b      	lsls	r3, r3, #8
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f023 0320 	bic.w	r3, r3, #32
 8004cce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a2c      	ldr	r2, [pc, #176]	@ (8004d90 <TIM_OC2_SetConfig+0x110>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d007      	beq.n	8004cf4 <TIM_OC2_SetConfig+0x74>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8004d94 <TIM_OC2_SetConfig+0x114>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d003      	beq.n	8004cf4 <TIM_OC2_SetConfig+0x74>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a2a      	ldr	r2, [pc, #168]	@ (8004d98 <TIM_OC2_SetConfig+0x118>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d10d      	bne.n	8004d10 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a1f      	ldr	r2, [pc, #124]	@ (8004d90 <TIM_OC2_SetConfig+0x110>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d013      	beq.n	8004d40 <TIM_OC2_SetConfig+0xc0>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d94 <TIM_OC2_SetConfig+0x114>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00f      	beq.n	8004d40 <TIM_OC2_SetConfig+0xc0>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a1e      	ldr	r2, [pc, #120]	@ (8004d9c <TIM_OC2_SetConfig+0x11c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00b      	beq.n	8004d40 <TIM_OC2_SetConfig+0xc0>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004da0 <TIM_OC2_SetConfig+0x120>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d007      	beq.n	8004d40 <TIM_OC2_SetConfig+0xc0>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a1c      	ldr	r2, [pc, #112]	@ (8004da4 <TIM_OC2_SetConfig+0x124>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <TIM_OC2_SetConfig+0xc0>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a17      	ldr	r2, [pc, #92]	@ (8004d98 <TIM_OC2_SetConfig+0x118>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d113      	bne.n	8004d68 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	621a      	str	r2, [r3, #32]
}
 8004d82:	bf00      	nop
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40012c00 	.word	0x40012c00
 8004d94:	40013400 	.word	0x40013400
 8004d98:	40015000 	.word	0x40015000
 8004d9c:	40014000 	.word	0x40014000
 8004da0:	40014400 	.word	0x40014400
 8004da4:	40014800 	.word	0x40014800

08004da8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a2b      	ldr	r2, [pc, #172]	@ (8004eb4 <TIM_OC3_SetConfig+0x10c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d007      	beq.n	8004e1a <TIM_OC3_SetConfig+0x72>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8004eb8 <TIM_OC3_SetConfig+0x110>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d003      	beq.n	8004e1a <TIM_OC3_SetConfig+0x72>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a29      	ldr	r2, [pc, #164]	@ (8004ebc <TIM_OC3_SetConfig+0x114>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d10d      	bne.n	8004e36 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	021b      	lsls	r3, r3, #8
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb4 <TIM_OC3_SetConfig+0x10c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <TIM_OC3_SetConfig+0xbe>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb8 <TIM_OC3_SetConfig+0x110>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00f      	beq.n	8004e66 <TIM_OC3_SetConfig+0xbe>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec0 <TIM_OC3_SetConfig+0x118>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00b      	beq.n	8004e66 <TIM_OC3_SetConfig+0xbe>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec4 <TIM_OC3_SetConfig+0x11c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d007      	beq.n	8004e66 <TIM_OC3_SetConfig+0xbe>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec8 <TIM_OC3_SetConfig+0x120>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_OC3_SetConfig+0xbe>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a16      	ldr	r2, [pc, #88]	@ (8004ebc <TIM_OC3_SetConfig+0x114>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d113      	bne.n	8004e8e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	40013400 	.word	0x40013400
 8004ebc:	40015000 	.word	0x40015000
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40014400 	.word	0x40014400
 8004ec8:	40014800 	.word	0x40014800

08004ecc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004efa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	031b      	lsls	r3, r3, #12
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004fdc <TIM_OC4_SetConfig+0x110>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d007      	beq.n	8004f40 <TIM_OC4_SetConfig+0x74>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe0 <TIM_OC4_SetConfig+0x114>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_OC4_SetConfig+0x74>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe4 <TIM_OC4_SetConfig+0x118>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10d      	bne.n	8004f5c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	031b      	lsls	r3, r3, #12
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fdc <TIM_OC4_SetConfig+0x110>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d013      	beq.n	8004f8c <TIM_OC4_SetConfig+0xc0>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe0 <TIM_OC4_SetConfig+0x114>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00f      	beq.n	8004f8c <TIM_OC4_SetConfig+0xc0>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe8 <TIM_OC4_SetConfig+0x11c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00b      	beq.n	8004f8c <TIM_OC4_SetConfig+0xc0>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a1d      	ldr	r2, [pc, #116]	@ (8004fec <TIM_OC4_SetConfig+0x120>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d007      	beq.n	8004f8c <TIM_OC4_SetConfig+0xc0>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff0 <TIM_OC4_SetConfig+0x124>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_OC4_SetConfig+0xc0>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a17      	ldr	r2, [pc, #92]	@ (8004fe4 <TIM_OC4_SetConfig+0x118>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d113      	bne.n	8004fb4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f92:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f9a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	019b      	lsls	r3, r3, #6
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	019b      	lsls	r3, r3, #6
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40012c00 	.word	0x40012c00
 8004fe0:	40013400 	.word	0x40013400
 8004fe4:	40015000 	.word	0x40015000
 8004fe8:	40014000 	.word	0x40014000
 8004fec:	40014400 	.word	0x40014400
 8004ff0:	40014800 	.word	0x40014800

08004ff4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005038:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	041b      	lsls	r3, r3, #16
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a19      	ldr	r2, [pc, #100]	@ (80050b0 <TIM_OC5_SetConfig+0xbc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d013      	beq.n	8005076 <TIM_OC5_SetConfig+0x82>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a18      	ldr	r2, [pc, #96]	@ (80050b4 <TIM_OC5_SetConfig+0xc0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00f      	beq.n	8005076 <TIM_OC5_SetConfig+0x82>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a17      	ldr	r2, [pc, #92]	@ (80050b8 <TIM_OC5_SetConfig+0xc4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00b      	beq.n	8005076 <TIM_OC5_SetConfig+0x82>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a16      	ldr	r2, [pc, #88]	@ (80050bc <TIM_OC5_SetConfig+0xc8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d007      	beq.n	8005076 <TIM_OC5_SetConfig+0x82>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a15      	ldr	r2, [pc, #84]	@ (80050c0 <TIM_OC5_SetConfig+0xcc>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d003      	beq.n	8005076 <TIM_OC5_SetConfig+0x82>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a14      	ldr	r2, [pc, #80]	@ (80050c4 <TIM_OC5_SetConfig+0xd0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d109      	bne.n	800508a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800507c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	021b      	lsls	r3, r3, #8
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	4313      	orrs	r3, r2
 8005088:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	621a      	str	r2, [r3, #32]
}
 80050a4:	bf00      	nop
 80050a6:	371c      	adds	r7, #28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	40012c00 	.word	0x40012c00
 80050b4:	40013400 	.word	0x40013400
 80050b8:	40014000 	.word	0x40014000
 80050bc:	40014400 	.word	0x40014400
 80050c0:	40014800 	.word	0x40014800
 80050c4:	40015000 	.word	0x40015000

080050c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800510e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	051b      	lsls	r3, r3, #20
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a1a      	ldr	r2, [pc, #104]	@ (8005188 <TIM_OC6_SetConfig+0xc0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d013      	beq.n	800514c <TIM_OC6_SetConfig+0x84>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a19      	ldr	r2, [pc, #100]	@ (800518c <TIM_OC6_SetConfig+0xc4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00f      	beq.n	800514c <TIM_OC6_SetConfig+0x84>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a18      	ldr	r2, [pc, #96]	@ (8005190 <TIM_OC6_SetConfig+0xc8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00b      	beq.n	800514c <TIM_OC6_SetConfig+0x84>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a17      	ldr	r2, [pc, #92]	@ (8005194 <TIM_OC6_SetConfig+0xcc>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d007      	beq.n	800514c <TIM_OC6_SetConfig+0x84>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a16      	ldr	r2, [pc, #88]	@ (8005198 <TIM_OC6_SetConfig+0xd0>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d003      	beq.n	800514c <TIM_OC6_SetConfig+0x84>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a15      	ldr	r2, [pc, #84]	@ (800519c <TIM_OC6_SetConfig+0xd4>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d109      	bne.n	8005160 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005152:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	029b      	lsls	r3, r3, #10
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	621a      	str	r2, [r3, #32]
}
 800517a:	bf00      	nop
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40012c00 	.word	0x40012c00
 800518c:	40013400 	.word	0x40013400
 8005190:	40014000 	.word	0x40014000
 8005194:	40014400 	.word	0x40014400
 8005198:	40014800 	.word	0x40014800
 800519c:	40015000 	.word	0x40015000

080051a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f023 0201 	bic.w	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4a28      	ldr	r2, [pc, #160]	@ (800526c <TIM_TI1_SetConfig+0xcc>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d01b      	beq.n	8005206 <TIM_TI1_SetConfig+0x66>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d4:	d017      	beq.n	8005206 <TIM_TI1_SetConfig+0x66>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4a25      	ldr	r2, [pc, #148]	@ (8005270 <TIM_TI1_SetConfig+0xd0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d013      	beq.n	8005206 <TIM_TI1_SetConfig+0x66>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4a24      	ldr	r2, [pc, #144]	@ (8005274 <TIM_TI1_SetConfig+0xd4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00f      	beq.n	8005206 <TIM_TI1_SetConfig+0x66>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4a23      	ldr	r2, [pc, #140]	@ (8005278 <TIM_TI1_SetConfig+0xd8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00b      	beq.n	8005206 <TIM_TI1_SetConfig+0x66>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4a22      	ldr	r2, [pc, #136]	@ (800527c <TIM_TI1_SetConfig+0xdc>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d007      	beq.n	8005206 <TIM_TI1_SetConfig+0x66>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4a21      	ldr	r2, [pc, #132]	@ (8005280 <TIM_TI1_SetConfig+0xe0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d003      	beq.n	8005206 <TIM_TI1_SetConfig+0x66>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4a20      	ldr	r2, [pc, #128]	@ (8005284 <TIM_TI1_SetConfig+0xe4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d101      	bne.n	800520a <TIM_TI1_SetConfig+0x6a>
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <TIM_TI1_SetConfig+0x6c>
 800520a:	2300      	movs	r3, #0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d008      	beq.n	8005222 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f023 0303 	bic.w	r3, r3, #3
 8005216:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	e003      	b.n	800522a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f043 0301 	orr.w	r3, r3, #1
 8005228:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005230:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	b2db      	uxtb	r3, r3
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f023 030a 	bic.w	r3, r3, #10
 8005244:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f003 030a 	and.w	r3, r3, #10
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40012c00 	.word	0x40012c00
 8005270:	40000400 	.word	0x40000400
 8005274:	40000800 	.word	0x40000800
 8005278:	40000c00 	.word	0x40000c00
 800527c:	40013400 	.word	0x40013400
 8005280:	40014000 	.word	0x40014000
 8005284:	40015000 	.word	0x40015000

08005288 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08a      	sub	sp, #40	@ 0x28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0a0      	b.n	80053de <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d106      	bne.n	80052b6 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7fb ff59 	bl	8001168 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3304      	adds	r3, #4
 80052c6:	4619      	mov	r1, r3
 80052c8:	4610      	mov	r0, r2
 80052ca:	f7ff fb97 	bl	80049fc <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6819      	ldr	r1, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2203      	movs	r2, #3
 80052dc:	f7ff ff60 	bl	80051a0 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 020c 	bic.w	r2, r2, #12
 80052ee:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6999      	ldr	r1, [r3, #24]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005310:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005320:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005324:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005334:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005344:	f023 0307 	bic.w	r3, r3, #7
 8005348:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0204 	orr.w	r2, r2, #4
 8005358:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800535e:	2300      	movs	r3, #0
 8005360:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005362:	2370      	movs	r3, #112	@ 0x70
 8005364:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005366:	2300      	movs	r3, #0
 8005368:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800536a:	2300      	movs	r3, #0
 800536c:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f107 020c 	add.w	r2, r7, #12
 8005380:	4611      	mov	r1, r2
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff fc7c 	bl	8004c80 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6812      	ldr	r2, [r2, #0]
 8005392:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800539a:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80053aa:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3728      	adds	r7, #40	@ 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e074      	b.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a34      	ldr	r2, [pc, #208]	@ (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d009      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a33      	ldr	r2, [pc, #204]	@ (80054fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d004      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a31      	ldr	r2, [pc, #196]	@ (8005500 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d108      	bne.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005444:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800545a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a21      	ldr	r2, [pc, #132]	@ (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d022      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005480:	d01d      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a1f      	ldr	r2, [pc, #124]	@ (8005504 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d018      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1d      	ldr	r2, [pc, #116]	@ (8005508 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a1c      	ldr	r2, [pc, #112]	@ (800550c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00e      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a15      	ldr	r2, [pc, #84]	@ (80054fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d009      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a18      	ldr	r2, [pc, #96]	@ (8005510 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a11      	ldr	r2, [pc, #68]	@ (8005500 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d10c      	bne.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40012c00 	.word	0x40012c00
 80054fc:	40013400 	.word	0x40013400
 8005500:	40015000 	.word	0x40015000
 8005504:	40000400 	.word	0x40000400
 8005508:	40000800 	.word	0x40000800
 800550c:	40000c00 	.word	0x40000c00
 8005510:	40014000 	.word	0x40014000

08005514 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800552c:	2302      	movs	r3, #2
 800552e:	e096      	b.n	800565e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4313      	orrs	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	041b      	lsls	r3, r3, #16
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2f      	ldr	r2, [pc, #188]	@ (800566c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d009      	beq.n	80055c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005670 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d004      	beq.n	80055c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005674 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d106      	bne.n	80055d6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a24      	ldr	r2, [pc, #144]	@ (800566c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d009      	beq.n	80055f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a22      	ldr	r2, [pc, #136]	@ (8005670 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d004      	beq.n	80055f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a21      	ldr	r2, [pc, #132]	@ (8005674 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d12b      	bne.n	800564c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fe:	051b      	lsls	r3, r3, #20
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a11      	ldr	r2, [pc, #68]	@ (800566c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d009      	beq.n	800563e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a10      	ldr	r2, [pc, #64]	@ (8005670 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d004      	beq.n	800563e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a0e      	ldr	r2, [pc, #56]	@ (8005674 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d106      	bne.n	800564c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40012c00 	.word	0x40012c00
 8005670:	40013400 	.word	0x40013400
 8005674:	40015000 	.word	0x40015000

08005678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e042      	b.n	800579c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7fb fde7 	bl	80012fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2224      	movs	r2, #36	@ 0x24
 8005732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0201 	bic.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fc50 	bl	8005fec <UART_SetConfig>
 800574c:	4603      	mov	r3, r0
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e022      	b.n	800579c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 ff40 	bl	80065e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 ffc7 	bl	8006728 <UART_CheckIdleState>
 800579a:	4603      	mov	r3, r0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08a      	sub	sp, #40	@ 0x28
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	4613      	mov	r3, r2
 80057b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	f040 8083 	bne.w	80058c6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <HAL_UART_Transmit+0x28>
 80057c6:	88fb      	ldrh	r3, [r7, #6]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e07b      	b.n	80058c8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <HAL_UART_Transmit+0x3a>
 80057da:	2302      	movs	r3, #2
 80057dc:	e074      	b.n	80058c8 <HAL_UART_Transmit+0x124>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2221      	movs	r2, #33	@ 0x21
 80057f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057f6:	f7fc f817 	bl	8001828 <HAL_GetTick>
 80057fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	88fa      	ldrh	r2, [r7, #6]
 8005800:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	88fa      	ldrh	r2, [r7, #6]
 8005808:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005814:	d108      	bne.n	8005828 <HAL_UART_Transmit+0x84>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d104      	bne.n	8005828 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	61bb      	str	r3, [r7, #24]
 8005826:	e003      	b.n	8005830 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800582c:	2300      	movs	r3, #0
 800582e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8005838:	e02c      	b.n	8005894 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2200      	movs	r2, #0
 8005842:	2180      	movs	r1, #128	@ 0x80
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 ffba 	bl	80067be <UART_WaitOnFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e039      	b.n	80058c8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10b      	bne.n	8005872 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005868:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	3302      	adds	r3, #2
 800586e:	61bb      	str	r3, [r7, #24]
 8005870:	e007      	b.n	8005882 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	781a      	ldrb	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	3301      	adds	r3, #1
 8005880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1cc      	bne.n	800583a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2200      	movs	r2, #0
 80058a8:	2140      	movs	r1, #64	@ 0x40
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 ff87 	bl	80067be <UART_WaitOnFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e006      	b.n	80058c8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e000      	b.n	80058c8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80058c6:	2302      	movs	r3, #2
  }
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08a      	sub	sp, #40	@ 0x28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	4613      	mov	r3, r2
 80058dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d142      	bne.n	800596e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <HAL_UART_Receive_IT+0x24>
 80058ee:	88fb      	ldrh	r3, [r7, #6]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e03b      	b.n	8005970 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_UART_Receive_IT+0x36>
 8005902:	2302      	movs	r3, #2
 8005904:	e034      	b.n	8005970 <HAL_UART_Receive_IT+0xa0>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a17      	ldr	r2, [pc, #92]	@ (8005978 <HAL_UART_Receive_IT+0xa8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01f      	beq.n	800595e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d018      	beq.n	800595e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	613b      	str	r3, [r7, #16]
   return(result);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005940:	627b      	str	r3, [r7, #36]	@ 0x24
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594a:	623b      	str	r3, [r7, #32]
 800594c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	69f9      	ldr	r1, [r7, #28]
 8005950:	6a3a      	ldr	r2, [r7, #32]
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	61bb      	str	r3, [r7, #24]
   return(result);
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e6      	bne.n	800592c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	461a      	mov	r2, r3
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 fff3 	bl	8006950 <UART_Start_Receive_IT>
 800596a:	4603      	mov	r3, r0
 800596c:	e000      	b.n	8005970 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800596e:	2302      	movs	r3, #2
  }
}
 8005970:	4618      	mov	r0, r3
 8005972:	3728      	adds	r7, #40	@ 0x28
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40008000 	.word	0x40008000

0800597c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b0ba      	sub	sp, #232	@ 0xe8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80059a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80059aa:	4013      	ands	r3, r2
 80059ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80059b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d11b      	bne.n	80059f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80059b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d015      	beq.n	80059f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80059c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059c8:	f003 0320 	and.w	r3, r3, #32
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d105      	bne.n	80059dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80059d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d009      	beq.n	80059f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 82d6 	beq.w	8005f92 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	4798      	blx	r3
      }
      return;
 80059ee:	e2d0      	b.n	8005f92 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80059f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 811f 	beq.w	8005c38 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80059fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80059fe:	4b8b      	ldr	r3, [pc, #556]	@ (8005c2c <HAL_UART_IRQHandler+0x2b0>)
 8005a00:	4013      	ands	r3, r2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005a0a:	4b89      	ldr	r3, [pc, #548]	@ (8005c30 <HAL_UART_IRQHandler+0x2b4>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 8112 	beq.w	8005c38 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d011      	beq.n	8005a44 <HAL_UART_IRQHandler+0xc8>
 8005a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00b      	beq.n	8005a44 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2201      	movs	r2, #1
 8005a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a3a:	f043 0201 	orr.w	r2, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d011      	beq.n	8005a74 <HAL_UART_IRQHandler+0xf8>
 8005a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00b      	beq.n	8005a74 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2202      	movs	r2, #2
 8005a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a6a:	f043 0204 	orr.w	r2, r3, #4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d011      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x128>
 8005a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00b      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2204      	movs	r2, #4
 8005a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a9a:	f043 0202 	orr.w	r2, r3, #2
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d017      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d105      	bne.n	8005ac8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005abc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005ac0:	4b5a      	ldr	r3, [pc, #360]	@ (8005c2c <HAL_UART_IRQHandler+0x2b0>)
 8005ac2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00b      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2208      	movs	r2, #8
 8005ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ad6:	f043 0208 	orr.w	r2, r3, #8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d012      	beq.n	8005b12 <HAL_UART_IRQHandler+0x196>
 8005aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005af0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00c      	beq.n	8005b12 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b08:	f043 0220 	orr.w	r2, r3, #32
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 823c 	beq.w	8005f96 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d013      	beq.n	8005b52 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d105      	bne.n	8005b42 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d007      	beq.n	8005b52 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b66:	2b40      	cmp	r3, #64	@ 0x40
 8005b68:	d005      	beq.n	8005b76 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d04f      	beq.n	8005c16 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 f814 	bl	8006ba4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b86:	2b40      	cmp	r3, #64	@ 0x40
 8005b88:	d141      	bne.n	8005c0e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3308      	adds	r3, #8
 8005b90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005bb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005bba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005bc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005bce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1d9      	bne.n	8005b8a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d013      	beq.n	8005c06 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005be2:	4a14      	ldr	r2, [pc, #80]	@ (8005c34 <HAL_UART_IRQHandler+0x2b8>)
 8005be4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fd f88d 	bl	8002d0a <HAL_DMA_Abort_IT>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d017      	beq.n	8005c26 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8005c00:	4610      	mov	r0, r2
 8005c02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c04:	e00f      	b.n	8005c26 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f9da 	bl	8005fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0c:	e00b      	b.n	8005c26 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f9d6 	bl	8005fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c14:	e007      	b.n	8005c26 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f9d2 	bl	8005fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8005c24:	e1b7      	b.n	8005f96 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c26:	bf00      	nop
    return;
 8005c28:	e1b5      	b.n	8005f96 <HAL_UART_IRQHandler+0x61a>
 8005c2a:	bf00      	nop
 8005c2c:	10000001 	.word	0x10000001
 8005c30:	04000120 	.word	0x04000120
 8005c34:	08006c71 	.word	0x08006c71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	f040 814a 	bne.w	8005ed6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c46:	f003 0310 	and.w	r3, r3, #16
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 8143 	beq.w	8005ed6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 813c 	beq.w	8005ed6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2210      	movs	r2, #16
 8005c64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c70:	2b40      	cmp	r3, #64	@ 0x40
 8005c72:	f040 80b5 	bne.w	8005de0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 8187 	beq.w	8005f9a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c96:	429a      	cmp	r2, r3
 8005c98:	f080 817f 	bcs.w	8005f9a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ca2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f040 8086 	bne.w	8005dc4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ce2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ce6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005cee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1da      	bne.n	8005cb8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3308      	adds	r3, #8
 8005d08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3308      	adds	r3, #8
 8005d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e1      	bne.n	8005d02 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3308      	adds	r3, #8
 8005d44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e3      	bne.n	8005d3e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d94:	f023 0310 	bic.w	r3, r3, #16
 8005d98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005da6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005da8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005db4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e4      	bne.n	8005d84 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fc ff4a 	bl	8002c58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f8fb 	bl	8005fd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dde:	e0dc      	b.n	8005f9a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 80ce 	beq.w	8005f9e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005e02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 80c9 	beq.w	8005f9e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e14:	e853 3f00 	ldrex	r3, [r3]
 8005e18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e30:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e4      	bne.n	8005e0c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3308      	adds	r3, #8
 8005e48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	623b      	str	r3, [r7, #32]
   return(result);
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e58:	f023 0301 	bic.w	r3, r3, #1
 8005e5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3308      	adds	r3, #8
 8005e66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e1      	bne.n	8005e42 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2220      	movs	r2, #32
 8005e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0310 	bic.w	r3, r3, #16
 8005ea6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005eb4:	61fb      	str	r3, [r7, #28]
 8005eb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	69b9      	ldr	r1, [r7, #24]
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e4      	bne.n	8005e92 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ec8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f880 	bl	8005fd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ed4:	e063      	b.n	8005f9e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00e      	beq.n	8005f00 <HAL_UART_IRQHandler+0x584>
 8005ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d008      	beq.n	8005f00 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005ef6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f001 fb57 	bl	80075ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005efe:	e051      	b.n	8005fa4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d014      	beq.n	8005f36 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d105      	bne.n	8005f24 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d008      	beq.n	8005f36 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d03a      	beq.n	8005fa2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
    }
    return;
 8005f34:	e035      	b.n	8005fa2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d009      	beq.n	8005f56 <HAL_UART_IRQHandler+0x5da>
 8005f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fea4 	bl	8006c9c <UART_EndTransmit_IT>
    return;
 8005f54:	e026      	b.n	8005fa4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d009      	beq.n	8005f76 <HAL_UART_IRQHandler+0x5fa>
 8005f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f66:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f001 fb30 	bl	80075d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f74:	e016      	b.n	8005fa4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d010      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x628>
 8005f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	da0c      	bge.n	8005fa4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f001 fb18 	bl	80075c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f90:	e008      	b.n	8005fa4 <HAL_UART_IRQHandler+0x628>
      return;
 8005f92:	bf00      	nop
 8005f94:	e006      	b.n	8005fa4 <HAL_UART_IRQHandler+0x628>
    return;
 8005f96:	bf00      	nop
 8005f98:	e004      	b.n	8005fa4 <HAL_UART_IRQHandler+0x628>
      return;
 8005f9a:	bf00      	nop
 8005f9c:	e002      	b.n	8005fa4 <HAL_UART_IRQHandler+0x628>
      return;
 8005f9e:	bf00      	nop
 8005fa0:	e000      	b.n	8005fa4 <HAL_UART_IRQHandler+0x628>
    return;
 8005fa2:	bf00      	nop
  }
}
 8005fa4:	37e8      	adds	r7, #232	@ 0xe8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop

08005fac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ff0:	b08c      	sub	sp, #48	@ 0x30
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	431a      	orrs	r2, r3
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	431a      	orrs	r2, r3
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	4313      	orrs	r3, r2
 8006012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	4baa      	ldr	r3, [pc, #680]	@ (80062c4 <UART_SetConfig+0x2d8>)
 800601c:	4013      	ands	r3, r2
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	6812      	ldr	r2, [r2, #0]
 8006022:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006024:	430b      	orrs	r3, r1
 8006026:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a9f      	ldr	r2, [pc, #636]	@ (80062c8 <UART_SetConfig+0x2dc>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006054:	4313      	orrs	r3, r2
 8006056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006062:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	6812      	ldr	r2, [r2, #0]
 800606a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800606c:	430b      	orrs	r3, r1
 800606e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006076:	f023 010f 	bic.w	r1, r3, #15
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a90      	ldr	r2, [pc, #576]	@ (80062cc <UART_SetConfig+0x2e0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d125      	bne.n	80060dc <UART_SetConfig+0xf0>
 8006090:	4b8f      	ldr	r3, [pc, #572]	@ (80062d0 <UART_SetConfig+0x2e4>)
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	2b03      	cmp	r3, #3
 800609c:	d81a      	bhi.n	80060d4 <UART_SetConfig+0xe8>
 800609e:	a201      	add	r2, pc, #4	@ (adr r2, 80060a4 <UART_SetConfig+0xb8>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	080060b5 	.word	0x080060b5
 80060a8:	080060c5 	.word	0x080060c5
 80060ac:	080060bd 	.word	0x080060bd
 80060b0:	080060cd 	.word	0x080060cd
 80060b4:	2301      	movs	r3, #1
 80060b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ba:	e116      	b.n	80062ea <UART_SetConfig+0x2fe>
 80060bc:	2302      	movs	r3, #2
 80060be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060c2:	e112      	b.n	80062ea <UART_SetConfig+0x2fe>
 80060c4:	2304      	movs	r3, #4
 80060c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ca:	e10e      	b.n	80062ea <UART_SetConfig+0x2fe>
 80060cc:	2308      	movs	r3, #8
 80060ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060d2:	e10a      	b.n	80062ea <UART_SetConfig+0x2fe>
 80060d4:	2310      	movs	r3, #16
 80060d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060da:	e106      	b.n	80062ea <UART_SetConfig+0x2fe>
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a7c      	ldr	r2, [pc, #496]	@ (80062d4 <UART_SetConfig+0x2e8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d138      	bne.n	8006158 <UART_SetConfig+0x16c>
 80060e6:	4b7a      	ldr	r3, [pc, #488]	@ (80062d0 <UART_SetConfig+0x2e4>)
 80060e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ec:	f003 030c 	and.w	r3, r3, #12
 80060f0:	2b0c      	cmp	r3, #12
 80060f2:	d82d      	bhi.n	8006150 <UART_SetConfig+0x164>
 80060f4:	a201      	add	r2, pc, #4	@ (adr r2, 80060fc <UART_SetConfig+0x110>)
 80060f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fa:	bf00      	nop
 80060fc:	08006131 	.word	0x08006131
 8006100:	08006151 	.word	0x08006151
 8006104:	08006151 	.word	0x08006151
 8006108:	08006151 	.word	0x08006151
 800610c:	08006141 	.word	0x08006141
 8006110:	08006151 	.word	0x08006151
 8006114:	08006151 	.word	0x08006151
 8006118:	08006151 	.word	0x08006151
 800611c:	08006139 	.word	0x08006139
 8006120:	08006151 	.word	0x08006151
 8006124:	08006151 	.word	0x08006151
 8006128:	08006151 	.word	0x08006151
 800612c:	08006149 	.word	0x08006149
 8006130:	2300      	movs	r3, #0
 8006132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006136:	e0d8      	b.n	80062ea <UART_SetConfig+0x2fe>
 8006138:	2302      	movs	r3, #2
 800613a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800613e:	e0d4      	b.n	80062ea <UART_SetConfig+0x2fe>
 8006140:	2304      	movs	r3, #4
 8006142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006146:	e0d0      	b.n	80062ea <UART_SetConfig+0x2fe>
 8006148:	2308      	movs	r3, #8
 800614a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800614e:	e0cc      	b.n	80062ea <UART_SetConfig+0x2fe>
 8006150:	2310      	movs	r3, #16
 8006152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006156:	e0c8      	b.n	80062ea <UART_SetConfig+0x2fe>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a5e      	ldr	r2, [pc, #376]	@ (80062d8 <UART_SetConfig+0x2ec>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d125      	bne.n	80061ae <UART_SetConfig+0x1c2>
 8006162:	4b5b      	ldr	r3, [pc, #364]	@ (80062d0 <UART_SetConfig+0x2e4>)
 8006164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006168:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800616c:	2b30      	cmp	r3, #48	@ 0x30
 800616e:	d016      	beq.n	800619e <UART_SetConfig+0x1b2>
 8006170:	2b30      	cmp	r3, #48	@ 0x30
 8006172:	d818      	bhi.n	80061a6 <UART_SetConfig+0x1ba>
 8006174:	2b20      	cmp	r3, #32
 8006176:	d00a      	beq.n	800618e <UART_SetConfig+0x1a2>
 8006178:	2b20      	cmp	r3, #32
 800617a:	d814      	bhi.n	80061a6 <UART_SetConfig+0x1ba>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <UART_SetConfig+0x19a>
 8006180:	2b10      	cmp	r3, #16
 8006182:	d008      	beq.n	8006196 <UART_SetConfig+0x1aa>
 8006184:	e00f      	b.n	80061a6 <UART_SetConfig+0x1ba>
 8006186:	2300      	movs	r3, #0
 8006188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800618c:	e0ad      	b.n	80062ea <UART_SetConfig+0x2fe>
 800618e:	2302      	movs	r3, #2
 8006190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006194:	e0a9      	b.n	80062ea <UART_SetConfig+0x2fe>
 8006196:	2304      	movs	r3, #4
 8006198:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800619c:	e0a5      	b.n	80062ea <UART_SetConfig+0x2fe>
 800619e:	2308      	movs	r3, #8
 80061a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a4:	e0a1      	b.n	80062ea <UART_SetConfig+0x2fe>
 80061a6:	2310      	movs	r3, #16
 80061a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ac:	e09d      	b.n	80062ea <UART_SetConfig+0x2fe>
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a4a      	ldr	r2, [pc, #296]	@ (80062dc <UART_SetConfig+0x2f0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d125      	bne.n	8006204 <UART_SetConfig+0x218>
 80061b8:	4b45      	ldr	r3, [pc, #276]	@ (80062d0 <UART_SetConfig+0x2e4>)
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80061c4:	d016      	beq.n	80061f4 <UART_SetConfig+0x208>
 80061c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80061c8:	d818      	bhi.n	80061fc <UART_SetConfig+0x210>
 80061ca:	2b80      	cmp	r3, #128	@ 0x80
 80061cc:	d00a      	beq.n	80061e4 <UART_SetConfig+0x1f8>
 80061ce:	2b80      	cmp	r3, #128	@ 0x80
 80061d0:	d814      	bhi.n	80061fc <UART_SetConfig+0x210>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <UART_SetConfig+0x1f0>
 80061d6:	2b40      	cmp	r3, #64	@ 0x40
 80061d8:	d008      	beq.n	80061ec <UART_SetConfig+0x200>
 80061da:	e00f      	b.n	80061fc <UART_SetConfig+0x210>
 80061dc:	2300      	movs	r3, #0
 80061de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e2:	e082      	b.n	80062ea <UART_SetConfig+0x2fe>
 80061e4:	2302      	movs	r3, #2
 80061e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ea:	e07e      	b.n	80062ea <UART_SetConfig+0x2fe>
 80061ec:	2304      	movs	r3, #4
 80061ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061f2:	e07a      	b.n	80062ea <UART_SetConfig+0x2fe>
 80061f4:	2308      	movs	r3, #8
 80061f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061fa:	e076      	b.n	80062ea <UART_SetConfig+0x2fe>
 80061fc:	2310      	movs	r3, #16
 80061fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006202:	e072      	b.n	80062ea <UART_SetConfig+0x2fe>
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a35      	ldr	r2, [pc, #212]	@ (80062e0 <UART_SetConfig+0x2f4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d12a      	bne.n	8006264 <UART_SetConfig+0x278>
 800620e:	4b30      	ldr	r3, [pc, #192]	@ (80062d0 <UART_SetConfig+0x2e4>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006218:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800621c:	d01a      	beq.n	8006254 <UART_SetConfig+0x268>
 800621e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006222:	d81b      	bhi.n	800625c <UART_SetConfig+0x270>
 8006224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006228:	d00c      	beq.n	8006244 <UART_SetConfig+0x258>
 800622a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800622e:	d815      	bhi.n	800625c <UART_SetConfig+0x270>
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <UART_SetConfig+0x250>
 8006234:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006238:	d008      	beq.n	800624c <UART_SetConfig+0x260>
 800623a:	e00f      	b.n	800625c <UART_SetConfig+0x270>
 800623c:	2300      	movs	r3, #0
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006242:	e052      	b.n	80062ea <UART_SetConfig+0x2fe>
 8006244:	2302      	movs	r3, #2
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800624a:	e04e      	b.n	80062ea <UART_SetConfig+0x2fe>
 800624c:	2304      	movs	r3, #4
 800624e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006252:	e04a      	b.n	80062ea <UART_SetConfig+0x2fe>
 8006254:	2308      	movs	r3, #8
 8006256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800625a:	e046      	b.n	80062ea <UART_SetConfig+0x2fe>
 800625c:	2310      	movs	r3, #16
 800625e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006262:	e042      	b.n	80062ea <UART_SetConfig+0x2fe>
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a17      	ldr	r2, [pc, #92]	@ (80062c8 <UART_SetConfig+0x2dc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d13a      	bne.n	80062e4 <UART_SetConfig+0x2f8>
 800626e:	4b18      	ldr	r3, [pc, #96]	@ (80062d0 <UART_SetConfig+0x2e4>)
 8006270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006274:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006278:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800627c:	d01a      	beq.n	80062b4 <UART_SetConfig+0x2c8>
 800627e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006282:	d81b      	bhi.n	80062bc <UART_SetConfig+0x2d0>
 8006284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006288:	d00c      	beq.n	80062a4 <UART_SetConfig+0x2b8>
 800628a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800628e:	d815      	bhi.n	80062bc <UART_SetConfig+0x2d0>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <UART_SetConfig+0x2b0>
 8006294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006298:	d008      	beq.n	80062ac <UART_SetConfig+0x2c0>
 800629a:	e00f      	b.n	80062bc <UART_SetConfig+0x2d0>
 800629c:	2300      	movs	r3, #0
 800629e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062a2:	e022      	b.n	80062ea <UART_SetConfig+0x2fe>
 80062a4:	2302      	movs	r3, #2
 80062a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062aa:	e01e      	b.n	80062ea <UART_SetConfig+0x2fe>
 80062ac:	2304      	movs	r3, #4
 80062ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062b2:	e01a      	b.n	80062ea <UART_SetConfig+0x2fe>
 80062b4:	2308      	movs	r3, #8
 80062b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ba:	e016      	b.n	80062ea <UART_SetConfig+0x2fe>
 80062bc:	2310      	movs	r3, #16
 80062be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062c2:	e012      	b.n	80062ea <UART_SetConfig+0x2fe>
 80062c4:	cfff69f3 	.word	0xcfff69f3
 80062c8:	40008000 	.word	0x40008000
 80062cc:	40013800 	.word	0x40013800
 80062d0:	40021000 	.word	0x40021000
 80062d4:	40004400 	.word	0x40004400
 80062d8:	40004800 	.word	0x40004800
 80062dc:	40004c00 	.word	0x40004c00
 80062e0:	40005000 	.word	0x40005000
 80062e4:	2310      	movs	r3, #16
 80062e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4aae      	ldr	r2, [pc, #696]	@ (80065a8 <UART_SetConfig+0x5bc>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	f040 8097 	bne.w	8006424 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d823      	bhi.n	8006346 <UART_SetConfig+0x35a>
 80062fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006304 <UART_SetConfig+0x318>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	08006329 	.word	0x08006329
 8006308:	08006347 	.word	0x08006347
 800630c:	08006331 	.word	0x08006331
 8006310:	08006347 	.word	0x08006347
 8006314:	08006337 	.word	0x08006337
 8006318:	08006347 	.word	0x08006347
 800631c:	08006347 	.word	0x08006347
 8006320:	08006347 	.word	0x08006347
 8006324:	0800633f 	.word	0x0800633f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006328:	f7fd fc8a 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 800632c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800632e:	e010      	b.n	8006352 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006330:	4b9e      	ldr	r3, [pc, #632]	@ (80065ac <UART_SetConfig+0x5c0>)
 8006332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006334:	e00d      	b.n	8006352 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006336:	f7fd fc15 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 800633a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800633c:	e009      	b.n	8006352 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800633e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006342:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006344:	e005      	b.n	8006352 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006350:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 8130 	beq.w	80065ba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635e:	4a94      	ldr	r2, [pc, #592]	@ (80065b0 <UART_SetConfig+0x5c4>)
 8006360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006364:	461a      	mov	r2, r3
 8006366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006368:	fbb3 f3f2 	udiv	r3, r3, r2
 800636c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	4613      	mov	r3, r2
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	4413      	add	r3, r2
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	429a      	cmp	r2, r3
 800637c:	d305      	bcc.n	800638a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	429a      	cmp	r2, r3
 8006388:	d903      	bls.n	8006392 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006390:	e113      	b.n	80065ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006394:	2200      	movs	r2, #0
 8006396:	60bb      	str	r3, [r7, #8]
 8006398:	60fa      	str	r2, [r7, #12]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639e:	4a84      	ldr	r2, [pc, #528]	@ (80065b0 <UART_SetConfig+0x5c4>)
 80063a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2200      	movs	r2, #0
 80063a8:	603b      	str	r3, [r7, #0]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063b4:	f7f9 ff94 	bl	80002e0 <__aeabi_uldivmod>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4610      	mov	r0, r2
 80063be:	4619      	mov	r1, r3
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	020b      	lsls	r3, r1, #8
 80063ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063ce:	0202      	lsls	r2, r0, #8
 80063d0:	6979      	ldr	r1, [r7, #20]
 80063d2:	6849      	ldr	r1, [r1, #4]
 80063d4:	0849      	lsrs	r1, r1, #1
 80063d6:	2000      	movs	r0, #0
 80063d8:	460c      	mov	r4, r1
 80063da:	4605      	mov	r5, r0
 80063dc:	eb12 0804 	adds.w	r8, r2, r4
 80063e0:	eb43 0905 	adc.w	r9, r3, r5
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	469a      	mov	sl, r3
 80063ec:	4693      	mov	fp, r2
 80063ee:	4652      	mov	r2, sl
 80063f0:	465b      	mov	r3, fp
 80063f2:	4640      	mov	r0, r8
 80063f4:	4649      	mov	r1, r9
 80063f6:	f7f9 ff73 	bl	80002e0 <__aeabi_uldivmod>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	4613      	mov	r3, r2
 8006400:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006408:	d308      	bcc.n	800641c <UART_SetConfig+0x430>
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006410:	d204      	bcs.n	800641c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6a3a      	ldr	r2, [r7, #32]
 8006418:	60da      	str	r2, [r3, #12]
 800641a:	e0ce      	b.n	80065ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006422:	e0ca      	b.n	80065ba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800642c:	d166      	bne.n	80064fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800642e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006432:	2b08      	cmp	r3, #8
 8006434:	d827      	bhi.n	8006486 <UART_SetConfig+0x49a>
 8006436:	a201      	add	r2, pc, #4	@ (adr r2, 800643c <UART_SetConfig+0x450>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	08006461 	.word	0x08006461
 8006440:	08006469 	.word	0x08006469
 8006444:	08006471 	.word	0x08006471
 8006448:	08006487 	.word	0x08006487
 800644c:	08006477 	.word	0x08006477
 8006450:	08006487 	.word	0x08006487
 8006454:	08006487 	.word	0x08006487
 8006458:	08006487 	.word	0x08006487
 800645c:	0800647f 	.word	0x0800647f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006460:	f7fd fbee 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 8006464:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006466:	e014      	b.n	8006492 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006468:	f7fd fc00 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 800646c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800646e:	e010      	b.n	8006492 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006470:	4b4e      	ldr	r3, [pc, #312]	@ (80065ac <UART_SetConfig+0x5c0>)
 8006472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006474:	e00d      	b.n	8006492 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006476:	f7fd fb75 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 800647a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800647c:	e009      	b.n	8006492 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800647e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006482:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006484:	e005      	b.n	8006492 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 8090 	beq.w	80065ba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649e:	4a44      	ldr	r2, [pc, #272]	@ (80065b0 <UART_SetConfig+0x5c4>)
 80064a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a4:	461a      	mov	r2, r3
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80064ac:	005a      	lsls	r2, r3, #1
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	085b      	lsrs	r3, r3, #1
 80064b4:	441a      	add	r2, r3
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80064be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	2b0f      	cmp	r3, #15
 80064c4:	d916      	bls.n	80064f4 <UART_SetConfig+0x508>
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064cc:	d212      	bcs.n	80064f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	f023 030f 	bic.w	r3, r3, #15
 80064d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	085b      	lsrs	r3, r3, #1
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f003 0307 	and.w	r3, r3, #7
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	8bfb      	ldrh	r3, [r7, #30]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	8bfa      	ldrh	r2, [r7, #30]
 80064f0:	60da      	str	r2, [r3, #12]
 80064f2:	e062      	b.n	80065ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064fa:	e05e      	b.n	80065ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006500:	2b08      	cmp	r3, #8
 8006502:	d828      	bhi.n	8006556 <UART_SetConfig+0x56a>
 8006504:	a201      	add	r2, pc, #4	@ (adr r2, 800650c <UART_SetConfig+0x520>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	08006531 	.word	0x08006531
 8006510:	08006539 	.word	0x08006539
 8006514:	08006541 	.word	0x08006541
 8006518:	08006557 	.word	0x08006557
 800651c:	08006547 	.word	0x08006547
 8006520:	08006557 	.word	0x08006557
 8006524:	08006557 	.word	0x08006557
 8006528:	08006557 	.word	0x08006557
 800652c:	0800654f 	.word	0x0800654f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006530:	f7fd fb86 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 8006534:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006536:	e014      	b.n	8006562 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006538:	f7fd fb98 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 800653c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800653e:	e010      	b.n	8006562 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006540:	4b1a      	ldr	r3, [pc, #104]	@ (80065ac <UART_SetConfig+0x5c0>)
 8006542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006544:	e00d      	b.n	8006562 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006546:	f7fd fb0d 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 800654a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800654c:	e009      	b.n	8006562 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800654e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006552:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006554:	e005      	b.n	8006562 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006560:	bf00      	nop
    }

    if (pclk != 0U)
 8006562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006564:	2b00      	cmp	r3, #0
 8006566:	d028      	beq.n	80065ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656c:	4a10      	ldr	r2, [pc, #64]	@ (80065b0 <UART_SetConfig+0x5c4>)
 800656e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006572:	461a      	mov	r2, r3
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	fbb3 f2f2 	udiv	r2, r3, r2
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	441a      	add	r2, r3
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	fbb2 f3f3 	udiv	r3, r2, r3
 800658a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	2b0f      	cmp	r3, #15
 8006590:	d910      	bls.n	80065b4 <UART_SetConfig+0x5c8>
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006598:	d20c      	bcs.n	80065b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	b29a      	uxth	r2, r3
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60da      	str	r2, [r3, #12]
 80065a4:	e009      	b.n	80065ba <UART_SetConfig+0x5ce>
 80065a6:	bf00      	nop
 80065a8:	40008000 	.word	0x40008000
 80065ac:	00f42400 	.word	0x00f42400
 80065b0:	08008a30 	.word	0x08008a30
      }
      else
      {
        ret = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2201      	movs	r2, #1
 80065be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2200      	movs	r2, #0
 80065ce:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2200      	movs	r2, #0
 80065d4:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 80065d6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3730      	adds	r7, #48	@ 0x30
 80065de:	46bd      	mov	sp, r7
 80065e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080065e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00a      	beq.n	800660e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00a      	beq.n	8006652 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006656:	f003 0308 	and.w	r3, r3, #8
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006678:	f003 0310 	and.w	r3, r3, #16
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00a      	beq.n	8006696 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01a      	beq.n	80066fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066e2:	d10a      	bne.n	80066fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	605a      	str	r2, [r3, #4]
  }
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af02      	add	r7, sp, #8
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006738:	f7fb f876 	bl	8001828 <HAL_GetTick>
 800673c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b08      	cmp	r3, #8
 800674a:	d10e      	bne.n	800676a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800674c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f82f 	bl	80067be <UART_WaitOnFlagUntilTimeout>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e025      	b.n	80067b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b04      	cmp	r3, #4
 8006776:	d10e      	bne.n	8006796 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006778:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f819 	bl	80067be <UART_WaitOnFlagUntilTimeout>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e00f      	b.n	80067b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b09c      	sub	sp, #112	@ 0x70
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	60f8      	str	r0, [r7, #12]
 80067c6:	60b9      	str	r1, [r7, #8]
 80067c8:	603b      	str	r3, [r7, #0]
 80067ca:	4613      	mov	r3, r2
 80067cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ce:	e0a9      	b.n	8006924 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	f000 80a5 	beq.w	8006924 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067da:	f7fb f825 	bl	8001828 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d302      	bcc.n	80067f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80067ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d140      	bne.n	8006872 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80067fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006800:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006804:	667b      	str	r3, [r7, #100]	@ 0x64
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800680e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006810:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006814:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800681c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e6      	bne.n	80067f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006834:	f023 0301 	bic.w	r3, r3, #1
 8006838:	663b      	str	r3, [r7, #96]	@ 0x60
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3308      	adds	r3, #8
 8006840:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006842:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006844:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006848:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e5      	bne.n	8006822 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2220      	movs	r2, #32
 800685a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2220      	movs	r2, #32
 8006862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e069      	b.n	8006946 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b00      	cmp	r3, #0
 800687e:	d051      	beq.n	8006924 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800688a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800688e:	d149      	bne.n	8006924 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006898:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068aa:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80068ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	461a      	mov	r2, r3
 80068b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ba:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80068be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80068c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e6      	bne.n	800689a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3308      	adds	r3, #8
 80068d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	e853 3f00 	ldrex	r3, [r3]
 80068da:	613b      	str	r3, [r7, #16]
   return(result);
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f023 0301 	bic.w	r3, r3, #1
 80068e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3308      	adds	r3, #8
 80068ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80068ec:	623a      	str	r2, [r7, #32]
 80068ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	69f9      	ldr	r1, [r7, #28]
 80068f2:	6a3a      	ldr	r2, [r7, #32]
 80068f4:	e841 2300 	strex	r3, r2, [r1]
 80068f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e5      	bne.n	80068cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2220      	movs	r2, #32
 8006904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2220      	movs	r2, #32
 800690c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2220      	movs	r2, #32
 8006914:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e010      	b.n	8006946 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	69da      	ldr	r2, [r3, #28]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	4013      	ands	r3, r2
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	429a      	cmp	r2, r3
 8006932:	bf0c      	ite	eq
 8006934:	2301      	moveq	r3, #1
 8006936:	2300      	movne	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	461a      	mov	r2, r3
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	429a      	cmp	r2, r3
 8006940:	f43f af46 	beq.w	80067d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3770      	adds	r7, #112	@ 0x70
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006950:	b480      	push	{r7}
 8006952:	b0a3      	sub	sp, #140	@ 0x8c
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	4613      	mov	r3, r2
 800695c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	88fa      	ldrh	r2, [r7, #6]
 8006968:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	88fa      	ldrh	r2, [r7, #6]
 8006970:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006982:	d10e      	bne.n	80069a2 <UART_Start_Receive_IT+0x52>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d105      	bne.n	8006998 <UART_Start_Receive_IT+0x48>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006992:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006996:	e02d      	b.n	80069f4 <UART_Start_Receive_IT+0xa4>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	22ff      	movs	r2, #255	@ 0xff
 800699c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069a0:	e028      	b.n	80069f4 <UART_Start_Receive_IT+0xa4>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10d      	bne.n	80069c6 <UART_Start_Receive_IT+0x76>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d104      	bne.n	80069bc <UART_Start_Receive_IT+0x6c>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	22ff      	movs	r2, #255	@ 0xff
 80069b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069ba:	e01b      	b.n	80069f4 <UART_Start_Receive_IT+0xa4>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	227f      	movs	r2, #127	@ 0x7f
 80069c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069c4:	e016      	b.n	80069f4 <UART_Start_Receive_IT+0xa4>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069ce:	d10d      	bne.n	80069ec <UART_Start_Receive_IT+0x9c>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d104      	bne.n	80069e2 <UART_Start_Receive_IT+0x92>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	227f      	movs	r2, #127	@ 0x7f
 80069dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069e0:	e008      	b.n	80069f4 <UART_Start_Receive_IT+0xa4>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	223f      	movs	r2, #63	@ 0x3f
 80069e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069ea:	e003      	b.n	80069f4 <UART_Start_Receive_IT+0xa4>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2222      	movs	r2, #34	@ 0x22
 8006a00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3308      	adds	r3, #8
 8006a0a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a0e:	e853 3f00 	ldrex	r3, [r3]
 8006a12:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006a14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a16:	f043 0301 	orr.w	r3, r3, #1
 8006a1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3308      	adds	r3, #8
 8006a24:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006a28:	673a      	str	r2, [r7, #112]	@ 0x70
 8006a2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006a2e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006a30:	e841 2300 	strex	r3, r2, [r1]
 8006a34:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006a36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e3      	bne.n	8006a04 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a44:	d153      	bne.n	8006aee <UART_Start_Receive_IT+0x19e>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a4c:	88fa      	ldrh	r2, [r7, #6]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d34d      	bcc.n	8006aee <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a5a:	d107      	bne.n	8006a6c <UART_Start_Receive_IT+0x11c>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d103      	bne.n	8006a6c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4a4b      	ldr	r2, [pc, #300]	@ (8006b94 <UART_Start_Receive_IT+0x244>)
 8006a68:	671a      	str	r2, [r3, #112]	@ 0x70
 8006a6a:	e002      	b.n	8006a72 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8006b98 <UART_Start_Receive_IT+0x248>)
 8006a70:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d01a      	beq.n	8006ab8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a8a:	e853 3f00 	ldrex	r3, [r3]
 8006a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aa6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006aaa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e4      	bne.n	8006a82 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3308      	adds	r3, #8
 8006abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006ad8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006ada:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e5      	bne.n	8006ab8 <UART_Start_Receive_IT+0x168>
 8006aec:	e04a      	b.n	8006b84 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006af6:	d107      	bne.n	8006b08 <UART_Start_Receive_IT+0x1b8>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d103      	bne.n	8006b08 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4a26      	ldr	r2, [pc, #152]	@ (8006b9c <UART_Start_Receive_IT+0x24c>)
 8006b04:	671a      	str	r2, [r3, #112]	@ 0x70
 8006b06:	e002      	b.n	8006b0e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4a25      	ldr	r2, [pc, #148]	@ (8006ba0 <UART_Start_Receive_IT+0x250>)
 8006b0c:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d019      	beq.n	8006b52 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006b32:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b3e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b44:	e841 2300 	strex	r3, r2, [r1]
 8006b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e6      	bne.n	8006b1e <UART_Start_Receive_IT+0x1ce>
 8006b50:	e018      	b.n	8006b84 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	e853 3f00 	ldrex	r3, [r3]
 8006b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f043 0320 	orr.w	r3, r3, #32
 8006b66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b70:	623b      	str	r3, [r7, #32]
 8006b72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	69f9      	ldr	r1, [r7, #28]
 8006b76:	6a3a      	ldr	r2, [r7, #32]
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e6      	bne.n	8006b52 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	378c      	adds	r7, #140	@ 0x8c
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	080072ad 	.word	0x080072ad
 8006b98:	08006fb5 	.word	0x08006fb5
 8006b9c:	08006e53 	.word	0x08006e53
 8006ba0:	08006cf3 	.word	0x08006cf3

08006ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b095      	sub	sp, #84	@ 0x54
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bca:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bd2:	e841 2300 	strex	r3, r2, [r1]
 8006bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1e6      	bne.n	8006bac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3308      	adds	r3, #8
 8006be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bf4:	f023 0301 	bic.w	r3, r3, #1
 8006bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3308      	adds	r3, #8
 8006c00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e3      	bne.n	8006bde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d118      	bne.n	8006c50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	e853 3f00 	ldrex	r3, [r3]
 8006c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f023 0310 	bic.w	r3, r3, #16
 8006c32:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c3c:	61bb      	str	r3, [r7, #24]
 8006c3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	6979      	ldr	r1, [r7, #20]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	e841 2300 	strex	r3, r2, [r1]
 8006c48:	613b      	str	r3, [r7, #16]
   return(result);
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e6      	bne.n	8006c1e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8006c64:	bf00      	nop
 8006c66:	3754      	adds	r7, #84	@ 0x54
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f7ff f996 	bl	8005fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c94:	bf00      	nop
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b088      	sub	sp, #32
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6979      	ldr	r1, [r7, #20]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e6      	bne.n	8006ca4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7ff f961 	bl	8005fac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cea:	bf00      	nop
 8006cec:	3720      	adds	r7, #32
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b096      	sub	sp, #88	@ 0x58
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d00:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d0a:	2b22      	cmp	r3, #34	@ 0x22
 8006d0c:	f040 8095 	bne.w	8006e3a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d16:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d1a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8006d1e:	b2d9      	uxtb	r1, r3
 8006d20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d2a:	400a      	ands	r2, r1
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	3b01      	subs	r3, #1
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d178      	bne.n	8006e4a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d76:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d78:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e6      	bne.n	8006d58 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3308      	adds	r3, #8
 8006d90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	623b      	str	r3, [r7, #32]
   return(result);
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	f023 0301 	bic.w	r3, r3, #1
 8006da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3308      	adds	r3, #8
 8006da8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006daa:	633a      	str	r2, [r7, #48]	@ 0x30
 8006dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006db0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e5      	bne.n	8006d8a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d12e      	bne.n	8006e32 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	e853 3f00 	ldrex	r3, [r3]
 8006de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0310 	bic.w	r3, r3, #16
 8006dee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	461a      	mov	r2, r3
 8006df6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006df8:	61fb      	str	r3, [r7, #28]
 8006dfa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfc:	69b9      	ldr	r1, [r7, #24]
 8006dfe:	69fa      	ldr	r2, [r7, #28]
 8006e00:	e841 2300 	strex	r3, r2, [r1]
 8006e04:	617b      	str	r3, [r7, #20]
   return(result);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e6      	bne.n	8006dda <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	f003 0310 	and.w	r3, r3, #16
 8006e16:	2b10      	cmp	r3, #16
 8006e18:	d103      	bne.n	8006e22 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2210      	movs	r2, #16
 8006e20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff f8d2 	bl	8005fd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e30:	e00b      	b.n	8006e4a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fa f82c 	bl	8000e90 <HAL_UART_RxCpltCallback>
}
 8006e38:	e007      	b.n	8006e4a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	699a      	ldr	r2, [r3, #24]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f042 0208 	orr.w	r2, r2, #8
 8006e48:	619a      	str	r2, [r3, #24]
}
 8006e4a:	bf00      	nop
 8006e4c:	3758      	adds	r7, #88	@ 0x58
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b096      	sub	sp, #88	@ 0x58
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006e60:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6a:	2b22      	cmp	r3, #34	@ 0x22
 8006e6c:	f040 8095 	bne.w	8006f9a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e76:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e7e:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e80:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8006e84:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006e88:	4013      	ands	r3, r2
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e8e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e94:	1c9a      	adds	r2, r3, #2
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d178      	bne.n	8006faa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec0:	e853 3f00 	ldrex	r3, [r3]
 8006ec4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ed6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ed8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006edc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e6      	bne.n	8006eb8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3308      	adds	r3, #8
 8006ef0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	f023 0301 	bic.w	r3, r3, #1
 8006f00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3308      	adds	r3, #8
 8006f08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e5      	bne.n	8006eea <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d12e      	bne.n	8006f92 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f023 0310 	bic.w	r3, r3, #16
 8006f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	461a      	mov	r2, r3
 8006f56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f58:	61bb      	str	r3, [r7, #24]
 8006f5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	6979      	ldr	r1, [r7, #20]
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	613b      	str	r3, [r7, #16]
   return(result);
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e6      	bne.n	8006f3a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	f003 0310 	and.w	r3, r3, #16
 8006f76:	2b10      	cmp	r3, #16
 8006f78:	d103      	bne.n	8006f82 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2210      	movs	r2, #16
 8006f80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff f822 	bl	8005fd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f90:	e00b      	b.n	8006faa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7f9 ff7c 	bl	8000e90 <HAL_UART_RxCpltCallback>
}
 8006f98:	e007      	b.n	8006faa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	699a      	ldr	r2, [r3, #24]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f042 0208 	orr.w	r2, r2, #8
 8006fa8:	619a      	str	r2, [r3, #24]
}
 8006faa:	bf00      	nop
 8006fac:	3758      	adds	r7, #88	@ 0x58
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b0a6      	sub	sp, #152	@ 0x98
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006fc2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fea:	2b22      	cmp	r3, #34	@ 0x22
 8006fec:	f040 814f 	bne.w	800728e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006ff6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ffa:	e0f6      	b.n	80071ea <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007002:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007006:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800700a:	b2d9      	uxtb	r1, r3
 800700c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007010:	b2da      	uxtb	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007016:	400a      	ands	r2, r1
 8007018:	b2d2      	uxtb	r2, r2
 800701a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b29a      	uxth	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007042:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	2b00      	cmp	r3, #0
 800704c:	d053      	beq.n	80070f6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800704e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d011      	beq.n	800707e <UART_RxISR_8BIT_FIFOEN+0xca>
 800705a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800705e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00b      	beq.n	800707e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2201      	movs	r2, #1
 800706c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007074:	f043 0201 	orr.w	r2, r3, #1
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800707e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d011      	beq.n	80070ae <UART_RxISR_8BIT_FIFOEN+0xfa>
 800708a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00b      	beq.n	80070ae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2202      	movs	r2, #2
 800709c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070a4:	f043 0204 	orr.w	r2, r3, #4
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80070b2:	f003 0304 	and.w	r3, r3, #4
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d011      	beq.n	80070de <UART_RxISR_8BIT_FIFOEN+0x12a>
 80070ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00b      	beq.n	80070de <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2204      	movs	r2, #4
 80070cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070d4:	f043 0202 	orr.w	r2, r3, #2
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d006      	beq.n	80070f6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7fe ff69 	bl	8005fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d173      	bne.n	80071ea <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007108:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800710a:	e853 3f00 	ldrex	r3, [r3]
 800710e:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007110:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007112:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007116:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007124:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007126:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800712a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007132:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e4      	bne.n	8007102 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800714a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800714e:	f023 0301 	bic.w	r3, r3, #1
 8007152:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3308      	adds	r3, #8
 800715a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800715c:	657a      	str	r2, [r7, #84]	@ 0x54
 800715e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007162:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007164:	e841 2300 	strex	r3, r2, [r1]
 8007168:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800716a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e3      	bne.n	8007138 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2220      	movs	r2, #32
 8007174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007182:	2b01      	cmp	r3, #1
 8007184:	d12e      	bne.n	80071e4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	f023 0310 	bic.w	r3, r3, #16
 80071a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80071ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e6      	bne.n	800718c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	f003 0310 	and.w	r3, r3, #16
 80071c8:	2b10      	cmp	r3, #16
 80071ca:	d103      	bne.n	80071d4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2210      	movs	r2, #16
 80071d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7fe fef9 	bl	8005fd4 <HAL_UARTEx_RxEventCallback>
 80071e2:	e002      	b.n	80071ea <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7f9 fe53 	bl	8000e90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d006      	beq.n	8007200 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80071f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f47f aefe 	bne.w	8006ffc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007206:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800720a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800720e:	2b00      	cmp	r3, #0
 8007210:	d045      	beq.n	800729e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007218:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800721c:	429a      	cmp	r2, r3
 800721e:	d23e      	bcs.n	800729e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3308      	adds	r3, #8
 8007226:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	e853 3f00 	ldrex	r3, [r3]
 800722e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007236:	673b      	str	r3, [r7, #112]	@ 0x70
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3308      	adds	r3, #8
 800723e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007240:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007242:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007244:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007248:	e841 2300 	strex	r3, r2, [r1]
 800724c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1e5      	bne.n	8007220 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a14      	ldr	r2, [pc, #80]	@ (80072a8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007258:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	e853 3f00 	ldrex	r3, [r3]
 8007266:	60bb      	str	r3, [r7, #8]
   return(result);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f043 0320 	orr.w	r3, r3, #32
 800726e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	461a      	mov	r2, r3
 8007276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007278:	61bb      	str	r3, [r7, #24]
 800727a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727c:	6979      	ldr	r1, [r7, #20]
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	e841 2300 	strex	r3, r2, [r1]
 8007284:	613b      	str	r3, [r7, #16]
   return(result);
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1e6      	bne.n	800725a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800728c:	e007      	b.n	800729e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	699a      	ldr	r2, [r3, #24]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f042 0208 	orr.w	r2, r2, #8
 800729c:	619a      	str	r2, [r3, #24]
}
 800729e:	bf00      	nop
 80072a0:	3798      	adds	r7, #152	@ 0x98
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	08006cf3 	.word	0x08006cf3

080072ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b0a8      	sub	sp, #160	@ 0xa0
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80072ba:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e2:	2b22      	cmp	r3, #34	@ 0x22
 80072e4:	f040 8153 	bne.w	800758e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80072ee:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072f2:	e0fa      	b.n	80074ea <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fa:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007302:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007306:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800730a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800730e:	4013      	ands	r3, r2
 8007310:	b29a      	uxth	r2, r3
 8007312:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007316:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800731c:	1c9a      	adds	r2, r3, #2
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007328:	b29b      	uxth	r3, r3
 800732a:	3b01      	subs	r3, #1
 800732c:	b29a      	uxth	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800733e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	2b00      	cmp	r3, #0
 8007348:	d053      	beq.n	80073f2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800734a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d011      	beq.n	800737a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007356:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800735a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00b      	beq.n	800737a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2201      	movs	r2, #1
 8007368:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007370:	f043 0201 	orr.w	r2, r3, #1
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800737a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d011      	beq.n	80073aa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007386:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00b      	beq.n	80073aa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2202      	movs	r2, #2
 8007398:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073a0:	f043 0204 	orr.w	r2, r3, #4
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073ae:	f003 0304 	and.w	r3, r3, #4
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d011      	beq.n	80073da <UART_RxISR_16BIT_FIFOEN+0x12e>
 80073b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00b      	beq.n	80073da <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2204      	movs	r2, #4
 80073c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073d0:	f043 0202 	orr.w	r2, r3, #2
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d006      	beq.n	80073f2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f7fe fdeb 	bl	8005fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d175      	bne.n	80074ea <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800740c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800740e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007412:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007420:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007422:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007426:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800742e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e4      	bne.n	80073fe <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3308      	adds	r3, #8
 800743a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007444:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007446:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800744a:	f023 0301 	bic.w	r3, r3, #1
 800744e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3308      	adds	r3, #8
 8007458:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800745c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800745e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007460:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007462:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007464:	e841 2300 	strex	r3, r2, [r1]
 8007468:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800746a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e1      	bne.n	8007434 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2220      	movs	r2, #32
 8007474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007482:	2b01      	cmp	r3, #1
 8007484:	d12e      	bne.n	80074e4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800749a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800749c:	f023 0310 	bic.w	r3, r3, #16
 80074a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80074ac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e6      	bne.n	800748c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	d103      	bne.n	80074d4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2210      	movs	r2, #16
 80074d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7fe fd79 	bl	8005fd4 <HAL_UARTEx_RxEventCallback>
 80074e2:	e002      	b.n	80074ea <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7f9 fcd3 	bl	8000e90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d006      	beq.n	8007500 <UART_RxISR_16BIT_FIFOEN+0x254>
 80074f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074f6:	f003 0320 	and.w	r3, r3, #32
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f47f aefa 	bne.w	80072f4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007506:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800750a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800750e:	2b00      	cmp	r3, #0
 8007510:	d045      	beq.n	800759e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007518:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 800751c:	429a      	cmp	r2, r3
 800751e:	d23e      	bcs.n	800759e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3308      	adds	r3, #8
 8007526:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752a:	e853 3f00 	ldrex	r3, [r3]
 800752e:	623b      	str	r3, [r7, #32]
   return(result);
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007536:	677b      	str	r3, [r7, #116]	@ 0x74
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3308      	adds	r3, #8
 800753e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007540:	633a      	str	r2, [r7, #48]	@ 0x30
 8007542:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007544:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007548:	e841 2300 	strex	r3, r2, [r1]
 800754c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800754e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1e5      	bne.n	8007520 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a14      	ldr	r2, [pc, #80]	@ (80075a8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007558:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	60fb      	str	r3, [r7, #12]
   return(result);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f043 0320 	orr.w	r3, r3, #32
 800756e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	461a      	mov	r2, r3
 8007576:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007578:	61fb      	str	r3, [r7, #28]
 800757a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	69b9      	ldr	r1, [r7, #24]
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	617b      	str	r3, [r7, #20]
   return(result);
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e6      	bne.n	800755a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800758c:	e007      	b.n	800759e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	699a      	ldr	r2, [r3, #24]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f042 0208 	orr.w	r2, r2, #8
 800759c:	619a      	str	r2, [r3, #24]
}
 800759e:	bf00      	nop
 80075a0:	37a0      	adds	r7, #160	@ 0xa0
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	08006e53 	.word	0x08006e53

080075ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d101      	bne.n	80075fe <HAL_UARTEx_DisableFifoMode+0x16>
 80075fa:	2302      	movs	r3, #2
 80075fc:	e027      	b.n	800764e <HAL_UARTEx_DisableFifoMode+0x66>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2224      	movs	r2, #36	@ 0x24
 800760a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0201 	bic.w	r2, r2, #1
 8007624:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800762c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2220      	movs	r2, #32
 8007640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b084      	sub	sp, #16
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800766a:	2b01      	cmp	r3, #1
 800766c:	d101      	bne.n	8007672 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800766e:	2302      	movs	r3, #2
 8007670:	e02d      	b.n	80076ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2224      	movs	r2, #36	@ 0x24
 800767e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f022 0201 	bic.w	r2, r2, #1
 8007698:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f850 	bl	8007754 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2220      	movs	r2, #32
 80076c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d101      	bne.n	80076ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076ea:	2302      	movs	r3, #2
 80076ec:	e02d      	b.n	800774a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2224      	movs	r2, #36	@ 0x24
 80076fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0201 	bic.w	r2, r2, #1
 8007714:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f812 	bl	8007754 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2220      	movs	r2, #32
 800773c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007760:	2b00      	cmp	r3, #0
 8007762:	d108      	bne.n	8007776 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007774:	e031      	b.n	80077da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007776:	2308      	movs	r3, #8
 8007778:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800777a:	2308      	movs	r3, #8
 800777c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	0e5b      	lsrs	r3, r3, #25
 8007786:	b2db      	uxtb	r3, r3
 8007788:	f003 0307 	and.w	r3, r3, #7
 800778c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	0f5b      	lsrs	r3, r3, #29
 8007796:	b2db      	uxtb	r3, r3
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800779e:	7bbb      	ldrb	r3, [r7, #14]
 80077a0:	7b3a      	ldrb	r2, [r7, #12]
 80077a2:	4911      	ldr	r1, [pc, #68]	@ (80077e8 <UARTEx_SetNbDataToProcess+0x94>)
 80077a4:	5c8a      	ldrb	r2, [r1, r2]
 80077a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077aa:	7b3a      	ldrb	r2, [r7, #12]
 80077ac:	490f      	ldr	r1, [pc, #60]	@ (80077ec <UARTEx_SetNbDataToProcess+0x98>)
 80077ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	7b7a      	ldrb	r2, [r7, #13]
 80077c0:	4909      	ldr	r1, [pc, #36]	@ (80077e8 <UARTEx_SetNbDataToProcess+0x94>)
 80077c2:	5c8a      	ldrb	r2, [r1, r2]
 80077c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077c8:	7b7a      	ldrb	r2, [r7, #13]
 80077ca:	4908      	ldr	r1, [pc, #32]	@ (80077ec <UARTEx_SetNbDataToProcess+0x98>)
 80077cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80077da:	bf00      	nop
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	08008a48 	.word	0x08008a48
 80077ec:	08008a50 	.word	0x08008a50

080077f0 <std>:
 80077f0:	2300      	movs	r3, #0
 80077f2:	b510      	push	{r4, lr}
 80077f4:	4604      	mov	r4, r0
 80077f6:	e9c0 3300 	strd	r3, r3, [r0]
 80077fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077fe:	6083      	str	r3, [r0, #8]
 8007800:	8181      	strh	r1, [r0, #12]
 8007802:	6643      	str	r3, [r0, #100]	@ 0x64
 8007804:	81c2      	strh	r2, [r0, #14]
 8007806:	6183      	str	r3, [r0, #24]
 8007808:	4619      	mov	r1, r3
 800780a:	2208      	movs	r2, #8
 800780c:	305c      	adds	r0, #92	@ 0x5c
 800780e:	f000 f8f4 	bl	80079fa <memset>
 8007812:	4b0d      	ldr	r3, [pc, #52]	@ (8007848 <std+0x58>)
 8007814:	6263      	str	r3, [r4, #36]	@ 0x24
 8007816:	4b0d      	ldr	r3, [pc, #52]	@ (800784c <std+0x5c>)
 8007818:	62a3      	str	r3, [r4, #40]	@ 0x28
 800781a:	4b0d      	ldr	r3, [pc, #52]	@ (8007850 <std+0x60>)
 800781c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800781e:	4b0d      	ldr	r3, [pc, #52]	@ (8007854 <std+0x64>)
 8007820:	6323      	str	r3, [r4, #48]	@ 0x30
 8007822:	4b0d      	ldr	r3, [pc, #52]	@ (8007858 <std+0x68>)
 8007824:	6224      	str	r4, [r4, #32]
 8007826:	429c      	cmp	r4, r3
 8007828:	d006      	beq.n	8007838 <std+0x48>
 800782a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800782e:	4294      	cmp	r4, r2
 8007830:	d002      	beq.n	8007838 <std+0x48>
 8007832:	33d0      	adds	r3, #208	@ 0xd0
 8007834:	429c      	cmp	r4, r3
 8007836:	d105      	bne.n	8007844 <std+0x54>
 8007838:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800783c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007840:	f000 b9b0 	b.w	8007ba4 <__retarget_lock_init_recursive>
 8007844:	bd10      	pop	{r4, pc}
 8007846:	bf00      	nop
 8007848:	08007975 	.word	0x08007975
 800784c:	08007997 	.word	0x08007997
 8007850:	080079cf 	.word	0x080079cf
 8007854:	080079f3 	.word	0x080079f3
 8007858:	200003b4 	.word	0x200003b4

0800785c <stdio_exit_handler>:
 800785c:	4a02      	ldr	r2, [pc, #8]	@ (8007868 <stdio_exit_handler+0xc>)
 800785e:	4903      	ldr	r1, [pc, #12]	@ (800786c <stdio_exit_handler+0x10>)
 8007860:	4803      	ldr	r0, [pc, #12]	@ (8007870 <stdio_exit_handler+0x14>)
 8007862:	f000 b869 	b.w	8007938 <_fwalk_sglue>
 8007866:	bf00      	nop
 8007868:	2000000c 	.word	0x2000000c
 800786c:	08007ef1 	.word	0x08007ef1
 8007870:	2000001c 	.word	0x2000001c

08007874 <cleanup_stdio>:
 8007874:	6841      	ldr	r1, [r0, #4]
 8007876:	4b0c      	ldr	r3, [pc, #48]	@ (80078a8 <cleanup_stdio+0x34>)
 8007878:	4299      	cmp	r1, r3
 800787a:	b510      	push	{r4, lr}
 800787c:	4604      	mov	r4, r0
 800787e:	d001      	beq.n	8007884 <cleanup_stdio+0x10>
 8007880:	f000 fb36 	bl	8007ef0 <_fflush_r>
 8007884:	68a1      	ldr	r1, [r4, #8]
 8007886:	4b09      	ldr	r3, [pc, #36]	@ (80078ac <cleanup_stdio+0x38>)
 8007888:	4299      	cmp	r1, r3
 800788a:	d002      	beq.n	8007892 <cleanup_stdio+0x1e>
 800788c:	4620      	mov	r0, r4
 800788e:	f000 fb2f 	bl	8007ef0 <_fflush_r>
 8007892:	68e1      	ldr	r1, [r4, #12]
 8007894:	4b06      	ldr	r3, [pc, #24]	@ (80078b0 <cleanup_stdio+0x3c>)
 8007896:	4299      	cmp	r1, r3
 8007898:	d004      	beq.n	80078a4 <cleanup_stdio+0x30>
 800789a:	4620      	mov	r0, r4
 800789c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078a0:	f000 bb26 	b.w	8007ef0 <_fflush_r>
 80078a4:	bd10      	pop	{r4, pc}
 80078a6:	bf00      	nop
 80078a8:	200003b4 	.word	0x200003b4
 80078ac:	2000041c 	.word	0x2000041c
 80078b0:	20000484 	.word	0x20000484

080078b4 <global_stdio_init.part.0>:
 80078b4:	b510      	push	{r4, lr}
 80078b6:	4b0b      	ldr	r3, [pc, #44]	@ (80078e4 <global_stdio_init.part.0+0x30>)
 80078b8:	4c0b      	ldr	r4, [pc, #44]	@ (80078e8 <global_stdio_init.part.0+0x34>)
 80078ba:	4a0c      	ldr	r2, [pc, #48]	@ (80078ec <global_stdio_init.part.0+0x38>)
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	4620      	mov	r0, r4
 80078c0:	2200      	movs	r2, #0
 80078c2:	2104      	movs	r1, #4
 80078c4:	f7ff ff94 	bl	80077f0 <std>
 80078c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078cc:	2201      	movs	r2, #1
 80078ce:	2109      	movs	r1, #9
 80078d0:	f7ff ff8e 	bl	80077f0 <std>
 80078d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078d8:	2202      	movs	r2, #2
 80078da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078de:	2112      	movs	r1, #18
 80078e0:	f7ff bf86 	b.w	80077f0 <std>
 80078e4:	200004ec 	.word	0x200004ec
 80078e8:	200003b4 	.word	0x200003b4
 80078ec:	0800785d 	.word	0x0800785d

080078f0 <__sfp_lock_acquire>:
 80078f0:	4801      	ldr	r0, [pc, #4]	@ (80078f8 <__sfp_lock_acquire+0x8>)
 80078f2:	f000 b958 	b.w	8007ba6 <__retarget_lock_acquire_recursive>
 80078f6:	bf00      	nop
 80078f8:	200004f5 	.word	0x200004f5

080078fc <__sfp_lock_release>:
 80078fc:	4801      	ldr	r0, [pc, #4]	@ (8007904 <__sfp_lock_release+0x8>)
 80078fe:	f000 b953 	b.w	8007ba8 <__retarget_lock_release_recursive>
 8007902:	bf00      	nop
 8007904:	200004f5 	.word	0x200004f5

08007908 <__sinit>:
 8007908:	b510      	push	{r4, lr}
 800790a:	4604      	mov	r4, r0
 800790c:	f7ff fff0 	bl	80078f0 <__sfp_lock_acquire>
 8007910:	6a23      	ldr	r3, [r4, #32]
 8007912:	b11b      	cbz	r3, 800791c <__sinit+0x14>
 8007914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007918:	f7ff bff0 	b.w	80078fc <__sfp_lock_release>
 800791c:	4b04      	ldr	r3, [pc, #16]	@ (8007930 <__sinit+0x28>)
 800791e:	6223      	str	r3, [r4, #32]
 8007920:	4b04      	ldr	r3, [pc, #16]	@ (8007934 <__sinit+0x2c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1f5      	bne.n	8007914 <__sinit+0xc>
 8007928:	f7ff ffc4 	bl	80078b4 <global_stdio_init.part.0>
 800792c:	e7f2      	b.n	8007914 <__sinit+0xc>
 800792e:	bf00      	nop
 8007930:	08007875 	.word	0x08007875
 8007934:	200004ec 	.word	0x200004ec

08007938 <_fwalk_sglue>:
 8007938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800793c:	4607      	mov	r7, r0
 800793e:	4688      	mov	r8, r1
 8007940:	4614      	mov	r4, r2
 8007942:	2600      	movs	r6, #0
 8007944:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007948:	f1b9 0901 	subs.w	r9, r9, #1
 800794c:	d505      	bpl.n	800795a <_fwalk_sglue+0x22>
 800794e:	6824      	ldr	r4, [r4, #0]
 8007950:	2c00      	cmp	r4, #0
 8007952:	d1f7      	bne.n	8007944 <_fwalk_sglue+0xc>
 8007954:	4630      	mov	r0, r6
 8007956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800795a:	89ab      	ldrh	r3, [r5, #12]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d907      	bls.n	8007970 <_fwalk_sglue+0x38>
 8007960:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007964:	3301      	adds	r3, #1
 8007966:	d003      	beq.n	8007970 <_fwalk_sglue+0x38>
 8007968:	4629      	mov	r1, r5
 800796a:	4638      	mov	r0, r7
 800796c:	47c0      	blx	r8
 800796e:	4306      	orrs	r6, r0
 8007970:	3568      	adds	r5, #104	@ 0x68
 8007972:	e7e9      	b.n	8007948 <_fwalk_sglue+0x10>

08007974 <__sread>:
 8007974:	b510      	push	{r4, lr}
 8007976:	460c      	mov	r4, r1
 8007978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800797c:	f000 f8c4 	bl	8007b08 <_read_r>
 8007980:	2800      	cmp	r0, #0
 8007982:	bfab      	itete	ge
 8007984:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007986:	89a3      	ldrhlt	r3, [r4, #12]
 8007988:	181b      	addge	r3, r3, r0
 800798a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800798e:	bfac      	ite	ge
 8007990:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007992:	81a3      	strhlt	r3, [r4, #12]
 8007994:	bd10      	pop	{r4, pc}

08007996 <__swrite>:
 8007996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799a:	461f      	mov	r7, r3
 800799c:	898b      	ldrh	r3, [r1, #12]
 800799e:	05db      	lsls	r3, r3, #23
 80079a0:	4605      	mov	r5, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	4616      	mov	r6, r2
 80079a6:	d505      	bpl.n	80079b4 <__swrite+0x1e>
 80079a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ac:	2302      	movs	r3, #2
 80079ae:	2200      	movs	r2, #0
 80079b0:	f000 f898 	bl	8007ae4 <_lseek_r>
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079be:	81a3      	strh	r3, [r4, #12]
 80079c0:	4632      	mov	r2, r6
 80079c2:	463b      	mov	r3, r7
 80079c4:	4628      	mov	r0, r5
 80079c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ca:	f000 b8af 	b.w	8007b2c <_write_r>

080079ce <__sseek>:
 80079ce:	b510      	push	{r4, lr}
 80079d0:	460c      	mov	r4, r1
 80079d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d6:	f000 f885 	bl	8007ae4 <_lseek_r>
 80079da:	1c43      	adds	r3, r0, #1
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	bf15      	itete	ne
 80079e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079ea:	81a3      	strheq	r3, [r4, #12]
 80079ec:	bf18      	it	ne
 80079ee:	81a3      	strhne	r3, [r4, #12]
 80079f0:	bd10      	pop	{r4, pc}

080079f2 <__sclose>:
 80079f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f6:	f000 b865 	b.w	8007ac4 <_close_r>

080079fa <memset>:
 80079fa:	4402      	add	r2, r0
 80079fc:	4603      	mov	r3, r0
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d100      	bne.n	8007a04 <memset+0xa>
 8007a02:	4770      	bx	lr
 8007a04:	f803 1b01 	strb.w	r1, [r3], #1
 8007a08:	e7f9      	b.n	80079fe <memset+0x4>
	...

08007a0c <strtok>:
 8007a0c:	4b16      	ldr	r3, [pc, #88]	@ (8007a68 <strtok+0x5c>)
 8007a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a12:	681f      	ldr	r7, [r3, #0]
 8007a14:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007a16:	4605      	mov	r5, r0
 8007a18:	460e      	mov	r6, r1
 8007a1a:	b9ec      	cbnz	r4, 8007a58 <strtok+0x4c>
 8007a1c:	2050      	movs	r0, #80	@ 0x50
 8007a1e:	f000 f92d 	bl	8007c7c <malloc>
 8007a22:	4602      	mov	r2, r0
 8007a24:	6478      	str	r0, [r7, #68]	@ 0x44
 8007a26:	b920      	cbnz	r0, 8007a32 <strtok+0x26>
 8007a28:	4b10      	ldr	r3, [pc, #64]	@ (8007a6c <strtok+0x60>)
 8007a2a:	4811      	ldr	r0, [pc, #68]	@ (8007a70 <strtok+0x64>)
 8007a2c:	215b      	movs	r1, #91	@ 0x5b
 8007a2e:	f000 f8bd 	bl	8007bac <__assert_func>
 8007a32:	e9c0 4400 	strd	r4, r4, [r0]
 8007a36:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007a3a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007a3e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007a42:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007a46:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007a4a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007a4e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007a52:	6184      	str	r4, [r0, #24]
 8007a54:	7704      	strb	r4, [r0, #28]
 8007a56:	6244      	str	r4, [r0, #36]	@ 0x24
 8007a58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a64:	f000 b806 	b.w	8007a74 <__strtok_r>
 8007a68:	20000018 	.word	0x20000018
 8007a6c:	08008a58 	.word	0x08008a58
 8007a70:	08008a6f 	.word	0x08008a6f

08007a74 <__strtok_r>:
 8007a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a76:	4604      	mov	r4, r0
 8007a78:	b908      	cbnz	r0, 8007a7e <__strtok_r+0xa>
 8007a7a:	6814      	ldr	r4, [r2, #0]
 8007a7c:	b144      	cbz	r4, 8007a90 <__strtok_r+0x1c>
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007a84:	460f      	mov	r7, r1
 8007a86:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007a8a:	b91e      	cbnz	r6, 8007a94 <__strtok_r+0x20>
 8007a8c:	b965      	cbnz	r5, 8007aa8 <__strtok_r+0x34>
 8007a8e:	6015      	str	r5, [r2, #0]
 8007a90:	2000      	movs	r0, #0
 8007a92:	e005      	b.n	8007aa0 <__strtok_r+0x2c>
 8007a94:	42b5      	cmp	r5, r6
 8007a96:	d1f6      	bne.n	8007a86 <__strtok_r+0x12>
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1f0      	bne.n	8007a7e <__strtok_r+0xa>
 8007a9c:	6014      	str	r4, [r2, #0]
 8007a9e:	7003      	strb	r3, [r0, #0]
 8007aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa2:	461c      	mov	r4, r3
 8007aa4:	e00c      	b.n	8007ac0 <__strtok_r+0x4c>
 8007aa6:	b915      	cbnz	r5, 8007aae <__strtok_r+0x3a>
 8007aa8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007aac:	460e      	mov	r6, r1
 8007aae:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007ab2:	42ab      	cmp	r3, r5
 8007ab4:	d1f7      	bne.n	8007aa6 <__strtok_r+0x32>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0f3      	beq.n	8007aa2 <__strtok_r+0x2e>
 8007aba:	2300      	movs	r3, #0
 8007abc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007ac0:	6014      	str	r4, [r2, #0]
 8007ac2:	e7ed      	b.n	8007aa0 <__strtok_r+0x2c>

08007ac4 <_close_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	4d06      	ldr	r5, [pc, #24]	@ (8007ae0 <_close_r+0x1c>)
 8007ac8:	2300      	movs	r3, #0
 8007aca:	4604      	mov	r4, r0
 8007acc:	4608      	mov	r0, r1
 8007ace:	602b      	str	r3, [r5, #0]
 8007ad0:	f7f9 fdda 	bl	8001688 <_close>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	d102      	bne.n	8007ade <_close_r+0x1a>
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	b103      	cbz	r3, 8007ade <_close_r+0x1a>
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	200004f0 	.word	0x200004f0

08007ae4 <_lseek_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4d07      	ldr	r5, [pc, #28]	@ (8007b04 <_lseek_r+0x20>)
 8007ae8:	4604      	mov	r4, r0
 8007aea:	4608      	mov	r0, r1
 8007aec:	4611      	mov	r1, r2
 8007aee:	2200      	movs	r2, #0
 8007af0:	602a      	str	r2, [r5, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	f7f9 fdef 	bl	80016d6 <_lseek>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_lseek_r+0x1e>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_lseek_r+0x1e>
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	200004f0 	.word	0x200004f0

08007b08 <_read_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d07      	ldr	r5, [pc, #28]	@ (8007b28 <_read_r+0x20>)
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	4608      	mov	r0, r1
 8007b10:	4611      	mov	r1, r2
 8007b12:	2200      	movs	r2, #0
 8007b14:	602a      	str	r2, [r5, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	f7f9 fd7d 	bl	8001616 <_read>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d102      	bne.n	8007b26 <_read_r+0x1e>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	b103      	cbz	r3, 8007b26 <_read_r+0x1e>
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	200004f0 	.word	0x200004f0

08007b2c <_write_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4d07      	ldr	r5, [pc, #28]	@ (8007b4c <_write_r+0x20>)
 8007b30:	4604      	mov	r4, r0
 8007b32:	4608      	mov	r0, r1
 8007b34:	4611      	mov	r1, r2
 8007b36:	2200      	movs	r2, #0
 8007b38:	602a      	str	r2, [r5, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f7f9 fd88 	bl	8001650 <_write>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_write_r+0x1e>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_write_r+0x1e>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	200004f0 	.word	0x200004f0

08007b50 <__errno>:
 8007b50:	4b01      	ldr	r3, [pc, #4]	@ (8007b58 <__errno+0x8>)
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	20000018 	.word	0x20000018

08007b5c <__libc_init_array>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	4d0d      	ldr	r5, [pc, #52]	@ (8007b94 <__libc_init_array+0x38>)
 8007b60:	4c0d      	ldr	r4, [pc, #52]	@ (8007b98 <__libc_init_array+0x3c>)
 8007b62:	1b64      	subs	r4, r4, r5
 8007b64:	10a4      	asrs	r4, r4, #2
 8007b66:	2600      	movs	r6, #0
 8007b68:	42a6      	cmp	r6, r4
 8007b6a:	d109      	bne.n	8007b80 <__libc_init_array+0x24>
 8007b6c:	4d0b      	ldr	r5, [pc, #44]	@ (8007b9c <__libc_init_array+0x40>)
 8007b6e:	4c0c      	ldr	r4, [pc, #48]	@ (8007ba0 <__libc_init_array+0x44>)
 8007b70:	f000 fe3a 	bl	80087e8 <_init>
 8007b74:	1b64      	subs	r4, r4, r5
 8007b76:	10a4      	asrs	r4, r4, #2
 8007b78:	2600      	movs	r6, #0
 8007b7a:	42a6      	cmp	r6, r4
 8007b7c:	d105      	bne.n	8007b8a <__libc_init_array+0x2e>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b84:	4798      	blx	r3
 8007b86:	3601      	adds	r6, #1
 8007b88:	e7ee      	b.n	8007b68 <__libc_init_array+0xc>
 8007b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b8e:	4798      	blx	r3
 8007b90:	3601      	adds	r6, #1
 8007b92:	e7f2      	b.n	8007b7a <__libc_init_array+0x1e>
 8007b94:	08008b40 	.word	0x08008b40
 8007b98:	08008b40 	.word	0x08008b40
 8007b9c:	08008b40 	.word	0x08008b40
 8007ba0:	08008b44 	.word	0x08008b44

08007ba4 <__retarget_lock_init_recursive>:
 8007ba4:	4770      	bx	lr

08007ba6 <__retarget_lock_acquire_recursive>:
 8007ba6:	4770      	bx	lr

08007ba8 <__retarget_lock_release_recursive>:
 8007ba8:	4770      	bx	lr
	...

08007bac <__assert_func>:
 8007bac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bae:	4614      	mov	r4, r2
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4b09      	ldr	r3, [pc, #36]	@ (8007bd8 <__assert_func+0x2c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	68d8      	ldr	r0, [r3, #12]
 8007bba:	b954      	cbnz	r4, 8007bd2 <__assert_func+0x26>
 8007bbc:	4b07      	ldr	r3, [pc, #28]	@ (8007bdc <__assert_func+0x30>)
 8007bbe:	461c      	mov	r4, r3
 8007bc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bc4:	9100      	str	r1, [sp, #0]
 8007bc6:	462b      	mov	r3, r5
 8007bc8:	4905      	ldr	r1, [pc, #20]	@ (8007be0 <__assert_func+0x34>)
 8007bca:	f000 f9b9 	bl	8007f40 <fiprintf>
 8007bce:	f000 f9d9 	bl	8007f84 <abort>
 8007bd2:	4b04      	ldr	r3, [pc, #16]	@ (8007be4 <__assert_func+0x38>)
 8007bd4:	e7f4      	b.n	8007bc0 <__assert_func+0x14>
 8007bd6:	bf00      	nop
 8007bd8:	20000018 	.word	0x20000018
 8007bdc:	08008b04 	.word	0x08008b04
 8007be0:	08008ad6 	.word	0x08008ad6
 8007be4:	08008ac9 	.word	0x08008ac9

08007be8 <_free_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	4605      	mov	r5, r0
 8007bec:	2900      	cmp	r1, #0
 8007bee:	d041      	beq.n	8007c74 <_free_r+0x8c>
 8007bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bf4:	1f0c      	subs	r4, r1, #4
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bfb8      	it	lt
 8007bfa:	18e4      	addlt	r4, r4, r3
 8007bfc:	f000 f8e8 	bl	8007dd0 <__malloc_lock>
 8007c00:	4a1d      	ldr	r2, [pc, #116]	@ (8007c78 <_free_r+0x90>)
 8007c02:	6813      	ldr	r3, [r2, #0]
 8007c04:	b933      	cbnz	r3, 8007c14 <_free_r+0x2c>
 8007c06:	6063      	str	r3, [r4, #4]
 8007c08:	6014      	str	r4, [r2, #0]
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c10:	f000 b8e4 	b.w	8007ddc <__malloc_unlock>
 8007c14:	42a3      	cmp	r3, r4
 8007c16:	d908      	bls.n	8007c2a <_free_r+0x42>
 8007c18:	6820      	ldr	r0, [r4, #0]
 8007c1a:	1821      	adds	r1, r4, r0
 8007c1c:	428b      	cmp	r3, r1
 8007c1e:	bf01      	itttt	eq
 8007c20:	6819      	ldreq	r1, [r3, #0]
 8007c22:	685b      	ldreq	r3, [r3, #4]
 8007c24:	1809      	addeq	r1, r1, r0
 8007c26:	6021      	streq	r1, [r4, #0]
 8007c28:	e7ed      	b.n	8007c06 <_free_r+0x1e>
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	b10b      	cbz	r3, 8007c34 <_free_r+0x4c>
 8007c30:	42a3      	cmp	r3, r4
 8007c32:	d9fa      	bls.n	8007c2a <_free_r+0x42>
 8007c34:	6811      	ldr	r1, [r2, #0]
 8007c36:	1850      	adds	r0, r2, r1
 8007c38:	42a0      	cmp	r0, r4
 8007c3a:	d10b      	bne.n	8007c54 <_free_r+0x6c>
 8007c3c:	6820      	ldr	r0, [r4, #0]
 8007c3e:	4401      	add	r1, r0
 8007c40:	1850      	adds	r0, r2, r1
 8007c42:	4283      	cmp	r3, r0
 8007c44:	6011      	str	r1, [r2, #0]
 8007c46:	d1e0      	bne.n	8007c0a <_free_r+0x22>
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	6053      	str	r3, [r2, #4]
 8007c4e:	4408      	add	r0, r1
 8007c50:	6010      	str	r0, [r2, #0]
 8007c52:	e7da      	b.n	8007c0a <_free_r+0x22>
 8007c54:	d902      	bls.n	8007c5c <_free_r+0x74>
 8007c56:	230c      	movs	r3, #12
 8007c58:	602b      	str	r3, [r5, #0]
 8007c5a:	e7d6      	b.n	8007c0a <_free_r+0x22>
 8007c5c:	6820      	ldr	r0, [r4, #0]
 8007c5e:	1821      	adds	r1, r4, r0
 8007c60:	428b      	cmp	r3, r1
 8007c62:	bf04      	itt	eq
 8007c64:	6819      	ldreq	r1, [r3, #0]
 8007c66:	685b      	ldreq	r3, [r3, #4]
 8007c68:	6063      	str	r3, [r4, #4]
 8007c6a:	bf04      	itt	eq
 8007c6c:	1809      	addeq	r1, r1, r0
 8007c6e:	6021      	streq	r1, [r4, #0]
 8007c70:	6054      	str	r4, [r2, #4]
 8007c72:	e7ca      	b.n	8007c0a <_free_r+0x22>
 8007c74:	bd38      	pop	{r3, r4, r5, pc}
 8007c76:	bf00      	nop
 8007c78:	200004fc 	.word	0x200004fc

08007c7c <malloc>:
 8007c7c:	4b02      	ldr	r3, [pc, #8]	@ (8007c88 <malloc+0xc>)
 8007c7e:	4601      	mov	r1, r0
 8007c80:	6818      	ldr	r0, [r3, #0]
 8007c82:	f000 b825 	b.w	8007cd0 <_malloc_r>
 8007c86:	bf00      	nop
 8007c88:	20000018 	.word	0x20000018

08007c8c <sbrk_aligned>:
 8007c8c:	b570      	push	{r4, r5, r6, lr}
 8007c8e:	4e0f      	ldr	r6, [pc, #60]	@ (8007ccc <sbrk_aligned+0x40>)
 8007c90:	460c      	mov	r4, r1
 8007c92:	6831      	ldr	r1, [r6, #0]
 8007c94:	4605      	mov	r5, r0
 8007c96:	b911      	cbnz	r1, 8007c9e <sbrk_aligned+0x12>
 8007c98:	f000 f964 	bl	8007f64 <_sbrk_r>
 8007c9c:	6030      	str	r0, [r6, #0]
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f000 f95f 	bl	8007f64 <_sbrk_r>
 8007ca6:	1c43      	adds	r3, r0, #1
 8007ca8:	d103      	bne.n	8007cb2 <sbrk_aligned+0x26>
 8007caa:	f04f 34ff 	mov.w	r4, #4294967295
 8007cae:	4620      	mov	r0, r4
 8007cb0:	bd70      	pop	{r4, r5, r6, pc}
 8007cb2:	1cc4      	adds	r4, r0, #3
 8007cb4:	f024 0403 	bic.w	r4, r4, #3
 8007cb8:	42a0      	cmp	r0, r4
 8007cba:	d0f8      	beq.n	8007cae <sbrk_aligned+0x22>
 8007cbc:	1a21      	subs	r1, r4, r0
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f000 f950 	bl	8007f64 <_sbrk_r>
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	d1f2      	bne.n	8007cae <sbrk_aligned+0x22>
 8007cc8:	e7ef      	b.n	8007caa <sbrk_aligned+0x1e>
 8007cca:	bf00      	nop
 8007ccc:	200004f8 	.word	0x200004f8

08007cd0 <_malloc_r>:
 8007cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cd4:	1ccd      	adds	r5, r1, #3
 8007cd6:	f025 0503 	bic.w	r5, r5, #3
 8007cda:	3508      	adds	r5, #8
 8007cdc:	2d0c      	cmp	r5, #12
 8007cde:	bf38      	it	cc
 8007ce0:	250c      	movcc	r5, #12
 8007ce2:	2d00      	cmp	r5, #0
 8007ce4:	4606      	mov	r6, r0
 8007ce6:	db01      	blt.n	8007cec <_malloc_r+0x1c>
 8007ce8:	42a9      	cmp	r1, r5
 8007cea:	d904      	bls.n	8007cf6 <_malloc_r+0x26>
 8007cec:	230c      	movs	r3, #12
 8007cee:	6033      	str	r3, [r6, #0]
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007dcc <_malloc_r+0xfc>
 8007cfa:	f000 f869 	bl	8007dd0 <__malloc_lock>
 8007cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8007d02:	461c      	mov	r4, r3
 8007d04:	bb44      	cbnz	r4, 8007d58 <_malloc_r+0x88>
 8007d06:	4629      	mov	r1, r5
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f7ff ffbf 	bl	8007c8c <sbrk_aligned>
 8007d0e:	1c43      	adds	r3, r0, #1
 8007d10:	4604      	mov	r4, r0
 8007d12:	d158      	bne.n	8007dc6 <_malloc_r+0xf6>
 8007d14:	f8d8 4000 	ldr.w	r4, [r8]
 8007d18:	4627      	mov	r7, r4
 8007d1a:	2f00      	cmp	r7, #0
 8007d1c:	d143      	bne.n	8007da6 <_malloc_r+0xd6>
 8007d1e:	2c00      	cmp	r4, #0
 8007d20:	d04b      	beq.n	8007dba <_malloc_r+0xea>
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	4639      	mov	r1, r7
 8007d26:	4630      	mov	r0, r6
 8007d28:	eb04 0903 	add.w	r9, r4, r3
 8007d2c:	f000 f91a 	bl	8007f64 <_sbrk_r>
 8007d30:	4581      	cmp	r9, r0
 8007d32:	d142      	bne.n	8007dba <_malloc_r+0xea>
 8007d34:	6821      	ldr	r1, [r4, #0]
 8007d36:	1a6d      	subs	r5, r5, r1
 8007d38:	4629      	mov	r1, r5
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f7ff ffa6 	bl	8007c8c <sbrk_aligned>
 8007d40:	3001      	adds	r0, #1
 8007d42:	d03a      	beq.n	8007dba <_malloc_r+0xea>
 8007d44:	6823      	ldr	r3, [r4, #0]
 8007d46:	442b      	add	r3, r5
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	bb62      	cbnz	r2, 8007dac <_malloc_r+0xdc>
 8007d52:	f8c8 7000 	str.w	r7, [r8]
 8007d56:	e00f      	b.n	8007d78 <_malloc_r+0xa8>
 8007d58:	6822      	ldr	r2, [r4, #0]
 8007d5a:	1b52      	subs	r2, r2, r5
 8007d5c:	d420      	bmi.n	8007da0 <_malloc_r+0xd0>
 8007d5e:	2a0b      	cmp	r2, #11
 8007d60:	d917      	bls.n	8007d92 <_malloc_r+0xc2>
 8007d62:	1961      	adds	r1, r4, r5
 8007d64:	42a3      	cmp	r3, r4
 8007d66:	6025      	str	r5, [r4, #0]
 8007d68:	bf18      	it	ne
 8007d6a:	6059      	strne	r1, [r3, #4]
 8007d6c:	6863      	ldr	r3, [r4, #4]
 8007d6e:	bf08      	it	eq
 8007d70:	f8c8 1000 	streq.w	r1, [r8]
 8007d74:	5162      	str	r2, [r4, r5]
 8007d76:	604b      	str	r3, [r1, #4]
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f000 f82f 	bl	8007ddc <__malloc_unlock>
 8007d7e:	f104 000b 	add.w	r0, r4, #11
 8007d82:	1d23      	adds	r3, r4, #4
 8007d84:	f020 0007 	bic.w	r0, r0, #7
 8007d88:	1ac2      	subs	r2, r0, r3
 8007d8a:	bf1c      	itt	ne
 8007d8c:	1a1b      	subne	r3, r3, r0
 8007d8e:	50a3      	strne	r3, [r4, r2]
 8007d90:	e7af      	b.n	8007cf2 <_malloc_r+0x22>
 8007d92:	6862      	ldr	r2, [r4, #4]
 8007d94:	42a3      	cmp	r3, r4
 8007d96:	bf0c      	ite	eq
 8007d98:	f8c8 2000 	streq.w	r2, [r8]
 8007d9c:	605a      	strne	r2, [r3, #4]
 8007d9e:	e7eb      	b.n	8007d78 <_malloc_r+0xa8>
 8007da0:	4623      	mov	r3, r4
 8007da2:	6864      	ldr	r4, [r4, #4]
 8007da4:	e7ae      	b.n	8007d04 <_malloc_r+0x34>
 8007da6:	463c      	mov	r4, r7
 8007da8:	687f      	ldr	r7, [r7, #4]
 8007daa:	e7b6      	b.n	8007d1a <_malloc_r+0x4a>
 8007dac:	461a      	mov	r2, r3
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	42a3      	cmp	r3, r4
 8007db2:	d1fb      	bne.n	8007dac <_malloc_r+0xdc>
 8007db4:	2300      	movs	r3, #0
 8007db6:	6053      	str	r3, [r2, #4]
 8007db8:	e7de      	b.n	8007d78 <_malloc_r+0xa8>
 8007dba:	230c      	movs	r3, #12
 8007dbc:	6033      	str	r3, [r6, #0]
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f000 f80c 	bl	8007ddc <__malloc_unlock>
 8007dc4:	e794      	b.n	8007cf0 <_malloc_r+0x20>
 8007dc6:	6005      	str	r5, [r0, #0]
 8007dc8:	e7d6      	b.n	8007d78 <_malloc_r+0xa8>
 8007dca:	bf00      	nop
 8007dcc:	200004fc 	.word	0x200004fc

08007dd0 <__malloc_lock>:
 8007dd0:	4801      	ldr	r0, [pc, #4]	@ (8007dd8 <__malloc_lock+0x8>)
 8007dd2:	f7ff bee8 	b.w	8007ba6 <__retarget_lock_acquire_recursive>
 8007dd6:	bf00      	nop
 8007dd8:	200004f4 	.word	0x200004f4

08007ddc <__malloc_unlock>:
 8007ddc:	4801      	ldr	r0, [pc, #4]	@ (8007de4 <__malloc_unlock+0x8>)
 8007dde:	f7ff bee3 	b.w	8007ba8 <__retarget_lock_release_recursive>
 8007de2:	bf00      	nop
 8007de4:	200004f4 	.word	0x200004f4

08007de8 <__sflush_r>:
 8007de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df0:	0716      	lsls	r6, r2, #28
 8007df2:	4605      	mov	r5, r0
 8007df4:	460c      	mov	r4, r1
 8007df6:	d454      	bmi.n	8007ea2 <__sflush_r+0xba>
 8007df8:	684b      	ldr	r3, [r1, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	dc02      	bgt.n	8007e04 <__sflush_r+0x1c>
 8007dfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	dd48      	ble.n	8007e96 <__sflush_r+0xae>
 8007e04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e06:	2e00      	cmp	r6, #0
 8007e08:	d045      	beq.n	8007e96 <__sflush_r+0xae>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e10:	682f      	ldr	r7, [r5, #0]
 8007e12:	6a21      	ldr	r1, [r4, #32]
 8007e14:	602b      	str	r3, [r5, #0]
 8007e16:	d030      	beq.n	8007e7a <__sflush_r+0x92>
 8007e18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	0759      	lsls	r1, r3, #29
 8007e1e:	d505      	bpl.n	8007e2c <__sflush_r+0x44>
 8007e20:	6863      	ldr	r3, [r4, #4]
 8007e22:	1ad2      	subs	r2, r2, r3
 8007e24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e26:	b10b      	cbz	r3, 8007e2c <__sflush_r+0x44>
 8007e28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e2a:	1ad2      	subs	r2, r2, r3
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e30:	6a21      	ldr	r1, [r4, #32]
 8007e32:	4628      	mov	r0, r5
 8007e34:	47b0      	blx	r6
 8007e36:	1c43      	adds	r3, r0, #1
 8007e38:	89a3      	ldrh	r3, [r4, #12]
 8007e3a:	d106      	bne.n	8007e4a <__sflush_r+0x62>
 8007e3c:	6829      	ldr	r1, [r5, #0]
 8007e3e:	291d      	cmp	r1, #29
 8007e40:	d82b      	bhi.n	8007e9a <__sflush_r+0xb2>
 8007e42:	4a2a      	ldr	r2, [pc, #168]	@ (8007eec <__sflush_r+0x104>)
 8007e44:	410a      	asrs	r2, r1
 8007e46:	07d6      	lsls	r6, r2, #31
 8007e48:	d427      	bmi.n	8007e9a <__sflush_r+0xb2>
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	6062      	str	r2, [r4, #4]
 8007e4e:	04d9      	lsls	r1, r3, #19
 8007e50:	6922      	ldr	r2, [r4, #16]
 8007e52:	6022      	str	r2, [r4, #0]
 8007e54:	d504      	bpl.n	8007e60 <__sflush_r+0x78>
 8007e56:	1c42      	adds	r2, r0, #1
 8007e58:	d101      	bne.n	8007e5e <__sflush_r+0x76>
 8007e5a:	682b      	ldr	r3, [r5, #0]
 8007e5c:	b903      	cbnz	r3, 8007e60 <__sflush_r+0x78>
 8007e5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e62:	602f      	str	r7, [r5, #0]
 8007e64:	b1b9      	cbz	r1, 8007e96 <__sflush_r+0xae>
 8007e66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e6a:	4299      	cmp	r1, r3
 8007e6c:	d002      	beq.n	8007e74 <__sflush_r+0x8c>
 8007e6e:	4628      	mov	r0, r5
 8007e70:	f7ff feba 	bl	8007be8 <_free_r>
 8007e74:	2300      	movs	r3, #0
 8007e76:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e78:	e00d      	b.n	8007e96 <__sflush_r+0xae>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	47b0      	blx	r6
 8007e80:	4602      	mov	r2, r0
 8007e82:	1c50      	adds	r0, r2, #1
 8007e84:	d1c9      	bne.n	8007e1a <__sflush_r+0x32>
 8007e86:	682b      	ldr	r3, [r5, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d0c6      	beq.n	8007e1a <__sflush_r+0x32>
 8007e8c:	2b1d      	cmp	r3, #29
 8007e8e:	d001      	beq.n	8007e94 <__sflush_r+0xac>
 8007e90:	2b16      	cmp	r3, #22
 8007e92:	d11e      	bne.n	8007ed2 <__sflush_r+0xea>
 8007e94:	602f      	str	r7, [r5, #0]
 8007e96:	2000      	movs	r0, #0
 8007e98:	e022      	b.n	8007ee0 <__sflush_r+0xf8>
 8007e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e9e:	b21b      	sxth	r3, r3
 8007ea0:	e01b      	b.n	8007eda <__sflush_r+0xf2>
 8007ea2:	690f      	ldr	r7, [r1, #16]
 8007ea4:	2f00      	cmp	r7, #0
 8007ea6:	d0f6      	beq.n	8007e96 <__sflush_r+0xae>
 8007ea8:	0793      	lsls	r3, r2, #30
 8007eaa:	680e      	ldr	r6, [r1, #0]
 8007eac:	bf08      	it	eq
 8007eae:	694b      	ldreq	r3, [r1, #20]
 8007eb0:	600f      	str	r7, [r1, #0]
 8007eb2:	bf18      	it	ne
 8007eb4:	2300      	movne	r3, #0
 8007eb6:	eba6 0807 	sub.w	r8, r6, r7
 8007eba:	608b      	str	r3, [r1, #8]
 8007ebc:	f1b8 0f00 	cmp.w	r8, #0
 8007ec0:	dde9      	ble.n	8007e96 <__sflush_r+0xae>
 8007ec2:	6a21      	ldr	r1, [r4, #32]
 8007ec4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007ec6:	4643      	mov	r3, r8
 8007ec8:	463a      	mov	r2, r7
 8007eca:	4628      	mov	r0, r5
 8007ecc:	47b0      	blx	r6
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	dc08      	bgt.n	8007ee4 <__sflush_r+0xfc>
 8007ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eda:	81a3      	strh	r3, [r4, #12]
 8007edc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee4:	4407      	add	r7, r0
 8007ee6:	eba8 0800 	sub.w	r8, r8, r0
 8007eea:	e7e7      	b.n	8007ebc <__sflush_r+0xd4>
 8007eec:	dfbffffe 	.word	0xdfbffffe

08007ef0 <_fflush_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	690b      	ldr	r3, [r1, #16]
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	b913      	cbnz	r3, 8007f00 <_fflush_r+0x10>
 8007efa:	2500      	movs	r5, #0
 8007efc:	4628      	mov	r0, r5
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	b118      	cbz	r0, 8007f0a <_fflush_r+0x1a>
 8007f02:	6a03      	ldr	r3, [r0, #32]
 8007f04:	b90b      	cbnz	r3, 8007f0a <_fflush_r+0x1a>
 8007f06:	f7ff fcff 	bl	8007908 <__sinit>
 8007f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0f3      	beq.n	8007efa <_fflush_r+0xa>
 8007f12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f14:	07d0      	lsls	r0, r2, #31
 8007f16:	d404      	bmi.n	8007f22 <_fflush_r+0x32>
 8007f18:	0599      	lsls	r1, r3, #22
 8007f1a:	d402      	bmi.n	8007f22 <_fflush_r+0x32>
 8007f1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f1e:	f7ff fe42 	bl	8007ba6 <__retarget_lock_acquire_recursive>
 8007f22:	4628      	mov	r0, r5
 8007f24:	4621      	mov	r1, r4
 8007f26:	f7ff ff5f 	bl	8007de8 <__sflush_r>
 8007f2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f2c:	07da      	lsls	r2, r3, #31
 8007f2e:	4605      	mov	r5, r0
 8007f30:	d4e4      	bmi.n	8007efc <_fflush_r+0xc>
 8007f32:	89a3      	ldrh	r3, [r4, #12]
 8007f34:	059b      	lsls	r3, r3, #22
 8007f36:	d4e1      	bmi.n	8007efc <_fflush_r+0xc>
 8007f38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f3a:	f7ff fe35 	bl	8007ba8 <__retarget_lock_release_recursive>
 8007f3e:	e7dd      	b.n	8007efc <_fflush_r+0xc>

08007f40 <fiprintf>:
 8007f40:	b40e      	push	{r1, r2, r3}
 8007f42:	b503      	push	{r0, r1, lr}
 8007f44:	4601      	mov	r1, r0
 8007f46:	ab03      	add	r3, sp, #12
 8007f48:	4805      	ldr	r0, [pc, #20]	@ (8007f60 <fiprintf+0x20>)
 8007f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f4e:	6800      	ldr	r0, [r0, #0]
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	f000 f847 	bl	8007fe4 <_vfiprintf_r>
 8007f56:	b002      	add	sp, #8
 8007f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f5c:	b003      	add	sp, #12
 8007f5e:	4770      	bx	lr
 8007f60:	20000018 	.word	0x20000018

08007f64 <_sbrk_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4d06      	ldr	r5, [pc, #24]	@ (8007f80 <_sbrk_r+0x1c>)
 8007f68:	2300      	movs	r3, #0
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	4608      	mov	r0, r1
 8007f6e:	602b      	str	r3, [r5, #0]
 8007f70:	f7f9 fbbe 	bl	80016f0 <_sbrk>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <_sbrk_r+0x1a>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	b103      	cbz	r3, 8007f7e <_sbrk_r+0x1a>
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	200004f0 	.word	0x200004f0

08007f84 <abort>:
 8007f84:	b508      	push	{r3, lr}
 8007f86:	2006      	movs	r0, #6
 8007f88:	f000 fb8e 	bl	80086a8 <raise>
 8007f8c:	2001      	movs	r0, #1
 8007f8e:	f7f9 fb37 	bl	8001600 <_exit>

08007f92 <__sfputc_r>:
 8007f92:	6893      	ldr	r3, [r2, #8]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	b410      	push	{r4}
 8007f9a:	6093      	str	r3, [r2, #8]
 8007f9c:	da08      	bge.n	8007fb0 <__sfputc_r+0x1e>
 8007f9e:	6994      	ldr	r4, [r2, #24]
 8007fa0:	42a3      	cmp	r3, r4
 8007fa2:	db01      	blt.n	8007fa8 <__sfputc_r+0x16>
 8007fa4:	290a      	cmp	r1, #10
 8007fa6:	d103      	bne.n	8007fb0 <__sfputc_r+0x1e>
 8007fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fac:	f000 bac0 	b.w	8008530 <__swbuf_r>
 8007fb0:	6813      	ldr	r3, [r2, #0]
 8007fb2:	1c58      	adds	r0, r3, #1
 8007fb4:	6010      	str	r0, [r2, #0]
 8007fb6:	7019      	strb	r1, [r3, #0]
 8007fb8:	4608      	mov	r0, r1
 8007fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <__sfputs_r>:
 8007fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	460f      	mov	r7, r1
 8007fc6:	4614      	mov	r4, r2
 8007fc8:	18d5      	adds	r5, r2, r3
 8007fca:	42ac      	cmp	r4, r5
 8007fcc:	d101      	bne.n	8007fd2 <__sfputs_r+0x12>
 8007fce:	2000      	movs	r0, #0
 8007fd0:	e007      	b.n	8007fe2 <__sfputs_r+0x22>
 8007fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd6:	463a      	mov	r2, r7
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f7ff ffda 	bl	8007f92 <__sfputc_r>
 8007fde:	1c43      	adds	r3, r0, #1
 8007fe0:	d1f3      	bne.n	8007fca <__sfputs_r+0xa>
 8007fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fe4 <_vfiprintf_r>:
 8007fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe8:	460d      	mov	r5, r1
 8007fea:	b09d      	sub	sp, #116	@ 0x74
 8007fec:	4614      	mov	r4, r2
 8007fee:	4698      	mov	r8, r3
 8007ff0:	4606      	mov	r6, r0
 8007ff2:	b118      	cbz	r0, 8007ffc <_vfiprintf_r+0x18>
 8007ff4:	6a03      	ldr	r3, [r0, #32]
 8007ff6:	b90b      	cbnz	r3, 8007ffc <_vfiprintf_r+0x18>
 8007ff8:	f7ff fc86 	bl	8007908 <__sinit>
 8007ffc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ffe:	07d9      	lsls	r1, r3, #31
 8008000:	d405      	bmi.n	800800e <_vfiprintf_r+0x2a>
 8008002:	89ab      	ldrh	r3, [r5, #12]
 8008004:	059a      	lsls	r2, r3, #22
 8008006:	d402      	bmi.n	800800e <_vfiprintf_r+0x2a>
 8008008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800800a:	f7ff fdcc 	bl	8007ba6 <__retarget_lock_acquire_recursive>
 800800e:	89ab      	ldrh	r3, [r5, #12]
 8008010:	071b      	lsls	r3, r3, #28
 8008012:	d501      	bpl.n	8008018 <_vfiprintf_r+0x34>
 8008014:	692b      	ldr	r3, [r5, #16]
 8008016:	b99b      	cbnz	r3, 8008040 <_vfiprintf_r+0x5c>
 8008018:	4629      	mov	r1, r5
 800801a:	4630      	mov	r0, r6
 800801c:	f000 fac6 	bl	80085ac <__swsetup_r>
 8008020:	b170      	cbz	r0, 8008040 <_vfiprintf_r+0x5c>
 8008022:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008024:	07dc      	lsls	r4, r3, #31
 8008026:	d504      	bpl.n	8008032 <_vfiprintf_r+0x4e>
 8008028:	f04f 30ff 	mov.w	r0, #4294967295
 800802c:	b01d      	add	sp, #116	@ 0x74
 800802e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008032:	89ab      	ldrh	r3, [r5, #12]
 8008034:	0598      	lsls	r0, r3, #22
 8008036:	d4f7      	bmi.n	8008028 <_vfiprintf_r+0x44>
 8008038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800803a:	f7ff fdb5 	bl	8007ba8 <__retarget_lock_release_recursive>
 800803e:	e7f3      	b.n	8008028 <_vfiprintf_r+0x44>
 8008040:	2300      	movs	r3, #0
 8008042:	9309      	str	r3, [sp, #36]	@ 0x24
 8008044:	2320      	movs	r3, #32
 8008046:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800804a:	f8cd 800c 	str.w	r8, [sp, #12]
 800804e:	2330      	movs	r3, #48	@ 0x30
 8008050:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008200 <_vfiprintf_r+0x21c>
 8008054:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008058:	f04f 0901 	mov.w	r9, #1
 800805c:	4623      	mov	r3, r4
 800805e:	469a      	mov	sl, r3
 8008060:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008064:	b10a      	cbz	r2, 800806a <_vfiprintf_r+0x86>
 8008066:	2a25      	cmp	r2, #37	@ 0x25
 8008068:	d1f9      	bne.n	800805e <_vfiprintf_r+0x7a>
 800806a:	ebba 0b04 	subs.w	fp, sl, r4
 800806e:	d00b      	beq.n	8008088 <_vfiprintf_r+0xa4>
 8008070:	465b      	mov	r3, fp
 8008072:	4622      	mov	r2, r4
 8008074:	4629      	mov	r1, r5
 8008076:	4630      	mov	r0, r6
 8008078:	f7ff ffa2 	bl	8007fc0 <__sfputs_r>
 800807c:	3001      	adds	r0, #1
 800807e:	f000 80a7 	beq.w	80081d0 <_vfiprintf_r+0x1ec>
 8008082:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008084:	445a      	add	r2, fp
 8008086:	9209      	str	r2, [sp, #36]	@ 0x24
 8008088:	f89a 3000 	ldrb.w	r3, [sl]
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 809f 	beq.w	80081d0 <_vfiprintf_r+0x1ec>
 8008092:	2300      	movs	r3, #0
 8008094:	f04f 32ff 	mov.w	r2, #4294967295
 8008098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800809c:	f10a 0a01 	add.w	sl, sl, #1
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	9307      	str	r3, [sp, #28]
 80080a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80080aa:	4654      	mov	r4, sl
 80080ac:	2205      	movs	r2, #5
 80080ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b2:	4853      	ldr	r0, [pc, #332]	@ (8008200 <_vfiprintf_r+0x21c>)
 80080b4:	f7f8 f8c4 	bl	8000240 <memchr>
 80080b8:	9a04      	ldr	r2, [sp, #16]
 80080ba:	b9d8      	cbnz	r0, 80080f4 <_vfiprintf_r+0x110>
 80080bc:	06d1      	lsls	r1, r2, #27
 80080be:	bf44      	itt	mi
 80080c0:	2320      	movmi	r3, #32
 80080c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080c6:	0713      	lsls	r3, r2, #28
 80080c8:	bf44      	itt	mi
 80080ca:	232b      	movmi	r3, #43	@ 0x2b
 80080cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080d0:	f89a 3000 	ldrb.w	r3, [sl]
 80080d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80080d6:	d015      	beq.n	8008104 <_vfiprintf_r+0x120>
 80080d8:	9a07      	ldr	r2, [sp, #28]
 80080da:	4654      	mov	r4, sl
 80080dc:	2000      	movs	r0, #0
 80080de:	f04f 0c0a 	mov.w	ip, #10
 80080e2:	4621      	mov	r1, r4
 80080e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080e8:	3b30      	subs	r3, #48	@ 0x30
 80080ea:	2b09      	cmp	r3, #9
 80080ec:	d94b      	bls.n	8008186 <_vfiprintf_r+0x1a2>
 80080ee:	b1b0      	cbz	r0, 800811e <_vfiprintf_r+0x13a>
 80080f0:	9207      	str	r2, [sp, #28]
 80080f2:	e014      	b.n	800811e <_vfiprintf_r+0x13a>
 80080f4:	eba0 0308 	sub.w	r3, r0, r8
 80080f8:	fa09 f303 	lsl.w	r3, r9, r3
 80080fc:	4313      	orrs	r3, r2
 80080fe:	9304      	str	r3, [sp, #16]
 8008100:	46a2      	mov	sl, r4
 8008102:	e7d2      	b.n	80080aa <_vfiprintf_r+0xc6>
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	1d19      	adds	r1, r3, #4
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	9103      	str	r1, [sp, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	bfbb      	ittet	lt
 8008110:	425b      	neglt	r3, r3
 8008112:	f042 0202 	orrlt.w	r2, r2, #2
 8008116:	9307      	strge	r3, [sp, #28]
 8008118:	9307      	strlt	r3, [sp, #28]
 800811a:	bfb8      	it	lt
 800811c:	9204      	strlt	r2, [sp, #16]
 800811e:	7823      	ldrb	r3, [r4, #0]
 8008120:	2b2e      	cmp	r3, #46	@ 0x2e
 8008122:	d10a      	bne.n	800813a <_vfiprintf_r+0x156>
 8008124:	7863      	ldrb	r3, [r4, #1]
 8008126:	2b2a      	cmp	r3, #42	@ 0x2a
 8008128:	d132      	bne.n	8008190 <_vfiprintf_r+0x1ac>
 800812a:	9b03      	ldr	r3, [sp, #12]
 800812c:	1d1a      	adds	r2, r3, #4
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	9203      	str	r2, [sp, #12]
 8008132:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008136:	3402      	adds	r4, #2
 8008138:	9305      	str	r3, [sp, #20]
 800813a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008210 <_vfiprintf_r+0x22c>
 800813e:	7821      	ldrb	r1, [r4, #0]
 8008140:	2203      	movs	r2, #3
 8008142:	4650      	mov	r0, sl
 8008144:	f7f8 f87c 	bl	8000240 <memchr>
 8008148:	b138      	cbz	r0, 800815a <_vfiprintf_r+0x176>
 800814a:	9b04      	ldr	r3, [sp, #16]
 800814c:	eba0 000a 	sub.w	r0, r0, sl
 8008150:	2240      	movs	r2, #64	@ 0x40
 8008152:	4082      	lsls	r2, r0
 8008154:	4313      	orrs	r3, r2
 8008156:	3401      	adds	r4, #1
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815e:	4829      	ldr	r0, [pc, #164]	@ (8008204 <_vfiprintf_r+0x220>)
 8008160:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008164:	2206      	movs	r2, #6
 8008166:	f7f8 f86b 	bl	8000240 <memchr>
 800816a:	2800      	cmp	r0, #0
 800816c:	d03f      	beq.n	80081ee <_vfiprintf_r+0x20a>
 800816e:	4b26      	ldr	r3, [pc, #152]	@ (8008208 <_vfiprintf_r+0x224>)
 8008170:	bb1b      	cbnz	r3, 80081ba <_vfiprintf_r+0x1d6>
 8008172:	9b03      	ldr	r3, [sp, #12]
 8008174:	3307      	adds	r3, #7
 8008176:	f023 0307 	bic.w	r3, r3, #7
 800817a:	3308      	adds	r3, #8
 800817c:	9303      	str	r3, [sp, #12]
 800817e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008180:	443b      	add	r3, r7
 8008182:	9309      	str	r3, [sp, #36]	@ 0x24
 8008184:	e76a      	b.n	800805c <_vfiprintf_r+0x78>
 8008186:	fb0c 3202 	mla	r2, ip, r2, r3
 800818a:	460c      	mov	r4, r1
 800818c:	2001      	movs	r0, #1
 800818e:	e7a8      	b.n	80080e2 <_vfiprintf_r+0xfe>
 8008190:	2300      	movs	r3, #0
 8008192:	3401      	adds	r4, #1
 8008194:	9305      	str	r3, [sp, #20]
 8008196:	4619      	mov	r1, r3
 8008198:	f04f 0c0a 	mov.w	ip, #10
 800819c:	4620      	mov	r0, r4
 800819e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081a2:	3a30      	subs	r2, #48	@ 0x30
 80081a4:	2a09      	cmp	r2, #9
 80081a6:	d903      	bls.n	80081b0 <_vfiprintf_r+0x1cc>
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d0c6      	beq.n	800813a <_vfiprintf_r+0x156>
 80081ac:	9105      	str	r1, [sp, #20]
 80081ae:	e7c4      	b.n	800813a <_vfiprintf_r+0x156>
 80081b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80081b4:	4604      	mov	r4, r0
 80081b6:	2301      	movs	r3, #1
 80081b8:	e7f0      	b.n	800819c <_vfiprintf_r+0x1b8>
 80081ba:	ab03      	add	r3, sp, #12
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	462a      	mov	r2, r5
 80081c0:	4b12      	ldr	r3, [pc, #72]	@ (800820c <_vfiprintf_r+0x228>)
 80081c2:	a904      	add	r1, sp, #16
 80081c4:	4630      	mov	r0, r6
 80081c6:	f3af 8000 	nop.w
 80081ca:	4607      	mov	r7, r0
 80081cc:	1c78      	adds	r0, r7, #1
 80081ce:	d1d6      	bne.n	800817e <_vfiprintf_r+0x19a>
 80081d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081d2:	07d9      	lsls	r1, r3, #31
 80081d4:	d405      	bmi.n	80081e2 <_vfiprintf_r+0x1fe>
 80081d6:	89ab      	ldrh	r3, [r5, #12]
 80081d8:	059a      	lsls	r2, r3, #22
 80081da:	d402      	bmi.n	80081e2 <_vfiprintf_r+0x1fe>
 80081dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081de:	f7ff fce3 	bl	8007ba8 <__retarget_lock_release_recursive>
 80081e2:	89ab      	ldrh	r3, [r5, #12]
 80081e4:	065b      	lsls	r3, r3, #25
 80081e6:	f53f af1f 	bmi.w	8008028 <_vfiprintf_r+0x44>
 80081ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081ec:	e71e      	b.n	800802c <_vfiprintf_r+0x48>
 80081ee:	ab03      	add	r3, sp, #12
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	462a      	mov	r2, r5
 80081f4:	4b05      	ldr	r3, [pc, #20]	@ (800820c <_vfiprintf_r+0x228>)
 80081f6:	a904      	add	r1, sp, #16
 80081f8:	4630      	mov	r0, r6
 80081fa:	f000 f879 	bl	80082f0 <_printf_i>
 80081fe:	e7e4      	b.n	80081ca <_vfiprintf_r+0x1e6>
 8008200:	08008b05 	.word	0x08008b05
 8008204:	08008b0f 	.word	0x08008b0f
 8008208:	00000000 	.word	0x00000000
 800820c:	08007fc1 	.word	0x08007fc1
 8008210:	08008b0b 	.word	0x08008b0b

08008214 <_printf_common>:
 8008214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008218:	4616      	mov	r6, r2
 800821a:	4698      	mov	r8, r3
 800821c:	688a      	ldr	r2, [r1, #8]
 800821e:	690b      	ldr	r3, [r1, #16]
 8008220:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008224:	4293      	cmp	r3, r2
 8008226:	bfb8      	it	lt
 8008228:	4613      	movlt	r3, r2
 800822a:	6033      	str	r3, [r6, #0]
 800822c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008230:	4607      	mov	r7, r0
 8008232:	460c      	mov	r4, r1
 8008234:	b10a      	cbz	r2, 800823a <_printf_common+0x26>
 8008236:	3301      	adds	r3, #1
 8008238:	6033      	str	r3, [r6, #0]
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	0699      	lsls	r1, r3, #26
 800823e:	bf42      	ittt	mi
 8008240:	6833      	ldrmi	r3, [r6, #0]
 8008242:	3302      	addmi	r3, #2
 8008244:	6033      	strmi	r3, [r6, #0]
 8008246:	6825      	ldr	r5, [r4, #0]
 8008248:	f015 0506 	ands.w	r5, r5, #6
 800824c:	d106      	bne.n	800825c <_printf_common+0x48>
 800824e:	f104 0a19 	add.w	sl, r4, #25
 8008252:	68e3      	ldr	r3, [r4, #12]
 8008254:	6832      	ldr	r2, [r6, #0]
 8008256:	1a9b      	subs	r3, r3, r2
 8008258:	42ab      	cmp	r3, r5
 800825a:	dc26      	bgt.n	80082aa <_printf_common+0x96>
 800825c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008260:	6822      	ldr	r2, [r4, #0]
 8008262:	3b00      	subs	r3, #0
 8008264:	bf18      	it	ne
 8008266:	2301      	movne	r3, #1
 8008268:	0692      	lsls	r2, r2, #26
 800826a:	d42b      	bmi.n	80082c4 <_printf_common+0xb0>
 800826c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008270:	4641      	mov	r1, r8
 8008272:	4638      	mov	r0, r7
 8008274:	47c8      	blx	r9
 8008276:	3001      	adds	r0, #1
 8008278:	d01e      	beq.n	80082b8 <_printf_common+0xa4>
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	6922      	ldr	r2, [r4, #16]
 800827e:	f003 0306 	and.w	r3, r3, #6
 8008282:	2b04      	cmp	r3, #4
 8008284:	bf02      	ittt	eq
 8008286:	68e5      	ldreq	r5, [r4, #12]
 8008288:	6833      	ldreq	r3, [r6, #0]
 800828a:	1aed      	subeq	r5, r5, r3
 800828c:	68a3      	ldr	r3, [r4, #8]
 800828e:	bf0c      	ite	eq
 8008290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008294:	2500      	movne	r5, #0
 8008296:	4293      	cmp	r3, r2
 8008298:	bfc4      	itt	gt
 800829a:	1a9b      	subgt	r3, r3, r2
 800829c:	18ed      	addgt	r5, r5, r3
 800829e:	2600      	movs	r6, #0
 80082a0:	341a      	adds	r4, #26
 80082a2:	42b5      	cmp	r5, r6
 80082a4:	d11a      	bne.n	80082dc <_printf_common+0xc8>
 80082a6:	2000      	movs	r0, #0
 80082a8:	e008      	b.n	80082bc <_printf_common+0xa8>
 80082aa:	2301      	movs	r3, #1
 80082ac:	4652      	mov	r2, sl
 80082ae:	4641      	mov	r1, r8
 80082b0:	4638      	mov	r0, r7
 80082b2:	47c8      	blx	r9
 80082b4:	3001      	adds	r0, #1
 80082b6:	d103      	bne.n	80082c0 <_printf_common+0xac>
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c0:	3501      	adds	r5, #1
 80082c2:	e7c6      	b.n	8008252 <_printf_common+0x3e>
 80082c4:	18e1      	adds	r1, r4, r3
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	2030      	movs	r0, #48	@ 0x30
 80082ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082ce:	4422      	add	r2, r4
 80082d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082d8:	3302      	adds	r3, #2
 80082da:	e7c7      	b.n	800826c <_printf_common+0x58>
 80082dc:	2301      	movs	r3, #1
 80082de:	4622      	mov	r2, r4
 80082e0:	4641      	mov	r1, r8
 80082e2:	4638      	mov	r0, r7
 80082e4:	47c8      	blx	r9
 80082e6:	3001      	adds	r0, #1
 80082e8:	d0e6      	beq.n	80082b8 <_printf_common+0xa4>
 80082ea:	3601      	adds	r6, #1
 80082ec:	e7d9      	b.n	80082a2 <_printf_common+0x8e>
	...

080082f0 <_printf_i>:
 80082f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082f4:	7e0f      	ldrb	r7, [r1, #24]
 80082f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082f8:	2f78      	cmp	r7, #120	@ 0x78
 80082fa:	4691      	mov	r9, r2
 80082fc:	4680      	mov	r8, r0
 80082fe:	460c      	mov	r4, r1
 8008300:	469a      	mov	sl, r3
 8008302:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008306:	d807      	bhi.n	8008318 <_printf_i+0x28>
 8008308:	2f62      	cmp	r7, #98	@ 0x62
 800830a:	d80a      	bhi.n	8008322 <_printf_i+0x32>
 800830c:	2f00      	cmp	r7, #0
 800830e:	f000 80d2 	beq.w	80084b6 <_printf_i+0x1c6>
 8008312:	2f58      	cmp	r7, #88	@ 0x58
 8008314:	f000 80b9 	beq.w	800848a <_printf_i+0x19a>
 8008318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800831c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008320:	e03a      	b.n	8008398 <_printf_i+0xa8>
 8008322:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008326:	2b15      	cmp	r3, #21
 8008328:	d8f6      	bhi.n	8008318 <_printf_i+0x28>
 800832a:	a101      	add	r1, pc, #4	@ (adr r1, 8008330 <_printf_i+0x40>)
 800832c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008330:	08008389 	.word	0x08008389
 8008334:	0800839d 	.word	0x0800839d
 8008338:	08008319 	.word	0x08008319
 800833c:	08008319 	.word	0x08008319
 8008340:	08008319 	.word	0x08008319
 8008344:	08008319 	.word	0x08008319
 8008348:	0800839d 	.word	0x0800839d
 800834c:	08008319 	.word	0x08008319
 8008350:	08008319 	.word	0x08008319
 8008354:	08008319 	.word	0x08008319
 8008358:	08008319 	.word	0x08008319
 800835c:	0800849d 	.word	0x0800849d
 8008360:	080083c7 	.word	0x080083c7
 8008364:	08008457 	.word	0x08008457
 8008368:	08008319 	.word	0x08008319
 800836c:	08008319 	.word	0x08008319
 8008370:	080084bf 	.word	0x080084bf
 8008374:	08008319 	.word	0x08008319
 8008378:	080083c7 	.word	0x080083c7
 800837c:	08008319 	.word	0x08008319
 8008380:	08008319 	.word	0x08008319
 8008384:	0800845f 	.word	0x0800845f
 8008388:	6833      	ldr	r3, [r6, #0]
 800838a:	1d1a      	adds	r2, r3, #4
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6032      	str	r2, [r6, #0]
 8008390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008394:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008398:	2301      	movs	r3, #1
 800839a:	e09d      	b.n	80084d8 <_printf_i+0x1e8>
 800839c:	6833      	ldr	r3, [r6, #0]
 800839e:	6820      	ldr	r0, [r4, #0]
 80083a0:	1d19      	adds	r1, r3, #4
 80083a2:	6031      	str	r1, [r6, #0]
 80083a4:	0606      	lsls	r6, r0, #24
 80083a6:	d501      	bpl.n	80083ac <_printf_i+0xbc>
 80083a8:	681d      	ldr	r5, [r3, #0]
 80083aa:	e003      	b.n	80083b4 <_printf_i+0xc4>
 80083ac:	0645      	lsls	r5, r0, #25
 80083ae:	d5fb      	bpl.n	80083a8 <_printf_i+0xb8>
 80083b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80083b4:	2d00      	cmp	r5, #0
 80083b6:	da03      	bge.n	80083c0 <_printf_i+0xd0>
 80083b8:	232d      	movs	r3, #45	@ 0x2d
 80083ba:	426d      	negs	r5, r5
 80083bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083c0:	4859      	ldr	r0, [pc, #356]	@ (8008528 <_printf_i+0x238>)
 80083c2:	230a      	movs	r3, #10
 80083c4:	e011      	b.n	80083ea <_printf_i+0xfa>
 80083c6:	6821      	ldr	r1, [r4, #0]
 80083c8:	6833      	ldr	r3, [r6, #0]
 80083ca:	0608      	lsls	r0, r1, #24
 80083cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80083d0:	d402      	bmi.n	80083d8 <_printf_i+0xe8>
 80083d2:	0649      	lsls	r1, r1, #25
 80083d4:	bf48      	it	mi
 80083d6:	b2ad      	uxthmi	r5, r5
 80083d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80083da:	4853      	ldr	r0, [pc, #332]	@ (8008528 <_printf_i+0x238>)
 80083dc:	6033      	str	r3, [r6, #0]
 80083de:	bf14      	ite	ne
 80083e0:	230a      	movne	r3, #10
 80083e2:	2308      	moveq	r3, #8
 80083e4:	2100      	movs	r1, #0
 80083e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083ea:	6866      	ldr	r6, [r4, #4]
 80083ec:	60a6      	str	r6, [r4, #8]
 80083ee:	2e00      	cmp	r6, #0
 80083f0:	bfa2      	ittt	ge
 80083f2:	6821      	ldrge	r1, [r4, #0]
 80083f4:	f021 0104 	bicge.w	r1, r1, #4
 80083f8:	6021      	strge	r1, [r4, #0]
 80083fa:	b90d      	cbnz	r5, 8008400 <_printf_i+0x110>
 80083fc:	2e00      	cmp	r6, #0
 80083fe:	d04b      	beq.n	8008498 <_printf_i+0x1a8>
 8008400:	4616      	mov	r6, r2
 8008402:	fbb5 f1f3 	udiv	r1, r5, r3
 8008406:	fb03 5711 	mls	r7, r3, r1, r5
 800840a:	5dc7      	ldrb	r7, [r0, r7]
 800840c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008410:	462f      	mov	r7, r5
 8008412:	42bb      	cmp	r3, r7
 8008414:	460d      	mov	r5, r1
 8008416:	d9f4      	bls.n	8008402 <_printf_i+0x112>
 8008418:	2b08      	cmp	r3, #8
 800841a:	d10b      	bne.n	8008434 <_printf_i+0x144>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	07df      	lsls	r7, r3, #31
 8008420:	d508      	bpl.n	8008434 <_printf_i+0x144>
 8008422:	6923      	ldr	r3, [r4, #16]
 8008424:	6861      	ldr	r1, [r4, #4]
 8008426:	4299      	cmp	r1, r3
 8008428:	bfde      	ittt	le
 800842a:	2330      	movle	r3, #48	@ 0x30
 800842c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008430:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008434:	1b92      	subs	r2, r2, r6
 8008436:	6122      	str	r2, [r4, #16]
 8008438:	f8cd a000 	str.w	sl, [sp]
 800843c:	464b      	mov	r3, r9
 800843e:	aa03      	add	r2, sp, #12
 8008440:	4621      	mov	r1, r4
 8008442:	4640      	mov	r0, r8
 8008444:	f7ff fee6 	bl	8008214 <_printf_common>
 8008448:	3001      	adds	r0, #1
 800844a:	d14a      	bne.n	80084e2 <_printf_i+0x1f2>
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	b004      	add	sp, #16
 8008452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	f043 0320 	orr.w	r3, r3, #32
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	4833      	ldr	r0, [pc, #204]	@ (800852c <_printf_i+0x23c>)
 8008460:	2778      	movs	r7, #120	@ 0x78
 8008462:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	6831      	ldr	r1, [r6, #0]
 800846a:	061f      	lsls	r7, r3, #24
 800846c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008470:	d402      	bmi.n	8008478 <_printf_i+0x188>
 8008472:	065f      	lsls	r7, r3, #25
 8008474:	bf48      	it	mi
 8008476:	b2ad      	uxthmi	r5, r5
 8008478:	6031      	str	r1, [r6, #0]
 800847a:	07d9      	lsls	r1, r3, #31
 800847c:	bf44      	itt	mi
 800847e:	f043 0320 	orrmi.w	r3, r3, #32
 8008482:	6023      	strmi	r3, [r4, #0]
 8008484:	b11d      	cbz	r5, 800848e <_printf_i+0x19e>
 8008486:	2310      	movs	r3, #16
 8008488:	e7ac      	b.n	80083e4 <_printf_i+0xf4>
 800848a:	4827      	ldr	r0, [pc, #156]	@ (8008528 <_printf_i+0x238>)
 800848c:	e7e9      	b.n	8008462 <_printf_i+0x172>
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	f023 0320 	bic.w	r3, r3, #32
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	e7f6      	b.n	8008486 <_printf_i+0x196>
 8008498:	4616      	mov	r6, r2
 800849a:	e7bd      	b.n	8008418 <_printf_i+0x128>
 800849c:	6833      	ldr	r3, [r6, #0]
 800849e:	6825      	ldr	r5, [r4, #0]
 80084a0:	6961      	ldr	r1, [r4, #20]
 80084a2:	1d18      	adds	r0, r3, #4
 80084a4:	6030      	str	r0, [r6, #0]
 80084a6:	062e      	lsls	r6, r5, #24
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	d501      	bpl.n	80084b0 <_printf_i+0x1c0>
 80084ac:	6019      	str	r1, [r3, #0]
 80084ae:	e002      	b.n	80084b6 <_printf_i+0x1c6>
 80084b0:	0668      	lsls	r0, r5, #25
 80084b2:	d5fb      	bpl.n	80084ac <_printf_i+0x1bc>
 80084b4:	8019      	strh	r1, [r3, #0]
 80084b6:	2300      	movs	r3, #0
 80084b8:	6123      	str	r3, [r4, #16]
 80084ba:	4616      	mov	r6, r2
 80084bc:	e7bc      	b.n	8008438 <_printf_i+0x148>
 80084be:	6833      	ldr	r3, [r6, #0]
 80084c0:	1d1a      	adds	r2, r3, #4
 80084c2:	6032      	str	r2, [r6, #0]
 80084c4:	681e      	ldr	r6, [r3, #0]
 80084c6:	6862      	ldr	r2, [r4, #4]
 80084c8:	2100      	movs	r1, #0
 80084ca:	4630      	mov	r0, r6
 80084cc:	f7f7 feb8 	bl	8000240 <memchr>
 80084d0:	b108      	cbz	r0, 80084d6 <_printf_i+0x1e6>
 80084d2:	1b80      	subs	r0, r0, r6
 80084d4:	6060      	str	r0, [r4, #4]
 80084d6:	6863      	ldr	r3, [r4, #4]
 80084d8:	6123      	str	r3, [r4, #16]
 80084da:	2300      	movs	r3, #0
 80084dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084e0:	e7aa      	b.n	8008438 <_printf_i+0x148>
 80084e2:	6923      	ldr	r3, [r4, #16]
 80084e4:	4632      	mov	r2, r6
 80084e6:	4649      	mov	r1, r9
 80084e8:	4640      	mov	r0, r8
 80084ea:	47d0      	blx	sl
 80084ec:	3001      	adds	r0, #1
 80084ee:	d0ad      	beq.n	800844c <_printf_i+0x15c>
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	079b      	lsls	r3, r3, #30
 80084f4:	d413      	bmi.n	800851e <_printf_i+0x22e>
 80084f6:	68e0      	ldr	r0, [r4, #12]
 80084f8:	9b03      	ldr	r3, [sp, #12]
 80084fa:	4298      	cmp	r0, r3
 80084fc:	bfb8      	it	lt
 80084fe:	4618      	movlt	r0, r3
 8008500:	e7a6      	b.n	8008450 <_printf_i+0x160>
 8008502:	2301      	movs	r3, #1
 8008504:	4632      	mov	r2, r6
 8008506:	4649      	mov	r1, r9
 8008508:	4640      	mov	r0, r8
 800850a:	47d0      	blx	sl
 800850c:	3001      	adds	r0, #1
 800850e:	d09d      	beq.n	800844c <_printf_i+0x15c>
 8008510:	3501      	adds	r5, #1
 8008512:	68e3      	ldr	r3, [r4, #12]
 8008514:	9903      	ldr	r1, [sp, #12]
 8008516:	1a5b      	subs	r3, r3, r1
 8008518:	42ab      	cmp	r3, r5
 800851a:	dcf2      	bgt.n	8008502 <_printf_i+0x212>
 800851c:	e7eb      	b.n	80084f6 <_printf_i+0x206>
 800851e:	2500      	movs	r5, #0
 8008520:	f104 0619 	add.w	r6, r4, #25
 8008524:	e7f5      	b.n	8008512 <_printf_i+0x222>
 8008526:	bf00      	nop
 8008528:	08008b16 	.word	0x08008b16
 800852c:	08008b27 	.word	0x08008b27

08008530 <__swbuf_r>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	460e      	mov	r6, r1
 8008534:	4614      	mov	r4, r2
 8008536:	4605      	mov	r5, r0
 8008538:	b118      	cbz	r0, 8008542 <__swbuf_r+0x12>
 800853a:	6a03      	ldr	r3, [r0, #32]
 800853c:	b90b      	cbnz	r3, 8008542 <__swbuf_r+0x12>
 800853e:	f7ff f9e3 	bl	8007908 <__sinit>
 8008542:	69a3      	ldr	r3, [r4, #24]
 8008544:	60a3      	str	r3, [r4, #8]
 8008546:	89a3      	ldrh	r3, [r4, #12]
 8008548:	071a      	lsls	r2, r3, #28
 800854a:	d501      	bpl.n	8008550 <__swbuf_r+0x20>
 800854c:	6923      	ldr	r3, [r4, #16]
 800854e:	b943      	cbnz	r3, 8008562 <__swbuf_r+0x32>
 8008550:	4621      	mov	r1, r4
 8008552:	4628      	mov	r0, r5
 8008554:	f000 f82a 	bl	80085ac <__swsetup_r>
 8008558:	b118      	cbz	r0, 8008562 <__swbuf_r+0x32>
 800855a:	f04f 37ff 	mov.w	r7, #4294967295
 800855e:	4638      	mov	r0, r7
 8008560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	6922      	ldr	r2, [r4, #16]
 8008566:	1a98      	subs	r0, r3, r2
 8008568:	6963      	ldr	r3, [r4, #20]
 800856a:	b2f6      	uxtb	r6, r6
 800856c:	4283      	cmp	r3, r0
 800856e:	4637      	mov	r7, r6
 8008570:	dc05      	bgt.n	800857e <__swbuf_r+0x4e>
 8008572:	4621      	mov	r1, r4
 8008574:	4628      	mov	r0, r5
 8008576:	f7ff fcbb 	bl	8007ef0 <_fflush_r>
 800857a:	2800      	cmp	r0, #0
 800857c:	d1ed      	bne.n	800855a <__swbuf_r+0x2a>
 800857e:	68a3      	ldr	r3, [r4, #8]
 8008580:	3b01      	subs	r3, #1
 8008582:	60a3      	str	r3, [r4, #8]
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	1c5a      	adds	r2, r3, #1
 8008588:	6022      	str	r2, [r4, #0]
 800858a:	701e      	strb	r6, [r3, #0]
 800858c:	6962      	ldr	r2, [r4, #20]
 800858e:	1c43      	adds	r3, r0, #1
 8008590:	429a      	cmp	r2, r3
 8008592:	d004      	beq.n	800859e <__swbuf_r+0x6e>
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	07db      	lsls	r3, r3, #31
 8008598:	d5e1      	bpl.n	800855e <__swbuf_r+0x2e>
 800859a:	2e0a      	cmp	r6, #10
 800859c:	d1df      	bne.n	800855e <__swbuf_r+0x2e>
 800859e:	4621      	mov	r1, r4
 80085a0:	4628      	mov	r0, r5
 80085a2:	f7ff fca5 	bl	8007ef0 <_fflush_r>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d0d9      	beq.n	800855e <__swbuf_r+0x2e>
 80085aa:	e7d6      	b.n	800855a <__swbuf_r+0x2a>

080085ac <__swsetup_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	4b29      	ldr	r3, [pc, #164]	@ (8008654 <__swsetup_r+0xa8>)
 80085b0:	4605      	mov	r5, r0
 80085b2:	6818      	ldr	r0, [r3, #0]
 80085b4:	460c      	mov	r4, r1
 80085b6:	b118      	cbz	r0, 80085c0 <__swsetup_r+0x14>
 80085b8:	6a03      	ldr	r3, [r0, #32]
 80085ba:	b90b      	cbnz	r3, 80085c0 <__swsetup_r+0x14>
 80085bc:	f7ff f9a4 	bl	8007908 <__sinit>
 80085c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085c4:	0719      	lsls	r1, r3, #28
 80085c6:	d422      	bmi.n	800860e <__swsetup_r+0x62>
 80085c8:	06da      	lsls	r2, r3, #27
 80085ca:	d407      	bmi.n	80085dc <__swsetup_r+0x30>
 80085cc:	2209      	movs	r2, #9
 80085ce:	602a      	str	r2, [r5, #0]
 80085d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085d4:	81a3      	strh	r3, [r4, #12]
 80085d6:	f04f 30ff 	mov.w	r0, #4294967295
 80085da:	e033      	b.n	8008644 <__swsetup_r+0x98>
 80085dc:	0758      	lsls	r0, r3, #29
 80085de:	d512      	bpl.n	8008606 <__swsetup_r+0x5a>
 80085e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085e2:	b141      	cbz	r1, 80085f6 <__swsetup_r+0x4a>
 80085e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085e8:	4299      	cmp	r1, r3
 80085ea:	d002      	beq.n	80085f2 <__swsetup_r+0x46>
 80085ec:	4628      	mov	r0, r5
 80085ee:	f7ff fafb 	bl	8007be8 <_free_r>
 80085f2:	2300      	movs	r3, #0
 80085f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80085fc:	81a3      	strh	r3, [r4, #12]
 80085fe:	2300      	movs	r3, #0
 8008600:	6063      	str	r3, [r4, #4]
 8008602:	6923      	ldr	r3, [r4, #16]
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	f043 0308 	orr.w	r3, r3, #8
 800860c:	81a3      	strh	r3, [r4, #12]
 800860e:	6923      	ldr	r3, [r4, #16]
 8008610:	b94b      	cbnz	r3, 8008626 <__swsetup_r+0x7a>
 8008612:	89a3      	ldrh	r3, [r4, #12]
 8008614:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800861c:	d003      	beq.n	8008626 <__swsetup_r+0x7a>
 800861e:	4621      	mov	r1, r4
 8008620:	4628      	mov	r0, r5
 8008622:	f000 f883 	bl	800872c <__smakebuf_r>
 8008626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800862a:	f013 0201 	ands.w	r2, r3, #1
 800862e:	d00a      	beq.n	8008646 <__swsetup_r+0x9a>
 8008630:	2200      	movs	r2, #0
 8008632:	60a2      	str	r2, [r4, #8]
 8008634:	6962      	ldr	r2, [r4, #20]
 8008636:	4252      	negs	r2, r2
 8008638:	61a2      	str	r2, [r4, #24]
 800863a:	6922      	ldr	r2, [r4, #16]
 800863c:	b942      	cbnz	r2, 8008650 <__swsetup_r+0xa4>
 800863e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008642:	d1c5      	bne.n	80085d0 <__swsetup_r+0x24>
 8008644:	bd38      	pop	{r3, r4, r5, pc}
 8008646:	0799      	lsls	r1, r3, #30
 8008648:	bf58      	it	pl
 800864a:	6962      	ldrpl	r2, [r4, #20]
 800864c:	60a2      	str	r2, [r4, #8]
 800864e:	e7f4      	b.n	800863a <__swsetup_r+0x8e>
 8008650:	2000      	movs	r0, #0
 8008652:	e7f7      	b.n	8008644 <__swsetup_r+0x98>
 8008654:	20000018 	.word	0x20000018

08008658 <_raise_r>:
 8008658:	291f      	cmp	r1, #31
 800865a:	b538      	push	{r3, r4, r5, lr}
 800865c:	4605      	mov	r5, r0
 800865e:	460c      	mov	r4, r1
 8008660:	d904      	bls.n	800866c <_raise_r+0x14>
 8008662:	2316      	movs	r3, #22
 8008664:	6003      	str	r3, [r0, #0]
 8008666:	f04f 30ff 	mov.w	r0, #4294967295
 800866a:	bd38      	pop	{r3, r4, r5, pc}
 800866c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800866e:	b112      	cbz	r2, 8008676 <_raise_r+0x1e>
 8008670:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008674:	b94b      	cbnz	r3, 800868a <_raise_r+0x32>
 8008676:	4628      	mov	r0, r5
 8008678:	f000 f830 	bl	80086dc <_getpid_r>
 800867c:	4622      	mov	r2, r4
 800867e:	4601      	mov	r1, r0
 8008680:	4628      	mov	r0, r5
 8008682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008686:	f000 b817 	b.w	80086b8 <_kill_r>
 800868a:	2b01      	cmp	r3, #1
 800868c:	d00a      	beq.n	80086a4 <_raise_r+0x4c>
 800868e:	1c59      	adds	r1, r3, #1
 8008690:	d103      	bne.n	800869a <_raise_r+0x42>
 8008692:	2316      	movs	r3, #22
 8008694:	6003      	str	r3, [r0, #0]
 8008696:	2001      	movs	r0, #1
 8008698:	e7e7      	b.n	800866a <_raise_r+0x12>
 800869a:	2100      	movs	r1, #0
 800869c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80086a0:	4620      	mov	r0, r4
 80086a2:	4798      	blx	r3
 80086a4:	2000      	movs	r0, #0
 80086a6:	e7e0      	b.n	800866a <_raise_r+0x12>

080086a8 <raise>:
 80086a8:	4b02      	ldr	r3, [pc, #8]	@ (80086b4 <raise+0xc>)
 80086aa:	4601      	mov	r1, r0
 80086ac:	6818      	ldr	r0, [r3, #0]
 80086ae:	f7ff bfd3 	b.w	8008658 <_raise_r>
 80086b2:	bf00      	nop
 80086b4:	20000018 	.word	0x20000018

080086b8 <_kill_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4d07      	ldr	r5, [pc, #28]	@ (80086d8 <_kill_r+0x20>)
 80086bc:	2300      	movs	r3, #0
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	4611      	mov	r1, r2
 80086c4:	602b      	str	r3, [r5, #0]
 80086c6:	f7f8 ff8b 	bl	80015e0 <_kill>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	d102      	bne.n	80086d4 <_kill_r+0x1c>
 80086ce:	682b      	ldr	r3, [r5, #0]
 80086d0:	b103      	cbz	r3, 80086d4 <_kill_r+0x1c>
 80086d2:	6023      	str	r3, [r4, #0]
 80086d4:	bd38      	pop	{r3, r4, r5, pc}
 80086d6:	bf00      	nop
 80086d8:	200004f0 	.word	0x200004f0

080086dc <_getpid_r>:
 80086dc:	f7f8 bf78 	b.w	80015d0 <_getpid>

080086e0 <__swhatbuf_r>:
 80086e0:	b570      	push	{r4, r5, r6, lr}
 80086e2:	460c      	mov	r4, r1
 80086e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e8:	2900      	cmp	r1, #0
 80086ea:	b096      	sub	sp, #88	@ 0x58
 80086ec:	4615      	mov	r5, r2
 80086ee:	461e      	mov	r6, r3
 80086f0:	da0d      	bge.n	800870e <__swhatbuf_r+0x2e>
 80086f2:	89a3      	ldrh	r3, [r4, #12]
 80086f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80086f8:	f04f 0100 	mov.w	r1, #0
 80086fc:	bf14      	ite	ne
 80086fe:	2340      	movne	r3, #64	@ 0x40
 8008700:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008704:	2000      	movs	r0, #0
 8008706:	6031      	str	r1, [r6, #0]
 8008708:	602b      	str	r3, [r5, #0]
 800870a:	b016      	add	sp, #88	@ 0x58
 800870c:	bd70      	pop	{r4, r5, r6, pc}
 800870e:	466a      	mov	r2, sp
 8008710:	f000 f848 	bl	80087a4 <_fstat_r>
 8008714:	2800      	cmp	r0, #0
 8008716:	dbec      	blt.n	80086f2 <__swhatbuf_r+0x12>
 8008718:	9901      	ldr	r1, [sp, #4]
 800871a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800871e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008722:	4259      	negs	r1, r3
 8008724:	4159      	adcs	r1, r3
 8008726:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800872a:	e7eb      	b.n	8008704 <__swhatbuf_r+0x24>

0800872c <__smakebuf_r>:
 800872c:	898b      	ldrh	r3, [r1, #12]
 800872e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008730:	079d      	lsls	r5, r3, #30
 8008732:	4606      	mov	r6, r0
 8008734:	460c      	mov	r4, r1
 8008736:	d507      	bpl.n	8008748 <__smakebuf_r+0x1c>
 8008738:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	6123      	str	r3, [r4, #16]
 8008740:	2301      	movs	r3, #1
 8008742:	6163      	str	r3, [r4, #20]
 8008744:	b003      	add	sp, #12
 8008746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008748:	ab01      	add	r3, sp, #4
 800874a:	466a      	mov	r2, sp
 800874c:	f7ff ffc8 	bl	80086e0 <__swhatbuf_r>
 8008750:	9f00      	ldr	r7, [sp, #0]
 8008752:	4605      	mov	r5, r0
 8008754:	4639      	mov	r1, r7
 8008756:	4630      	mov	r0, r6
 8008758:	f7ff faba 	bl	8007cd0 <_malloc_r>
 800875c:	b948      	cbnz	r0, 8008772 <__smakebuf_r+0x46>
 800875e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008762:	059a      	lsls	r2, r3, #22
 8008764:	d4ee      	bmi.n	8008744 <__smakebuf_r+0x18>
 8008766:	f023 0303 	bic.w	r3, r3, #3
 800876a:	f043 0302 	orr.w	r3, r3, #2
 800876e:	81a3      	strh	r3, [r4, #12]
 8008770:	e7e2      	b.n	8008738 <__smakebuf_r+0xc>
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	6020      	str	r0, [r4, #0]
 8008776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800877a:	81a3      	strh	r3, [r4, #12]
 800877c:	9b01      	ldr	r3, [sp, #4]
 800877e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008782:	b15b      	cbz	r3, 800879c <__smakebuf_r+0x70>
 8008784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008788:	4630      	mov	r0, r6
 800878a:	f000 f81d 	bl	80087c8 <_isatty_r>
 800878e:	b128      	cbz	r0, 800879c <__smakebuf_r+0x70>
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	f023 0303 	bic.w	r3, r3, #3
 8008796:	f043 0301 	orr.w	r3, r3, #1
 800879a:	81a3      	strh	r3, [r4, #12]
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	431d      	orrs	r5, r3
 80087a0:	81a5      	strh	r5, [r4, #12]
 80087a2:	e7cf      	b.n	8008744 <__smakebuf_r+0x18>

080087a4 <_fstat_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	4d07      	ldr	r5, [pc, #28]	@ (80087c4 <_fstat_r+0x20>)
 80087a8:	2300      	movs	r3, #0
 80087aa:	4604      	mov	r4, r0
 80087ac:	4608      	mov	r0, r1
 80087ae:	4611      	mov	r1, r2
 80087b0:	602b      	str	r3, [r5, #0]
 80087b2:	f7f8 ff75 	bl	80016a0 <_fstat>
 80087b6:	1c43      	adds	r3, r0, #1
 80087b8:	d102      	bne.n	80087c0 <_fstat_r+0x1c>
 80087ba:	682b      	ldr	r3, [r5, #0]
 80087bc:	b103      	cbz	r3, 80087c0 <_fstat_r+0x1c>
 80087be:	6023      	str	r3, [r4, #0]
 80087c0:	bd38      	pop	{r3, r4, r5, pc}
 80087c2:	bf00      	nop
 80087c4:	200004f0 	.word	0x200004f0

080087c8 <_isatty_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4d06      	ldr	r5, [pc, #24]	@ (80087e4 <_isatty_r+0x1c>)
 80087cc:	2300      	movs	r3, #0
 80087ce:	4604      	mov	r4, r0
 80087d0:	4608      	mov	r0, r1
 80087d2:	602b      	str	r3, [r5, #0]
 80087d4:	f7f8 ff74 	bl	80016c0 <_isatty>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_isatty_r+0x1a>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_isatty_r+0x1a>
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	200004f0 	.word	0x200004f0

080087e8 <_init>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	bf00      	nop
 80087ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ee:	bc08      	pop	{r3}
 80087f0:	469e      	mov	lr, r3
 80087f2:	4770      	bx	lr

080087f4 <_fini>:
 80087f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f6:	bf00      	nop
 80087f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fa:	bc08      	pop	{r3}
 80087fc:	469e      	mov	lr, r3
 80087fe:	4770      	bx	lr
