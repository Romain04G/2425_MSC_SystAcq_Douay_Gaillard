
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2a4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  0800e488  0800e488  0000f488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed04  0800ed04  000101d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed04  0800ed04  0000fd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed0c  0800ed0c  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed0c  0800ed0c  0000fd0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed10  0800ed10  0000fd10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ed14  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  200001d4  0800eee8  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  0800eee8  000107bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b81e  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003573  00000000  00000000  0002ba22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  0002ef98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001141  00000000  00000000  000305c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a58b  00000000  00000000  00031709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001abaa  00000000  00000000  0005bc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114f50  00000000  00000000  0007683e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b78e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007458  00000000  00000000  0018b7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  00192c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e46c 	.word	0x0800e46c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800e46c 	.word	0x0800e46c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint32_t 	period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <main+0x54>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001060:	607b      	str	r3, [r7, #4]
	uint32_t 	pulse_value = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <main+0x54>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001068:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106a:	f001 fc2c 	bl	80028c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106e:	f000 f81d 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001072:	f000 fb21 	bl	80016b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001076:	f000 faed 	bl	8001654 <MX_DMA_Init>
  MX_ADC2_Init();
 800107a:	f000 f8db 	bl	8001234 <MX_ADC2_Init>
  MX_ADC1_Init();
 800107e:	f000 f85f 	bl	8001140 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001082:	f000 f93f 	bl	8001304 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001086:	f000 fa01 	bl	800148c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800108a:	f000 fa4b 	bl	8001524 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800108e:	f000 fa95 	bl	80015bc <MX_USART3_UART_Init>

	//	HAL_ADC_Start(&hadc1);
	//	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);

	// Démarrage du Timer en mode TRGO
	HAL_TIM_Base_Start(&htim1);
 8001092:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <main+0x54>)
 8001094:	f004 fe3a 	bl	8005d0c <HAL_TIM_Base_Start>
	StartShell();
 8001098:	f000 fd86 	bl	8001ba8 <StartShell>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		Shell_Process();
 800109c:	f000 fdbe 	bl	8001c1c <Shell_Process>
		New_Command();
 80010a0:	f000 fe38 	bl	8001d14 <New_Command>
		Shell_Process();
 80010a4:	bf00      	nop
 80010a6:	e7f9      	b.n	800109c <main+0x48>
 80010a8:	20000388 	.word	0x20000388

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b094      	sub	sp, #80	@ 0x50
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	2238      	movs	r2, #56	@ 0x38
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f009 fe1d 	bl	800acfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f003 fd5c 	bl	8004b8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010dc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	2302      	movs	r3, #2
 80010e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e2:	2303      	movs	r3, #3
 80010e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80010e6:	2306      	movs	r3, #6
 80010e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010ea:	2355      	movs	r3, #85	@ 0x55
 80010ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ee:	2302      	movs	r3, #2
 80010f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010f6:	2302      	movs	r3, #2
 80010f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fdf8 	bl	8004cf4 <HAL_RCC_OscConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800110a:	f000 fb77 	bl	80017fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110e:	230f      	movs	r3, #15
 8001110:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001112:	2303      	movs	r3, #3
 8001114:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2104      	movs	r1, #4
 8001126:	4618      	mov	r0, r3
 8001128:	f004 f8fc 	bl	8005324 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001132:	f000 fb63 	bl	80017fc <Error_Handler>
  }
}
 8001136:	bf00      	nop
 8001138:	3750      	adds	r7, #80	@ 0x50
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08c      	sub	sp, #48	@ 0x30
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2220      	movs	r2, #32
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f009 fdce 	bl	800acfa <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800115e:	4b33      	ldr	r3, [pc, #204]	@ (800122c <MX_ADC1_Init+0xec>)
 8001160:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001166:	4b31      	ldr	r3, [pc, #196]	@ (800122c <MX_ADC1_Init+0xec>)
 8001168:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800116c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800116e:	4b2f      	ldr	r3, [pc, #188]	@ (800122c <MX_ADC1_Init+0xec>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001174:	4b2d      	ldr	r3, [pc, #180]	@ (800122c <MX_ADC1_Init+0xec>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800117a:	4b2c      	ldr	r3, [pc, #176]	@ (800122c <MX_ADC1_Init+0xec>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001180:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <MX_ADC1_Init+0xec>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001186:	4b29      	ldr	r3, [pc, #164]	@ (800122c <MX_ADC1_Init+0xec>)
 8001188:	2204      	movs	r2, #4
 800118a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800118c:	4b27      	ldr	r3, [pc, #156]	@ (800122c <MX_ADC1_Init+0xec>)
 800118e:	2200      	movs	r2, #0
 8001190:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001192:	4b26      	ldr	r3, [pc, #152]	@ (800122c <MX_ADC1_Init+0xec>)
 8001194:	2200      	movs	r2, #0
 8001196:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001198:	4b24      	ldr	r3, [pc, #144]	@ (800122c <MX_ADC1_Init+0xec>)
 800119a:	2201      	movs	r2, #1
 800119c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119e:	4b23      	ldr	r3, [pc, #140]	@ (800122c <MX_ADC1_Init+0xec>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80011a6:	4b21      	ldr	r3, [pc, #132]	@ (800122c <MX_ADC1_Init+0xec>)
 80011a8:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 80011ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011ae:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <MX_ADC1_Init+0xec>)
 80011b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	@ (800122c <MX_ADC1_Init+0xec>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011be:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <MX_ADC1_Init+0xec>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <MX_ADC1_Init+0xec>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011cc:	4817      	ldr	r0, [pc, #92]	@ (800122c <MX_ADC1_Init+0xec>)
 80011ce:	f001 fdef 	bl	8002db0 <HAL_ADC_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80011d8:	f000 fb10 	bl	80017fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	4811      	ldr	r0, [pc, #68]	@ (800122c <MX_ADC1_Init+0xec>)
 80011e8:	f002 feb0 	bl	8003f4c <HAL_ADCEx_MultiModeConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80011f2:	f000 fb03 	bl	80017fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_ADC1_Init+0xf0>)
 80011f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011fa:	2306      	movs	r3, #6
 80011fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80011fe:	2305      	movs	r3, #5
 8001200:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001202:	237f      	movs	r3, #127	@ 0x7f
 8001204:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001206:	2304      	movs	r3, #4
 8001208:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	@ (800122c <MX_ADC1_Init+0xec>)
 8001214:	f002 fa02 	bl	800361c <HAL_ADC_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800121e:	f000 faed 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3730      	adds	r7, #48	@ 0x30
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200001f0 	.word	0x200001f0
 8001230:	08600004 	.word	0x08600004

08001234 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800123a:	463b      	mov	r3, r7
 800123c:	2220      	movs	r2, #32
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f009 fd5a 	bl	800acfa <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001246:	4b2c      	ldr	r3, [pc, #176]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 8001248:	4a2c      	ldr	r2, [pc, #176]	@ (80012fc <MX_ADC2_Init+0xc8>)
 800124a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800124c:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 800124e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001252:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001254:	4b28      	ldr	r3, [pc, #160]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125a:	4b27      	ldr	r3, [pc, #156]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001260:	4b25      	ldr	r3, [pc, #148]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001266:	4b24      	ldr	r3, [pc, #144]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800126c:	4b22      	ldr	r3, [pc, #136]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 800126e:	2204      	movs	r2, #4
 8001270:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001272:	4b21      	ldr	r3, [pc, #132]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 8001274:	2200      	movs	r2, #0
 8001276:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001278:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 800127a:	2200      	movs	r2, #0
 800127c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800127e:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 8001280:	2201      	movs	r2, #1
 8001282:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001284:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800128c:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 800128e:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8001292:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001294:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 8001296:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800129a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800129c:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012a4:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80012aa:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012b2:	4811      	ldr	r0, [pc, #68]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 80012b4:	f001 fd7c 	bl	8002db0 <HAL_ADC_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80012be:	f000 fa9d 	bl	80017fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <MX_ADC2_Init+0xcc>)
 80012c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c6:	2306      	movs	r3, #6
 80012c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80012ca:	2305      	movs	r3, #5
 80012cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012ce:	237f      	movs	r3, #127	@ 0x7f
 80012d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012d2:	2304      	movs	r3, #4
 80012d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012da:	463b      	mov	r3, r7
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	@ (80012f8 <MX_ADC2_Init+0xc4>)
 80012e0:	f002 f99c 	bl	800361c <HAL_ADC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80012ea:	f000 fa87 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000025c 	.word	0x2000025c
 80012fc:	50000100 	.word	0x50000100
 8001300:	04300002 	.word	0x04300002

08001304 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b09c      	sub	sp, #112	@ 0x70
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001324:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
 8001334:	615a      	str	r2, [r3, #20]
 8001336:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2234      	movs	r2, #52	@ 0x34
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f009 fcdb 	bl	800acfa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001344:	4b4f      	ldr	r3, [pc, #316]	@ (8001484 <MX_TIM1_Init+0x180>)
 8001346:	4a50      	ldr	r2, [pc, #320]	@ (8001488 <MX_TIM1_Init+0x184>)
 8001348:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 800134a:	4b4e      	ldr	r3, [pc, #312]	@ (8001484 <MX_TIM1_Init+0x180>)
 800134c:	2208      	movs	r2, #8
 800134e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001350:	4b4c      	ldr	r3, [pc, #304]	@ (8001484 <MX_TIM1_Init+0x180>)
 8001352:	2220      	movs	r2, #32
 8001354:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001356:	4b4b      	ldr	r3, [pc, #300]	@ (8001484 <MX_TIM1_Init+0x180>)
 8001358:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800135c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b49      	ldr	r3, [pc, #292]	@ (8001484 <MX_TIM1_Init+0x180>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001364:	4b47      	ldr	r3, [pc, #284]	@ (8001484 <MX_TIM1_Init+0x180>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	4b46      	ldr	r3, [pc, #280]	@ (8001484 <MX_TIM1_Init+0x180>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001370:	4844      	ldr	r0, [pc, #272]	@ (8001484 <MX_TIM1_Init+0x180>)
 8001372:	f004 fc73 	bl	8005c5c <HAL_TIM_Base_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800137c:	f000 fa3e 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001380:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001384:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001386:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800138a:	4619      	mov	r1, r3
 800138c:	483d      	ldr	r0, [pc, #244]	@ (8001484 <MX_TIM1_Init+0x180>)
 800138e:	f005 fa49 	bl	8006824 <HAL_TIM_ConfigClockSource>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001398:	f000 fa30 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800139c:	4839      	ldr	r0, [pc, #228]	@ (8001484 <MX_TIM1_Init+0x180>)
 800139e:	f004 fd9d 	bl	8005edc <HAL_TIM_PWM_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013a8:	f000 fa28 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013ac:	2320      	movs	r3, #32
 80013ae:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013bc:	4619      	mov	r1, r3
 80013be:	4831      	ldr	r0, [pc, #196]	@ (8001484 <MX_TIM1_Init+0x180>)
 80013c0:	f006 fa44 	bl	800784c <HAL_TIMEx_MasterConfigSynchronization>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013ca:	f000 fa17 	bl	80017fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ce:	2360      	movs	r3, #96	@ 0x60
 80013d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 615;
 80013d2:	f240 2367 	movw	r3, #615	@ 0x267
 80013d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d8:	2300      	movs	r3, #0
 80013da:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013dc:	2300      	movs	r3, #0
 80013de:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013f0:	2200      	movs	r2, #0
 80013f2:	4619      	mov	r1, r3
 80013f4:	4823      	ldr	r0, [pc, #140]	@ (8001484 <MX_TIM1_Init+0x180>)
 80013f6:	f005 f901 	bl	80065fc <HAL_TIM_PWM_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001400:	f000 f9fc 	bl	80017fc <Error_Handler>
  }
  sConfigOC.Pulse = 408;
 8001404:	f44f 73cc 	mov.w	r3, #408	@ 0x198
 8001408:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800140a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800140e:	2204      	movs	r2, #4
 8001410:	4619      	mov	r1, r3
 8001412:	481c      	ldr	r0, [pc, #112]	@ (8001484 <MX_TIM1_Init+0x180>)
 8001414:	f005 f8f2 	bl	80065fc <HAL_TIM_PWM_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 800141e:	f000 f9ed 	bl	80017fc <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001422:	4818      	ldr	r0, [pc, #96]	@ (8001484 <MX_TIM1_Init+0x180>)
 8001424:	f006 fb5a 	bl	8007adc <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 33;
 8001434:	2321      	movs	r3, #33	@ 0x21
 8001436:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800143c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001440:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800144e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001452:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4807      	ldr	r0, [pc, #28]	@ (8001484 <MX_TIM1_Init+0x180>)
 8001466:	f006 fa87 	bl	8007978 <HAL_TIMEx_ConfigBreakDeadTime>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001470:	f000 f9c4 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001474:	4803      	ldr	r0, [pc, #12]	@ (8001484 <MX_TIM1_Init+0x180>)
 8001476:	f000 ff31 	bl	80022dc <HAL_TIM_MspPostInit>

}
 800147a:	bf00      	nop
 800147c:	3770      	adds	r7, #112	@ 0x70
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000388 	.word	0x20000388
 8001488:	40012c00 	.word	0x40012c00

0800148c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <MX_TIM3_Init+0x90>)
 80014ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	@ (800151c <MX_TIM3_Init+0x90>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b6:	4b19      	ldr	r3, [pc, #100]	@ (800151c <MX_TIM3_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014bc:	4b17      	ldr	r3, [pc, #92]	@ (800151c <MX_TIM3_Init+0x90>)
 80014be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c4:	4b15      	ldr	r3, [pc, #84]	@ (800151c <MX_TIM3_Init+0x90>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ca:	4b14      	ldr	r3, [pc, #80]	@ (800151c <MX_TIM3_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	4619      	mov	r1, r3
 80014e6:	480d      	ldr	r0, [pc, #52]	@ (800151c <MX_TIM3_Init+0x90>)
 80014e8:	f005 ffe1 	bl	80074ae <HAL_TIMEx_HallSensor_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80014f2:	f000 f983 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80014f6:	2350      	movs	r3, #80	@ 0x50
 80014f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	@ (800151c <MX_TIM3_Init+0x90>)
 8001504:	f006 f9a2 	bl	800784c <HAL_TIMEx_MasterConfigSynchronization>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800150e:	f000 f975 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200003d4 	.word	0x200003d4
 8001520:	40000400 	.word	0x40000400

08001524 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001528:	4b22      	ldr	r3, [pc, #136]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 800152a:	4a23      	ldr	r2, [pc, #140]	@ (80015b8 <MX_USART2_UART_Init+0x94>)
 800152c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800152e:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b1d      	ldr	r3, [pc, #116]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001542:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b1a      	ldr	r3, [pc, #104]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b17      	ldr	r3, [pc, #92]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155a:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001560:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001562:	2200      	movs	r2, #0
 8001564:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001566:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800156c:	4811      	ldr	r0, [pc, #68]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 800156e:	f006 fb33 	bl	8007bd8 <HAL_UART_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001578:	f000 f940 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800157c:	2100      	movs	r1, #0
 800157e:	480d      	ldr	r0, [pc, #52]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001580:	f008 fad5 	bl	8009b2e <HAL_UARTEx_SetTxFifoThreshold>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800158a:	f000 f937 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800158e:	2100      	movs	r1, #0
 8001590:	4808      	ldr	r0, [pc, #32]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001592:	f008 fb0a 	bl	8009baa <HAL_UARTEx_SetRxFifoThreshold>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800159c:	f000 f92e 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 80015a2:	f008 fa8b 	bl	8009abc <HAL_UARTEx_DisableFifoMode>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015ac:	f000 f926 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000420 	.word	0x20000420
 80015b8:	40004400 	.word	0x40004400

080015bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015c0:	4b22      	ldr	r3, [pc, #136]	@ (800164c <MX_USART3_UART_Init+0x90>)
 80015c2:	4a23      	ldr	r2, [pc, #140]	@ (8001650 <MX_USART3_UART_Init+0x94>)
 80015c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015c6:	4b21      	ldr	r3, [pc, #132]	@ (800164c <MX_USART3_UART_Init+0x90>)
 80015c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ce:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <MX_USART3_UART_Init+0x90>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <MX_USART3_UART_Init+0x90>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015da:	4b1c      	ldr	r3, [pc, #112]	@ (800164c <MX_USART3_UART_Init+0x90>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <MX_USART3_UART_Init+0x90>)
 80015e2:	220c      	movs	r2, #12
 80015e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e6:	4b19      	ldr	r3, [pc, #100]	@ (800164c <MX_USART3_UART_Init+0x90>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	4b17      	ldr	r3, [pc, #92]	@ (800164c <MX_USART3_UART_Init+0x90>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f2:	4b16      	ldr	r3, [pc, #88]	@ (800164c <MX_USART3_UART_Init+0x90>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015f8:	4b14      	ldr	r3, [pc, #80]	@ (800164c <MX_USART3_UART_Init+0x90>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015fe:	4b13      	ldr	r3, [pc, #76]	@ (800164c <MX_USART3_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001604:	4811      	ldr	r0, [pc, #68]	@ (800164c <MX_USART3_UART_Init+0x90>)
 8001606:	f006 fae7 	bl	8007bd8 <HAL_UART_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001610:	f000 f8f4 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001614:	2100      	movs	r1, #0
 8001616:	480d      	ldr	r0, [pc, #52]	@ (800164c <MX_USART3_UART_Init+0x90>)
 8001618:	f008 fa89 	bl	8009b2e <HAL_UARTEx_SetTxFifoThreshold>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001622:	f000 f8eb 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001626:	2100      	movs	r1, #0
 8001628:	4808      	ldr	r0, [pc, #32]	@ (800164c <MX_USART3_UART_Init+0x90>)
 800162a:	f008 fabe 	bl	8009baa <HAL_UARTEx_SetRxFifoThreshold>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001634:	f000 f8e2 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001638:	4804      	ldr	r0, [pc, #16]	@ (800164c <MX_USART3_UART_Init+0x90>)
 800163a:	f008 fa3f 	bl	8009abc <HAL_UARTEx_DisableFifoMode>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001644:	f000 f8da 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200004b0 	.word	0x200004b0
 8001650:	40004800 	.word	0x40004800

08001654 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_DMA_Init+0x60>)
 800165c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800165e:	4a15      	ldr	r2, [pc, #84]	@ (80016b4 <MX_DMA_Init+0x60>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6493      	str	r3, [r2, #72]	@ 0x48
 8001666:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <MX_DMA_Init+0x60>)
 8001668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <MX_DMA_Init+0x60>)
 8001674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001676:	4a0f      	ldr	r2, [pc, #60]	@ (80016b4 <MX_DMA_Init+0x60>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6493      	str	r3, [r2, #72]	@ 0x48
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <MX_DMA_Init+0x60>)
 8001680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	200b      	movs	r0, #11
 8001690:	f002 fe1c 	bl	80042cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001694:	200b      	movs	r0, #11
 8001696:	f002 fe33 	bl	8004300 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	200c      	movs	r0, #12
 80016a0:	f002 fe14 	bl	80042cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016a4:	200c      	movs	r0, #12
 80016a6:	f002 fe2b 	bl	8004300 <HAL_NVIC_EnableIRQ>

}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000

080016b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	@ 0x28
 80016bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	4b3f      	ldr	r3, [pc, #252]	@ (80017cc <MX_GPIO_Init+0x114>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	4a3e      	ldr	r2, [pc, #248]	@ (80017cc <MX_GPIO_Init+0x114>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016da:	4b3c      	ldr	r3, [pc, #240]	@ (80017cc <MX_GPIO_Init+0x114>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016e6:	4b39      	ldr	r3, [pc, #228]	@ (80017cc <MX_GPIO_Init+0x114>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	4a38      	ldr	r2, [pc, #224]	@ (80017cc <MX_GPIO_Init+0x114>)
 80016ec:	f043 0320 	orr.w	r3, r3, #32
 80016f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016f2:	4b36      	ldr	r3, [pc, #216]	@ (80017cc <MX_GPIO_Init+0x114>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f6:	f003 0320 	and.w	r3, r3, #32
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b33      	ldr	r3, [pc, #204]	@ (80017cc <MX_GPIO_Init+0x114>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001702:	4a32      	ldr	r2, [pc, #200]	@ (80017cc <MX_GPIO_Init+0x114>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800170a:	4b30      	ldr	r3, [pc, #192]	@ (80017cc <MX_GPIO_Init+0x114>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <MX_GPIO_Init+0x114>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	4a2c      	ldr	r2, [pc, #176]	@ (80017cc <MX_GPIO_Init+0x114>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001722:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <MX_GPIO_Init+0x114>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800172e:	4b27      	ldr	r3, [pc, #156]	@ (80017cc <MX_GPIO_Init+0x114>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001732:	4a26      	ldr	r2, [pc, #152]	@ (80017cc <MX_GPIO_Init+0x114>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173a:	4b24      	ldr	r3, [pc, #144]	@ (80017cc <MX_GPIO_Init+0x114>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	2120      	movs	r1, #32
 800174a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174e:	f003 f9e1 	bl	8004b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	2104      	movs	r1, #4
 8001756:	481e      	ldr	r0, [pc, #120]	@ (80017d0 <MX_GPIO_Init+0x118>)
 8001758:	f003 f9dc 	bl	8004b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 800175c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001762:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4818      	ldr	r0, [pc, #96]	@ (80017d4 <MX_GPIO_Init+0x11c>)
 8001774:	f003 f84c 	bl	8004810 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001778:	2320      	movs	r3, #32
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001792:	f003 f83d 	bl	8004810 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_SafetyUC_Pin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8001796:	2304      	movs	r3, #4
 8001798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4808      	ldr	r0, [pc, #32]	@ (80017d0 <MX_GPIO_Init+0x118>)
 80017ae:	f003 f82f 	bl	8004810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2028      	movs	r0, #40	@ 0x28
 80017b8:	f002 fd88 	bl	80042cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017bc:	2028      	movs	r0, #40	@ 0x28
 80017be:	f002 fd9f 	bl	8004300 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	@ 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	48000c00 	.word	0x48000c00
 80017d4:	48000800 	.word	0x48000800

080017d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d101      	bne.n	80017ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017ea:	f001 f885 	bl	80028f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40001000 	.word	0x40001000

080017fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
}
 8001802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <Error_Handler+0x8>

08001808 <HAL_ADC_ConvCpltCallback>:
}

/**
 * @brief Mesure le courant et la vitesse du moteur.
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) //courant
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001818:	d11e      	bne.n	8001858 <HAL_ADC_ConvCpltCallback+0x50>
	{
		// Conversion terminée
		voltage = (adc_buffer[0] / ADC_RESOLUTION) * VREF;
 800181a:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <HAL_ADC_ConvCpltCallback+0xa4>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001826:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80018b0 <HAL_ADC_ConvCpltCallback+0xa8>
 800182a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800182e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80018b4 <HAL_ADC_ConvCpltCallback+0xac>
 8001832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001836:	4b20      	ldr	r3, [pc, #128]	@ (80018b8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001838:	edc3 7a00 	vstr	s15, [r3]

		// Calculer le courant
		curent = (voltage - V_OFFSET) / SENSITIVITY;
 800183c:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <HAL_ADC_ConvCpltCallback+0xb0>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80018bc <HAL_ADC_ConvCpltCallback+0xb4>
 8001846:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800184a:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 80018c0 <HAL_ADC_ConvCpltCallback+0xb8>
 800184e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001852:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001854:	edc3 7a00 	vstr	s15, [r3]
	}
	if (hadc->Instance == ADC2) //vitesse
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a1a      	ldr	r2, [pc, #104]	@ (80018c8 <HAL_ADC_ConvCpltCallback+0xc0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d11e      	bne.n	80018a0 <HAL_ADC_ConvCpltCallback+0x98>
	{
		// Lecture de la tension via l'ADC
		adc_voltage = adc_buffer2[1] * (VREF / ADC_RESOLUTION); // Conversion ADC -> Tension
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <HAL_ADC_ConvCpltCallback+0xc4>)
 8001864:	885b      	ldrh	r3, [r3, #2]
 8001866:	ee07 3a90 	vmov	s15, r3
 800186a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80018d0 <HAL_ADC_ConvCpltCallback+0xc8>
 8001872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001876:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001878:	edc3 7a00 	vstr	s15, [r3]
		float sensor_input = adc_voltage / HCPL_GAIN;  // Recalcule l'entrée du capteur
 800187c:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <HAL_ADC_ConvCpltCallback+0xcc>)
 800187e:	ed93 7a00 	vldr	s14, [r3]
 8001882:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001886:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800188a:	edc7 7a03 	vstr	s15, [r7, #12]
		speed = sensor_input / TACH_GAIN;             // Calcul de la vitesse
 800188e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001892:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80018d8 <HAL_ADC_ConvCpltCallback+0xd0>
 8001896:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <HAL_ADC_ConvCpltCallback+0xd4>)
 800189c:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	20000554 	.word	0x20000554
 80018b0:	45800000 	.word	0x45800000
 80018b4:	40533333 	.word	0x40533333
 80018b8:	20000548 	.word	0x20000548
 80018bc:	3fd33333 	.word	0x3fd33333
 80018c0:	3d4ccccd 	.word	0x3d4ccccd
 80018c4:	2000054c 	.word	0x2000054c
 80018c8:	50000100 	.word	0x50000100
 80018cc:	20000550 	.word	0x20000550
 80018d0:	3a533333 	.word	0x3a533333
 80018d4:	20000540 	.word	0x20000540
 80018d8:	3ca3d70a 	.word	0x3ca3d70a
 80018dc:	20000544 	.word	0x20000544

080018e0 <GetCurrent>:

/**
 * @brief Affiche le courant dans le moteur dans le terminal.
 */
void GetCurrent(){
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	b093      	sub	sp, #76	@ 0x4c
 80018e4:	af04      	add	r7, sp, #16
	char buffer[50];
	sprintf(buffer, "ADC Value: %lu, Voltage: %.2f V, Current: %.2f A\r\n", adc_buffer[0], voltage, curent);
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <GetCurrent+0x5c>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	461e      	mov	r6, r3
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <GetCurrent+0x60>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe61 	bl	80005b8 <__aeabi_f2d>
 80018f6:	4604      	mov	r4, r0
 80018f8:	460d      	mov	r5, r1
 80018fa:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <GetCurrent+0x64>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe5a 	bl	80005b8 <__aeabi_f2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	1d38      	adds	r0, r7, #4
 800190a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800190e:	e9cd 4500 	strd	r4, r5, [sp]
 8001912:	4632      	mov	r2, r6
 8001914:	490c      	ldr	r1, [pc, #48]	@ (8001948 <GetCurrent+0x68>)
 8001916:	f009 f98d 	bl	800ac34 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fcdf 	bl	80002e0 <strlen>
 8001922:	4603      	mov	r3, r0
 8001924:	b29a      	uxth	r2, r3
 8001926:	1d39      	adds	r1, r7, #4
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
 800192c:	4807      	ldr	r0, [pc, #28]	@ (800194c <GetCurrent+0x6c>)
 800192e:	f006 f9a3 	bl	8007c78 <HAL_UART_Transmit>
}
 8001932:	bf00      	nop
 8001934:	373c      	adds	r7, #60	@ 0x3c
 8001936:	46bd      	mov	sp, r7
 8001938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800193a:	bf00      	nop
 800193c:	20000554 	.word	0x20000554
 8001940:	20000548 	.word	0x20000548
 8001944:	2000054c 	.word	0x2000054c
 8001948:	0800e4c0 	.word	0x0800e4c0
 800194c:	20000420 	.word	0x20000420

08001950 <getSpeed>:

/**
 * @brief Affiche la vitesse de rotation du moteur dans le terminal.
 */
void getSpeed(){
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001952:	b093      	sub	sp, #76	@ 0x4c
 8001954:	af04      	add	r7, sp, #16
	char buffer[50];
	sprintf(buffer, "ADC Value: %lu, Voltage: %.2f V, Vitesse: %.2f rad/s\r\n", adc_buffer2[1], adc_voltage, speed);
 8001956:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <getSpeed+0x5c>)
 8001958:	885b      	ldrh	r3, [r3, #2]
 800195a:	461e      	mov	r6, r3
 800195c:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <getSpeed+0x60>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fe29 	bl	80005b8 <__aeabi_f2d>
 8001966:	4604      	mov	r4, r0
 8001968:	460d      	mov	r5, r1
 800196a:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <getSpeed+0x64>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fe22 	bl	80005b8 <__aeabi_f2d>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	1d38      	adds	r0, r7, #4
 800197a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800197e:	e9cd 4500 	strd	r4, r5, [sp]
 8001982:	4632      	mov	r2, r6
 8001984:	490c      	ldr	r1, [pc, #48]	@ (80019b8 <getSpeed+0x68>)
 8001986:	f009 f955 	bl	800ac34 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fca7 	bl	80002e0 <strlen>
 8001992:	4603      	mov	r3, r0
 8001994:	b29a      	uxth	r2, r3
 8001996:	1d39      	adds	r1, r7, #4
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
 800199c:	4807      	ldr	r0, [pc, #28]	@ (80019bc <getSpeed+0x6c>)
 800199e:	f006 f96b 	bl	8007c78 <HAL_UART_Transmit>
}
 80019a2:	bf00      	nop
 80019a4:	373c      	adds	r7, #60	@ 0x3c
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000550 	.word	0x20000550
 80019b0:	20000540 	.word	0x20000540
 80019b4:	20000544 	.word	0x20000544
 80019b8:	0800e4f4 	.word	0x0800e4f4
 80019bc:	20000420 	.word	0x20000420

080019c0 <control_speed>:
/**
 * @brief Modifie le rapport cyclique des PWMs afin de contrôler la vitesse du moteur.
 * @param Rapport cyclique à donner aux PWMs
 * @retval Simple entier pour être sûr de sortir de la fonction.
 */
int control_speed(int dutycycle){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	int current = 100*(TIM1->CCR1)/(TIM1->ARR);
 80019c8:	4b29      	ldr	r3, [pc, #164]	@ (8001a70 <control_speed+0xb0>)
 80019ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019cc:	2264      	movs	r2, #100	@ 0x64
 80019ce:	fb03 f202 	mul.w	r2, r3, r2
 80019d2:	4b27      	ldr	r3, [pc, #156]	@ (8001a70 <control_speed+0xb0>)
 80019d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	60fb      	str	r3, [r7, #12]
	if(current < dutycycle){
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	da1d      	bge.n	8001a20 <control_speed+0x60>
		while(current < dutycycle){
 80019e4:	e016      	b.n	8001a14 <control_speed+0x54>
			TIM1->CCR1 += 10;
 80019e6:	4b22      	ldr	r3, [pc, #136]	@ (8001a70 <control_speed+0xb0>)
 80019e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ea:	4a21      	ldr	r2, [pc, #132]	@ (8001a70 <control_speed+0xb0>)
 80019ec:	330a      	adds	r3, #10
 80019ee:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM1->CCR2 -= 10;
 80019f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a70 <control_speed+0xb0>)
 80019f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001a70 <control_speed+0xb0>)
 80019f6:	3b0a      	subs	r3, #10
 80019f8:	6393      	str	r3, [r2, #56]	@ 0x38
			current = 100*(TIM1->CCR1)/(TIM1->ARR);
 80019fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <control_speed+0xb0>)
 80019fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019fe:	2264      	movs	r2, #100	@ 0x64
 8001a00:	fb03 f202 	mul.w	r2, r3, r2
 8001a04:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <control_speed+0xb0>)
 8001a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0c:	60fb      	str	r3, [r7, #12]
			HAL_Delay(100);
 8001a0e:	2064      	movs	r0, #100	@ 0x64
 8001a10:	f000 ff90 	bl	8002934 <HAL_Delay>
		while(current < dutycycle){
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbe4      	blt.n	80019e6 <control_speed+0x26>
		}
		return 1;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e022      	b.n	8001a66 <control_speed+0xa6>
	}
	if(current > dutycycle){
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dd1d      	ble.n	8001a64 <control_speed+0xa4>
		while(current > dutycycle){
 8001a28:	e016      	b.n	8001a58 <control_speed+0x98>
			TIM1->CCR1 -= 10;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <control_speed+0xb0>)
 8001a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a2e:	4a10      	ldr	r2, [pc, #64]	@ (8001a70 <control_speed+0xb0>)
 8001a30:	3b0a      	subs	r3, #10
 8001a32:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM1->CCR2 += 10;
 8001a34:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <control_speed+0xb0>)
 8001a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a38:	4a0d      	ldr	r2, [pc, #52]	@ (8001a70 <control_speed+0xb0>)
 8001a3a:	330a      	adds	r3, #10
 8001a3c:	6393      	str	r3, [r2, #56]	@ 0x38
			current = 100*(TIM1->CCR1)/(TIM1->ARR);
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <control_speed+0xb0>)
 8001a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a42:	2264      	movs	r2, #100	@ 0x64
 8001a44:	fb03 f202 	mul.w	r2, r3, r2
 8001a48:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <control_speed+0xb0>)
 8001a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a50:	60fb      	str	r3, [r7, #12]
			HAL_Delay(100);
 8001a52:	2064      	movs	r0, #100	@ 0x64
 8001a54:	f000 ff6e 	bl	8002934 <HAL_Delay>
		while(current > dutycycle){
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dce4      	bgt.n	8001a2a <control_speed+0x6a>
		}
		return 1;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <control_speed+0xa6>
	}
	return 1;
 8001a64:	2301      	movs	r3, #1
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40012c00 	.word	0x40012c00

08001a74 <StartMotor>:

/**
 * @brief Met le rapport cyclique des PWMs à 50% puis les démarre.
 */
void StartMotor(){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)powerOn, strlen(powerOn), HAL_MAX_DELAY);
 8001a78:	4812      	ldr	r0, [pc, #72]	@ (8001ac4 <StartMotor+0x50>)
 8001a7a:	f7fe fc31 	bl	80002e0 <strlen>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	490f      	ldr	r1, [pc, #60]	@ (8001ac4 <StartMotor+0x50>)
 8001a88:	480f      	ldr	r0, [pc, #60]	@ (8001ac8 <StartMotor+0x54>)
 8001a8a:	f006 f8f5 	bl	8007c78 <HAL_UART_Transmit>
	TIM1->CCR1 = 512;
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <StartMotor+0x58>)
 8001a90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a94:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 = 1023-512;
 8001a96:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <StartMotor+0x58>)
 8001a98:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001a9c:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	480b      	ldr	r0, [pc, #44]	@ (8001ad0 <StartMotor+0x5c>)
 8001aa2:	f004 fa7d 	bl	8005fa0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4809      	ldr	r0, [pc, #36]	@ (8001ad0 <StartMotor+0x5c>)
 8001aaa:	f005 fdaf 	bl	800760c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001aae:	2104      	movs	r1, #4
 8001ab0:	4807      	ldr	r0, [pc, #28]	@ (8001ad0 <StartMotor+0x5c>)
 8001ab2:	f004 fa75 	bl	8005fa0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001ab6:	2104      	movs	r1, #4
 8001ab8:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <StartMotor+0x5c>)
 8001aba:	f005 fda7 	bl	800760c <HAL_TIMEx_PWMN_Start>
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	0800e7cc 	.word	0x0800e7cc
 8001ac8:	20000420 	.word	0x20000420
 8001acc:	40012c00 	.word	0x40012c00
 8001ad0:	20000388 	.word	0x20000388

08001ad4 <StopMotor>:

/**
 * @brief Met le rapport cyclique des PWMs à 50% puis les arrête.
 */
void StopMotor(){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)powerOff, strlen(powerOff), HAL_MAX_DELAY);
 8001ad8:	480f      	ldr	r0, [pc, #60]	@ (8001b18 <StopMotor+0x44>)
 8001ada:	f7fe fc01 	bl	80002e0 <strlen>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	490c      	ldr	r1, [pc, #48]	@ (8001b18 <StopMotor+0x44>)
 8001ae8:	480c      	ldr	r0, [pc, #48]	@ (8001b1c <StopMotor+0x48>)
 8001aea:	f006 f8c5 	bl	8007c78 <HAL_UART_Transmit>
	control_speed(50);
 8001aee:	2032      	movs	r0, #50	@ 0x32
 8001af0:	f7ff ff66 	bl	80019c0 <control_speed>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001af4:	2100      	movs	r1, #0
 8001af6:	480a      	ldr	r0, [pc, #40]	@ (8001b20 <StopMotor+0x4c>)
 8001af8:	f004 fb64 	bl	80061c4 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001afc:	2100      	movs	r1, #0
 8001afe:	4808      	ldr	r0, [pc, #32]	@ (8001b20 <StopMotor+0x4c>)
 8001b00:	f005 fe46 	bl	8007790 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001b04:	2104      	movs	r1, #4
 8001b06:	4806      	ldr	r0, [pc, #24]	@ (8001b20 <StopMotor+0x4c>)
 8001b08:	f004 fb5c 	bl	80061c4 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	4804      	ldr	r0, [pc, #16]	@ (8001b20 <StopMotor+0x4c>)
 8001b10:	f005 fe3e 	bl	8007790 <HAL_TIMEx_PWMN_Stop>
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	0800e7d8 	.word	0x0800e7d8
 8001b1c:	20000420 	.word	0x20000420
 8001b20:	20000388 	.word	0x20000388

08001b24 <ControlSpeed>:

/**
 * @brief Teste si le rapport cyclique donné est valide puis le modifie.
 * @param commande entrée dans le terminal
 */
void ControlSpeed(int argc, char ** argv[]){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
	if (argc != 2){
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d00b      	beq.n	8001b4c <ControlSpeed+0x28>
		HAL_UART_Transmit(&huart2, (uint8_t*)wrongargument, strlen(wrongargument), HAL_MAX_DELAY);
 8001b34:	4818      	ldr	r0, [pc, #96]	@ (8001b98 <ControlSpeed+0x74>)
 8001b36:	f7fe fbd3 	bl	80002e0 <strlen>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	4915      	ldr	r1, [pc, #84]	@ (8001b98 <ControlSpeed+0x74>)
 8001b44:	4815      	ldr	r0, [pc, #84]	@ (8001b9c <ControlSpeed+0x78>)
 8001b46:	f006 f897 	bl	8007c78 <HAL_UART_Transmit>
		}
		else {
			HAL_UART_Transmit(&huart2, (uint8_t*)wrongvalue, strlen(wrongvalue), HAL_MAX_DELAY);
		}
	}
}
 8001b4a:	e021      	b.n	8001b90 <ControlSpeed+0x6c>
		dutycycle = atoi(argv[1]);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f008 f8b6 	bl	8009cc4 <atoi>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4a11      	ldr	r2, [pc, #68]	@ (8001ba0 <ControlSpeed+0x7c>)
 8001b5c:	6013      	str	r3, [r2, #0]
		if( (0<dutycycle) && (dutycycle<100) ){
 8001b5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ba0 <ControlSpeed+0x7c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	dd09      	ble.n	8001b7a <ControlSpeed+0x56>
 8001b66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <ControlSpeed+0x7c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b63      	cmp	r3, #99	@ 0x63
 8001b6c:	dc05      	bgt.n	8001b7a <ControlSpeed+0x56>
			control_speed(dutycycle);
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <ControlSpeed+0x7c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff24 	bl	80019c0 <control_speed>
}
 8001b78:	e00a      	b.n	8001b90 <ControlSpeed+0x6c>
			HAL_UART_Transmit(&huart2, (uint8_t*)wrongvalue, strlen(wrongvalue), HAL_MAX_DELAY);
 8001b7a:	480a      	ldr	r0, [pc, #40]	@ (8001ba4 <ControlSpeed+0x80>)
 8001b7c:	f7fe fbb0 	bl	80002e0 <strlen>
 8001b80:	4603      	mov	r3, r0
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295
 8001b88:	4906      	ldr	r1, [pc, #24]	@ (8001ba4 <ControlSpeed+0x80>)
 8001b8a:	4804      	ldr	r0, [pc, #16]	@ (8001b9c <ControlSpeed+0x78>)
 8001b8c:	f006 f874 	bl	8007c78 <HAL_UART_Transmit>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	0800e7f8 	.word	0x0800e7f8
 8001b9c:	20000420 	.word	0x20000420
 8001ba0:	20000558 	.word	0x20000558
 8001ba4:	0800e810 	.word	0x0800e810

08001ba8 <StartShell>:
/* Fonctions -----------------------------------------------------------------*/

/**
 * @brief Affiche le message d'acceuil dans le terminal.
 */
void StartShell(){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001bac:	2201      	movs	r2, #1
 8001bae:	4914      	ldr	r1, [pc, #80]	@ (8001c00 <StartShell+0x58>)
 8001bb0:	4814      	ldr	r0, [pc, #80]	@ (8001c04 <StartShell+0x5c>)
 8001bb2:	f006 f8f7 	bl	8007da4 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8001bb6:	200a      	movs	r0, #10
 8001bb8:	f000 febc 	bl	8002934 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc0:	2266      	movs	r2, #102	@ 0x66
 8001bc2:	4911      	ldr	r1, [pc, #68]	@ (8001c08 <StartShell+0x60>)
 8001bc4:	480f      	ldr	r0, [pc, #60]	@ (8001c04 <StartShell+0x5c>)
 8001bc6:	f006 f857 	bl	8007c78 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
 8001bce:	2218      	movs	r2, #24
 8001bd0:	490e      	ldr	r1, [pc, #56]	@ (8001c0c <StartShell+0x64>)
 8001bd2:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <StartShell+0x5c>)
 8001bd4:	f006 f850 	bl	8007c78 <HAL_UART_Transmit>

	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8001bd8:	2224      	movs	r2, #36	@ 0x24
 8001bda:	2100      	movs	r1, #0
 8001bdc:	480c      	ldr	r0, [pc, #48]	@ (8001c10 <StartShell+0x68>)
 8001bde:	f009 f88c 	bl	800acfa <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8001be2:	2240      	movs	r2, #64	@ 0x40
 8001be4:	2100      	movs	r1, #0
 8001be6:	480b      	ldr	r0, [pc, #44]	@ (8001c14 <StartShell+0x6c>)
 8001be8:	f009 f887 	bl	800acfa <memset>
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
 8001bec:	4b04      	ldr	r3, [pc, #16]	@ (8001c00 <StartShell+0x58>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8001bf2:	2240      	movs	r2, #64	@ 0x40
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4808      	ldr	r0, [pc, #32]	@ (8001c18 <StartShell+0x70>)
 8001bf8:	f009 f87f 	bl	800acfa <memset>
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000560 	.word	0x20000560
 8001c04:	20000420 	.word	0x20000420
 8001c08:	0800e580 	.word	0x0800e580
 8001c0c:	0800e568 	.word	0x0800e568
 8001c10:	200005e8 	.word	0x200005e8
 8001c14:	200005a4 	.word	0x200005a4
 8001c18:	20000564 	.word	0x20000564

08001c1c <Shell_Process>:

/**
 * @brief Gere l'écriture dans le terminal.
 */
void Shell_Process(){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 8001c20:	4b31      	ldr	r3, [pc, #196]	@ (8001ce8 <Shell_Process+0xcc>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d05c      	beq.n	8001ce2 <Shell_Process+0xc6>
		switch(uartRxBuffer[0]){
 8001c28:	4b30      	ldr	r3, [pc, #192]	@ (8001cec <Shell_Process+0xd0>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b0d      	cmp	r3, #13
 8001c2e:	d002      	beq.n	8001c36 <Shell_Process+0x1a>
 8001c30:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c32:	d033      	beq.n	8001c9c <Shell_Process+0x80>
 8001c34:	e042      	b.n	8001cbc <Shell_Process+0xa0>
		// Nouvelle ligne, instruction à traiter
		case ASCII_CR:
			HAL_UART_Transmit(&huart2, newLine, sizeof(newLine), HAL_MAX_DELAY);
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	492c      	ldr	r1, [pc, #176]	@ (8001cf0 <Shell_Process+0xd4>)
 8001c3e:	482d      	ldr	r0, [pc, #180]	@ (8001cf4 <Shell_Process+0xd8>)
 8001c40:	f006 f81a 	bl	8007c78 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8001c44:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf8 <Shell_Process+0xdc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a2c      	ldr	r2, [pc, #176]	@ (8001cfc <Shell_Process+0xe0>)
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8001c4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d00 <Shell_Process+0xe4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8001c54:	492b      	ldr	r1, [pc, #172]	@ (8001d04 <Shell_Process+0xe8>)
 8001c56:	4829      	ldr	r0, [pc, #164]	@ (8001cfc <Shell_Process+0xe0>)
 8001c58:	f009 f858 	bl	800ad0c <strtok>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8001d08 <Shell_Process+0xec>)
 8001c60:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001c62:	e010      	b.n	8001c86 <Shell_Process+0x6a>
				argv[argc++] = token;
 8001c64:	4b26      	ldr	r3, [pc, #152]	@ (8001d00 <Shell_Process+0xe4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	4925      	ldr	r1, [pc, #148]	@ (8001d00 <Shell_Process+0xe4>)
 8001c6c:	600a      	str	r2, [r1, #0]
 8001c6e:	4a26      	ldr	r2, [pc, #152]	@ (8001d08 <Shell_Process+0xec>)
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	4926      	ldr	r1, [pc, #152]	@ (8001d0c <Shell_Process+0xf0>)
 8001c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001c78:	4922      	ldr	r1, [pc, #136]	@ (8001d04 <Shell_Process+0xe8>)
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f009 f846 	bl	800ad0c <strtok>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4a21      	ldr	r2, [pc, #132]	@ (8001d08 <Shell_Process+0xec>)
 8001c84:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001c86:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <Shell_Process+0xec>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1ea      	bne.n	8001c64 <Shell_Process+0x48>
			}

			idx_cmd = 0;
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <Shell_Process+0xdc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8001c94:	4b1e      	ldr	r3, [pc, #120]	@ (8001d10 <Shell_Process+0xf4>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]
			break;
 8001c9a:	e01f      	b.n	8001cdc <Shell_Process+0xc0>
			// Suppression du dernier caractère
		case ASCII_DEL:
			cmdBuffer[idx_cmd--] = '\0';
 8001c9c:	4b16      	ldr	r3, [pc, #88]	@ (8001cf8 <Shell_Process+0xdc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	1e5a      	subs	r2, r3, #1
 8001ca2:	4915      	ldr	r1, [pc, #84]	@ (8001cf8 <Shell_Process+0xdc>)
 8001ca4:	600a      	str	r2, [r1, #0]
 8001ca6:	4a15      	ldr	r2, [pc, #84]	@ (8001cfc <Shell_Process+0xe0>)
 8001ca8:	2100      	movs	r1, #0
 8001caa:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	490e      	ldr	r1, [pc, #56]	@ (8001cec <Shell_Process+0xd0>)
 8001cb4:	480f      	ldr	r0, [pc, #60]	@ (8001cf4 <Shell_Process+0xd8>)
 8001cb6:	f005 ffdf 	bl	8007c78 <HAL_UART_Transmit>
			break;
 8001cba:	e00f      	b.n	8001cdc <Shell_Process+0xc0>
			// Nouveau caractère
		default:
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <Shell_Process+0xdc>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	490d      	ldr	r1, [pc, #52]	@ (8001cf8 <Shell_Process+0xdc>)
 8001cc4:	600a      	str	r2, [r1, #0]
 8001cc6:	4a09      	ldr	r2, [pc, #36]	@ (8001cec <Shell_Process+0xd0>)
 8001cc8:	7811      	ldrb	r1, [r2, #0]
 8001cca:	4a0c      	ldr	r2, [pc, #48]	@ (8001cfc <Shell_Process+0xe0>)
 8001ccc:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4905      	ldr	r1, [pc, #20]	@ (8001cec <Shell_Process+0xd0>)
 8001cd6:	4807      	ldr	r0, [pc, #28]	@ (8001cf4 <Shell_Process+0xd8>)
 8001cd8:	f005 ffce 	bl	8007c78 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8001cdc:	4b02      	ldr	r3, [pc, #8]	@ (8001ce8 <Shell_Process+0xcc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
	}
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000055c 	.word	0x2000055c
 8001cec:	20000560 	.word	0x20000560
 8001cf0:	0800e5e8 	.word	0x0800e5e8
 8001cf4:	20000420 	.word	0x20000420
 8001cf8:	200005e4 	.word	0x200005e4
 8001cfc:	200005a4 	.word	0x200005a4
 8001d00:	2000060c 	.word	0x2000060c
 8001d04:	0800e52c 	.word	0x0800e52c
 8001d08:	20000610 	.word	0x20000610
 8001d0c:	200005e8 	.word	0x200005e8
 8001d10:	20000614 	.word	0x20000614

08001d14 <New_Command>:

/**
 * @brief Gere les entrées de commande dans le terminal.
 */
void New_Command(){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	if(newCmdReady){
 8001d18:	4b3c      	ldr	r3, [pc, #240]	@ (8001e0c <New_Command+0xf8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d073      	beq.n	8001e08 <New_Command+0xf4>
		if (strcmp(argv[0], "help") == 0) {
 8001d20:	4b3b      	ldr	r3, [pc, #236]	@ (8001e10 <New_Command+0xfc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	493b      	ldr	r1, [pc, #236]	@ (8001e14 <New_Command+0x100>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fa7a 	bl	8000220 <strcmp>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d108      	bne.n	8001d44 <New_Command+0x30>
			HAL_UART_Transmit(&huart2, (uint8_t*)help, strlen(help), HAL_MAX_DELAY);
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 8001d3a:	4937      	ldr	r1, [pc, #220]	@ (8001e18 <New_Command+0x104>)
 8001d3c:	4837      	ldr	r0, [pc, #220]	@ (8001e1c <New_Command+0x108>)
 8001d3e:	f005 ff9b 	bl	8007c78 <HAL_UART_Transmit>
 8001d42:	e057      	b.n	8001df4 <New_Command+0xe0>
		}
		else if (strcmp(argv[0], "pinout") == 0) {
 8001d44:	4b32      	ldr	r3, [pc, #200]	@ (8001e10 <New_Command+0xfc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4935      	ldr	r1, [pc, #212]	@ (8001e20 <New_Command+0x10c>)
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fa68 	bl	8000220 <strcmp>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d107      	bne.n	8001d66 <New_Command+0x52>
			HAL_UART_Transmit(&huart2, (uint8_t*)pinout, strlen(pinout), HAL_MAX_DELAY);
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5a:	2278      	movs	r2, #120	@ 0x78
 8001d5c:	4931      	ldr	r1, [pc, #196]	@ (8001e24 <New_Command+0x110>)
 8001d5e:	482f      	ldr	r0, [pc, #188]	@ (8001e1c <New_Command+0x108>)
 8001d60:	f005 ff8a 	bl	8007c78 <HAL_UART_Transmit>
 8001d64:	e046      	b.n	8001df4 <New_Command+0xe0>
		}
		else if (strcmp(argv[0], "start") == 0) {
 8001d66:	4b2a      	ldr	r3, [pc, #168]	@ (8001e10 <New_Command+0xfc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	492f      	ldr	r1, [pc, #188]	@ (8001e28 <New_Command+0x114>)
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fa57 	bl	8000220 <strcmp>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <New_Command+0x6a>
			StartMotor();
 8001d78:	f7ff fe7c 	bl	8001a74 <StartMotor>
 8001d7c:	e03a      	b.n	8001df4 <New_Command+0xe0>
		}
		else if (strcmp(argv[0], "stop") == 0) {
 8001d7e:	4b24      	ldr	r3, [pc, #144]	@ (8001e10 <New_Command+0xfc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	492a      	ldr	r1, [pc, #168]	@ (8001e2c <New_Command+0x118>)
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fa4b 	bl	8000220 <strcmp>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <New_Command+0x82>
			StopMotor();
 8001d90:	f7ff fea0 	bl	8001ad4 <StopMotor>
 8001d94:	e02e      	b.n	8001df4 <New_Command+0xe0>
		}
		else if (strcmp(argv[0], "speed") == 0) {
 8001d96:	4b1e      	ldr	r3, [pc, #120]	@ (8001e10 <New_Command+0xfc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4925      	ldr	r1, [pc, #148]	@ (8001e30 <New_Command+0x11c>)
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fa3f 	bl	8000220 <strcmp>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d106      	bne.n	8001db6 <New_Command+0xa2>
			ControlSpeed(argc,argv);
 8001da8:	4b22      	ldr	r3, [pc, #136]	@ (8001e34 <New_Command+0x120>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4918      	ldr	r1, [pc, #96]	@ (8001e10 <New_Command+0xfc>)
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff feb8 	bl	8001b24 <ControlSpeed>
 8001db4:	e01e      	b.n	8001df4 <New_Command+0xe0>
		}
		else if (strcmp(argv[0], "current") == 0) {
 8001db6:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <New_Command+0xfc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	491f      	ldr	r1, [pc, #124]	@ (8001e38 <New_Command+0x124>)
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fa2f 	bl	8000220 <strcmp>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <New_Command+0xba>
			GetCurrent();
 8001dc8:	f7ff fd8a 	bl	80018e0 <GetCurrent>
 8001dcc:	e012      	b.n	8001df4 <New_Command+0xe0>
		}
		else if (strcmp(argv[0], "vitesse") == 0) {
 8001dce:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <New_Command+0xfc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	491a      	ldr	r1, [pc, #104]	@ (8001e3c <New_Command+0x128>)
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fa23 	bl	8000220 <strcmp>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <New_Command+0xd2>
			getSpeed();
 8001de0:	f7ff fdb6 	bl	8001950 <getSpeed>
 8001de4:	e006      	b.n	8001df4 <New_Command+0xe0>
		}

		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dea:	2214      	movs	r2, #20
 8001dec:	4914      	ldr	r1, [pc, #80]	@ (8001e40 <New_Command+0x12c>)
 8001dee:	480b      	ldr	r0, [pc, #44]	@ (8001e1c <New_Command+0x108>)
 8001df0:	f005 ff42 	bl	8007c78 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
 8001df8:	2218      	movs	r2, #24
 8001dfa:	4912      	ldr	r1, [pc, #72]	@ (8001e44 <New_Command+0x130>)
 8001dfc:	4807      	ldr	r0, [pc, #28]	@ (8001e1c <New_Command+0x108>)
 8001dfe:	f005 ff3b 	bl	8007c78 <HAL_UART_Transmit>
		newCmdReady = 0;
 8001e02:	4b02      	ldr	r3, [pc, #8]	@ (8001e0c <New_Command+0xf8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
	}
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000614 	.word	0x20000614
 8001e10:	200005e8 	.word	0x200005e8
 8001e14:	0800e530 	.word	0x0800e530
 8001e18:	0800e5ec 	.word	0x0800e5ec
 8001e1c:	20000420 	.word	0x20000420
 8001e20:	0800e538 	.word	0x0800e538
 8001e24:	0800e750 	.word	0x0800e750
 8001e28:	0800e540 	.word	0x0800e540
 8001e2c:	0800e548 	.word	0x0800e548
 8001e30:	0800e550 	.word	0x0800e550
 8001e34:	2000060c 	.word	0x2000060c
 8001e38:	0800e558 	.word	0x0800e558
 8001e3c:	0800e560 	.word	0x0800e560
 8001e40:	0800e7e4 	.word	0x0800e7e4
 8001e44:	0800e568 	.word	0x0800e568

08001e48 <HAL_UART_RxCpltCallback>:

/**
 * @brief Gere les entrées de commande dans le terminal.
 * @param Pointeur de l'uart recevant le message
 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001e50:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <HAL_UART_RxCpltCallback+0x20>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001e56:	2201      	movs	r2, #1
 8001e58:	4904      	ldr	r1, [pc, #16]	@ (8001e6c <HAL_UART_RxCpltCallback+0x24>)
 8001e5a:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <HAL_UART_RxCpltCallback+0x28>)
 8001e5c:	f005 ffa2 	bl	8007da4 <HAL_UART_Receive_IT>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	2000055c 	.word	0x2000055c
 8001e6c:	20000560 	.word	0x20000560
 8001e70:	20000420 	.word	0x20000420

08001e74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e86:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e96:	4a08      	ldr	r2, [pc, #32]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001eaa:	f002 ff13 	bl	8004cd4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000

08001ebc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b0a4      	sub	sp, #144	@ 0x90
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ed4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ed8:	2254      	movs	r2, #84	@ 0x54
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f008 ff0c 	bl	800acfa <memset>
  if(hadc->Instance==ADC1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eea:	f040 80a8 	bne.w	800203e <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001ef4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001ef8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001efa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fc5e 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001f0a:	f7ff fc77 	bl	80017fc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f0e:	4b97      	ldr	r3, [pc, #604]	@ (800216c <HAL_ADC_MspInit+0x2b0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	3301      	adds	r3, #1
 8001f14:	4a95      	ldr	r2, [pc, #596]	@ (800216c <HAL_ADC_MspInit+0x2b0>)
 8001f16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f18:	4b94      	ldr	r3, [pc, #592]	@ (800216c <HAL_ADC_MspInit+0x2b0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10b      	bne.n	8001f38 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f20:	4b93      	ldr	r3, [pc, #588]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 8001f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f24:	4a92      	ldr	r2, [pc, #584]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 8001f26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f2c:	4b90      	ldr	r3, [pc, #576]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f38:	4b8d      	ldr	r3, [pc, #564]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3c:	4a8c      	ldr	r2, [pc, #560]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 8001f3e:	f043 0304 	orr.w	r3, r3, #4
 8001f42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f44:	4b8a      	ldr	r3, [pc, #552]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 8001f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	623b      	str	r3, [r7, #32]
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f50:	4b87      	ldr	r3, [pc, #540]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f54:	4a86      	ldr	r2, [pc, #536]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f5c:	4b84      	ldr	r3, [pc, #528]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f68:	4b81      	ldr	r3, [pc, #516]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6c:	4a80      	ldr	r2, [pc, #512]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f74:	4b7e      	ldr	r3, [pc, #504]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8001f80:	2304      	movs	r3, #4
 8001f82:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f84:	2303      	movs	r3, #3
 8001f86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8001f90:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001f94:	4619      	mov	r1, r3
 8001f96:	4877      	ldr	r0, [pc, #476]	@ (8002174 <HAL_ADC_MspInit+0x2b8>)
 8001f98:	f002 fc3a 	bl	8004810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001fac:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fb6:	f002 fc2b 	bl	8004810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fca:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4869      	ldr	r0, [pc, #420]	@ (8002178 <HAL_ADC_MspInit+0x2bc>)
 8001fd2:	f002 fc1d 	bl	8004810 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001fd6:	4b69      	ldr	r3, [pc, #420]	@ (800217c <HAL_ADC_MspInit+0x2c0>)
 8001fd8:	4a69      	ldr	r2, [pc, #420]	@ (8002180 <HAL_ADC_MspInit+0x2c4>)
 8001fda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001fdc:	4b67      	ldr	r3, [pc, #412]	@ (800217c <HAL_ADC_MspInit+0x2c0>)
 8001fde:	2205      	movs	r2, #5
 8001fe0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe2:	4b66      	ldr	r3, [pc, #408]	@ (800217c <HAL_ADC_MspInit+0x2c0>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe8:	4b64      	ldr	r3, [pc, #400]	@ (800217c <HAL_ADC_MspInit+0x2c0>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fee:	4b63      	ldr	r3, [pc, #396]	@ (800217c <HAL_ADC_MspInit+0x2c0>)
 8001ff0:	2280      	movs	r2, #128	@ 0x80
 8001ff2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ff4:	4b61      	ldr	r3, [pc, #388]	@ (800217c <HAL_ADC_MspInit+0x2c0>)
 8001ff6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ffa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ffc:	4b5f      	ldr	r3, [pc, #380]	@ (800217c <HAL_ADC_MspInit+0x2c0>)
 8001ffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002002:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002004:	4b5d      	ldr	r3, [pc, #372]	@ (800217c <HAL_ADC_MspInit+0x2c0>)
 8002006:	2220      	movs	r2, #32
 8002008:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800200a:	4b5c      	ldr	r3, [pc, #368]	@ (800217c <HAL_ADC_MspInit+0x2c0>)
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002010:	485a      	ldr	r0, [pc, #360]	@ (800217c <HAL_ADC_MspInit+0x2c0>)
 8002012:	f002 f983 	bl	800431c <HAL_DMA_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 800201c:	f7ff fbee 	bl	80017fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a56      	ldr	r2, [pc, #344]	@ (800217c <HAL_ADC_MspInit+0x2c0>)
 8002024:	655a      	str	r2, [r3, #84]	@ 0x54
 8002026:	4a55      	ldr	r2, [pc, #340]	@ (800217c <HAL_ADC_MspInit+0x2c0>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800202c:	2200      	movs	r2, #0
 800202e:	2100      	movs	r1, #0
 8002030:	2012      	movs	r0, #18
 8002032:	f002 f94b 	bl	80042cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002036:	2012      	movs	r0, #18
 8002038:	f002 f962 	bl	8004300 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800203c:	e092      	b.n	8002164 <HAL_ADC_MspInit+0x2a8>
  else if(hadc->Instance==ADC2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a50      	ldr	r2, [pc, #320]	@ (8002184 <HAL_ADC_MspInit+0x2c8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	f040 808d 	bne.w	8002164 <HAL_ADC_MspInit+0x2a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800204a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800204e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002050:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002054:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002056:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800205a:	4618      	mov	r0, r3
 800205c:	f003 fbb0 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 8002066:	f7ff fbc9 	bl	80017fc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800206a:	4b40      	ldr	r3, [pc, #256]	@ (800216c <HAL_ADC_MspInit+0x2b0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	4a3e      	ldr	r2, [pc, #248]	@ (800216c <HAL_ADC_MspInit+0x2b0>)
 8002072:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002074:	4b3d      	ldr	r3, [pc, #244]	@ (800216c <HAL_ADC_MspInit+0x2b0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d10b      	bne.n	8002094 <HAL_ADC_MspInit+0x1d8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800207c:	4b3c      	ldr	r3, [pc, #240]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 800207e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002080:	4a3b      	ldr	r2, [pc, #236]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 8002082:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002086:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002088:	4b39      	ldr	r3, [pc, #228]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 800208a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002094:	4b36      	ldr	r3, [pc, #216]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 8002096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002098:	4a35      	ldr	r2, [pc, #212]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a0:	4b33      	ldr	r3, [pc, #204]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 80020a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	4b30      	ldr	r3, [pc, #192]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 80020ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002170 <HAL_ADC_MspInit+0x2b4>)
 80020ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80020c4:	230b      	movs	r3, #11
 80020c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c8:	2303      	movs	r3, #3
 80020ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80020d8:	4619      	mov	r1, r3
 80020da:	4826      	ldr	r0, [pc, #152]	@ (8002174 <HAL_ADC_MspInit+0x2b8>)
 80020dc:	f002 fb98 	bl	8004810 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80020e0:	2301      	movs	r3, #1
 80020e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020e4:	2303      	movs	r3, #3
 80020e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80020f0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80020f4:	4619      	mov	r1, r3
 80020f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020fa:	f002 fb89 	bl	8004810 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel1;
 80020fe:	4b22      	ldr	r3, [pc, #136]	@ (8002188 <HAL_ADC_MspInit+0x2cc>)
 8002100:	4a22      	ldr	r2, [pc, #136]	@ (800218c <HAL_ADC_MspInit+0x2d0>)
 8002102:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002104:	4b20      	ldr	r3, [pc, #128]	@ (8002188 <HAL_ADC_MspInit+0x2cc>)
 8002106:	2224      	movs	r2, #36	@ 0x24
 8002108:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800210a:	4b1f      	ldr	r3, [pc, #124]	@ (8002188 <HAL_ADC_MspInit+0x2cc>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002110:	4b1d      	ldr	r3, [pc, #116]	@ (8002188 <HAL_ADC_MspInit+0x2cc>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002116:	4b1c      	ldr	r3, [pc, #112]	@ (8002188 <HAL_ADC_MspInit+0x2cc>)
 8002118:	2280      	movs	r2, #128	@ 0x80
 800211a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800211c:	4b1a      	ldr	r3, [pc, #104]	@ (8002188 <HAL_ADC_MspInit+0x2cc>)
 800211e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002122:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002124:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <HAL_ADC_MspInit+0x2cc>)
 8002126:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800212a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800212c:	4b16      	ldr	r3, [pc, #88]	@ (8002188 <HAL_ADC_MspInit+0x2cc>)
 800212e:	2220      	movs	r2, #32
 8002130:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002132:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <HAL_ADC_MspInit+0x2cc>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002138:	4813      	ldr	r0, [pc, #76]	@ (8002188 <HAL_ADC_MspInit+0x2cc>)
 800213a:	f002 f8ef 	bl	800431c <HAL_DMA_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_ADC_MspInit+0x28c>
      Error_Handler();
 8002144:	f7ff fb5a 	bl	80017fc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a0f      	ldr	r2, [pc, #60]	@ (8002188 <HAL_ADC_MspInit+0x2cc>)
 800214c:	655a      	str	r2, [r3, #84]	@ 0x54
 800214e:	4a0e      	ldr	r2, [pc, #56]	@ (8002188 <HAL_ADC_MspInit+0x2cc>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2012      	movs	r0, #18
 800215a:	f002 f8b7 	bl	80042cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800215e:	2012      	movs	r0, #18
 8002160:	f002 f8ce 	bl	8004300 <HAL_NVIC_EnableIRQ>
}
 8002164:	bf00      	nop
 8002166:	3790      	adds	r7, #144	@ 0x90
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000618 	.word	0x20000618
 8002170:	40021000 	.word	0x40021000
 8002174:	48000800 	.word	0x48000800
 8002178:	48000400 	.word	0x48000400
 800217c:	200002c8 	.word	0x200002c8
 8002180:	4002001c 	.word	0x4002001c
 8002184:	50000100 	.word	0x50000100
 8002188:	20000328 	.word	0x20000328
 800218c:	40020008 	.word	0x40020008

08002190 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	@ 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a18      	ldr	r2, [pc, #96]	@ (8002210 <HAL_TIM_Base_MspInit+0x80>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d129      	bne.n	8002206 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021b2:	4b18      	ldr	r3, [pc, #96]	@ (8002214 <HAL_TIM_Base_MspInit+0x84>)
 80021b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b6:	4a17      	ldr	r2, [pc, #92]	@ (8002214 <HAL_TIM_Base_MspInit+0x84>)
 80021b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <HAL_TIM_Base_MspInit+0x84>)
 80021c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_TIM_Base_MspInit+0x84>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ce:	4a11      	ldr	r2, [pc, #68]	@ (8002214 <HAL_TIM_Base_MspInit+0x84>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002214 <HAL_TIM_Base_MspInit+0x84>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = W_PWM_H_Pin;
 80021e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021f4:	2306      	movs	r3, #6
 80021f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_H_GPIO_Port, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002202:	f002 fb05 	bl	8004810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002206:	bf00      	nop
 8002208:	3728      	adds	r7, #40	@ 0x28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40012c00 	.word	0x40012c00
 8002214:	40021000 	.word	0x40021000

08002218 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	@ 0x28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM3)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a26      	ldr	r2, [pc, #152]	@ (80022d0 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d145      	bne.n	80022c6 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800223a:	4b26      	ldr	r3, [pc, #152]	@ (80022d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223e:	4a25      	ldr	r2, [pc, #148]	@ (80022d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6593      	str	r3, [r2, #88]	@ 0x58
 8002246:	4b23      	ldr	r3, [pc, #140]	@ (80022d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	4b20      	ldr	r3, [pc, #128]	@ (80022d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002256:	4a1f      	ldr	r2, [pc, #124]	@ (80022d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800225e:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800226a:	4b1a      	ldr	r3, [pc, #104]	@ (80022d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800226c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226e:	4a19      	ldr	r2, [pc, #100]	@ (80022d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002276:	4b17      	ldr	r3, [pc, #92]	@ (80022d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002282:	2350      	movs	r3, #80	@ 0x50
 8002284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002292:	2302      	movs	r3, #2
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4619      	mov	r1, r3
 800229c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a0:	f002 fab6 	bl	8004810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022b6:	2302      	movs	r3, #2
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	4619      	mov	r1, r3
 80022c0:	4805      	ldr	r0, [pc, #20]	@ (80022d8 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80022c2:	f002 faa5 	bl	8004810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022c6:	bf00      	nop
 80022c8:	3728      	adds	r7, #40	@ 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40021000 	.word	0x40021000
 80022d8:	48000800 	.word	0x48000800

080022dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	@ 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a29      	ldr	r2, [pc, #164]	@ (80023a0 <HAL_TIM_MspPostInit+0xc4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d14b      	bne.n	8002396 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fe:	4b29      	ldr	r3, [pc, #164]	@ (80023a4 <HAL_TIM_MspPostInit+0xc8>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002302:	4a28      	ldr	r2, [pc, #160]	@ (80023a4 <HAL_TIM_MspPostInit+0xc8>)
 8002304:	f043 0302 	orr.w	r3, r3, #2
 8002308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800230a:	4b26      	ldr	r3, [pc, #152]	@ (80023a4 <HAL_TIM_MspPostInit+0xc8>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	4b23      	ldr	r3, [pc, #140]	@ (80023a4 <HAL_TIM_MspPostInit+0xc8>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231a:	4a22      	ldr	r2, [pc, #136]	@ (80023a4 <HAL_TIM_MspPostInit+0xc8>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002322:	4b20      	ldr	r3, [pc, #128]	@ (80023a4 <HAL_TIM_MspPostInit+0xc8>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800232e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	2300      	movs	r3, #0
 800233e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002340:	2306      	movs	r3, #6
 8002342:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4619      	mov	r1, r3
 800234a:	4817      	ldr	r0, [pc, #92]	@ (80023a8 <HAL_TIM_MspPostInit+0xcc>)
 800234c:	f002 fa60 	bl	8004810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8002350:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002362:	2304      	movs	r3, #4
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	480e      	ldr	r0, [pc, #56]	@ (80023a8 <HAL_TIM_MspPostInit+0xcc>)
 800236e:	f002 fa4f 	bl	8004810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin;
 8002372:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002384:	2306      	movs	r3, #6
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002392:	f002 fa3d 	bl	8004810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002396:	bf00      	nop
 8002398:	3728      	adds	r7, #40	@ 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40012c00 	.word	0x40012c00
 80023a4:	40021000 	.word	0x40021000
 80023a8:	48000400 	.word	0x48000400

080023ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b0a0      	sub	sp, #128	@ 0x80
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023c4:	f107 0318 	add.w	r3, r7, #24
 80023c8:	2254      	movs	r2, #84	@ 0x54
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f008 fc94 	bl	800acfa <memset>
  if(huart->Instance==USART2)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a45      	ldr	r2, [pc, #276]	@ (80024ec <HAL_UART_MspInit+0x140>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d13f      	bne.n	800245c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023dc:	2302      	movs	r3, #2
 80023de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023e4:	f107 0318 	add.w	r3, r7, #24
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 f9e9 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023f4:	f7ff fa02 	bl	80017fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023f8:	4b3d      	ldr	r3, [pc, #244]	@ (80024f0 <HAL_UART_MspInit+0x144>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fc:	4a3c      	ldr	r2, [pc, #240]	@ (80024f0 <HAL_UART_MspInit+0x144>)
 80023fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002402:	6593      	str	r3, [r2, #88]	@ 0x58
 8002404:	4b3a      	ldr	r3, [pc, #232]	@ (80024f0 <HAL_UART_MspInit+0x144>)
 8002406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002410:	4b37      	ldr	r3, [pc, #220]	@ (80024f0 <HAL_UART_MspInit+0x144>)
 8002412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002414:	4a36      	ldr	r2, [pc, #216]	@ (80024f0 <HAL_UART_MspInit+0x144>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800241c:	4b34      	ldr	r3, [pc, #208]	@ (80024f0 <HAL_UART_MspInit+0x144>)
 800241e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002428:	230c      	movs	r3, #12
 800242a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2300      	movs	r3, #0
 8002436:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002438:	2307      	movs	r3, #7
 800243a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002440:	4619      	mov	r1, r3
 8002442:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002446:	f002 f9e3 	bl	8004810 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	2026      	movs	r0, #38	@ 0x26
 8002450:	f001 ff3c 	bl	80042cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002454:	2026      	movs	r0, #38	@ 0x26
 8002456:	f001 ff53 	bl	8004300 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800245a:	e043      	b.n	80024e4 <HAL_UART_MspInit+0x138>
  else if(huart->Instance==USART3)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a24      	ldr	r2, [pc, #144]	@ (80024f4 <HAL_UART_MspInit+0x148>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d13e      	bne.n	80024e4 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002466:	2304      	movs	r3, #4
 8002468:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800246e:	f107 0318 	add.w	r3, r7, #24
 8002472:	4618      	mov	r0, r3
 8002474:	f003 f9a4 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800247e:	f7ff f9bd 	bl	80017fc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002482:	4b1b      	ldr	r3, [pc, #108]	@ (80024f0 <HAL_UART_MspInit+0x144>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002486:	4a1a      	ldr	r2, [pc, #104]	@ (80024f0 <HAL_UART_MspInit+0x144>)
 8002488:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800248c:	6593      	str	r3, [r2, #88]	@ 0x58
 800248e:	4b18      	ldr	r3, [pc, #96]	@ (80024f0 <HAL_UART_MspInit+0x144>)
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002492:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800249a:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <HAL_UART_MspInit+0x144>)
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	4a14      	ldr	r2, [pc, #80]	@ (80024f0 <HAL_UART_MspInit+0x144>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024a6:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <HAL_UART_MspInit+0x144>)
 80024a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024b2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	2300      	movs	r3, #0
 80024c2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024c4:	2307      	movs	r3, #7
 80024c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80024cc:	4619      	mov	r1, r3
 80024ce:	480a      	ldr	r0, [pc, #40]	@ (80024f8 <HAL_UART_MspInit+0x14c>)
 80024d0:	f002 f99e 	bl	8004810 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2100      	movs	r1, #0
 80024d8:	2027      	movs	r0, #39	@ 0x27
 80024da:	f001 fef7 	bl	80042cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024de:	2027      	movs	r0, #39	@ 0x27
 80024e0:	f001 ff0e 	bl	8004300 <HAL_NVIC_EnableIRQ>
}
 80024e4:	bf00      	nop
 80024e6:	3780      	adds	r7, #128	@ 0x80
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40004400 	.word	0x40004400
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40004800 	.word	0x40004800
 80024f8:	48000800 	.word	0x48000800

080024fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	@ 0x30
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800250c:	4b2c      	ldr	r3, [pc, #176]	@ (80025c0 <HAL_InitTick+0xc4>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002510:	4a2b      	ldr	r2, [pc, #172]	@ (80025c0 <HAL_InitTick+0xc4>)
 8002512:	f043 0310 	orr.w	r3, r3, #16
 8002516:	6593      	str	r3, [r2, #88]	@ 0x58
 8002518:	4b29      	ldr	r3, [pc, #164]	@ (80025c0 <HAL_InitTick+0xc4>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002524:	f107 020c 	add.w	r2, r7, #12
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f003 f8ce 	bl	80056d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002534:	f003 f8a0 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8002538:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800253a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253c:	4a21      	ldr	r2, [pc, #132]	@ (80025c4 <HAL_InitTick+0xc8>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0c9b      	lsrs	r3, r3, #18
 8002544:	3b01      	subs	r3, #1
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002548:	4b1f      	ldr	r3, [pc, #124]	@ (80025c8 <HAL_InitTick+0xcc>)
 800254a:	4a20      	ldr	r2, [pc, #128]	@ (80025cc <HAL_InitTick+0xd0>)
 800254c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800254e:	4b1e      	ldr	r3, [pc, #120]	@ (80025c8 <HAL_InitTick+0xcc>)
 8002550:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002554:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002556:	4a1c      	ldr	r2, [pc, #112]	@ (80025c8 <HAL_InitTick+0xcc>)
 8002558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800255c:	4b1a      	ldr	r3, [pc, #104]	@ (80025c8 <HAL_InitTick+0xcc>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002562:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <HAL_InitTick+0xcc>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002568:	4817      	ldr	r0, [pc, #92]	@ (80025c8 <HAL_InitTick+0xcc>)
 800256a:	f003 fb77 	bl	8005c5c <HAL_TIM_Base_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002574:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002578:	2b00      	cmp	r3, #0
 800257a:	d11b      	bne.n	80025b4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800257c:	4812      	ldr	r0, [pc, #72]	@ (80025c8 <HAL_InitTick+0xcc>)
 800257e:	f003 fc35 	bl	8005dec <HAL_TIM_Base_Start_IT>
 8002582:	4603      	mov	r3, r0
 8002584:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002588:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800258c:	2b00      	cmp	r3, #0
 800258e:	d111      	bne.n	80025b4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002590:	2036      	movs	r0, #54	@ 0x36
 8002592:	f001 feb5 	bl	8004300 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b0f      	cmp	r3, #15
 800259a:	d808      	bhi.n	80025ae <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800259c:	2200      	movs	r2, #0
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	2036      	movs	r0, #54	@ 0x36
 80025a2:	f001 fe93 	bl	80042cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025a6:	4a0a      	ldr	r2, [pc, #40]	@ (80025d0 <HAL_InitTick+0xd4>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	e002      	b.n	80025b4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80025b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3730      	adds	r7, #48	@ 0x30
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	431bde83 	.word	0x431bde83
 80025c8:	2000061c 	.word	0x2000061c
 80025cc:	40001000 	.word	0x40001000
 80025d0:	20000004 	.word	0x20000004

080025d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025d8:	bf00      	nop
 80025da:	e7fd      	b.n	80025d8 <NMI_Handler+0x4>

080025dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e0:	bf00      	nop
 80025e2:	e7fd      	b.n	80025e0 <HardFault_Handler+0x4>

080025e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <MemManage_Handler+0x4>

080025ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <BusFault_Handler+0x4>

080025f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <UsageFault_Handler+0x4>

080025fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <DMA1_Channel1_IRQHandler+0x10>)
 800263a:	f001 ffd7 	bl	80045ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000328 	.word	0x20000328

08002648 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800264c:	4802      	ldr	r0, [pc, #8]	@ (8002658 <DMA1_Channel2_IRQHandler+0x10>)
 800264e:	f001 ffcd 	bl	80045ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200002c8 	.word	0x200002c8

0800265c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002660:	4803      	ldr	r0, [pc, #12]	@ (8002670 <ADC1_2_IRQHandler+0x14>)
 8002662:	f000 fd67 	bl	8003134 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002666:	4803      	ldr	r0, [pc, #12]	@ (8002674 <ADC1_2_IRQHandler+0x18>)
 8002668:	f000 fd64 	bl	8003134 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	200001f0 	.word	0x200001f0
 8002674:	2000025c 	.word	0x2000025c

08002678 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800267c:	4802      	ldr	r0, [pc, #8]	@ (8002688 <USART2_IRQHandler+0x10>)
 800267e:	f005 fbe7 	bl	8007e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000420 	.word	0x20000420

0800268c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002690:	4802      	ldr	r0, [pc, #8]	@ (800269c <USART3_IRQHandler+0x10>)
 8002692:	f005 fbdd 	bl	8007e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200004b0 	.word	0x200004b0

080026a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80026a4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80026a8:	f002 fa4c 	bl	8004b44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026b4:	4802      	ldr	r0, [pc, #8]	@ (80026c0 <TIM6_DAC_IRQHandler+0x10>)
 80026b6:	f003 fe21 	bl	80062fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	2000061c 	.word	0x2000061c

080026c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return 1;
 80026c8:	2301      	movs	r3, #1
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <_kill>:

int _kill(int pid, int sig)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026de:	f008 fbbb 	bl	800ae58 <__errno>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2216      	movs	r2, #22
 80026e6:	601a      	str	r2, [r3, #0]
  return -1;
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_exit>:

void _exit (int status)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ffe7 	bl	80026d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002706:	bf00      	nop
 8002708:	e7fd      	b.n	8002706 <_exit+0x12>

0800270a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	e00a      	b.n	8002732 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800271c:	f3af 8000 	nop.w
 8002720:	4601      	mov	r1, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	60ba      	str	r2, [r7, #8]
 8002728:	b2ca      	uxtb	r2, r1
 800272a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	3301      	adds	r3, #1
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	429a      	cmp	r2, r3
 8002738:	dbf0      	blt.n	800271c <_read+0x12>
  }

  return len;
 800273a:	687b      	ldr	r3, [r7, #4]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	e009      	b.n	800276a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	60ba      	str	r2, [r7, #8]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	3301      	adds	r3, #1
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	dbf1      	blt.n	8002756 <_write+0x12>
  }
  return len;
 8002772:	687b      	ldr	r3, [r7, #4]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <_close>:

int _close(int file)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027a4:	605a      	str	r2, [r3, #4]
  return 0;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <_isatty>:

int _isatty(int file)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027bc:	2301      	movs	r3, #1
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027ec:	4a14      	ldr	r2, [pc, #80]	@ (8002840 <_sbrk+0x5c>)
 80027ee:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <_sbrk+0x60>)
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f8:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <_sbrk+0x64>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002800:	4b11      	ldr	r3, [pc, #68]	@ (8002848 <_sbrk+0x64>)
 8002802:	4a12      	ldr	r2, [pc, #72]	@ (800284c <_sbrk+0x68>)
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002806:	4b10      	ldr	r3, [pc, #64]	@ (8002848 <_sbrk+0x64>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	429a      	cmp	r2, r3
 8002812:	d207      	bcs.n	8002824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002814:	f008 fb20 	bl	800ae58 <__errno>
 8002818:	4603      	mov	r3, r0
 800281a:	220c      	movs	r2, #12
 800281c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	e009      	b.n	8002838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002824:	4b08      	ldr	r3, [pc, #32]	@ (8002848 <_sbrk+0x64>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800282a:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <_sbrk+0x64>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	4a05      	ldr	r2, [pc, #20]	@ (8002848 <_sbrk+0x64>)
 8002834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002836:	68fb      	ldr	r3, [r7, #12]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20020000 	.word	0x20020000
 8002844:	00000400 	.word	0x00000400
 8002848:	20000668 	.word	0x20000668
 800284c:	200007c0 	.word	0x200007c0

08002850 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002854:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <SystemInit+0x20>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285a:	4a05      	ldr	r2, [pc, #20]	@ (8002870 <SystemInit+0x20>)
 800285c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002860:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002874:	480d      	ldr	r0, [pc, #52]	@ (80028ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002876:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002878:	480d      	ldr	r0, [pc, #52]	@ (80028b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800287a:	490e      	ldr	r1, [pc, #56]	@ (80028b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800287c:	4a0e      	ldr	r2, [pc, #56]	@ (80028b8 <LoopForever+0xe>)
  movs r3, #0
 800287e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002880:	e002      	b.n	8002888 <LoopCopyDataInit>

08002882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002886:	3304      	adds	r3, #4

08002888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800288a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800288c:	d3f9      	bcc.n	8002882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800288e:	4a0b      	ldr	r2, [pc, #44]	@ (80028bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002890:	4c0b      	ldr	r4, [pc, #44]	@ (80028c0 <LoopForever+0x16>)
  movs r3, #0
 8002892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002894:	e001      	b.n	800289a <LoopFillZerobss>

08002896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002898:	3204      	adds	r2, #4

0800289a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800289a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800289c:	d3fb      	bcc.n	8002896 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800289e:	f7ff ffd7 	bl	8002850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028a2:	f008 fadf 	bl	800ae64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028a6:	f7fe fbd5 	bl	8001054 <main>

080028aa <LoopForever>:

LoopForever:
    b LoopForever
 80028aa:	e7fe      	b.n	80028aa <LoopForever>
  ldr   r0, =_estack
 80028ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80028b8:	0800ed14 	.word	0x0800ed14
  ldr r2, =_sbss
 80028bc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80028c0:	200007bc 	.word	0x200007bc

080028c4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028c4:	e7fe      	b.n	80028c4 <ADC3_IRQHandler>

080028c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d0:	2003      	movs	r0, #3
 80028d2:	f001 fcf0 	bl	80042b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028d6:	200f      	movs	r0, #15
 80028d8:	f7ff fe10 	bl	80024fc <HAL_InitTick>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	71fb      	strb	r3, [r7, #7]
 80028e6:	e001      	b.n	80028ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028e8:	f7ff fac4 	bl	8001e74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028ec:	79fb      	ldrb	r3, [r7, #7]

}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028fc:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <HAL_IncTick+0x1c>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b05      	ldr	r3, [pc, #20]	@ (8002918 <HAL_IncTick+0x20>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4413      	add	r3, r2
 8002906:	4a03      	ldr	r2, [pc, #12]	@ (8002914 <HAL_IncTick+0x1c>)
 8002908:	6013      	str	r3, [r2, #0]
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	2000066c 	.word	0x2000066c
 8002918:	20000008 	.word	0x20000008

0800291c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return uwTick;
 8002920:	4b03      	ldr	r3, [pc, #12]	@ (8002930 <HAL_GetTick+0x14>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	2000066c 	.word	0x2000066c

08002934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800293c:	f7ff ffee 	bl	800291c <HAL_GetTick>
 8002940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d004      	beq.n	8002958 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800294e:	4b09      	ldr	r3, [pc, #36]	@ (8002974 <HAL_Delay+0x40>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4413      	add	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002958:	bf00      	nop
 800295a:	f7ff ffdf 	bl	800291c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	429a      	cmp	r2, r3
 8002968:	d8f7      	bhi.n	800295a <HAL_Delay+0x26>
  {
  }
}
 800296a:	bf00      	nop
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000008 	.word	0x20000008

08002978 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	609a      	str	r2, [r3, #8]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	609a      	str	r2, [r3, #8]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3360      	adds	r3, #96	@ 0x60
 80029f2:	461a      	mov	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <LL_ADC_SetOffset+0x44>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a18:	bf00      	nop
 8002a1a:	371c      	adds	r7, #28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	03fff000 	.word	0x03fff000

08002a28 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3360      	adds	r3, #96	@ 0x60
 8002a36:	461a      	mov	r2, r3
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3360      	adds	r3, #96	@ 0x60
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a7e:	bf00      	nop
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b087      	sub	sp, #28
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3360      	adds	r3, #96	@ 0x60
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002ab4:	bf00      	nop
 8002ab6:	371c      	adds	r7, #28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3360      	adds	r3, #96	@ 0x60
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002aea:	bf00      	nop
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	615a      	str	r2, [r3, #20]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b087      	sub	sp, #28
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3330      	adds	r3, #48	@ 0x30
 8002b52:	461a      	mov	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	4413      	add	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	211f      	movs	r1, #31
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	401a      	ands	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	0e9b      	lsrs	r3, r3, #26
 8002b7a:	f003 011f 	and.w	r1, r3, #31
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3314      	adds	r3, #20
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	0e5b      	lsrs	r3, r3, #25
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	4413      	add	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	0d1b      	lsrs	r3, r3, #20
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	2107      	movs	r1, #7
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	0d1b      	lsrs	r3, r3, #20
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	431a      	orrs	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c0a:	bf00      	nop
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a0f      	ldr	r2, [pc, #60]	@ (8002c64 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d10a      	bne.n	8002c42 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002c40:	e00a      	b.n	8002c58 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	401a      	ands	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	407f0000 	.word	0x407f0000

08002c68 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 031f 	and.w	r3, r3, #31
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002cb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6093      	str	r3, [r2, #8]
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cd8:	d101      	bne.n	8002cde <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002cfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d28:	d101      	bne.n	8002d2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <LL_ADC_IsEnabled+0x18>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <LL_ADC_IsEnabled+0x1a>
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d101      	bne.n	8002d7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d101      	bne.n	8002da0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b089      	sub	sp, #36	@ 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e1af      	b.n	800312a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff f86f 	bl	8001ebc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ff67 	bl	8002cc4 <LL_ADC_IsDeepPowerDownEnabled>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d004      	beq.n	8002e06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff4d 	bl	8002ca0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff82 	bl	8002d14 <LL_ADC_IsInternalRegulatorEnabled>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d115      	bne.n	8002e42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff ff66 	bl	8002cec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e20:	4b9f      	ldr	r3, [pc, #636]	@ (80030a0 <HAL_ADC_Init+0x2f0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	099b      	lsrs	r3, r3, #6
 8002e26:	4a9f      	ldr	r2, [pc, #636]	@ (80030a4 <HAL_ADC_Init+0x2f4>)
 8002e28:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2c:	099b      	lsrs	r3, r3, #6
 8002e2e:	3301      	adds	r3, #1
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e34:	e002      	b.n	8002e3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f9      	bne.n	8002e36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff ff64 	bl	8002d14 <LL_ADC_IsInternalRegulatorEnabled>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10d      	bne.n	8002e6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e56:	f043 0210 	orr.w	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e62:	f043 0201 	orr.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff ff75 	bl	8002d62 <LL_ADC_REG_IsConversionOngoing>
 8002e78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 8148 	bne.w	8003118 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f040 8144 	bne.w	8003118 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e98:	f043 0202 	orr.w	r2, r3, #2
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff49 	bl	8002d3c <LL_ADC_IsEnabled>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d141      	bne.n	8002f34 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eb8:	d004      	beq.n	8002ec4 <HAL_ADC_Init+0x114>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a7a      	ldr	r2, [pc, #488]	@ (80030a8 <HAL_ADC_Init+0x2f8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d10f      	bne.n	8002ee4 <HAL_ADC_Init+0x134>
 8002ec4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ec8:	f7ff ff38 	bl	8002d3c <LL_ADC_IsEnabled>
 8002ecc:	4604      	mov	r4, r0
 8002ece:	4876      	ldr	r0, [pc, #472]	@ (80030a8 <HAL_ADC_Init+0x2f8>)
 8002ed0:	f7ff ff34 	bl	8002d3c <LL_ADC_IsEnabled>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4323      	orrs	r3, r4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e012      	b.n	8002f0a <HAL_ADC_Init+0x15a>
 8002ee4:	4871      	ldr	r0, [pc, #452]	@ (80030ac <HAL_ADC_Init+0x2fc>)
 8002ee6:	f7ff ff29 	bl	8002d3c <LL_ADC_IsEnabled>
 8002eea:	4604      	mov	r4, r0
 8002eec:	4870      	ldr	r0, [pc, #448]	@ (80030b0 <HAL_ADC_Init+0x300>)
 8002eee:	f7ff ff25 	bl	8002d3c <LL_ADC_IsEnabled>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	431c      	orrs	r4, r3
 8002ef6:	486f      	ldr	r0, [pc, #444]	@ (80030b4 <HAL_ADC_Init+0x304>)
 8002ef8:	f7ff ff20 	bl	8002d3c <LL_ADC_IsEnabled>
 8002efc:	4603      	mov	r3, r0
 8002efe:	4323      	orrs	r3, r4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d012      	beq.n	8002f34 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f16:	d004      	beq.n	8002f22 <HAL_ADC_Init+0x172>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a62      	ldr	r2, [pc, #392]	@ (80030a8 <HAL_ADC_Init+0x2f8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_Init+0x176>
 8002f22:	4a65      	ldr	r2, [pc, #404]	@ (80030b8 <HAL_ADC_Init+0x308>)
 8002f24:	e000      	b.n	8002f28 <HAL_ADC_Init+0x178>
 8002f26:	4a65      	ldr	r2, [pc, #404]	@ (80030bc <HAL_ADC_Init+0x30c>)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4610      	mov	r0, r2
 8002f30:	f7ff fd22 	bl	8002978 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	7f5b      	ldrb	r3, [r3, #29]
 8002f38:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f3e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f44:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002f4a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f52:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d106      	bne.n	8002f70 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f66:	3b01      	subs	r3, #1
 8002f68:	045b      	lsls	r3, r3, #17
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d009      	beq.n	8002f8c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f84:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	4b4b      	ldr	r3, [pc, #300]	@ (80030c0 <HAL_ADC_Init+0x310>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	69b9      	ldr	r1, [r7, #24]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fed1 	bl	8002d62 <LL_ADC_REG_IsConversionOngoing>
 8002fc0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fede 	bl	8002d88 <LL_ADC_INJ_IsConversionOngoing>
 8002fcc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d17f      	bne.n	80030d4 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d17c      	bne.n	80030d4 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fde:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002fe6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ff6:	f023 0302 	bic.w	r3, r3, #2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	69b9      	ldr	r1, [r7, #24]
 8003000:	430b      	orrs	r3, r1
 8003002:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d017      	beq.n	800303c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800301a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003024:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003028:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6911      	ldr	r1, [r2, #16]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	430b      	orrs	r3, r1
 8003036:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800303a:	e013      	b.n	8003064 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800304a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800305c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003060:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800306a:	2b01      	cmp	r3, #1
 800306c:	d12a      	bne.n	80030c4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003078:	f023 0304 	bic.w	r3, r3, #4
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003084:	4311      	orrs	r1, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800308a:	4311      	orrs	r1, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003090:	430a      	orrs	r2, r1
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	611a      	str	r2, [r3, #16]
 800309e:	e019      	b.n	80030d4 <HAL_ADC_Init+0x324>
 80030a0:	20000000 	.word	0x20000000
 80030a4:	053e2d63 	.word	0x053e2d63
 80030a8:	50000100 	.word	0x50000100
 80030ac:	50000400 	.word	0x50000400
 80030b0:	50000500 	.word	0x50000500
 80030b4:	50000600 	.word	0x50000600
 80030b8:	50000300 	.word	0x50000300
 80030bc:	50000700 	.word	0x50000700
 80030c0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0201 	bic.w	r2, r2, #1
 80030d2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d10c      	bne.n	80030f6 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	f023 010f 	bic.w	r1, r3, #15
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	1e5a      	subs	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80030f4:	e007      	b.n	8003106 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 020f 	bic.w	r2, r2, #15
 8003104:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310a:	f023 0303 	bic.w	r3, r3, #3
 800310e:	f043 0201 	orr.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003116:	e007      	b.n	8003128 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311c:	f043 0210 	orr.w	r2, r3, #16
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003128:	7ffb      	ldrb	r3, [r7, #31]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3724      	adds	r7, #36	@ 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd90      	pop	{r4, r7, pc}
 8003132:	bf00      	nop

08003134 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08a      	sub	sp, #40	@ 0x28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800313c:	2300      	movs	r3, #0
 800313e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003158:	d004      	beq.n	8003164 <HAL_ADC_IRQHandler+0x30>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a8e      	ldr	r2, [pc, #568]	@ (8003398 <HAL_ADC_IRQHandler+0x264>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d101      	bne.n	8003168 <HAL_ADC_IRQHandler+0x34>
 8003164:	4b8d      	ldr	r3, [pc, #564]	@ (800339c <HAL_ADC_IRQHandler+0x268>)
 8003166:	e000      	b.n	800316a <HAL_ADC_IRQHandler+0x36>
 8003168:	4b8d      	ldr	r3, [pc, #564]	@ (80033a0 <HAL_ADC_IRQHandler+0x26c>)
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fd7c 	bl	8002c68 <LL_ADC_GetMultimode>
 8003170:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d017      	beq.n	80031ac <HAL_ADC_IRQHandler+0x78>
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d012      	beq.n	80031ac <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	d105      	bne.n	800319e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003196:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 feca 	bl	8003f38 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2202      	movs	r2, #2
 80031aa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d004      	beq.n	80031c0 <HAL_ADC_IRQHandler+0x8c>
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10b      	bne.n	80031d8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8094 	beq.w	80032f4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 808e 	beq.w	80032f4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d105      	bne.n	80031f0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fc91 	bl	8002b1c <LL_ADC_REG_IsTriggerSourceSWStart>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d072      	beq.n	80032e6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a64      	ldr	r2, [pc, #400]	@ (8003398 <HAL_ADC_IRQHandler+0x264>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d009      	beq.n	800321e <HAL_ADC_IRQHandler+0xea>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a65      	ldr	r2, [pc, #404]	@ (80033a4 <HAL_ADC_IRQHandler+0x270>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d002      	beq.n	800321a <HAL_ADC_IRQHandler+0xe6>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	e003      	b.n	8003222 <HAL_ADC_IRQHandler+0xee>
 800321a:	4b63      	ldr	r3, [pc, #396]	@ (80033a8 <HAL_ADC_IRQHandler+0x274>)
 800321c:	e001      	b.n	8003222 <HAL_ADC_IRQHandler+0xee>
 800321e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	4293      	cmp	r3, r2
 8003228:	d008      	beq.n	800323c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b05      	cmp	r3, #5
 8003234:	d002      	beq.n	800323c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b09      	cmp	r3, #9
 800323a:	d104      	bne.n	8003246 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	623b      	str	r3, [r7, #32]
 8003244:	e014      	b.n	8003270 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a53      	ldr	r2, [pc, #332]	@ (8003398 <HAL_ADC_IRQHandler+0x264>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_ADC_IRQHandler+0x130>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a53      	ldr	r2, [pc, #332]	@ (80033a4 <HAL_ADC_IRQHandler+0x270>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d002      	beq.n	8003260 <HAL_ADC_IRQHandler+0x12c>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	e003      	b.n	8003268 <HAL_ADC_IRQHandler+0x134>
 8003260:	4b51      	ldr	r3, [pc, #324]	@ (80033a8 <HAL_ADC_IRQHandler+0x274>)
 8003262:	e001      	b.n	8003268 <HAL_ADC_IRQHandler+0x134>
 8003264:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003268:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d135      	bne.n	80032e6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b08      	cmp	r3, #8
 8003286:	d12e      	bne.n	80032e6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fd68 	bl	8002d62 <LL_ADC_REG_IsConversionOngoing>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d11a      	bne.n	80032ce <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 020c 	bic.w	r2, r2, #12
 80032a6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d112      	bne.n	80032e6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032cc:	e00b      	b.n	80032e6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fe fa8e 	bl	8001808 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	220c      	movs	r2, #12
 80032f2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d004      	beq.n	8003308 <HAL_ADC_IRQHandler+0x1d4>
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10b      	bne.n	8003320 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80b3 	beq.w	800347a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 80ad 	beq.w	800347a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b00      	cmp	r3, #0
 800332a:	d105      	bne.n	8003338 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003330:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fc2c 	bl	8002b9a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003342:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fbe7 	bl	8002b1c <LL_ADC_REG_IsTriggerSourceSWStart>
 800334e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a10      	ldr	r2, [pc, #64]	@ (8003398 <HAL_ADC_IRQHandler+0x264>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d009      	beq.n	800336e <HAL_ADC_IRQHandler+0x23a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a11      	ldr	r2, [pc, #68]	@ (80033a4 <HAL_ADC_IRQHandler+0x270>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d002      	beq.n	800336a <HAL_ADC_IRQHandler+0x236>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	e003      	b.n	8003372 <HAL_ADC_IRQHandler+0x23e>
 800336a:	4b0f      	ldr	r3, [pc, #60]	@ (80033a8 <HAL_ADC_IRQHandler+0x274>)
 800336c:	e001      	b.n	8003372 <HAL_ADC_IRQHandler+0x23e>
 800336e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6812      	ldr	r2, [r2, #0]
 8003376:	4293      	cmp	r3, r2
 8003378:	d008      	beq.n	800338c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2b06      	cmp	r3, #6
 8003384:	d002      	beq.n	800338c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b07      	cmp	r3, #7
 800338a:	d10f      	bne.n	80033ac <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	623b      	str	r3, [r7, #32]
 8003394:	e01f      	b.n	80033d6 <HAL_ADC_IRQHandler+0x2a2>
 8003396:	bf00      	nop
 8003398:	50000100 	.word	0x50000100
 800339c:	50000300 	.word	0x50000300
 80033a0:	50000700 	.word	0x50000700
 80033a4:	50000500 	.word	0x50000500
 80033a8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a8b      	ldr	r2, [pc, #556]	@ (80035e0 <HAL_ADC_IRQHandler+0x4ac>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d009      	beq.n	80033ca <HAL_ADC_IRQHandler+0x296>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a8a      	ldr	r2, [pc, #552]	@ (80035e4 <HAL_ADC_IRQHandler+0x4b0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d002      	beq.n	80033c6 <HAL_ADC_IRQHandler+0x292>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	e003      	b.n	80033ce <HAL_ADC_IRQHandler+0x29a>
 80033c6:	4b88      	ldr	r3, [pc, #544]	@ (80035e8 <HAL_ADC_IRQHandler+0x4b4>)
 80033c8:	e001      	b.n	80033ce <HAL_ADC_IRQHandler+0x29a>
 80033ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033ce:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d047      	beq.n	800346c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_ADC_IRQHandler+0x2c2>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d03f      	beq.n	800346c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d13a      	bne.n	800346c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003400:	2b40      	cmp	r3, #64	@ 0x40
 8003402:	d133      	bne.n	800346c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d12e      	bne.n	800346c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fcb8 	bl	8002d88 <LL_ADC_INJ_IsConversionOngoing>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d11a      	bne.n	8003454 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800342c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003432:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d112      	bne.n	800346c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344a:	f043 0201 	orr.w	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003452:	e00b      	b.n	800346c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	f043 0210 	orr.w	r2, r3, #16
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003464:	f043 0201 	orr.w	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fd3b 	bl	8003ee8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2260      	movs	r2, #96	@ 0x60
 8003478:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d011      	beq.n	80034a8 <HAL_ADC_IRQHandler+0x374>
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00c      	beq.n	80034a8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003492:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f8aa 	bl	80035f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2280      	movs	r2, #128	@ 0x80
 80034a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d012      	beq.n	80034d8 <HAL_ADC_IRQHandler+0x3a4>
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00d      	beq.n	80034d8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fd21 	bl	8003f10 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d012      	beq.n	8003508 <HAL_ADC_IRQHandler+0x3d4>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00d      	beq.n	8003508 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fd13 	bl	8003f24 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003506:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b00      	cmp	r3, #0
 8003510:	d043      	beq.n	800359a <HAL_ADC_IRQHandler+0x466>
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	d03e      	beq.n	800359a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003524:	2301      	movs	r3, #1
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
 8003528:	e021      	b.n	800356e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003538:	d004      	beq.n	8003544 <HAL_ADC_IRQHandler+0x410>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a28      	ldr	r2, [pc, #160]	@ (80035e0 <HAL_ADC_IRQHandler+0x4ac>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d101      	bne.n	8003548 <HAL_ADC_IRQHandler+0x414>
 8003544:	4b29      	ldr	r3, [pc, #164]	@ (80035ec <HAL_ADC_IRQHandler+0x4b8>)
 8003546:	e000      	b.n	800354a <HAL_ADC_IRQHandler+0x416>
 8003548:	4b29      	ldr	r3, [pc, #164]	@ (80035f0 <HAL_ADC_IRQHandler+0x4bc>)
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff fb9a 	bl	8002c84 <LL_ADC_GetMultiDMATransfer>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003556:	2301      	movs	r3, #1
 8003558:	627b      	str	r3, [r7, #36]	@ 0x24
 800355a:	e008      	b.n	800356e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800356a:	2301      	movs	r3, #1
 800356c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	2b01      	cmp	r3, #1
 8003572:	d10e      	bne.n	8003592 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003578:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003584:	f043 0202 	orr.w	r2, r3, #2
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f83b 	bl	8003608 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2210      	movs	r2, #16
 8003598:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d018      	beq.n	80035d6 <HAL_ADC_IRQHandler+0x4a2>
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d013      	beq.n	80035d6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035be:	f043 0208 	orr.w	r2, r3, #8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035ce:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fc93 	bl	8003efc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80035d6:	bf00      	nop
 80035d8:	3728      	adds	r7, #40	@ 0x28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	50000100 	.word	0x50000100
 80035e4:	50000500 	.word	0x50000500
 80035e8:	50000400 	.word	0x50000400
 80035ec:	50000300 	.word	0x50000300
 80035f0:	50000700 	.word	0x50000700

080035f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b0b6      	sub	sp, #216	@ 0xd8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003636:	2b01      	cmp	r3, #1
 8003638:	d102      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x24>
 800363a:	2302      	movs	r3, #2
 800363c:	f000 bc13 	b.w	8003e66 <HAL_ADC_ConfigChannel+0x84a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fb88 	bl	8002d62 <LL_ADC_REG_IsConversionOngoing>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	f040 83f3 	bne.w	8003e40 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6859      	ldr	r1, [r3, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	f7ff fa6b 	bl	8002b42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fb76 	bl	8002d62 <LL_ADC_REG_IsConversionOngoing>
 8003676:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff fb82 	bl	8002d88 <LL_ADC_INJ_IsConversionOngoing>
 8003684:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003688:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800368c:	2b00      	cmp	r3, #0
 800368e:	f040 81d9 	bne.w	8003a44 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003692:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003696:	2b00      	cmp	r3, #0
 8003698:	f040 81d4 	bne.w	8003a44 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036a4:	d10f      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2200      	movs	r2, #0
 80036b0:	4619      	mov	r1, r3
 80036b2:	f7ff fa85 	bl	8002bc0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fa19 	bl	8002af6 <LL_ADC_SetSamplingTimeCommonConfig>
 80036c4:	e00e      	b.n	80036e4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	6819      	ldr	r1, [r3, #0]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	461a      	mov	r2, r3
 80036d4:	f7ff fa74 	bl	8002bc0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fa09 	bl	8002af6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	08db      	lsrs	r3, r3, #3
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b04      	cmp	r3, #4
 8003704:	d022      	beq.n	800374c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6919      	ldr	r1, [r3, #16]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003716:	f7ff f963 	bl	80029e0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6919      	ldr	r1, [r3, #16]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	461a      	mov	r2, r3
 8003728:	f7ff f9af 	bl	8002a8a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	6919      	ldr	r1, [r3, #16]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	7f1b      	ldrb	r3, [r3, #28]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d102      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x126>
 800373c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003740:	e000      	b.n	8003744 <HAL_ADC_ConfigChannel+0x128>
 8003742:	2300      	movs	r3, #0
 8003744:	461a      	mov	r2, r3
 8003746:	f7ff f9bb 	bl	8002ac0 <LL_ADC_SetOffsetSaturation>
 800374a:	e17b      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2100      	movs	r1, #0
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff f968 	bl	8002a28 <LL_ADC_GetOffsetChannel>
 8003758:	4603      	mov	r3, r0
 800375a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10a      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x15c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2100      	movs	r1, #0
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff f95d 	bl	8002a28 <LL_ADC_GetOffsetChannel>
 800376e:	4603      	mov	r3, r0
 8003770:	0e9b      	lsrs	r3, r3, #26
 8003772:	f003 021f 	and.w	r2, r3, #31
 8003776:	e01e      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x19a>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff f952 	bl	8002a28 <LL_ADC_GetOffsetChannel>
 8003784:	4603      	mov	r3, r0
 8003786:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003796:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800379a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800379e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80037a6:	2320      	movs	r3, #32
 80037a8:	e004      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80037aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d105      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x1b2>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	0e9b      	lsrs	r3, r3, #26
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	e018      	b.n	8003800 <HAL_ADC_ConfigChannel+0x1e4>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80037e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80037ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80037f2:	2320      	movs	r3, #32
 80037f4:	e004      	b.n	8003800 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80037f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80037fa:	fab3 f383 	clz	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003800:	429a      	cmp	r2, r3
 8003802:	d106      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2200      	movs	r2, #0
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff f921 	bl	8002a54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2101      	movs	r1, #1
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff f905 	bl	8002a28 <LL_ADC_GetOffsetChannel>
 800381e:	4603      	mov	r3, r0
 8003820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <HAL_ADC_ConfigChannel+0x222>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2101      	movs	r1, #1
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff f8fa 	bl	8002a28 <LL_ADC_GetOffsetChannel>
 8003834:	4603      	mov	r3, r0
 8003836:	0e9b      	lsrs	r3, r3, #26
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	e01e      	b.n	800387c <HAL_ADC_ConfigChannel+0x260>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2101      	movs	r1, #1
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff f8ef 	bl	8002a28 <LL_ADC_GetOffsetChannel>
 800384a:	4603      	mov	r3, r0
 800384c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800385c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003860:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003864:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800386c:	2320      	movs	r3, #32
 800386e:	e004      	b.n	800387a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x278>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	0e9b      	lsrs	r3, r3, #26
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	e018      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x2aa>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038a0:	fa93 f3a3 	rbit	r3, r3
 80038a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80038a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80038b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80038b8:	2320      	movs	r3, #32
 80038ba:	e004      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80038bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038c0:	fab3 f383 	clz	r3, r3
 80038c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d106      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2200      	movs	r2, #0
 80038d0:	2101      	movs	r1, #1
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff f8be 	bl	8002a54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2102      	movs	r1, #2
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff f8a2 	bl	8002a28 <LL_ADC_GetOffsetChannel>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10a      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x2e8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2102      	movs	r1, #2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff f897 	bl	8002a28 <LL_ADC_GetOffsetChannel>
 80038fa:	4603      	mov	r3, r0
 80038fc:	0e9b      	lsrs	r3, r3, #26
 80038fe:	f003 021f 	and.w	r2, r3, #31
 8003902:	e01e      	b.n	8003942 <HAL_ADC_ConfigChannel+0x326>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2102      	movs	r1, #2
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff f88c 	bl	8002a28 <LL_ADC_GetOffsetChannel>
 8003910:	4603      	mov	r3, r0
 8003912:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003922:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003926:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800392a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003932:	2320      	movs	r3, #32
 8003934:	e004      	b.n	8003940 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003936:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
 8003940:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394a:	2b00      	cmp	r3, #0
 800394c:	d105      	bne.n	800395a <HAL_ADC_ConfigChannel+0x33e>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	0e9b      	lsrs	r3, r3, #26
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	e016      	b.n	8003988 <HAL_ADC_ConfigChannel+0x36c>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003966:	fa93 f3a3 	rbit	r3, r3
 800396a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800396c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800396e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003972:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800397a:	2320      	movs	r3, #32
 800397c:	e004      	b.n	8003988 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800397e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003988:	429a      	cmp	r2, r3
 800398a:	d106      	bne.n	800399a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2200      	movs	r2, #0
 8003992:	2102      	movs	r1, #2
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff f85d 	bl	8002a54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2103      	movs	r1, #3
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff f841 	bl	8002a28 <LL_ADC_GetOffsetChannel>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x3aa>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2103      	movs	r1, #3
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff f836 	bl	8002a28 <LL_ADC_GetOffsetChannel>
 80039bc:	4603      	mov	r3, r0
 80039be:	0e9b      	lsrs	r3, r3, #26
 80039c0:	f003 021f 	and.w	r2, r3, #31
 80039c4:	e017      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x3da>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2103      	movs	r1, #3
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff f82b 	bl	8002a28 <LL_ADC_GetOffsetChannel>
 80039d2:	4603      	mov	r3, r0
 80039d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80039de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039e0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80039e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80039e8:	2320      	movs	r3, #32
 80039ea:	e003      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80039ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039ee:	fab3 f383 	clz	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d105      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x3f2>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	0e9b      	lsrs	r3, r3, #26
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	e011      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x416>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a16:	fa93 f3a3 	rbit	r3, r3
 8003a1a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003a1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003a20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003a26:	2320      	movs	r3, #32
 8003a28:	e003      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003a2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a2c:	fab3 f383 	clz	r3, r3
 8003a30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d106      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2103      	movs	r1, #3
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff f808 	bl	8002a54 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff f977 	bl	8002d3c <LL_ADC_IsEnabled>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f040 813d 	bne.w	8003cd0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f7ff f8d8 	bl	8002c18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4aa2      	ldr	r2, [pc, #648]	@ (8003cf8 <HAL_ADC_ConfigChannel+0x6dc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	f040 812e 	bne.w	8003cd0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x480>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	0e9b      	lsrs	r3, r3, #26
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	2b09      	cmp	r3, #9
 8003a92:	bf94      	ite	ls
 8003a94:	2301      	movls	r3, #1
 8003a96:	2300      	movhi	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	e019      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x4b4>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003aa4:	fa93 f3a3 	rbit	r3, r3
 8003aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003aaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003aae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003ab4:	2320      	movs	r3, #32
 8003ab6:	e003      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003ab8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003aba:	fab3 f383 	clz	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	2b09      	cmp	r3, #9
 8003ac8:	bf94      	ite	ls
 8003aca:	2301      	movls	r3, #1
 8003acc:	2300      	movhi	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d079      	beq.n	8003bc8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d107      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x4d4>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	0e9b      	lsrs	r3, r3, #26
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	069b      	lsls	r3, r3, #26
 8003aea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003aee:	e015      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x500>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b00:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003b08:	2320      	movs	r3, #32
 8003b0a:	e003      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b0e:	fab3 f383 	clz	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	3301      	adds	r3, #1
 8003b16:	069b      	lsls	r3, r3, #26
 8003b18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d109      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x520>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	0e9b      	lsrs	r3, r3, #26
 8003b2e:	3301      	adds	r3, #1
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	2101      	movs	r1, #1
 8003b36:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3a:	e017      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x550>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b44:	fa93 f3a3 	rbit	r3, r3
 8003b48:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003b54:	2320      	movs	r3, #32
 8003b56:	e003      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b5a:	fab3 f383 	clz	r3, r3
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	3301      	adds	r3, #1
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	2101      	movs	r1, #1
 8003b68:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6c:	ea42 0103 	orr.w	r1, r2, r3
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x576>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	0e9b      	lsrs	r3, r3, #26
 8003b82:	3301      	adds	r3, #1
 8003b84:	f003 021f 	and.w	r2, r3, #31
 8003b88:	4613      	mov	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4413      	add	r3, r2
 8003b8e:	051b      	lsls	r3, r3, #20
 8003b90:	e018      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x5a8>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9a:	fa93 f3a3 	rbit	r3, r3
 8003b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003baa:	2320      	movs	r3, #32
 8003bac:	e003      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bb0:	fab3 f383 	clz	r3, r3
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f003 021f 	and.w	r2, r3, #31
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	4413      	add	r3, r2
 8003bc2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	e07e      	b.n	8003cc6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d107      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x5c8>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	0e9b      	lsrs	r3, r3, #26
 8003bda:	3301      	adds	r3, #1
 8003bdc:	069b      	lsls	r3, r3, #26
 8003bde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003be2:	e015      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x5f4>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	e003      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c02:	fab3 f383 	clz	r3, r3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	3301      	adds	r3, #1
 8003c0a:	069b      	lsls	r3, r3, #26
 8003c0c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d109      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x614>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	0e9b      	lsrs	r3, r3, #26
 8003c22:	3301      	adds	r3, #1
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	2101      	movs	r1, #1
 8003c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2e:	e017      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x644>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	fa93 f3a3 	rbit	r3, r3
 8003c3c:	61fb      	str	r3, [r7, #28]
  return result;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003c48:	2320      	movs	r3, #32
 8003c4a:	e003      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	fab3 f383 	clz	r3, r3
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	3301      	adds	r3, #1
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c60:	ea42 0103 	orr.w	r1, r2, r3
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10d      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x670>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	0e9b      	lsrs	r3, r3, #26
 8003c76:	3301      	adds	r3, #1
 8003c78:	f003 021f 	and.w	r2, r3, #31
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	4413      	add	r3, r2
 8003c82:	3b1e      	subs	r3, #30
 8003c84:	051b      	lsls	r3, r3, #20
 8003c86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c8a:	e01b      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x6a8>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	613b      	str	r3, [r7, #16]
  return result;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	e003      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	f003 021f 	and.w	r2, r3, #31
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	4413      	add	r3, r2
 8003cbc:	3b1e      	subs	r3, #30
 8003cbe:	051b      	lsls	r3, r3, #20
 8003cc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	6892      	ldr	r2, [r2, #8]
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f7fe ff78 	bl	8002bc0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <HAL_ADC_ConfigChannel+0x6e0>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80be 	beq.w	8003e5a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ce6:	d004      	beq.n	8003cf2 <HAL_ADC_ConfigChannel+0x6d6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a04      	ldr	r2, [pc, #16]	@ (8003d00 <HAL_ADC_ConfigChannel+0x6e4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10a      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x6ec>
 8003cf2:	4b04      	ldr	r3, [pc, #16]	@ (8003d04 <HAL_ADC_ConfigChannel+0x6e8>)
 8003cf4:	e009      	b.n	8003d0a <HAL_ADC_ConfigChannel+0x6ee>
 8003cf6:	bf00      	nop
 8003cf8:	407f0000 	.word	0x407f0000
 8003cfc:	80080000 	.word	0x80080000
 8003d00:	50000100 	.word	0x50000100
 8003d04:	50000300 	.word	0x50000300
 8003d08:	4b59      	ldr	r3, [pc, #356]	@ (8003e70 <HAL_ADC_ConfigChannel+0x854>)
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe fe5a 	bl	80029c4 <LL_ADC_GetCommonPathInternalCh>
 8003d10:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a56      	ldr	r2, [pc, #344]	@ (8003e74 <HAL_ADC_ConfigChannel+0x858>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <HAL_ADC_ConfigChannel+0x70c>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a55      	ldr	r2, [pc, #340]	@ (8003e78 <HAL_ADC_ConfigChannel+0x85c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d13a      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d134      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d3c:	d005      	beq.n	8003d4a <HAL_ADC_ConfigChannel+0x72e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a4e      	ldr	r2, [pc, #312]	@ (8003e7c <HAL_ADC_ConfigChannel+0x860>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	f040 8085 	bne.w	8003e54 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d52:	d004      	beq.n	8003d5e <HAL_ADC_ConfigChannel+0x742>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a49      	ldr	r2, [pc, #292]	@ (8003e80 <HAL_ADC_ConfigChannel+0x864>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d101      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x746>
 8003d5e:	4a49      	ldr	r2, [pc, #292]	@ (8003e84 <HAL_ADC_ConfigChannel+0x868>)
 8003d60:	e000      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x748>
 8003d62:	4a43      	ldr	r2, [pc, #268]	@ (8003e70 <HAL_ADC_ConfigChannel+0x854>)
 8003d64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f7fe fe15 	bl	800299e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d74:	4b44      	ldr	r3, [pc, #272]	@ (8003e88 <HAL_ADC_ConfigChannel+0x86c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	099b      	lsrs	r3, r3, #6
 8003d7a:	4a44      	ldr	r2, [pc, #272]	@ (8003e8c <HAL_ADC_ConfigChannel+0x870>)
 8003d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d80:	099b      	lsrs	r3, r3, #6
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	4613      	mov	r3, r2
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d8e:	e002      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f9      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d9c:	e05a      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a3b      	ldr	r2, [pc, #236]	@ (8003e90 <HAL_ADC_ConfigChannel+0x874>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d125      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x7d8>
 8003da8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d11f      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a31      	ldr	r2, [pc, #196]	@ (8003e80 <HAL_ADC_ConfigChannel+0x864>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d104      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x7ac>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a34      	ldr	r2, [pc, #208]	@ (8003e94 <HAL_ADC_ConfigChannel+0x878>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d047      	beq.n	8003e58 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dd0:	d004      	beq.n	8003ddc <HAL_ADC_ConfigChannel+0x7c0>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2a      	ldr	r2, [pc, #168]	@ (8003e80 <HAL_ADC_ConfigChannel+0x864>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d101      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x7c4>
 8003ddc:	4a29      	ldr	r2, [pc, #164]	@ (8003e84 <HAL_ADC_ConfigChannel+0x868>)
 8003dde:	e000      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x7c6>
 8003de0:	4a23      	ldr	r2, [pc, #140]	@ (8003e70 <HAL_ADC_ConfigChannel+0x854>)
 8003de2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f7fe fdd6 	bl	800299e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003df2:	e031      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a27      	ldr	r2, [pc, #156]	@ (8003e98 <HAL_ADC_ConfigChannel+0x87c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d12d      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003dfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d127      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003e80 <HAL_ADC_ConfigChannel+0x864>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d022      	beq.n	8003e5a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e1c:	d004      	beq.n	8003e28 <HAL_ADC_ConfigChannel+0x80c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a17      	ldr	r2, [pc, #92]	@ (8003e80 <HAL_ADC_ConfigChannel+0x864>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d101      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x810>
 8003e28:	4a16      	ldr	r2, [pc, #88]	@ (8003e84 <HAL_ADC_ConfigChannel+0x868>)
 8003e2a:	e000      	b.n	8003e2e <HAL_ADC_ConfigChannel+0x812>
 8003e2c:	4a10      	ldr	r2, [pc, #64]	@ (8003e70 <HAL_ADC_ConfigChannel+0x854>)
 8003e2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e36:	4619      	mov	r1, r3
 8003e38:	4610      	mov	r0, r2
 8003e3a:	f7fe fdb0 	bl	800299e <LL_ADC_SetCommonPathInternalCh>
 8003e3e:	e00c      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e44:	f043 0220 	orr.w	r2, r3, #32
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003e52:	e002      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e54:	bf00      	nop
 8003e56:	e000      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e62:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	37d8      	adds	r7, #216	@ 0xd8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	50000700 	.word	0x50000700
 8003e74:	c3210000 	.word	0xc3210000
 8003e78:	90c00010 	.word	0x90c00010
 8003e7c:	50000600 	.word	0x50000600
 8003e80:	50000100 	.word	0x50000100
 8003e84:	50000300 	.word	0x50000300
 8003e88:	20000000 	.word	0x20000000
 8003e8c:	053e2d63 	.word	0x053e2d63
 8003e90:	c7520000 	.word	0xc7520000
 8003e94:	50000500 	.word	0x50000500
 8003e98:	cb840000 	.word	0xcb840000

08003e9c <LL_ADC_IsEnabled>:
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <LL_ADC_IsEnabled+0x18>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <LL_ADC_IsEnabled+0x1a>
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d101      	bne.n	8003eda <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b0a1      	sub	sp, #132	@ 0x84
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e0e7      	b.n	800413a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003f72:	2300      	movs	r3, #0
 8003f74:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003f76:	2300      	movs	r3, #0
 8003f78:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f82:	d102      	bne.n	8003f8a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f84:	4b6f      	ldr	r3, [pc, #444]	@ (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	e009      	b.n	8003f9e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a6e      	ldr	r2, [pc, #440]	@ (8004148 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d102      	bne.n	8003f9a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003f94:	4b6d      	ldr	r3, [pc, #436]	@ (800414c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	e001      	b.n	8003f9e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10b      	bne.n	8003fbc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0be      	b.n	800413a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff ff7f 	bl	8003ec2 <LL_ADC_REG_IsConversionOngoing>
 8003fc4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff ff79 	bl	8003ec2 <LL_ADC_REG_IsConversionOngoing>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f040 80a0 	bne.w	8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003fd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f040 809c 	bne.w	8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fe8:	d004      	beq.n	8003ff4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a55      	ldr	r2, [pc, #340]	@ (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d101      	bne.n	8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003ff4:	4b56      	ldr	r3, [pc, #344]	@ (8004150 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003ff6:	e000      	b.n	8003ffa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003ff8:	4b56      	ldr	r3, [pc, #344]	@ (8004154 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003ffa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d04b      	beq.n	800409c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004004:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004016:	035b      	lsls	r3, r3, #13
 8004018:	430b      	orrs	r3, r1
 800401a:	431a      	orrs	r2, r3
 800401c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800401e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004028:	d004      	beq.n	8004034 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a45      	ldr	r2, [pc, #276]	@ (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d10f      	bne.n	8004054 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004034:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004038:	f7ff ff30 	bl	8003e9c <LL_ADC_IsEnabled>
 800403c:	4604      	mov	r4, r0
 800403e:	4841      	ldr	r0, [pc, #260]	@ (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004040:	f7ff ff2c 	bl	8003e9c <LL_ADC_IsEnabled>
 8004044:	4603      	mov	r3, r0
 8004046:	4323      	orrs	r3, r4
 8004048:	2b00      	cmp	r3, #0
 800404a:	bf0c      	ite	eq
 800404c:	2301      	moveq	r3, #1
 800404e:	2300      	movne	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e012      	b.n	800407a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004054:	483c      	ldr	r0, [pc, #240]	@ (8004148 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004056:	f7ff ff21 	bl	8003e9c <LL_ADC_IsEnabled>
 800405a:	4604      	mov	r4, r0
 800405c:	483b      	ldr	r0, [pc, #236]	@ (800414c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800405e:	f7ff ff1d 	bl	8003e9c <LL_ADC_IsEnabled>
 8004062:	4603      	mov	r3, r0
 8004064:	431c      	orrs	r4, r3
 8004066:	483c      	ldr	r0, [pc, #240]	@ (8004158 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004068:	f7ff ff18 	bl	8003e9c <LL_ADC_IsEnabled>
 800406c:	4603      	mov	r3, r0
 800406e:	4323      	orrs	r3, r4
 8004070:	2b00      	cmp	r3, #0
 8004072:	bf0c      	ite	eq
 8004074:	2301      	moveq	r3, #1
 8004076:	2300      	movne	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d056      	beq.n	800412c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800407e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004086:	f023 030f 	bic.w	r3, r3, #15
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	6811      	ldr	r1, [r2, #0]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	6892      	ldr	r2, [r2, #8]
 8004092:	430a      	orrs	r2, r1
 8004094:	431a      	orrs	r2, r3
 8004096:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004098:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800409a:	e047      	b.n	800412c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800409c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040a6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040b0:	d004      	beq.n	80040bc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a23      	ldr	r2, [pc, #140]	@ (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10f      	bne.n	80040dc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80040bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80040c0:	f7ff feec 	bl	8003e9c <LL_ADC_IsEnabled>
 80040c4:	4604      	mov	r4, r0
 80040c6:	481f      	ldr	r0, [pc, #124]	@ (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040c8:	f7ff fee8 	bl	8003e9c <LL_ADC_IsEnabled>
 80040cc:	4603      	mov	r3, r0
 80040ce:	4323      	orrs	r3, r4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e012      	b.n	8004102 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80040dc:	481a      	ldr	r0, [pc, #104]	@ (8004148 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80040de:	f7ff fedd 	bl	8003e9c <LL_ADC_IsEnabled>
 80040e2:	4604      	mov	r4, r0
 80040e4:	4819      	ldr	r0, [pc, #100]	@ (800414c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80040e6:	f7ff fed9 	bl	8003e9c <LL_ADC_IsEnabled>
 80040ea:	4603      	mov	r3, r0
 80040ec:	431c      	orrs	r4, r3
 80040ee:	481a      	ldr	r0, [pc, #104]	@ (8004158 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80040f0:	f7ff fed4 	bl	8003e9c <LL_ADC_IsEnabled>
 80040f4:	4603      	mov	r3, r0
 80040f6:	4323      	orrs	r3, r4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf0c      	ite	eq
 80040fc:	2301      	moveq	r3, #1
 80040fe:	2300      	movne	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d012      	beq.n	800412c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004106:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800410e:	f023 030f 	bic.w	r3, r3, #15
 8004112:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004114:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004116:	e009      	b.n	800412c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411c:	f043 0220 	orr.w	r2, r3, #32
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800412a:	e000      	b.n	800412e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800412c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004136:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800413a:	4618      	mov	r0, r3
 800413c:	3784      	adds	r7, #132	@ 0x84
 800413e:	46bd      	mov	sp, r7
 8004140:	bd90      	pop	{r4, r7, pc}
 8004142:	bf00      	nop
 8004144:	50000100 	.word	0x50000100
 8004148:	50000400 	.word	0x50000400
 800414c:	50000500 	.word	0x50000500
 8004150:	50000300 	.word	0x50000300
 8004154:	50000700 	.word	0x50000700
 8004158:	50000600 	.word	0x50000600

0800415c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800416c:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <__NVIC_SetPriorityGrouping+0x44>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004178:	4013      	ands	r3, r2
 800417a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004184:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800418c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800418e:	4a04      	ldr	r2, [pc, #16]	@ (80041a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	60d3      	str	r3, [r2, #12]
}
 8004194:	bf00      	nop
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	e000ed00 	.word	0xe000ed00

080041a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041a8:	4b04      	ldr	r3, [pc, #16]	@ (80041bc <__NVIC_GetPriorityGrouping+0x18>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	0a1b      	lsrs	r3, r3, #8
 80041ae:	f003 0307 	and.w	r3, r3, #7
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	e000ed00 	.word	0xe000ed00

080041c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	db0b      	blt.n	80041ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	f003 021f 	and.w	r2, r3, #31
 80041d8:	4907      	ldr	r1, [pc, #28]	@ (80041f8 <__NVIC_EnableIRQ+0x38>)
 80041da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	2001      	movs	r0, #1
 80041e2:	fa00 f202 	lsl.w	r2, r0, r2
 80041e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	e000e100 	.word	0xe000e100

080041fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	6039      	str	r1, [r7, #0]
 8004206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420c:	2b00      	cmp	r3, #0
 800420e:	db0a      	blt.n	8004226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	b2da      	uxtb	r2, r3
 8004214:	490c      	ldr	r1, [pc, #48]	@ (8004248 <__NVIC_SetPriority+0x4c>)
 8004216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421a:	0112      	lsls	r2, r2, #4
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	440b      	add	r3, r1
 8004220:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004224:	e00a      	b.n	800423c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	4908      	ldr	r1, [pc, #32]	@ (800424c <__NVIC_SetPriority+0x50>)
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	3b04      	subs	r3, #4
 8004234:	0112      	lsls	r2, r2, #4
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	440b      	add	r3, r1
 800423a:	761a      	strb	r2, [r3, #24]
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	e000e100 	.word	0xe000e100
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004250:	b480      	push	{r7}
 8004252:	b089      	sub	sp, #36	@ 0x24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f1c3 0307 	rsb	r3, r3, #7
 800426a:	2b04      	cmp	r3, #4
 800426c:	bf28      	it	cs
 800426e:	2304      	movcs	r3, #4
 8004270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	3304      	adds	r3, #4
 8004276:	2b06      	cmp	r3, #6
 8004278:	d902      	bls.n	8004280 <NVIC_EncodePriority+0x30>
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3b03      	subs	r3, #3
 800427e:	e000      	b.n	8004282 <NVIC_EncodePriority+0x32>
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004284:	f04f 32ff 	mov.w	r2, #4294967295
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	43da      	mvns	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	401a      	ands	r2, r3
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004298:	f04f 31ff 	mov.w	r1, #4294967295
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	fa01 f303 	lsl.w	r3, r1, r3
 80042a2:	43d9      	mvns	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a8:	4313      	orrs	r3, r2
         );
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3724      	adds	r7, #36	@ 0x24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff ff4c 	bl	800415c <__NVIC_SetPriorityGrouping>
}
 80042c4:	bf00      	nop
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042da:	f7ff ff63 	bl	80041a4 <__NVIC_GetPriorityGrouping>
 80042de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	68b9      	ldr	r1, [r7, #8]
 80042e4:	6978      	ldr	r0, [r7, #20]
 80042e6:	f7ff ffb3 	bl	8004250 <NVIC_EncodePriority>
 80042ea:	4602      	mov	r2, r0
 80042ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff ff82 	bl	80041fc <__NVIC_SetPriority>
}
 80042f8:	bf00      	nop
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff ff56 	bl	80041c0 <__NVIC_EnableIRQ>
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e08d      	b.n	800444a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	4b47      	ldr	r3, [pc, #284]	@ (8004454 <HAL_DMA_Init+0x138>)
 8004336:	429a      	cmp	r2, r3
 8004338:	d80f      	bhi.n	800435a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	4b45      	ldr	r3, [pc, #276]	@ (8004458 <HAL_DMA_Init+0x13c>)
 8004342:	4413      	add	r3, r2
 8004344:	4a45      	ldr	r2, [pc, #276]	@ (800445c <HAL_DMA_Init+0x140>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	009a      	lsls	r2, r3, #2
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a42      	ldr	r2, [pc, #264]	@ (8004460 <HAL_DMA_Init+0x144>)
 8004356:	641a      	str	r2, [r3, #64]	@ 0x40
 8004358:	e00e      	b.n	8004378 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	4b40      	ldr	r3, [pc, #256]	@ (8004464 <HAL_DMA_Init+0x148>)
 8004362:	4413      	add	r3, r2
 8004364:	4a3d      	ldr	r2, [pc, #244]	@ (800445c <HAL_DMA_Init+0x140>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	091b      	lsrs	r3, r3, #4
 800436c:	009a      	lsls	r2, r3, #2
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a3c      	ldr	r2, [pc, #240]	@ (8004468 <HAL_DMA_Init+0x14c>)
 8004376:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800438e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004392:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800439c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f9be 	bl	800474c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043d8:	d102      	bne.n	80043e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043f4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d010      	beq.n	8004420 <HAL_DMA_Init+0x104>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b04      	cmp	r3, #4
 8004404:	d80c      	bhi.n	8004420 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f9de 	bl	80047c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	e008      	b.n	8004432 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40020407 	.word	0x40020407
 8004458:	bffdfff8 	.word	0xbffdfff8
 800445c:	cccccccd 	.word	0xcccccccd
 8004460:	40020000 	.word	0x40020000
 8004464:	bffdfbf8 	.word	0xbffdfbf8
 8004468:	40020400 	.word	0x40020400

0800446c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d005      	beq.n	8004490 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2204      	movs	r2, #4
 8004488:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
 800448e:	e037      	b.n	8004500 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 020e 	bic.w	r2, r2, #14
 800449e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044ae:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c4:	f003 021f 	and.w	r2, r3, #31
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044cc:	2101      	movs	r1, #1
 80044ce:	fa01 f202 	lsl.w	r2, r1, r2
 80044d2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044dc:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00c      	beq.n	8004500 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044f4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80044fe:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004510:	7bfb      	ldrb	r3, [r7, #15]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d00d      	beq.n	8004552 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2204      	movs	r2, #4
 800453a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
 8004550:	e047      	b.n	80045e2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 020e 	bic.w	r2, r2, #14
 8004560:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800457c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004580:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004586:	f003 021f 	and.w	r2, r3, #31
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458e:	2101      	movs	r1, #1
 8004590:	fa01 f202 	lsl.w	r2, r1, r2
 8004594:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800459e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00c      	beq.n	80045c2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80045c0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	4798      	blx	r3
    }
  }
  return status;
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	2204      	movs	r2, #4
 800460e:	409a      	lsls	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d026      	beq.n	8004666 <HAL_DMA_IRQHandler+0x7a>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	d021      	beq.n	8004666 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d107      	bne.n	8004640 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0204 	bic.w	r2, r2, #4
 800463e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004644:	f003 021f 	and.w	r2, r3, #31
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464c:	2104      	movs	r1, #4
 800464e:	fa01 f202 	lsl.w	r2, r1, r2
 8004652:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004658:	2b00      	cmp	r3, #0
 800465a:	d071      	beq.n	8004740 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004664:	e06c      	b.n	8004740 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	2202      	movs	r2, #2
 8004670:	409a      	lsls	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4013      	ands	r3, r2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d02e      	beq.n	80046d8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d029      	beq.n	80046d8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10b      	bne.n	80046aa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 020a 	bic.w	r2, r2, #10
 80046a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ae:	f003 021f 	and.w	r2, r3, #31
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b6:	2102      	movs	r1, #2
 80046b8:	fa01 f202 	lsl.w	r2, r1, r2
 80046bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d038      	beq.n	8004740 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80046d6:	e033      	b.n	8004740 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	2208      	movs	r2, #8
 80046e2:	409a      	lsls	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d02a      	beq.n	8004742 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d025      	beq.n	8004742 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 020e 	bic.w	r2, r2, #14
 8004704:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470a:	f003 021f 	and.w	r2, r3, #31
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004712:	2101      	movs	r1, #1
 8004714:	fa01 f202 	lsl.w	r2, r1, r2
 8004718:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004734:	2b00      	cmp	r3, #0
 8004736:	d004      	beq.n	8004742 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004740:	bf00      	nop
 8004742:	bf00      	nop
}
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	4b16      	ldr	r3, [pc, #88]	@ (80047b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800475c:	429a      	cmp	r2, r3
 800475e:	d802      	bhi.n	8004766 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004760:	4b15      	ldr	r3, [pc, #84]	@ (80047b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	e001      	b.n	800476a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004766:	4b15      	ldr	r3, [pc, #84]	@ (80047bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004768:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	3b08      	subs	r3, #8
 8004776:	4a12      	ldr	r2, [pc, #72]	@ (80047c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004784:	089b      	lsrs	r3, r3, #2
 8004786:	009a      	lsls	r2, r3, #2
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4413      	add	r3, r2
 800478c:	461a      	mov	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a0b      	ldr	r2, [pc, #44]	@ (80047c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004796:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 031f 	and.w	r3, r3, #31
 800479e:	2201      	movs	r2, #1
 80047a0:	409a      	lsls	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40020407 	.word	0x40020407
 80047b8:	40020800 	.word	0x40020800
 80047bc:	40020820 	.word	0x40020820
 80047c0:	cccccccd 	.word	0xcccccccd
 80047c4:	40020880 	.word	0x40020880

080047c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4b0b      	ldr	r3, [pc, #44]	@ (8004808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	461a      	mov	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a08      	ldr	r2, [pc, #32]	@ (800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80047ea:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	2201      	movs	r2, #1
 80047f6:	409a      	lsls	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	1000823f 	.word	0x1000823f
 800480c:	40020940 	.word	0x40020940

08004810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800481e:	e15a      	b.n	8004ad6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	2101      	movs	r1, #1
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	fa01 f303 	lsl.w	r3, r1, r3
 800482c:	4013      	ands	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 814c 	beq.w	8004ad0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d005      	beq.n	8004850 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800484c:	2b02      	cmp	r3, #2
 800484e:	d130      	bne.n	80048b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	2203      	movs	r2, #3
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004886:	2201      	movs	r2, #1
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43db      	mvns	r3, r3
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4013      	ands	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	f003 0201 	and.w	r2, r3, #1
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d017      	beq.n	80048ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	2203      	movs	r2, #3
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	43db      	mvns	r3, r3
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4013      	ands	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d123      	bne.n	8004942 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	08da      	lsrs	r2, r3, #3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3208      	adds	r2, #8
 8004902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004906:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	220f      	movs	r2, #15
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	43db      	mvns	r3, r3
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4013      	ands	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	08da      	lsrs	r2, r3, #3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3208      	adds	r2, #8
 800493c:	6939      	ldr	r1, [r7, #16]
 800493e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	2203      	movs	r2, #3
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43db      	mvns	r3, r3
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4013      	ands	r3, r2
 8004958:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f003 0203 	and.w	r2, r3, #3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 80a6 	beq.w	8004ad0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004984:	4b5b      	ldr	r3, [pc, #364]	@ (8004af4 <HAL_GPIO_Init+0x2e4>)
 8004986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004988:	4a5a      	ldr	r2, [pc, #360]	@ (8004af4 <HAL_GPIO_Init+0x2e4>)
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004990:	4b58      	ldr	r3, [pc, #352]	@ (8004af4 <HAL_GPIO_Init+0x2e4>)
 8004992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800499c:	4a56      	ldr	r2, [pc, #344]	@ (8004af8 <HAL_GPIO_Init+0x2e8>)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	089b      	lsrs	r3, r3, #2
 80049a2:	3302      	adds	r3, #2
 80049a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f003 0303 	and.w	r3, r3, #3
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	220f      	movs	r2, #15
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	43db      	mvns	r3, r3
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4013      	ands	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80049c6:	d01f      	beq.n	8004a08 <HAL_GPIO_Init+0x1f8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a4c      	ldr	r2, [pc, #304]	@ (8004afc <HAL_GPIO_Init+0x2ec>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d019      	beq.n	8004a04 <HAL_GPIO_Init+0x1f4>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a4b      	ldr	r2, [pc, #300]	@ (8004b00 <HAL_GPIO_Init+0x2f0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d013      	beq.n	8004a00 <HAL_GPIO_Init+0x1f0>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a4a      	ldr	r2, [pc, #296]	@ (8004b04 <HAL_GPIO_Init+0x2f4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00d      	beq.n	80049fc <HAL_GPIO_Init+0x1ec>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a49      	ldr	r2, [pc, #292]	@ (8004b08 <HAL_GPIO_Init+0x2f8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d007      	beq.n	80049f8 <HAL_GPIO_Init+0x1e8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a48      	ldr	r2, [pc, #288]	@ (8004b0c <HAL_GPIO_Init+0x2fc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d101      	bne.n	80049f4 <HAL_GPIO_Init+0x1e4>
 80049f0:	2305      	movs	r3, #5
 80049f2:	e00a      	b.n	8004a0a <HAL_GPIO_Init+0x1fa>
 80049f4:	2306      	movs	r3, #6
 80049f6:	e008      	b.n	8004a0a <HAL_GPIO_Init+0x1fa>
 80049f8:	2304      	movs	r3, #4
 80049fa:	e006      	b.n	8004a0a <HAL_GPIO_Init+0x1fa>
 80049fc:	2303      	movs	r3, #3
 80049fe:	e004      	b.n	8004a0a <HAL_GPIO_Init+0x1fa>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e002      	b.n	8004a0a <HAL_GPIO_Init+0x1fa>
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <HAL_GPIO_Init+0x1fa>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	f002 0203 	and.w	r2, r2, #3
 8004a10:	0092      	lsls	r2, r2, #2
 8004a12:	4093      	lsls	r3, r2
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a1a:	4937      	ldr	r1, [pc, #220]	@ (8004af8 <HAL_GPIO_Init+0x2e8>)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	089b      	lsrs	r3, r3, #2
 8004a20:	3302      	adds	r3, #2
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a28:	4b39      	ldr	r3, [pc, #228]	@ (8004b10 <HAL_GPIO_Init+0x300>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	43db      	mvns	r3, r3
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4013      	ands	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a4c:	4a30      	ldr	r2, [pc, #192]	@ (8004b10 <HAL_GPIO_Init+0x300>)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a52:	4b2f      	ldr	r3, [pc, #188]	@ (8004b10 <HAL_GPIO_Init+0x300>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a76:	4a26      	ldr	r2, [pc, #152]	@ (8004b10 <HAL_GPIO_Init+0x300>)
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a7c:	4b24      	ldr	r3, [pc, #144]	@ (8004b10 <HAL_GPIO_Init+0x300>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	43db      	mvns	r3, r3
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b10 <HAL_GPIO_Init+0x300>)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8004b10 <HAL_GPIO_Init+0x300>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004aca:	4a11      	ldr	r2, [pc, #68]	@ (8004b10 <HAL_GPIO_Init+0x300>)
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f47f ae9d 	bne.w	8004820 <HAL_GPIO_Init+0x10>
  }
}
 8004ae6:	bf00      	nop
 8004ae8:	bf00      	nop
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40021000 	.word	0x40021000
 8004af8:	40010000 	.word	0x40010000
 8004afc:	48000400 	.word	0x48000400
 8004b00:	48000800 	.word	0x48000800
 8004b04:	48000c00 	.word	0x48000c00
 8004b08:	48001000 	.word	0x48001000
 8004b0c:	48001400 	.word	0x48001400
 8004b10:	40010400 	.word	0x40010400

08004b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	807b      	strh	r3, [r7, #2]
 8004b20:	4613      	mov	r3, r2
 8004b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b24:	787b      	ldrb	r3, [r7, #1]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b2a:	887a      	ldrh	r2, [r7, #2]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b30:	e002      	b.n	8004b38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b32:	887a      	ldrh	r2, [r7, #2]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b4e:	4b08      	ldr	r3, [pc, #32]	@ (8004b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b50:	695a      	ldr	r2, [r3, #20]
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d006      	beq.n	8004b68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b5a:	4a05      	ldr	r2, [pc, #20]	@ (8004b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b5c:	88fb      	ldrh	r3, [r7, #6]
 8004b5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b60:	88fb      	ldrh	r3, [r7, #6]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 f806 	bl	8004b74 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b68:	bf00      	nop
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40010400 	.word	0x40010400

08004b74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d141      	bne.n	8004c1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ba6:	d131      	bne.n	8004c0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ba8:	4b47      	ldr	r3, [pc, #284]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bae:	4a46      	ldr	r2, [pc, #280]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bb8:	4b43      	ldr	r3, [pc, #268]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bc0:	4a41      	ldr	r2, [pc, #260]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bc8:	4b40      	ldr	r3, [pc, #256]	@ (8004ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2232      	movs	r2, #50	@ 0x32
 8004bce:	fb02 f303 	mul.w	r3, r2, r3
 8004bd2:	4a3f      	ldr	r2, [pc, #252]	@ (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	0c9b      	lsrs	r3, r3, #18
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bde:	e002      	b.n	8004be6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004be6:	4b38      	ldr	r3, [pc, #224]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bf2:	d102      	bne.n	8004bfa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f2      	bne.n	8004be0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bfa:	4b33      	ldr	r3, [pc, #204]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c06:	d158      	bne.n	8004cba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e057      	b.n	8004cbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c12:	4a2d      	ldr	r2, [pc, #180]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c1c:	e04d      	b.n	8004cba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c24:	d141      	bne.n	8004caa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c26:	4b28      	ldr	r3, [pc, #160]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c32:	d131      	bne.n	8004c98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c34:	4b24      	ldr	r3, [pc, #144]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c3a:	4a23      	ldr	r2, [pc, #140]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c44:	4b20      	ldr	r3, [pc, #128]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c54:	4b1d      	ldr	r3, [pc, #116]	@ (8004ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2232      	movs	r2, #50	@ 0x32
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c60:	fba2 2303 	umull	r2, r3, r2, r3
 8004c64:	0c9b      	lsrs	r3, r3, #18
 8004c66:	3301      	adds	r3, #1
 8004c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c6a:	e002      	b.n	8004c72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c72:	4b15      	ldr	r3, [pc, #84]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c7e:	d102      	bne.n	8004c86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f2      	bne.n	8004c6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c86:	4b10      	ldr	r3, [pc, #64]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c92:	d112      	bne.n	8004cba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e011      	b.n	8004cbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c98:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ca4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ca8:	e007      	b.n	8004cba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004caa:	4b07      	ldr	r3, [pc, #28]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cb2:	4a05      	ldr	r2, [pc, #20]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	20000000 	.word	0x20000000
 8004cd0:	431bde83 	.word	0x431bde83

08004cd4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004cd8:	4b05      	ldr	r3, [pc, #20]	@ (8004cf0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	4a04      	ldr	r2, [pc, #16]	@ (8004cf0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ce2:	6093      	str	r3, [r2, #8]
}
 8004ce4:	bf00      	nop
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40007000 	.word	0x40007000

08004cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e306      	b.n	8005314 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d075      	beq.n	8004dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d12:	4b97      	ldr	r3, [pc, #604]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d1c:	4b94      	ldr	r3, [pc, #592]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b0c      	cmp	r3, #12
 8004d2a:	d102      	bne.n	8004d32 <HAL_RCC_OscConfig+0x3e>
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d002      	beq.n	8004d38 <HAL_RCC_OscConfig+0x44>
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d10b      	bne.n	8004d50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d38:	4b8d      	ldr	r3, [pc, #564]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d05b      	beq.n	8004dfc <HAL_RCC_OscConfig+0x108>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d157      	bne.n	8004dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e2e1      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d58:	d106      	bne.n	8004d68 <HAL_RCC_OscConfig+0x74>
 8004d5a:	4b85      	ldr	r3, [pc, #532]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a84      	ldr	r2, [pc, #528]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	e01d      	b.n	8004da4 <HAL_RCC_OscConfig+0xb0>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d70:	d10c      	bne.n	8004d8c <HAL_RCC_OscConfig+0x98>
 8004d72:	4b7f      	ldr	r3, [pc, #508]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a7e      	ldr	r2, [pc, #504]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004d78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	4b7c      	ldr	r3, [pc, #496]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a7b      	ldr	r2, [pc, #492]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	e00b      	b.n	8004da4 <HAL_RCC_OscConfig+0xb0>
 8004d8c:	4b78      	ldr	r3, [pc, #480]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a77      	ldr	r2, [pc, #476]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	4b75      	ldr	r3, [pc, #468]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a74      	ldr	r2, [pc, #464]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004d9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d013      	beq.n	8004dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fd fdb6 	bl	800291c <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db4:	f7fd fdb2 	bl	800291c <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b64      	cmp	r3, #100	@ 0x64
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e2a6      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0f0      	beq.n	8004db4 <HAL_RCC_OscConfig+0xc0>
 8004dd2:	e014      	b.n	8004dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd4:	f7fd fda2 	bl	800291c <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ddc:	f7fd fd9e 	bl	800291c <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b64      	cmp	r3, #100	@ 0x64
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e292      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dee:	4b60      	ldr	r3, [pc, #384]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0xe8>
 8004dfa:	e000      	b.n	8004dfe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d075      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e0a:	4b59      	ldr	r3, [pc, #356]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
 8004e12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e14:	4b56      	ldr	r3, [pc, #344]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b0c      	cmp	r3, #12
 8004e22:	d102      	bne.n	8004e2a <HAL_RCC_OscConfig+0x136>
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d002      	beq.n	8004e30 <HAL_RCC_OscConfig+0x13c>
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d11f      	bne.n	8004e70 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e30:	4b4f      	ldr	r3, [pc, #316]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <HAL_RCC_OscConfig+0x154>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e265      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e48:	4b49      	ldr	r3, [pc, #292]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	061b      	lsls	r3, r3, #24
 8004e56:	4946      	ldr	r1, [pc, #280]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e5c:	4b45      	ldr	r3, [pc, #276]	@ (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fd fb4b 	bl	80024fc <HAL_InitTick>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d043      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e251      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d023      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e78:	4b3d      	ldr	r3, [pc, #244]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e84:	f7fd fd4a 	bl	800291c <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e8c:	f7fd fd46 	bl	800291c <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e23a      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e9e:	4b34      	ldr	r3, [pc, #208]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eaa:	4b31      	ldr	r3, [pc, #196]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	061b      	lsls	r3, r3, #24
 8004eb8:	492d      	ldr	r1, [pc, #180]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	604b      	str	r3, [r1, #4]
 8004ebe:	e01a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004ec6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ecc:	f7fd fd26 	bl	800291c <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed4:	f7fd fd22 	bl	800291c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e216      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ee6:	4b22      	ldr	r3, [pc, #136]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f0      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x1e0>
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ef4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d041      	beq.n	8004f86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d01c      	beq.n	8004f44 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f0a:	4b19      	ldr	r3, [pc, #100]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f10:	4a17      	ldr	r2, [pc, #92]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004f12:	f043 0301 	orr.w	r3, r3, #1
 8004f16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1a:	f7fd fcff 	bl	800291c <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f22:	f7fd fcfb 	bl	800291c <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e1ef      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f34:	4b0e      	ldr	r3, [pc, #56]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0ef      	beq.n	8004f22 <HAL_RCC_OscConfig+0x22e>
 8004f42:	e020      	b.n	8004f86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f44:	4b0a      	ldr	r3, [pc, #40]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f4a:	4a09      	ldr	r2, [pc, #36]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f54:	f7fd fce2 	bl	800291c <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f5a:	e00d      	b.n	8004f78 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f5c:	f7fd fcde 	bl	800291c <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d906      	bls.n	8004f78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e1d2      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
 8004f6e:	bf00      	nop
 8004f70:	40021000 	.word	0x40021000
 8004f74:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f78:	4b8c      	ldr	r3, [pc, #560]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8004f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1ea      	bne.n	8004f5c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 80a6 	beq.w	80050e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f94:	2300      	movs	r3, #0
 8004f96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f98:	4b84      	ldr	r3, [pc, #528]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x2b4>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <HAL_RCC_OscConfig+0x2b6>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00d      	beq.n	8004fca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fae:	4b7f      	ldr	r3, [pc, #508]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8004fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb2:	4a7e      	ldr	r2, [pc, #504]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8004fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fba:	4b7c      	ldr	r3, [pc, #496]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fca:	4b79      	ldr	r3, [pc, #484]	@ (80051b0 <HAL_RCC_OscConfig+0x4bc>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d118      	bne.n	8005008 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fd6:	4b76      	ldr	r3, [pc, #472]	@ (80051b0 <HAL_RCC_OscConfig+0x4bc>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a75      	ldr	r2, [pc, #468]	@ (80051b0 <HAL_RCC_OscConfig+0x4bc>)
 8004fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe2:	f7fd fc9b 	bl	800291c <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fea:	f7fd fc97 	bl	800291c <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e18b      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ffc:	4b6c      	ldr	r3, [pc, #432]	@ (80051b0 <HAL_RCC_OscConfig+0x4bc>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f0      	beq.n	8004fea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d108      	bne.n	8005022 <HAL_RCC_OscConfig+0x32e>
 8005010:	4b66      	ldr	r3, [pc, #408]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8005012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005016:	4a65      	ldr	r2, [pc, #404]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005020:	e024      	b.n	800506c <HAL_RCC_OscConfig+0x378>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b05      	cmp	r3, #5
 8005028:	d110      	bne.n	800504c <HAL_RCC_OscConfig+0x358>
 800502a:	4b60      	ldr	r3, [pc, #384]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005030:	4a5e      	ldr	r2, [pc, #376]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8005032:	f043 0304 	orr.w	r3, r3, #4
 8005036:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800503a:	4b5c      	ldr	r3, [pc, #368]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005040:	4a5a      	ldr	r2, [pc, #360]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800504a:	e00f      	b.n	800506c <HAL_RCC_OscConfig+0x378>
 800504c:	4b57      	ldr	r3, [pc, #348]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005052:	4a56      	ldr	r2, [pc, #344]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8005054:	f023 0301 	bic.w	r3, r3, #1
 8005058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800505c:	4b53      	ldr	r3, [pc, #332]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005062:	4a52      	ldr	r2, [pc, #328]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8005064:	f023 0304 	bic.w	r3, r3, #4
 8005068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d016      	beq.n	80050a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005074:	f7fd fc52 	bl	800291c <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800507a:	e00a      	b.n	8005092 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507c:	f7fd fc4e 	bl	800291c <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e140      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005092:	4b46      	ldr	r3, [pc, #280]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0ed      	beq.n	800507c <HAL_RCC_OscConfig+0x388>
 80050a0:	e015      	b.n	80050ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a2:	f7fd fc3b 	bl	800291c <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050a8:	e00a      	b.n	80050c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050aa:	f7fd fc37 	bl	800291c <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e129      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050c0:	4b3a      	ldr	r3, [pc, #232]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1ed      	bne.n	80050aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050ce:	7ffb      	ldrb	r3, [r7, #31]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d105      	bne.n	80050e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d4:	4b35      	ldr	r3, [pc, #212]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 80050d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d8:	4a34      	ldr	r2, [pc, #208]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 80050da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d03c      	beq.n	8005166 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01c      	beq.n	800512e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050f4:	4b2d      	ldr	r3, [pc, #180]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 80050f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050fa:	4a2c      	ldr	r2, [pc, #176]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 80050fc:	f043 0301 	orr.w	r3, r3, #1
 8005100:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005104:	f7fd fc0a 	bl	800291c <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800510c:	f7fd fc06 	bl	800291c <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e0fa      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800511e:	4b23      	ldr	r3, [pc, #140]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8005120:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0ef      	beq.n	800510c <HAL_RCC_OscConfig+0x418>
 800512c:	e01b      	b.n	8005166 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800512e:	4b1f      	ldr	r3, [pc, #124]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8005130:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005134:	4a1d      	ldr	r2, [pc, #116]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8005136:	f023 0301 	bic.w	r3, r3, #1
 800513a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800513e:	f7fd fbed 	bl	800291c <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005146:	f7fd fbe9 	bl	800291c <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e0dd      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005158:	4b14      	ldr	r3, [pc, #80]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 800515a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1ef      	bne.n	8005146 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 80d1 	beq.w	8005312 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005170:	4b0e      	ldr	r3, [pc, #56]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 030c 	and.w	r3, r3, #12
 8005178:	2b0c      	cmp	r3, #12
 800517a:	f000 808b 	beq.w	8005294 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d15e      	bne.n	8005244 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005186:	4b09      	ldr	r3, [pc, #36]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a08      	ldr	r2, [pc, #32]	@ (80051ac <HAL_RCC_OscConfig+0x4b8>)
 800518c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005192:	f7fd fbc3 	bl	800291c <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005198:	e00c      	b.n	80051b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519a:	f7fd fbbf 	bl	800291c <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d905      	bls.n	80051b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e0b3      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
 80051ac:	40021000 	.word	0x40021000
 80051b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b4:	4b59      	ldr	r3, [pc, #356]	@ (800531c <HAL_RCC_OscConfig+0x628>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1ec      	bne.n	800519a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051c0:	4b56      	ldr	r3, [pc, #344]	@ (800531c <HAL_RCC_OscConfig+0x628>)
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	4b56      	ldr	r3, [pc, #344]	@ (8005320 <HAL_RCC_OscConfig+0x62c>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6a11      	ldr	r1, [r2, #32]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051d0:	3a01      	subs	r2, #1
 80051d2:	0112      	lsls	r2, r2, #4
 80051d4:	4311      	orrs	r1, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80051da:	0212      	lsls	r2, r2, #8
 80051dc:	4311      	orrs	r1, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80051e2:	0852      	lsrs	r2, r2, #1
 80051e4:	3a01      	subs	r2, #1
 80051e6:	0552      	lsls	r2, r2, #21
 80051e8:	4311      	orrs	r1, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80051ee:	0852      	lsrs	r2, r2, #1
 80051f0:	3a01      	subs	r2, #1
 80051f2:	0652      	lsls	r2, r2, #25
 80051f4:	4311      	orrs	r1, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051fa:	06d2      	lsls	r2, r2, #27
 80051fc:	430a      	orrs	r2, r1
 80051fe:	4947      	ldr	r1, [pc, #284]	@ (800531c <HAL_RCC_OscConfig+0x628>)
 8005200:	4313      	orrs	r3, r2
 8005202:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005204:	4b45      	ldr	r3, [pc, #276]	@ (800531c <HAL_RCC_OscConfig+0x628>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a44      	ldr	r2, [pc, #272]	@ (800531c <HAL_RCC_OscConfig+0x628>)
 800520a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800520e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005210:	4b42      	ldr	r3, [pc, #264]	@ (800531c <HAL_RCC_OscConfig+0x628>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4a41      	ldr	r2, [pc, #260]	@ (800531c <HAL_RCC_OscConfig+0x628>)
 8005216:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800521a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fd fb7e 	bl	800291c <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005224:	f7fd fb7a 	bl	800291c <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e06e      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005236:	4b39      	ldr	r3, [pc, #228]	@ (800531c <HAL_RCC_OscConfig+0x628>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCC_OscConfig+0x530>
 8005242:	e066      	b.n	8005312 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005244:	4b35      	ldr	r3, [pc, #212]	@ (800531c <HAL_RCC_OscConfig+0x628>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a34      	ldr	r2, [pc, #208]	@ (800531c <HAL_RCC_OscConfig+0x628>)
 800524a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800524e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005250:	4b32      	ldr	r3, [pc, #200]	@ (800531c <HAL_RCC_OscConfig+0x628>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4a31      	ldr	r2, [pc, #196]	@ (800531c <HAL_RCC_OscConfig+0x628>)
 8005256:	f023 0303 	bic.w	r3, r3, #3
 800525a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800525c:	4b2f      	ldr	r3, [pc, #188]	@ (800531c <HAL_RCC_OscConfig+0x628>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	4a2e      	ldr	r2, [pc, #184]	@ (800531c <HAL_RCC_OscConfig+0x628>)
 8005262:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800526a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526c:	f7fd fb56 	bl	800291c <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005274:	f7fd fb52 	bl	800291c <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e046      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005286:	4b25      	ldr	r3, [pc, #148]	@ (800531c <HAL_RCC_OscConfig+0x628>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f0      	bne.n	8005274 <HAL_RCC_OscConfig+0x580>
 8005292:	e03e      	b.n	8005312 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e039      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80052a0:	4b1e      	ldr	r3, [pc, #120]	@ (800531c <HAL_RCC_OscConfig+0x628>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f003 0203 	and.w	r2, r3, #3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d12c      	bne.n	800530e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052be:	3b01      	subs	r3, #1
 80052c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d123      	bne.n	800530e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d11b      	bne.n	800530e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d113      	bne.n	800530e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f0:	085b      	lsrs	r3, r3, #1
 80052f2:	3b01      	subs	r3, #1
 80052f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d109      	bne.n	800530e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005304:	085b      	lsrs	r3, r3, #1
 8005306:	3b01      	subs	r3, #1
 8005308:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800530a:	429a      	cmp	r2, r3
 800530c:	d001      	beq.n	8005312 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3720      	adds	r7, #32
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40021000 	.word	0x40021000
 8005320:	019f800c 	.word	0x019f800c

08005324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e11e      	b.n	800557a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800533c:	4b91      	ldr	r3, [pc, #580]	@ (8005584 <HAL_RCC_ClockConfig+0x260>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 030f 	and.w	r3, r3, #15
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d910      	bls.n	800536c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800534a:	4b8e      	ldr	r3, [pc, #568]	@ (8005584 <HAL_RCC_ClockConfig+0x260>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 020f 	bic.w	r2, r3, #15
 8005352:	498c      	ldr	r1, [pc, #560]	@ (8005584 <HAL_RCC_ClockConfig+0x260>)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	4313      	orrs	r3, r2
 8005358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800535a:	4b8a      	ldr	r3, [pc, #552]	@ (8005584 <HAL_RCC_ClockConfig+0x260>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d001      	beq.n	800536c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e106      	b.n	800557a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d073      	beq.n	8005460 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b03      	cmp	r3, #3
 800537e:	d129      	bne.n	80053d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005380:	4b81      	ldr	r3, [pc, #516]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0f4      	b.n	800557a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005390:	f000 f9d0 	bl	8005734 <RCC_GetSysClockFreqFromPLLSource>
 8005394:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4a7c      	ldr	r2, [pc, #496]	@ (800558c <HAL_RCC_ClockConfig+0x268>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d93f      	bls.n	800541e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800539e:	4b7a      	ldr	r3, [pc, #488]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d009      	beq.n	80053be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d033      	beq.n	800541e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d12f      	bne.n	800541e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053be:	4b72      	ldr	r3, [pc, #456]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053c6:	4a70      	ldr	r2, [pc, #448]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80053c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053ce:	2380      	movs	r3, #128	@ 0x80
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	e024      	b.n	800541e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d107      	bne.n	80053ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053dc:	4b6a      	ldr	r3, [pc, #424]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d109      	bne.n	80053fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e0c6      	b.n	800557a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053ec:	4b66      	ldr	r3, [pc, #408]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0be      	b.n	800557a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80053fc:	f000 f8ce 	bl	800559c <HAL_RCC_GetSysClockFreq>
 8005400:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4a61      	ldr	r2, [pc, #388]	@ (800558c <HAL_RCC_ClockConfig+0x268>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d909      	bls.n	800541e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800540a:	4b5f      	ldr	r3, [pc, #380]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005412:	4a5d      	ldr	r2, [pc, #372]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 8005414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005418:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800541a:	2380      	movs	r3, #128	@ 0x80
 800541c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800541e:	4b5a      	ldr	r3, [pc, #360]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f023 0203 	bic.w	r2, r3, #3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	4957      	ldr	r1, [pc, #348]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800542c:	4313      	orrs	r3, r2
 800542e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005430:	f7fd fa74 	bl	800291c <HAL_GetTick>
 8005434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005436:	e00a      	b.n	800544e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005438:	f7fd fa70 	bl	800291c <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005446:	4293      	cmp	r3, r2
 8005448:	d901      	bls.n	800544e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e095      	b.n	800557a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544e:	4b4e      	ldr	r3, [pc, #312]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 020c 	and.w	r2, r3, #12
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	429a      	cmp	r2, r3
 800545e:	d1eb      	bne.n	8005438 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d023      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005478:	4b43      	ldr	r3, [pc, #268]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	4a42      	ldr	r2, [pc, #264]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800547e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005482:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005490:	4b3d      	ldr	r3, [pc, #244]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005498:	4a3b      	ldr	r2, [pc, #236]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800549a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800549e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a0:	4b39      	ldr	r3, [pc, #228]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	4936      	ldr	r1, [pc, #216]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b80      	cmp	r3, #128	@ 0x80
 80054b8:	d105      	bne.n	80054c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054ba:	4b33      	ldr	r3, [pc, #204]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	4a32      	ldr	r2, [pc, #200]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80054c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054c6:	4b2f      	ldr	r3, [pc, #188]	@ (8005584 <HAL_RCC_ClockConfig+0x260>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d21d      	bcs.n	8005510 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d4:	4b2b      	ldr	r3, [pc, #172]	@ (8005584 <HAL_RCC_ClockConfig+0x260>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f023 020f 	bic.w	r2, r3, #15
 80054dc:	4929      	ldr	r1, [pc, #164]	@ (8005584 <HAL_RCC_ClockConfig+0x260>)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054e4:	f7fd fa1a 	bl	800291c <HAL_GetTick>
 80054e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ea:	e00a      	b.n	8005502 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ec:	f7fd fa16 	bl	800291c <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e03b      	b.n	800557a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005502:	4b20      	ldr	r3, [pc, #128]	@ (8005584 <HAL_RCC_ClockConfig+0x260>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	429a      	cmp	r2, r3
 800550e:	d1ed      	bne.n	80054ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d008      	beq.n	800552e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800551c:	4b1a      	ldr	r3, [pc, #104]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	4917      	ldr	r1, [pc, #92]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800552a:	4313      	orrs	r3, r2
 800552c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800553a:	4b13      	ldr	r3, [pc, #76]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	490f      	ldr	r1, [pc, #60]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800554a:	4313      	orrs	r3, r2
 800554c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800554e:	f000 f825 	bl	800559c <HAL_RCC_GetSysClockFreq>
 8005552:	4602      	mov	r2, r0
 8005554:	4b0c      	ldr	r3, [pc, #48]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	091b      	lsrs	r3, r3, #4
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	490c      	ldr	r1, [pc, #48]	@ (8005590 <HAL_RCC_ClockConfig+0x26c>)
 8005560:	5ccb      	ldrb	r3, [r1, r3]
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	fa22 f303 	lsr.w	r3, r2, r3
 800556a:	4a0a      	ldr	r2, [pc, #40]	@ (8005594 <HAL_RCC_ClockConfig+0x270>)
 800556c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800556e:	4b0a      	ldr	r3, [pc, #40]	@ (8005598 <HAL_RCC_ClockConfig+0x274>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f7fc ffc2 	bl	80024fc <HAL_InitTick>
 8005578:	4603      	mov	r3, r0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40022000 	.word	0x40022000
 8005588:	40021000 	.word	0x40021000
 800558c:	04c4b400 	.word	0x04c4b400
 8005590:	0800e83c 	.word	0x0800e83c
 8005594:	20000000 	.word	0x20000000
 8005598:	20000004 	.word	0x20000004

0800559c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80055a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d102      	bne.n	80055b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005658 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	e047      	b.n	8005644 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055b4:	4b27      	ldr	r3, [pc, #156]	@ (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f003 030c 	and.w	r3, r3, #12
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d102      	bne.n	80055c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055c0:	4b26      	ldr	r3, [pc, #152]	@ (800565c <HAL_RCC_GetSysClockFreq+0xc0>)
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	e03e      	b.n	8005644 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055c6:	4b23      	ldr	r3, [pc, #140]	@ (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 030c 	and.w	r3, r3, #12
 80055ce:	2b0c      	cmp	r3, #12
 80055d0:	d136      	bne.n	8005640 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055d2:	4b20      	ldr	r3, [pc, #128]	@ (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	091b      	lsrs	r3, r3, #4
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	3301      	adds	r3, #1
 80055e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d10c      	bne.n	800560a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055f0:	4a1a      	ldr	r2, [pc, #104]	@ (800565c <HAL_RCC_GetSysClockFreq+0xc0>)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f8:	4a16      	ldr	r2, [pc, #88]	@ (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055fa:	68d2      	ldr	r2, [r2, #12]
 80055fc:	0a12      	lsrs	r2, r2, #8
 80055fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	617b      	str	r3, [r7, #20]
      break;
 8005608:	e00c      	b.n	8005624 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800560a:	4a13      	ldr	r2, [pc, #76]	@ (8005658 <HAL_RCC_GetSysClockFreq+0xbc>)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	4a10      	ldr	r2, [pc, #64]	@ (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005614:	68d2      	ldr	r2, [r2, #12]
 8005616:	0a12      	lsrs	r2, r2, #8
 8005618:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800561c:	fb02 f303 	mul.w	r3, r2, r3
 8005620:	617b      	str	r3, [r7, #20]
      break;
 8005622:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005624:	4b0b      	ldr	r3, [pc, #44]	@ (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	0e5b      	lsrs	r3, r3, #25
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	3301      	adds	r3, #1
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	e001      	b.n	8005644 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005644:	693b      	ldr	r3, [r7, #16]
}
 8005646:	4618      	mov	r0, r3
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40021000 	.word	0x40021000
 8005658:	00f42400 	.word	0x00f42400
 800565c:	016e3600 	.word	0x016e3600

08005660 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005664:	4b03      	ldr	r3, [pc, #12]	@ (8005674 <HAL_RCC_GetHCLKFreq+0x14>)
 8005666:	681b      	ldr	r3, [r3, #0]
}
 8005668:	4618      	mov	r0, r3
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000000 	.word	0x20000000

08005678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800567c:	f7ff fff0 	bl	8005660 <HAL_RCC_GetHCLKFreq>
 8005680:	4602      	mov	r2, r0
 8005682:	4b06      	ldr	r3, [pc, #24]	@ (800569c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	4904      	ldr	r1, [pc, #16]	@ (80056a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800568e:	5ccb      	ldrb	r3, [r1, r3]
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005698:	4618      	mov	r0, r3
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40021000 	.word	0x40021000
 80056a0:	0800e84c 	.word	0x0800e84c

080056a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056a8:	f7ff ffda 	bl	8005660 <HAL_RCC_GetHCLKFreq>
 80056ac:	4602      	mov	r2, r0
 80056ae:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	0adb      	lsrs	r3, r3, #11
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	4904      	ldr	r1, [pc, #16]	@ (80056cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80056ba:	5ccb      	ldrb	r3, [r1, r3]
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40021000 	.word	0x40021000
 80056cc:	0800e84c 	.word	0x0800e84c

080056d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	220f      	movs	r2, #15
 80056de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80056e0:	4b12      	ldr	r3, [pc, #72]	@ (800572c <HAL_RCC_GetClockConfig+0x5c>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 0203 	and.w	r2, r3, #3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80056ec:	4b0f      	ldr	r3, [pc, #60]	@ (800572c <HAL_RCC_GetClockConfig+0x5c>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80056f8:	4b0c      	ldr	r3, [pc, #48]	@ (800572c <HAL_RCC_GetClockConfig+0x5c>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005704:	4b09      	ldr	r3, [pc, #36]	@ (800572c <HAL_RCC_GetClockConfig+0x5c>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	08db      	lsrs	r3, r3, #3
 800570a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005712:	4b07      	ldr	r3, [pc, #28]	@ (8005730 <HAL_RCC_GetClockConfig+0x60>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 020f 	and.w	r2, r3, #15
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	601a      	str	r2, [r3, #0]
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40021000 	.word	0x40021000
 8005730:	40022000 	.word	0x40022000

08005734 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800573a:	4b1e      	ldr	r3, [pc, #120]	@ (80057b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005744:	4b1b      	ldr	r3, [pc, #108]	@ (80057b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	091b      	lsrs	r3, r3, #4
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	3301      	adds	r3, #1
 8005750:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b03      	cmp	r3, #3
 8005756:	d10c      	bne.n	8005772 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005758:	4a17      	ldr	r2, [pc, #92]	@ (80057b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005760:	4a14      	ldr	r2, [pc, #80]	@ (80057b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005762:	68d2      	ldr	r2, [r2, #12]
 8005764:	0a12      	lsrs	r2, r2, #8
 8005766:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800576a:	fb02 f303 	mul.w	r3, r2, r3
 800576e:	617b      	str	r3, [r7, #20]
    break;
 8005770:	e00c      	b.n	800578c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005772:	4a12      	ldr	r2, [pc, #72]	@ (80057bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	fbb2 f3f3 	udiv	r3, r2, r3
 800577a:	4a0e      	ldr	r2, [pc, #56]	@ (80057b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800577c:	68d2      	ldr	r2, [r2, #12]
 800577e:	0a12      	lsrs	r2, r2, #8
 8005780:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005784:	fb02 f303 	mul.w	r3, r2, r3
 8005788:	617b      	str	r3, [r7, #20]
    break;
 800578a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800578c:	4b09      	ldr	r3, [pc, #36]	@ (80057b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	0e5b      	lsrs	r3, r3, #25
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	3301      	adds	r3, #1
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80057a6:	687b      	ldr	r3, [r7, #4]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	40021000 	.word	0x40021000
 80057b8:	016e3600 	.word	0x016e3600
 80057bc:	00f42400 	.word	0x00f42400

080057c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057c8:	2300      	movs	r3, #0
 80057ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057cc:	2300      	movs	r3, #0
 80057ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8098 	beq.w	800590e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057de:	2300      	movs	r3, #0
 80057e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057e2:	4b43      	ldr	r3, [pc, #268]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10d      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ee:	4b40      	ldr	r3, [pc, #256]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f2:	4a3f      	ldr	r2, [pc, #252]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80057fa:	4b3d      	ldr	r3, [pc, #244]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005802:	60bb      	str	r3, [r7, #8]
 8005804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005806:	2301      	movs	r3, #1
 8005808:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800580a:	4b3a      	ldr	r3, [pc, #232]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a39      	ldr	r2, [pc, #228]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005814:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005816:	f7fd f881 	bl	800291c <HAL_GetTick>
 800581a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800581c:	e009      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581e:	f7fd f87d 	bl	800291c <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d902      	bls.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	74fb      	strb	r3, [r7, #19]
        break;
 8005830:	e005      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005832:	4b30      	ldr	r3, [pc, #192]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0ef      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800583e:	7cfb      	ldrb	r3, [r7, #19]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d159      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005844:	4b2a      	ldr	r3, [pc, #168]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800584a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800584e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01e      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	429a      	cmp	r2, r3
 800585e:	d019      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005860:	4b23      	ldr	r3, [pc, #140]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005866:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800586a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800586c:	4b20      	ldr	r3, [pc, #128]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005872:	4a1f      	ldr	r2, [pc, #124]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800587c:	4b1c      	ldr	r3, [pc, #112]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005882:	4a1b      	ldr	r2, [pc, #108]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005888:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800588c:	4a18      	ldr	r2, [pc, #96]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d016      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589e:	f7fd f83d 	bl	800291c <HAL_GetTick>
 80058a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a4:	e00b      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a6:	f7fd f839 	bl	800291c <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d902      	bls.n	80058be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	74fb      	strb	r3, [r7, #19]
            break;
 80058bc:	e006      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058be:	4b0c      	ldr	r3, [pc, #48]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0ec      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80058cc:	7cfb      	ldrb	r3, [r7, #19]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10b      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058d2:	4b07      	ldr	r3, [pc, #28]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e0:	4903      	ldr	r1, [pc, #12]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80058e8:	e008      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058ea:	7cfb      	ldrb	r3, [r7, #19]
 80058ec:	74bb      	strb	r3, [r7, #18]
 80058ee:	e005      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058f0:	40021000 	.word	0x40021000
 80058f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f8:	7cfb      	ldrb	r3, [r7, #19]
 80058fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058fc:	7c7b      	ldrb	r3, [r7, #17]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d105      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005902:	4ba7      	ldr	r3, [pc, #668]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005906:	4aa6      	ldr	r2, [pc, #664]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005908:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800590c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800591a:	4ba1      	ldr	r3, [pc, #644]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005920:	f023 0203 	bic.w	r2, r3, #3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	499d      	ldr	r1, [pc, #628]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800592a:	4313      	orrs	r3, r2
 800592c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800593c:	4b98      	ldr	r3, [pc, #608]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800593e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005942:	f023 020c 	bic.w	r2, r3, #12
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	4995      	ldr	r1, [pc, #596]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0304 	and.w	r3, r3, #4
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800595e:	4b90      	ldr	r3, [pc, #576]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005964:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	498c      	ldr	r1, [pc, #560]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005980:	4b87      	ldr	r3, [pc, #540]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005986:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	4984      	ldr	r1, [pc, #528]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0310 	and.w	r3, r3, #16
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059a2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	497b      	ldr	r1, [pc, #492]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059c4:	4b76      	ldr	r3, [pc, #472]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	4973      	ldr	r1, [pc, #460]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059e6:	4b6e      	ldr	r3, [pc, #440]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	496a      	ldr	r1, [pc, #424]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a08:	4b65      	ldr	r3, [pc, #404]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	4962      	ldr	r1, [pc, #392]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a2a:	4b5d      	ldr	r3, [pc, #372]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a38:	4959      	ldr	r1, [pc, #356]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a4c:	4b54      	ldr	r3, [pc, #336]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a52:	f023 0203 	bic.w	r2, r3, #3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5a:	4951      	ldr	r1, [pc, #324]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a6e:	4b4c      	ldr	r3, [pc, #304]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7c:	4948      	ldr	r1, [pc, #288]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d015      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a90:	4b43      	ldr	r3, [pc, #268]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9e:	4940      	ldr	r1, [pc, #256]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aae:	d105      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4a3a      	ldr	r2, [pc, #232]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005aba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d015      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ac8:	4b35      	ldr	r3, [pc, #212]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ace:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ad6:	4932      	ldr	r1, [pc, #200]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ae6:	d105      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4a2c      	ldr	r2, [pc, #176]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005af2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d015      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b00:	4b27      	ldr	r3, [pc, #156]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0e:	4924      	ldr	r1, [pc, #144]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b1e:	d105      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b20:	4b1f      	ldr	r3, [pc, #124]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4a1e      	ldr	r2, [pc, #120]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d015      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b38:	4b19      	ldr	r3, [pc, #100]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b46:	4916      	ldr	r1, [pc, #88]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b56:	d105      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b58:	4b11      	ldr	r3, [pc, #68]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	4a10      	ldr	r2, [pc, #64]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d019      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7e:	4908      	ldr	r1, [pc, #32]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b8e:	d109      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b90:	4b03      	ldr	r3, [pc, #12]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	4a02      	ldr	r2, [pc, #8]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b9a:	60d3      	str	r3, [r2, #12]
 8005b9c:	e002      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005b9e:	bf00      	nop
 8005ba0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d015      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bb0:	4b29      	ldr	r3, [pc, #164]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbe:	4926      	ldr	r1, [pc, #152]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bce:	d105      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bd0:	4b21      	ldr	r3, [pc, #132]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4a20      	ldr	r2, [pc, #128]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bda:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d015      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005be8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bf6:	4918      	ldr	r1, [pc, #96]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c06:	d105      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c08:	4b13      	ldr	r3, [pc, #76]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	4a12      	ldr	r2, [pc, #72]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c12:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d015      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c20:	4b0d      	ldr	r3, [pc, #52]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c2e:	490a      	ldr	r1, [pc, #40]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c3e:	d105      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c40:	4b05      	ldr	r3, [pc, #20]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	4a04      	ldr	r2, [pc, #16]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40021000 	.word	0x40021000

08005c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e049      	b.n	8005d02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fc fa84 	bl	8002190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3304      	adds	r3, #4
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	f000 ff00 	bl	8006aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d001      	beq.n	8005d24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e04c      	b.n	8005dbe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a26      	ldr	r2, [pc, #152]	@ (8005dcc <HAL_TIM_Base_Start+0xc0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d022      	beq.n	8005d7c <HAL_TIM_Base_Start+0x70>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d3e:	d01d      	beq.n	8005d7c <HAL_TIM_Base_Start+0x70>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a22      	ldr	r2, [pc, #136]	@ (8005dd0 <HAL_TIM_Base_Start+0xc4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d018      	beq.n	8005d7c <HAL_TIM_Base_Start+0x70>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a21      	ldr	r2, [pc, #132]	@ (8005dd4 <HAL_TIM_Base_Start+0xc8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d013      	beq.n	8005d7c <HAL_TIM_Base_Start+0x70>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1f      	ldr	r2, [pc, #124]	@ (8005dd8 <HAL_TIM_Base_Start+0xcc>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00e      	beq.n	8005d7c <HAL_TIM_Base_Start+0x70>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a1e      	ldr	r2, [pc, #120]	@ (8005ddc <HAL_TIM_Base_Start+0xd0>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d009      	beq.n	8005d7c <HAL_TIM_Base_Start+0x70>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8005de0 <HAL_TIM_Base_Start+0xd4>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d004      	beq.n	8005d7c <HAL_TIM_Base_Start+0x70>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1b      	ldr	r2, [pc, #108]	@ (8005de4 <HAL_TIM_Base_Start+0xd8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d115      	bne.n	8005da8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	4b19      	ldr	r3, [pc, #100]	@ (8005de8 <HAL_TIM_Base_Start+0xdc>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b06      	cmp	r3, #6
 8005d8c:	d015      	beq.n	8005dba <HAL_TIM_Base_Start+0xae>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d94:	d011      	beq.n	8005dba <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0201 	orr.w	r2, r2, #1
 8005da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da6:	e008      	b.n	8005dba <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	e000      	b.n	8005dbc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	40012c00 	.word	0x40012c00
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800
 8005dd8:	40000c00 	.word	0x40000c00
 8005ddc:	40013400 	.word	0x40013400
 8005de0:	40014000 	.word	0x40014000
 8005de4:	40015000 	.word	0x40015000
 8005de8:	00010007 	.word	0x00010007

08005dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d001      	beq.n	8005e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e054      	b.n	8005eae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a26      	ldr	r2, [pc, #152]	@ (8005ebc <HAL_TIM_Base_Start_IT+0xd0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d022      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x80>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e2e:	d01d      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x80>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a22      	ldr	r2, [pc, #136]	@ (8005ec0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d018      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x80>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a21      	ldr	r2, [pc, #132]	@ (8005ec4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d013      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x80>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a1f      	ldr	r2, [pc, #124]	@ (8005ec8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00e      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x80>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1e      	ldr	r2, [pc, #120]	@ (8005ecc <HAL_TIM_Base_Start_IT+0xe0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d009      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x80>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d004      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x80>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d115      	bne.n	8005e98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689a      	ldr	r2, [r3, #8]
 8005e72:	4b19      	ldr	r3, [pc, #100]	@ (8005ed8 <HAL_TIM_Base_Start_IT+0xec>)
 8005e74:	4013      	ands	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b06      	cmp	r3, #6
 8005e7c:	d015      	beq.n	8005eaa <HAL_TIM_Base_Start_IT+0xbe>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e84:	d011      	beq.n	8005eaa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0201 	orr.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e96:	e008      	b.n	8005eaa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0201 	orr.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	e000      	b.n	8005eac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40012c00 	.word	0x40012c00
 8005ec0:	40000400 	.word	0x40000400
 8005ec4:	40000800 	.word	0x40000800
 8005ec8:	40000c00 	.word	0x40000c00
 8005ecc:	40013400 	.word	0x40013400
 8005ed0:	40014000 	.word	0x40014000
 8005ed4:	40015000 	.word	0x40015000
 8005ed8:	00010007 	.word	0x00010007

08005edc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e049      	b.n	8005f82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f841 	bl	8005f8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3304      	adds	r3, #4
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	f000 fdc0 	bl	8006aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
	...

08005fa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d109      	bne.n	8005fc4 <HAL_TIM_PWM_Start+0x24>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	e03c      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d109      	bne.n	8005fde <HAL_TIM_PWM_Start+0x3e>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	bf14      	ite	ne
 8005fd6:	2301      	movne	r3, #1
 8005fd8:	2300      	moveq	r3, #0
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	e02f      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d109      	bne.n	8005ff8 <HAL_TIM_PWM_Start+0x58>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	bf14      	ite	ne
 8005ff0:	2301      	movne	r3, #1
 8005ff2:	2300      	moveq	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	e022      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2b0c      	cmp	r3, #12
 8005ffc:	d109      	bne.n	8006012 <HAL_TIM_PWM_Start+0x72>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b01      	cmp	r3, #1
 8006008:	bf14      	ite	ne
 800600a:	2301      	movne	r3, #1
 800600c:	2300      	moveq	r3, #0
 800600e:	b2db      	uxtb	r3, r3
 8006010:	e015      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b10      	cmp	r3, #16
 8006016:	d109      	bne.n	800602c <HAL_TIM_PWM_Start+0x8c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	bf14      	ite	ne
 8006024:	2301      	movne	r3, #1
 8006026:	2300      	moveq	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	e008      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b01      	cmp	r3, #1
 8006036:	bf14      	ite	ne
 8006038:	2301      	movne	r3, #1
 800603a:	2300      	moveq	r3, #0
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e0a6      	b.n	8006194 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d104      	bne.n	8006056 <HAL_TIM_PWM_Start+0xb6>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006054:	e023      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b04      	cmp	r3, #4
 800605a:	d104      	bne.n	8006066 <HAL_TIM_PWM_Start+0xc6>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006064:	e01b      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b08      	cmp	r3, #8
 800606a:	d104      	bne.n	8006076 <HAL_TIM_PWM_Start+0xd6>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006074:	e013      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b0c      	cmp	r3, #12
 800607a:	d104      	bne.n	8006086 <HAL_TIM_PWM_Start+0xe6>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006084:	e00b      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b10      	cmp	r3, #16
 800608a:	d104      	bne.n	8006096 <HAL_TIM_PWM_Start+0xf6>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006094:	e003      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2202      	movs	r2, #2
 800609a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2201      	movs	r2, #1
 80060a4:	6839      	ldr	r1, [r7, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 f9dc 	bl	8007464 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a3a      	ldr	r2, [pc, #232]	@ (800619c <HAL_TIM_PWM_Start+0x1fc>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d018      	beq.n	80060e8 <HAL_TIM_PWM_Start+0x148>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a39      	ldr	r2, [pc, #228]	@ (80061a0 <HAL_TIM_PWM_Start+0x200>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d013      	beq.n	80060e8 <HAL_TIM_PWM_Start+0x148>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a37      	ldr	r2, [pc, #220]	@ (80061a4 <HAL_TIM_PWM_Start+0x204>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00e      	beq.n	80060e8 <HAL_TIM_PWM_Start+0x148>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a36      	ldr	r2, [pc, #216]	@ (80061a8 <HAL_TIM_PWM_Start+0x208>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d009      	beq.n	80060e8 <HAL_TIM_PWM_Start+0x148>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a34      	ldr	r2, [pc, #208]	@ (80061ac <HAL_TIM_PWM_Start+0x20c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d004      	beq.n	80060e8 <HAL_TIM_PWM_Start+0x148>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a33      	ldr	r2, [pc, #204]	@ (80061b0 <HAL_TIM_PWM_Start+0x210>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d101      	bne.n	80060ec <HAL_TIM_PWM_Start+0x14c>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <HAL_TIM_PWM_Start+0x14e>
 80060ec:	2300      	movs	r3, #0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d007      	beq.n	8006102 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006100:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a25      	ldr	r2, [pc, #148]	@ (800619c <HAL_TIM_PWM_Start+0x1fc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d022      	beq.n	8006152 <HAL_TIM_PWM_Start+0x1b2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006114:	d01d      	beq.n	8006152 <HAL_TIM_PWM_Start+0x1b2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a26      	ldr	r2, [pc, #152]	@ (80061b4 <HAL_TIM_PWM_Start+0x214>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d018      	beq.n	8006152 <HAL_TIM_PWM_Start+0x1b2>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a24      	ldr	r2, [pc, #144]	@ (80061b8 <HAL_TIM_PWM_Start+0x218>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <HAL_TIM_PWM_Start+0x1b2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a23      	ldr	r2, [pc, #140]	@ (80061bc <HAL_TIM_PWM_Start+0x21c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00e      	beq.n	8006152 <HAL_TIM_PWM_Start+0x1b2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a19      	ldr	r2, [pc, #100]	@ (80061a0 <HAL_TIM_PWM_Start+0x200>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d009      	beq.n	8006152 <HAL_TIM_PWM_Start+0x1b2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a18      	ldr	r2, [pc, #96]	@ (80061a4 <HAL_TIM_PWM_Start+0x204>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d004      	beq.n	8006152 <HAL_TIM_PWM_Start+0x1b2>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a18      	ldr	r2, [pc, #96]	@ (80061b0 <HAL_TIM_PWM_Start+0x210>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d115      	bne.n	800617e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	4b19      	ldr	r3, [pc, #100]	@ (80061c0 <HAL_TIM_PWM_Start+0x220>)
 800615a:	4013      	ands	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b06      	cmp	r3, #6
 8006162:	d015      	beq.n	8006190 <HAL_TIM_PWM_Start+0x1f0>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800616a:	d011      	beq.n	8006190 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0201 	orr.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617c:	e008      	b.n	8006190 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 0201 	orr.w	r2, r2, #1
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	e000      	b.n	8006192 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006190:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40012c00 	.word	0x40012c00
 80061a0:	40013400 	.word	0x40013400
 80061a4:	40014000 	.word	0x40014000
 80061a8:	40014400 	.word	0x40014400
 80061ac:	40014800 	.word	0x40014800
 80061b0:	40015000 	.word	0x40015000
 80061b4:	40000400 	.word	0x40000400
 80061b8:	40000800 	.word	0x40000800
 80061bc:	40000c00 	.word	0x40000c00
 80061c0:	00010007 	.word	0x00010007

080061c4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2200      	movs	r2, #0
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 f944 	bl	8007464 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a40      	ldr	r2, [pc, #256]	@ (80062e4 <HAL_TIM_PWM_Stop+0x120>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d018      	beq.n	8006218 <HAL_TIM_PWM_Stop+0x54>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a3f      	ldr	r2, [pc, #252]	@ (80062e8 <HAL_TIM_PWM_Stop+0x124>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d013      	beq.n	8006218 <HAL_TIM_PWM_Stop+0x54>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a3d      	ldr	r2, [pc, #244]	@ (80062ec <HAL_TIM_PWM_Stop+0x128>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d00e      	beq.n	8006218 <HAL_TIM_PWM_Stop+0x54>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a3c      	ldr	r2, [pc, #240]	@ (80062f0 <HAL_TIM_PWM_Stop+0x12c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d009      	beq.n	8006218 <HAL_TIM_PWM_Stop+0x54>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a3a      	ldr	r2, [pc, #232]	@ (80062f4 <HAL_TIM_PWM_Stop+0x130>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <HAL_TIM_PWM_Stop+0x54>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a39      	ldr	r2, [pc, #228]	@ (80062f8 <HAL_TIM_PWM_Stop+0x134>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d101      	bne.n	800621c <HAL_TIM_PWM_Stop+0x58>
 8006218:	2301      	movs	r3, #1
 800621a:	e000      	b.n	800621e <HAL_TIM_PWM_Stop+0x5a>
 800621c:	2300      	movs	r3, #0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d017      	beq.n	8006252 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6a1a      	ldr	r2, [r3, #32]
 8006228:	f241 1311 	movw	r3, #4369	@ 0x1111
 800622c:	4013      	ands	r3, r2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10f      	bne.n	8006252 <HAL_TIM_PWM_Stop+0x8e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6a1a      	ldr	r2, [r3, #32]
 8006238:	f244 4344 	movw	r3, #17476	@ 0x4444
 800623c:	4013      	ands	r3, r2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d107      	bne.n	8006252 <HAL_TIM_PWM_Stop+0x8e>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006250:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6a1a      	ldr	r2, [r3, #32]
 8006258:	f241 1311 	movw	r3, #4369	@ 0x1111
 800625c:	4013      	ands	r3, r2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10f      	bne.n	8006282 <HAL_TIM_PWM_Stop+0xbe>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6a1a      	ldr	r2, [r3, #32]
 8006268:	f244 4344 	movw	r3, #17476	@ 0x4444
 800626c:	4013      	ands	r3, r2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d107      	bne.n	8006282 <HAL_TIM_PWM_Stop+0xbe>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0201 	bic.w	r2, r2, #1
 8006280:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <HAL_TIM_PWM_Stop+0xce>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006290:	e023      	b.n	80062da <HAL_TIM_PWM_Stop+0x116>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b04      	cmp	r3, #4
 8006296:	d104      	bne.n	80062a2 <HAL_TIM_PWM_Stop+0xde>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062a0:	e01b      	b.n	80062da <HAL_TIM_PWM_Stop+0x116>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d104      	bne.n	80062b2 <HAL_TIM_PWM_Stop+0xee>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062b0:	e013      	b.n	80062da <HAL_TIM_PWM_Stop+0x116>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b0c      	cmp	r3, #12
 80062b6:	d104      	bne.n	80062c2 <HAL_TIM_PWM_Stop+0xfe>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062c0:	e00b      	b.n	80062da <HAL_TIM_PWM_Stop+0x116>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b10      	cmp	r3, #16
 80062c6:	d104      	bne.n	80062d2 <HAL_TIM_PWM_Stop+0x10e>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062d0:	e003      	b.n	80062da <HAL_TIM_PWM_Stop+0x116>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40013400 	.word	0x40013400
 80062ec:	40014000 	.word	0x40014000
 80062f0:	40014400 	.word	0x40014400
 80062f4:	40014800 	.word	0x40014800
 80062f8:	40015000 	.word	0x40015000

080062fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b02      	cmp	r3, #2
 8006310:	d122      	bne.n	8006358 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b02      	cmp	r3, #2
 800631e:	d11b      	bne.n	8006358 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f06f 0202 	mvn.w	r2, #2
 8006328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fb90 	bl	8006a64 <HAL_TIM_IC_CaptureCallback>
 8006344:	e005      	b.n	8006352 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fb82 	bl	8006a50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fb93 	bl	8006a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b04      	cmp	r3, #4
 8006364:	d122      	bne.n	80063ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b04      	cmp	r3, #4
 8006372:	d11b      	bne.n	80063ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0204 	mvn.w	r2, #4
 800637c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2202      	movs	r2, #2
 8006382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fb66 	bl	8006a64 <HAL_TIM_IC_CaptureCallback>
 8006398:	e005      	b.n	80063a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fb58 	bl	8006a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fb69 	bl	8006a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d122      	bne.n	8006400 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f003 0308 	and.w	r3, r3, #8
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d11b      	bne.n	8006400 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f06f 0208 	mvn.w	r2, #8
 80063d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2204      	movs	r2, #4
 80063d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fb3c 	bl	8006a64 <HAL_TIM_IC_CaptureCallback>
 80063ec:	e005      	b.n	80063fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fb2e 	bl	8006a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fb3f 	bl	8006a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f003 0310 	and.w	r3, r3, #16
 800640a:	2b10      	cmp	r3, #16
 800640c:	d122      	bne.n	8006454 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f003 0310 	and.w	r3, r3, #16
 8006418:	2b10      	cmp	r3, #16
 800641a:	d11b      	bne.n	8006454 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f06f 0210 	mvn.w	r2, #16
 8006424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2208      	movs	r2, #8
 800642a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fb12 	bl	8006a64 <HAL_TIM_IC_CaptureCallback>
 8006440:	e005      	b.n	800644e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fb04 	bl	8006a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fb15 	bl	8006a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b01      	cmp	r3, #1
 8006460:	d10e      	bne.n	8006480 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b01      	cmp	r3, #1
 800646e:	d107      	bne.n	8006480 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f06f 0201 	mvn.w	r2, #1
 8006478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fb f9ac 	bl	80017d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800648a:	2b80      	cmp	r3, #128	@ 0x80
 800648c:	d10e      	bne.n	80064ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006498:	2b80      	cmp	r3, #128	@ 0x80
 800649a:	d107      	bne.n	80064ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80064a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f001 fb35 	bl	8007b16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064ba:	d10e      	bne.n	80064da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064c6:	2b80      	cmp	r3, #128	@ 0x80
 80064c8:	d107      	bne.n	80064da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80064d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 fb28 	bl	8007b2a <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e4:	2b40      	cmp	r3, #64	@ 0x40
 80064e6:	d10e      	bne.n	8006506 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f2:	2b40      	cmp	r3, #64	@ 0x40
 80064f4:	d107      	bne.n	8006506 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fac3 	bl	8006a8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b20      	cmp	r3, #32
 8006512:	d10e      	bne.n	8006532 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f003 0320 	and.w	r3, r3, #32
 800651e:	2b20      	cmp	r3, #32
 8006520:	d107      	bne.n	8006532 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f06f 0220 	mvn.w	r2, #32
 800652a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 fae8 	bl	8007b02 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800653c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006540:	d10f      	bne.n	8006562 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800654c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006550:	d107      	bne.n	8006562 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800655a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 faee 	bl	8007b3e <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800656c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006570:	d10f      	bne.n	8006592 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800657c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006580:	d107      	bne.n	8006592 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800658a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 fae0 	bl	8007b52 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800659c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065a0:	d10f      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065b0:	d107      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80065ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f001 fad2 	bl	8007b66 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80065d0:	d10f      	bne.n	80065f2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80065e0:	d107      	bne.n	80065f2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80065ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f001 fac4 	bl	8007b7a <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006616:	2302      	movs	r3, #2
 8006618:	e0ff      	b.n	800681a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b14      	cmp	r3, #20
 8006626:	f200 80f0 	bhi.w	800680a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800662a:	a201      	add	r2, pc, #4	@ (adr r2, 8006630 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800662c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006630:	08006685 	.word	0x08006685
 8006634:	0800680b 	.word	0x0800680b
 8006638:	0800680b 	.word	0x0800680b
 800663c:	0800680b 	.word	0x0800680b
 8006640:	080066c5 	.word	0x080066c5
 8006644:	0800680b 	.word	0x0800680b
 8006648:	0800680b 	.word	0x0800680b
 800664c:	0800680b 	.word	0x0800680b
 8006650:	08006707 	.word	0x08006707
 8006654:	0800680b 	.word	0x0800680b
 8006658:	0800680b 	.word	0x0800680b
 800665c:	0800680b 	.word	0x0800680b
 8006660:	08006747 	.word	0x08006747
 8006664:	0800680b 	.word	0x0800680b
 8006668:	0800680b 	.word	0x0800680b
 800666c:	0800680b 	.word	0x0800680b
 8006670:	08006789 	.word	0x08006789
 8006674:	0800680b 	.word	0x0800680b
 8006678:	0800680b 	.word	0x0800680b
 800667c:	0800680b 	.word	0x0800680b
 8006680:	080067c9 	.word	0x080067c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68b9      	ldr	r1, [r7, #8]
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fab0 	bl	8006bf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	699a      	ldr	r2, [r3, #24]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0208 	orr.w	r2, r2, #8
 800669e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0204 	bic.w	r2, r2, #4
 80066ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6999      	ldr	r1, [r3, #24]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	619a      	str	r2, [r3, #24]
      break;
 80066c2:	e0a5      	b.n	8006810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fb2a 	bl	8006d24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699a      	ldr	r2, [r3, #24]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699a      	ldr	r2, [r3, #24]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6999      	ldr	r1, [r3, #24]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	021a      	lsls	r2, r3, #8
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	619a      	str	r2, [r3, #24]
      break;
 8006704:	e084      	b.n	8006810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	4618      	mov	r0, r3
 800670e:	f000 fb9d 	bl	8006e4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69da      	ldr	r2, [r3, #28]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0208 	orr.w	r2, r2, #8
 8006720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69da      	ldr	r2, [r3, #28]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0204 	bic.w	r2, r2, #4
 8006730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69d9      	ldr	r1, [r3, #28]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	691a      	ldr	r2, [r3, #16]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	61da      	str	r2, [r3, #28]
      break;
 8006744:	e064      	b.n	8006810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68b9      	ldr	r1, [r7, #8]
 800674c:	4618      	mov	r0, r3
 800674e:	f000 fc0f 	bl	8006f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69da      	ldr	r2, [r3, #28]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69da      	ldr	r2, [r3, #28]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69d9      	ldr	r1, [r3, #28]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	021a      	lsls	r2, r3, #8
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	61da      	str	r2, [r3, #28]
      break;
 8006786:	e043      	b.n	8006810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fc82 	bl	8007098 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0208 	orr.w	r2, r2, #8
 80067a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0204 	bic.w	r2, r2, #4
 80067b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	691a      	ldr	r2, [r3, #16]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80067c6:	e023      	b.n	8006810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68b9      	ldr	r1, [r7, #8]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fccc 	bl	800716c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	021a      	lsls	r2, r3, #8
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006808:	e002      	b.n	8006810 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	75fb      	strb	r3, [r7, #23]
      break;
 800680e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006818:	7dfb      	ldrb	r3, [r7, #23]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop

08006824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <HAL_TIM_ConfigClockSource+0x1c>
 800683c:	2302      	movs	r3, #2
 800683e:	e0f6      	b.n	8006a2e <HAL_TIM_ConfigClockSource+0x20a>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800685e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800686a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a6f      	ldr	r2, [pc, #444]	@ (8006a38 <HAL_TIM_ConfigClockSource+0x214>)
 800687a:	4293      	cmp	r3, r2
 800687c:	f000 80c1 	beq.w	8006a02 <HAL_TIM_ConfigClockSource+0x1de>
 8006880:	4a6d      	ldr	r2, [pc, #436]	@ (8006a38 <HAL_TIM_ConfigClockSource+0x214>)
 8006882:	4293      	cmp	r3, r2
 8006884:	f200 80c6 	bhi.w	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
 8006888:	4a6c      	ldr	r2, [pc, #432]	@ (8006a3c <HAL_TIM_ConfigClockSource+0x218>)
 800688a:	4293      	cmp	r3, r2
 800688c:	f000 80b9 	beq.w	8006a02 <HAL_TIM_ConfigClockSource+0x1de>
 8006890:	4a6a      	ldr	r2, [pc, #424]	@ (8006a3c <HAL_TIM_ConfigClockSource+0x218>)
 8006892:	4293      	cmp	r3, r2
 8006894:	f200 80be 	bhi.w	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
 8006898:	4a69      	ldr	r2, [pc, #420]	@ (8006a40 <HAL_TIM_ConfigClockSource+0x21c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	f000 80b1 	beq.w	8006a02 <HAL_TIM_ConfigClockSource+0x1de>
 80068a0:	4a67      	ldr	r2, [pc, #412]	@ (8006a40 <HAL_TIM_ConfigClockSource+0x21c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	f200 80b6 	bhi.w	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
 80068a8:	4a66      	ldr	r2, [pc, #408]	@ (8006a44 <HAL_TIM_ConfigClockSource+0x220>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	f000 80a9 	beq.w	8006a02 <HAL_TIM_ConfigClockSource+0x1de>
 80068b0:	4a64      	ldr	r2, [pc, #400]	@ (8006a44 <HAL_TIM_ConfigClockSource+0x220>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	f200 80ae 	bhi.w	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
 80068b8:	4a63      	ldr	r2, [pc, #396]	@ (8006a48 <HAL_TIM_ConfigClockSource+0x224>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	f000 80a1 	beq.w	8006a02 <HAL_TIM_ConfigClockSource+0x1de>
 80068c0:	4a61      	ldr	r2, [pc, #388]	@ (8006a48 <HAL_TIM_ConfigClockSource+0x224>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	f200 80a6 	bhi.w	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
 80068c8:	4a60      	ldr	r2, [pc, #384]	@ (8006a4c <HAL_TIM_ConfigClockSource+0x228>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	f000 8099 	beq.w	8006a02 <HAL_TIM_ConfigClockSource+0x1de>
 80068d0:	4a5e      	ldr	r2, [pc, #376]	@ (8006a4c <HAL_TIM_ConfigClockSource+0x228>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	f200 809e 	bhi.w	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
 80068d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80068dc:	f000 8091 	beq.w	8006a02 <HAL_TIM_ConfigClockSource+0x1de>
 80068e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80068e4:	f200 8096 	bhi.w	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
 80068e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068ec:	f000 8089 	beq.w	8006a02 <HAL_TIM_ConfigClockSource+0x1de>
 80068f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068f4:	f200 808e 	bhi.w	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
 80068f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068fc:	d03e      	beq.n	800697c <HAL_TIM_ConfigClockSource+0x158>
 80068fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006902:	f200 8087 	bhi.w	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
 8006906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800690a:	f000 8086 	beq.w	8006a1a <HAL_TIM_ConfigClockSource+0x1f6>
 800690e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006912:	d87f      	bhi.n	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
 8006914:	2b70      	cmp	r3, #112	@ 0x70
 8006916:	d01a      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x12a>
 8006918:	2b70      	cmp	r3, #112	@ 0x70
 800691a:	d87b      	bhi.n	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
 800691c:	2b60      	cmp	r3, #96	@ 0x60
 800691e:	d050      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x19e>
 8006920:	2b60      	cmp	r3, #96	@ 0x60
 8006922:	d877      	bhi.n	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
 8006924:	2b50      	cmp	r3, #80	@ 0x50
 8006926:	d03c      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x17e>
 8006928:	2b50      	cmp	r3, #80	@ 0x50
 800692a:	d873      	bhi.n	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
 800692c:	2b40      	cmp	r3, #64	@ 0x40
 800692e:	d058      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x1be>
 8006930:	2b40      	cmp	r3, #64	@ 0x40
 8006932:	d86f      	bhi.n	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
 8006934:	2b30      	cmp	r3, #48	@ 0x30
 8006936:	d064      	beq.n	8006a02 <HAL_TIM_ConfigClockSource+0x1de>
 8006938:	2b30      	cmp	r3, #48	@ 0x30
 800693a:	d86b      	bhi.n	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
 800693c:	2b20      	cmp	r3, #32
 800693e:	d060      	beq.n	8006a02 <HAL_TIM_ConfigClockSource+0x1de>
 8006940:	2b20      	cmp	r3, #32
 8006942:	d867      	bhi.n	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d05c      	beq.n	8006a02 <HAL_TIM_ConfigClockSource+0x1de>
 8006948:	2b10      	cmp	r3, #16
 800694a:	d05a      	beq.n	8006a02 <HAL_TIM_ConfigClockSource+0x1de>
 800694c:	e062      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6899      	ldr	r1, [r3, #8]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f000 fd61 	bl	8007424 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006970:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	609a      	str	r2, [r3, #8]
      break;
 800697a:	e04f      	b.n	8006a1c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6818      	ldr	r0, [r3, #0]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	6899      	ldr	r1, [r3, #8]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f000 fd4a 	bl	8007424 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800699e:	609a      	str	r2, [r3, #8]
      break;
 80069a0:	e03c      	b.n	8006a1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	6859      	ldr	r1, [r3, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f000 fcbc 	bl	800732c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2150      	movs	r1, #80	@ 0x50
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fd15 	bl	80073ea <TIM_ITRx_SetConfig>
      break;
 80069c0:	e02c      	b.n	8006a1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6859      	ldr	r1, [r3, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	461a      	mov	r2, r3
 80069d0:	f000 fcdb 	bl	800738a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2160      	movs	r1, #96	@ 0x60
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fd05 	bl	80073ea <TIM_ITRx_SetConfig>
      break;
 80069e0:	e01c      	b.n	8006a1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	6859      	ldr	r1, [r3, #4]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	461a      	mov	r2, r3
 80069f0:	f000 fc9c 	bl	800732c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2140      	movs	r1, #64	@ 0x40
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fcf5 	bl	80073ea <TIM_ITRx_SetConfig>
      break;
 8006a00:	e00c      	b.n	8006a1c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	f000 fcec 	bl	80073ea <TIM_ITRx_SetConfig>
      break;
 8006a12:	e003      	b.n	8006a1c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	73fb      	strb	r3, [r7, #15]
      break;
 8006a18:	e000      	b.n	8006a1c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006a1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	00100070 	.word	0x00100070
 8006a3c:	00100060 	.word	0x00100060
 8006a40:	00100050 	.word	0x00100050
 8006a44:	00100040 	.word	0x00100040
 8006a48:	00100030 	.word	0x00100030
 8006a4c:	00100020 	.word	0x00100020

08006a50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a46      	ldr	r2, [pc, #280]	@ (8006bcc <TIM_Base_SetConfig+0x12c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d017      	beq.n	8006ae8 <TIM_Base_SetConfig+0x48>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006abe:	d013      	beq.n	8006ae8 <TIM_Base_SetConfig+0x48>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a43      	ldr	r2, [pc, #268]	@ (8006bd0 <TIM_Base_SetConfig+0x130>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d00f      	beq.n	8006ae8 <TIM_Base_SetConfig+0x48>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a42      	ldr	r2, [pc, #264]	@ (8006bd4 <TIM_Base_SetConfig+0x134>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00b      	beq.n	8006ae8 <TIM_Base_SetConfig+0x48>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a41      	ldr	r2, [pc, #260]	@ (8006bd8 <TIM_Base_SetConfig+0x138>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d007      	beq.n	8006ae8 <TIM_Base_SetConfig+0x48>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a40      	ldr	r2, [pc, #256]	@ (8006bdc <TIM_Base_SetConfig+0x13c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <TIM_Base_SetConfig+0x48>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a3f      	ldr	r2, [pc, #252]	@ (8006be0 <TIM_Base_SetConfig+0x140>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d108      	bne.n	8006afa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a33      	ldr	r2, [pc, #204]	@ (8006bcc <TIM_Base_SetConfig+0x12c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d023      	beq.n	8006b4a <TIM_Base_SetConfig+0xaa>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b08:	d01f      	beq.n	8006b4a <TIM_Base_SetConfig+0xaa>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a30      	ldr	r2, [pc, #192]	@ (8006bd0 <TIM_Base_SetConfig+0x130>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01b      	beq.n	8006b4a <TIM_Base_SetConfig+0xaa>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a2f      	ldr	r2, [pc, #188]	@ (8006bd4 <TIM_Base_SetConfig+0x134>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d017      	beq.n	8006b4a <TIM_Base_SetConfig+0xaa>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a2e      	ldr	r2, [pc, #184]	@ (8006bd8 <TIM_Base_SetConfig+0x138>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <TIM_Base_SetConfig+0xaa>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a2d      	ldr	r2, [pc, #180]	@ (8006bdc <TIM_Base_SetConfig+0x13c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00f      	beq.n	8006b4a <TIM_Base_SetConfig+0xaa>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a2d      	ldr	r2, [pc, #180]	@ (8006be4 <TIM_Base_SetConfig+0x144>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d00b      	beq.n	8006b4a <TIM_Base_SetConfig+0xaa>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a2c      	ldr	r2, [pc, #176]	@ (8006be8 <TIM_Base_SetConfig+0x148>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d007      	beq.n	8006b4a <TIM_Base_SetConfig+0xaa>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8006bec <TIM_Base_SetConfig+0x14c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d003      	beq.n	8006b4a <TIM_Base_SetConfig+0xaa>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a26      	ldr	r2, [pc, #152]	@ (8006be0 <TIM_Base_SetConfig+0x140>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d108      	bne.n	8006b5c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a12      	ldr	r2, [pc, #72]	@ (8006bcc <TIM_Base_SetConfig+0x12c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d013      	beq.n	8006bb0 <TIM_Base_SetConfig+0x110>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a14      	ldr	r2, [pc, #80]	@ (8006bdc <TIM_Base_SetConfig+0x13c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d00f      	beq.n	8006bb0 <TIM_Base_SetConfig+0x110>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a14      	ldr	r2, [pc, #80]	@ (8006be4 <TIM_Base_SetConfig+0x144>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00b      	beq.n	8006bb0 <TIM_Base_SetConfig+0x110>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a13      	ldr	r2, [pc, #76]	@ (8006be8 <TIM_Base_SetConfig+0x148>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d007      	beq.n	8006bb0 <TIM_Base_SetConfig+0x110>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a12      	ldr	r2, [pc, #72]	@ (8006bec <TIM_Base_SetConfig+0x14c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d003      	beq.n	8006bb0 <TIM_Base_SetConfig+0x110>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a0d      	ldr	r2, [pc, #52]	@ (8006be0 <TIM_Base_SetConfig+0x140>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d103      	bne.n	8006bb8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	615a      	str	r2, [r3, #20]
}
 8006bbe:	bf00      	nop
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40012c00 	.word	0x40012c00
 8006bd0:	40000400 	.word	0x40000400
 8006bd4:	40000800 	.word	0x40000800
 8006bd8:	40000c00 	.word	0x40000c00
 8006bdc:	40013400 	.word	0x40013400
 8006be0:	40015000 	.word	0x40015000
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40014400 	.word	0x40014400
 8006bec:	40014800 	.word	0x40014800

08006bf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	f023 0201 	bic.w	r2, r3, #1
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0303 	bic.w	r3, r3, #3
 8006c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f023 0302 	bic.w	r3, r3, #2
 8006c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a30      	ldr	r2, [pc, #192]	@ (8006d0c <TIM_OC1_SetConfig+0x11c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d013      	beq.n	8006c78 <TIM_OC1_SetConfig+0x88>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a2f      	ldr	r2, [pc, #188]	@ (8006d10 <TIM_OC1_SetConfig+0x120>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00f      	beq.n	8006c78 <TIM_OC1_SetConfig+0x88>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a2e      	ldr	r2, [pc, #184]	@ (8006d14 <TIM_OC1_SetConfig+0x124>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d00b      	beq.n	8006c78 <TIM_OC1_SetConfig+0x88>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a2d      	ldr	r2, [pc, #180]	@ (8006d18 <TIM_OC1_SetConfig+0x128>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d007      	beq.n	8006c78 <TIM_OC1_SetConfig+0x88>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8006d1c <TIM_OC1_SetConfig+0x12c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d003      	beq.n	8006c78 <TIM_OC1_SetConfig+0x88>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a2b      	ldr	r2, [pc, #172]	@ (8006d20 <TIM_OC1_SetConfig+0x130>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d10c      	bne.n	8006c92 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f023 0308 	bic.w	r3, r3, #8
 8006c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f023 0304 	bic.w	r3, r3, #4
 8006c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a1d      	ldr	r2, [pc, #116]	@ (8006d0c <TIM_OC1_SetConfig+0x11c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d013      	beq.n	8006cc2 <TIM_OC1_SetConfig+0xd2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8006d10 <TIM_OC1_SetConfig+0x120>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00f      	beq.n	8006cc2 <TIM_OC1_SetConfig+0xd2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d14 <TIM_OC1_SetConfig+0x124>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00b      	beq.n	8006cc2 <TIM_OC1_SetConfig+0xd2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a1a      	ldr	r2, [pc, #104]	@ (8006d18 <TIM_OC1_SetConfig+0x128>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d007      	beq.n	8006cc2 <TIM_OC1_SetConfig+0xd2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a19      	ldr	r2, [pc, #100]	@ (8006d1c <TIM_OC1_SetConfig+0x12c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d003      	beq.n	8006cc2 <TIM_OC1_SetConfig+0xd2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a18      	ldr	r2, [pc, #96]	@ (8006d20 <TIM_OC1_SetConfig+0x130>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d111      	bne.n	8006ce6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	621a      	str	r2, [r3, #32]
}
 8006d00:	bf00      	nop
 8006d02:	371c      	adds	r7, #28
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	40012c00 	.word	0x40012c00
 8006d10:	40013400 	.word	0x40013400
 8006d14:	40014000 	.word	0x40014000
 8006d18:	40014400 	.word	0x40014400
 8006d1c:	40014800 	.word	0x40014800
 8006d20:	40015000 	.word	0x40015000

08006d24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	f023 0210 	bic.w	r2, r3, #16
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	021b      	lsls	r3, r3, #8
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f023 0320 	bic.w	r3, r3, #32
 8006d72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a2c      	ldr	r2, [pc, #176]	@ (8006e34 <TIM_OC2_SetConfig+0x110>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d007      	beq.n	8006d98 <TIM_OC2_SetConfig+0x74>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a2b      	ldr	r2, [pc, #172]	@ (8006e38 <TIM_OC2_SetConfig+0x114>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d003      	beq.n	8006d98 <TIM_OC2_SetConfig+0x74>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a2a      	ldr	r2, [pc, #168]	@ (8006e3c <TIM_OC2_SetConfig+0x118>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d10d      	bne.n	8006db4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006db2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a1f      	ldr	r2, [pc, #124]	@ (8006e34 <TIM_OC2_SetConfig+0x110>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d013      	beq.n	8006de4 <TIM_OC2_SetConfig+0xc0>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8006e38 <TIM_OC2_SetConfig+0x114>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00f      	beq.n	8006de4 <TIM_OC2_SetConfig+0xc0>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8006e40 <TIM_OC2_SetConfig+0x11c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00b      	beq.n	8006de4 <TIM_OC2_SetConfig+0xc0>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a1d      	ldr	r2, [pc, #116]	@ (8006e44 <TIM_OC2_SetConfig+0x120>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d007      	beq.n	8006de4 <TIM_OC2_SetConfig+0xc0>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8006e48 <TIM_OC2_SetConfig+0x124>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d003      	beq.n	8006de4 <TIM_OC2_SetConfig+0xc0>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a17      	ldr	r2, [pc, #92]	@ (8006e3c <TIM_OC2_SetConfig+0x118>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d113      	bne.n	8006e0c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006dea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006df2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	621a      	str	r2, [r3, #32]
}
 8006e26:	bf00      	nop
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40012c00 	.word	0x40012c00
 8006e38:	40013400 	.word	0x40013400
 8006e3c:	40015000 	.word	0x40015000
 8006e40:	40014000 	.word	0x40014000
 8006e44:	40014400 	.word	0x40014400
 8006e48:	40014800 	.word	0x40014800

08006e4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0303 	bic.w	r3, r3, #3
 8006e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	021b      	lsls	r3, r3, #8
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8006f58 <TIM_OC3_SetConfig+0x10c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d007      	beq.n	8006ebe <TIM_OC3_SetConfig+0x72>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8006f5c <TIM_OC3_SetConfig+0x110>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d003      	beq.n	8006ebe <TIM_OC3_SetConfig+0x72>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a29      	ldr	r2, [pc, #164]	@ (8006f60 <TIM_OC3_SetConfig+0x114>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d10d      	bne.n	8006eda <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	021b      	lsls	r3, r3, #8
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a1e      	ldr	r2, [pc, #120]	@ (8006f58 <TIM_OC3_SetConfig+0x10c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d013      	beq.n	8006f0a <TIM_OC3_SetConfig+0xbe>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8006f5c <TIM_OC3_SetConfig+0x110>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00f      	beq.n	8006f0a <TIM_OC3_SetConfig+0xbe>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a1d      	ldr	r2, [pc, #116]	@ (8006f64 <TIM_OC3_SetConfig+0x118>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00b      	beq.n	8006f0a <TIM_OC3_SetConfig+0xbe>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8006f68 <TIM_OC3_SetConfig+0x11c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d007      	beq.n	8006f0a <TIM_OC3_SetConfig+0xbe>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a1b      	ldr	r2, [pc, #108]	@ (8006f6c <TIM_OC3_SetConfig+0x120>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d003      	beq.n	8006f0a <TIM_OC3_SetConfig+0xbe>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a16      	ldr	r2, [pc, #88]	@ (8006f60 <TIM_OC3_SetConfig+0x114>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d113      	bne.n	8006f32 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	621a      	str	r2, [r3, #32]
}
 8006f4c:	bf00      	nop
 8006f4e:	371c      	adds	r7, #28
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	40012c00 	.word	0x40012c00
 8006f5c:	40013400 	.word	0x40013400
 8006f60:	40015000 	.word	0x40015000
 8006f64:	40014000 	.word	0x40014000
 8006f68:	40014400 	.word	0x40014400
 8006f6c:	40014800 	.word	0x40014800

08006f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	031b      	lsls	r3, r3, #12
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a2c      	ldr	r2, [pc, #176]	@ (8007080 <TIM_OC4_SetConfig+0x110>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d007      	beq.n	8006fe4 <TIM_OC4_SetConfig+0x74>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8007084 <TIM_OC4_SetConfig+0x114>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d003      	beq.n	8006fe4 <TIM_OC4_SetConfig+0x74>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a2a      	ldr	r2, [pc, #168]	@ (8007088 <TIM_OC4_SetConfig+0x118>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d10d      	bne.n	8007000 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	031b      	lsls	r3, r3, #12
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ffe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a1f      	ldr	r2, [pc, #124]	@ (8007080 <TIM_OC4_SetConfig+0x110>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d013      	beq.n	8007030 <TIM_OC4_SetConfig+0xc0>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a1e      	ldr	r2, [pc, #120]	@ (8007084 <TIM_OC4_SetConfig+0x114>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d00f      	beq.n	8007030 <TIM_OC4_SetConfig+0xc0>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a1e      	ldr	r2, [pc, #120]	@ (800708c <TIM_OC4_SetConfig+0x11c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d00b      	beq.n	8007030 <TIM_OC4_SetConfig+0xc0>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a1d      	ldr	r2, [pc, #116]	@ (8007090 <TIM_OC4_SetConfig+0x120>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d007      	beq.n	8007030 <TIM_OC4_SetConfig+0xc0>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a1c      	ldr	r2, [pc, #112]	@ (8007094 <TIM_OC4_SetConfig+0x124>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <TIM_OC4_SetConfig+0xc0>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a17      	ldr	r2, [pc, #92]	@ (8007088 <TIM_OC4_SetConfig+0x118>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d113      	bne.n	8007058 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007036:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800703e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	019b      	lsls	r3, r3, #6
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	019b      	lsls	r3, r3, #6
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	621a      	str	r2, [r3, #32]
}
 8007072:	bf00      	nop
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40012c00 	.word	0x40012c00
 8007084:	40013400 	.word	0x40013400
 8007088:	40015000 	.word	0x40015000
 800708c:	40014000 	.word	0x40014000
 8007090:	40014400 	.word	0x40014400
 8007094:	40014800 	.word	0x40014800

08007098 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80070dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	041b      	lsls	r3, r3, #16
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a19      	ldr	r2, [pc, #100]	@ (8007154 <TIM_OC5_SetConfig+0xbc>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d013      	beq.n	800711a <TIM_OC5_SetConfig+0x82>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a18      	ldr	r2, [pc, #96]	@ (8007158 <TIM_OC5_SetConfig+0xc0>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00f      	beq.n	800711a <TIM_OC5_SetConfig+0x82>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a17      	ldr	r2, [pc, #92]	@ (800715c <TIM_OC5_SetConfig+0xc4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d00b      	beq.n	800711a <TIM_OC5_SetConfig+0x82>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a16      	ldr	r2, [pc, #88]	@ (8007160 <TIM_OC5_SetConfig+0xc8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d007      	beq.n	800711a <TIM_OC5_SetConfig+0x82>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a15      	ldr	r2, [pc, #84]	@ (8007164 <TIM_OC5_SetConfig+0xcc>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d003      	beq.n	800711a <TIM_OC5_SetConfig+0x82>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a14      	ldr	r2, [pc, #80]	@ (8007168 <TIM_OC5_SetConfig+0xd0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d109      	bne.n	800712e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007120:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	021b      	lsls	r3, r3, #8
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	621a      	str	r2, [r3, #32]
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	40012c00 	.word	0x40012c00
 8007158:	40013400 	.word	0x40013400
 800715c:	40014000 	.word	0x40014000
 8007160:	40014400 	.word	0x40014400
 8007164:	40014800 	.word	0x40014800
 8007168:	40015000 	.word	0x40015000

0800716c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800719a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800719e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	051b      	lsls	r3, r3, #20
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	4313      	orrs	r3, r2
 80071be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a1a      	ldr	r2, [pc, #104]	@ (800722c <TIM_OC6_SetConfig+0xc0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d013      	beq.n	80071f0 <TIM_OC6_SetConfig+0x84>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a19      	ldr	r2, [pc, #100]	@ (8007230 <TIM_OC6_SetConfig+0xc4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00f      	beq.n	80071f0 <TIM_OC6_SetConfig+0x84>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a18      	ldr	r2, [pc, #96]	@ (8007234 <TIM_OC6_SetConfig+0xc8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00b      	beq.n	80071f0 <TIM_OC6_SetConfig+0x84>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a17      	ldr	r2, [pc, #92]	@ (8007238 <TIM_OC6_SetConfig+0xcc>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d007      	beq.n	80071f0 <TIM_OC6_SetConfig+0x84>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a16      	ldr	r2, [pc, #88]	@ (800723c <TIM_OC6_SetConfig+0xd0>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d003      	beq.n	80071f0 <TIM_OC6_SetConfig+0x84>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a15      	ldr	r2, [pc, #84]	@ (8007240 <TIM_OC6_SetConfig+0xd4>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d109      	bne.n	8007204 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	029b      	lsls	r3, r3, #10
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	621a      	str	r2, [r3, #32]
}
 800721e:	bf00      	nop
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	40012c00 	.word	0x40012c00
 8007230:	40013400 	.word	0x40013400
 8007234:	40014000 	.word	0x40014000
 8007238:	40014400 	.word	0x40014400
 800723c:	40014800 	.word	0x40014800
 8007240:	40015000 	.word	0x40015000

08007244 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	f023 0201 	bic.w	r2, r3, #1
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4a28      	ldr	r2, [pc, #160]	@ (8007310 <TIM_TI1_SetConfig+0xcc>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d01b      	beq.n	80072aa <TIM_TI1_SetConfig+0x66>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007278:	d017      	beq.n	80072aa <TIM_TI1_SetConfig+0x66>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4a25      	ldr	r2, [pc, #148]	@ (8007314 <TIM_TI1_SetConfig+0xd0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <TIM_TI1_SetConfig+0x66>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4a24      	ldr	r2, [pc, #144]	@ (8007318 <TIM_TI1_SetConfig+0xd4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d00f      	beq.n	80072aa <TIM_TI1_SetConfig+0x66>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4a23      	ldr	r2, [pc, #140]	@ (800731c <TIM_TI1_SetConfig+0xd8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00b      	beq.n	80072aa <TIM_TI1_SetConfig+0x66>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4a22      	ldr	r2, [pc, #136]	@ (8007320 <TIM_TI1_SetConfig+0xdc>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d007      	beq.n	80072aa <TIM_TI1_SetConfig+0x66>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4a21      	ldr	r2, [pc, #132]	@ (8007324 <TIM_TI1_SetConfig+0xe0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d003      	beq.n	80072aa <TIM_TI1_SetConfig+0x66>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4a20      	ldr	r2, [pc, #128]	@ (8007328 <TIM_TI1_SetConfig+0xe4>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d101      	bne.n	80072ae <TIM_TI1_SetConfig+0x6a>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e000      	b.n	80072b0 <TIM_TI1_SetConfig+0x6c>
 80072ae:	2300      	movs	r3, #0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d008      	beq.n	80072c6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f023 0303 	bic.w	r3, r3, #3
 80072ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	e003      	b.n	80072ce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f043 0301 	orr.w	r3, r3, #1
 80072cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f023 030a 	bic.w	r3, r3, #10
 80072e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f003 030a 	and.w	r3, r3, #10
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	621a      	str	r2, [r3, #32]
}
 8007302:	bf00      	nop
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	40012c00 	.word	0x40012c00
 8007314:	40000400 	.word	0x40000400
 8007318:	40000800 	.word	0x40000800
 800731c:	40000c00 	.word	0x40000c00
 8007320:	40013400 	.word	0x40013400
 8007324:	40014000 	.word	0x40014000
 8007328:	40015000 	.word	0x40015000

0800732c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	f023 0201 	bic.w	r2, r3, #1
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	011b      	lsls	r3, r3, #4
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f023 030a 	bic.w	r3, r3, #10
 8007368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	621a      	str	r2, [r3, #32]
}
 800737e:	bf00      	nop
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800738a:	b480      	push	{r7}
 800738c:	b087      	sub	sp, #28
 800738e:	af00      	add	r7, sp, #0
 8007390:	60f8      	str	r0, [r7, #12]
 8007392:	60b9      	str	r1, [r7, #8]
 8007394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	f023 0210 	bic.w	r2, r3, #16
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	031b      	lsls	r3, r3, #12
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	4313      	orrs	r3, r2
 80073be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80073c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	621a      	str	r2, [r3, #32]
}
 80073de:	bf00      	nop
 80073e0:	371c      	adds	r7, #28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b085      	sub	sp, #20
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4313      	orrs	r3, r2
 800740c:	f043 0307 	orr.w	r3, r3, #7
 8007410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	609a      	str	r2, [r3, #8]
}
 8007418:	bf00      	nop
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007424:	b480      	push	{r7}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800743e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	021a      	lsls	r2, r3, #8
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	431a      	orrs	r2, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4313      	orrs	r3, r2
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	4313      	orrs	r3, r2
 8007450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	609a      	str	r2, [r3, #8]
}
 8007458:	bf00      	nop
 800745a:	371c      	adds	r7, #28
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f003 031f 	and.w	r3, r3, #31
 8007476:	2201      	movs	r2, #1
 8007478:	fa02 f303 	lsl.w	r3, r2, r3
 800747c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6a1a      	ldr	r2, [r3, #32]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	43db      	mvns	r3, r3
 8007486:	401a      	ands	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a1a      	ldr	r2, [r3, #32]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f003 031f 	and.w	r3, r3, #31
 8007496:	6879      	ldr	r1, [r7, #4]
 8007498:	fa01 f303 	lsl.w	r3, r1, r3
 800749c:	431a      	orrs	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	621a      	str	r2, [r3, #32]
}
 80074a2:	bf00      	nop
 80074a4:	371c      	adds	r7, #28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b08a      	sub	sp, #40	@ 0x28
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e0a0      	b.n	8007604 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fa fe9e 	bl	8002218 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f7ff fad6 	bl	8006aa0 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6818      	ldr	r0, [r3, #0]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	6819      	ldr	r1, [r3, #0]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	2203      	movs	r2, #3
 8007502:	f7ff fe9f 	bl	8007244 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	699a      	ldr	r2, [r3, #24]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 020c 	bic.w	r2, r2, #12
 8007514:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6999      	ldr	r1, [r3, #24]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007536:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	6812      	ldr	r2, [r2, #0]
 8007542:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800754a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800755a:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6812      	ldr	r2, [r2, #0]
 8007566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800756a:	f023 0307 	bic.w	r3, r3, #7
 800756e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689a      	ldr	r2, [r3, #8]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f042 0204 	orr.w	r2, r2, #4
 800757e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8007580:	2300      	movs	r3, #0
 8007582:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007584:	2300      	movs	r3, #0
 8007586:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8007588:	2370      	movs	r3, #112	@ 0x70
 800758a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800758c:	2300      	movs	r3, #0
 800758e:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007590:	2300      	movs	r3, #0
 8007592:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007594:	2300      	movs	r3, #0
 8007596:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f107 020c 	add.w	r2, r7, #12
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff fbbb 	bl	8006d24 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	6812      	ldr	r2, [r2, #0]
 80075b8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80075bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075c0:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80075d0:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3728      	adds	r7, #40	@ 0x28
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d109      	bne.n	8007630 <HAL_TIMEx_PWMN_Start+0x24>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b01      	cmp	r3, #1
 8007626:	bf14      	ite	ne
 8007628:	2301      	movne	r3, #1
 800762a:	2300      	moveq	r3, #0
 800762c:	b2db      	uxtb	r3, r3
 800762e:	e022      	b.n	8007676 <HAL_TIMEx_PWMN_Start+0x6a>
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2b04      	cmp	r3, #4
 8007634:	d109      	bne.n	800764a <HAL_TIMEx_PWMN_Start+0x3e>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b01      	cmp	r3, #1
 8007640:	bf14      	ite	ne
 8007642:	2301      	movne	r3, #1
 8007644:	2300      	moveq	r3, #0
 8007646:	b2db      	uxtb	r3, r3
 8007648:	e015      	b.n	8007676 <HAL_TIMEx_PWMN_Start+0x6a>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b08      	cmp	r3, #8
 800764e:	d109      	bne.n	8007664 <HAL_TIMEx_PWMN_Start+0x58>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b01      	cmp	r3, #1
 800765a:	bf14      	ite	ne
 800765c:	2301      	movne	r3, #1
 800765e:	2300      	moveq	r3, #0
 8007660:	b2db      	uxtb	r3, r3
 8007662:	e008      	b.n	8007676 <HAL_TIMEx_PWMN_Start+0x6a>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b01      	cmp	r3, #1
 800766e:	bf14      	ite	ne
 8007670:	2301      	movne	r3, #1
 8007672:	2300      	moveq	r3, #0
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d001      	beq.n	800767e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e073      	b.n	8007766 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d104      	bne.n	800768e <HAL_TIMEx_PWMN_Start+0x82>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2202      	movs	r2, #2
 8007688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800768c:	e013      	b.n	80076b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b04      	cmp	r3, #4
 8007692:	d104      	bne.n	800769e <HAL_TIMEx_PWMN_Start+0x92>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2202      	movs	r2, #2
 8007698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800769c:	e00b      	b.n	80076b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d104      	bne.n	80076ae <HAL_TIMEx_PWMN_Start+0xa2>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076ac:	e003      	b.n	80076b6 <HAL_TIMEx_PWMN_Start+0xaa>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2202      	movs	r2, #2
 80076b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2204      	movs	r2, #4
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	4618      	mov	r0, r3
 80076c0:	f000 fa65 	bl	8007b8e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a25      	ldr	r2, [pc, #148]	@ (8007770 <HAL_TIMEx_PWMN_Start+0x164>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d022      	beq.n	8007724 <HAL_TIMEx_PWMN_Start+0x118>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076e6:	d01d      	beq.n	8007724 <HAL_TIMEx_PWMN_Start+0x118>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a21      	ldr	r2, [pc, #132]	@ (8007774 <HAL_TIMEx_PWMN_Start+0x168>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d018      	beq.n	8007724 <HAL_TIMEx_PWMN_Start+0x118>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a20      	ldr	r2, [pc, #128]	@ (8007778 <HAL_TIMEx_PWMN_Start+0x16c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d013      	beq.n	8007724 <HAL_TIMEx_PWMN_Start+0x118>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a1e      	ldr	r2, [pc, #120]	@ (800777c <HAL_TIMEx_PWMN_Start+0x170>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00e      	beq.n	8007724 <HAL_TIMEx_PWMN_Start+0x118>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a1d      	ldr	r2, [pc, #116]	@ (8007780 <HAL_TIMEx_PWMN_Start+0x174>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d009      	beq.n	8007724 <HAL_TIMEx_PWMN_Start+0x118>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1b      	ldr	r2, [pc, #108]	@ (8007784 <HAL_TIMEx_PWMN_Start+0x178>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d004      	beq.n	8007724 <HAL_TIMEx_PWMN_Start+0x118>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1a      	ldr	r2, [pc, #104]	@ (8007788 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d115      	bne.n	8007750 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	4b18      	ldr	r3, [pc, #96]	@ (800778c <HAL_TIMEx_PWMN_Start+0x180>)
 800772c:	4013      	ands	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b06      	cmp	r3, #6
 8007734:	d015      	beq.n	8007762 <HAL_TIMEx_PWMN_Start+0x156>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800773c:	d011      	beq.n	8007762 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f042 0201 	orr.w	r2, r2, #1
 800774c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800774e:	e008      	b.n	8007762 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0201 	orr.w	r2, r2, #1
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	e000      	b.n	8007764 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007762:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	40012c00 	.word	0x40012c00
 8007774:	40000400 	.word	0x40000400
 8007778:	40000800 	.word	0x40000800
 800777c:	40000c00 	.word	0x40000c00
 8007780:	40013400 	.word	0x40013400
 8007784:	40014000 	.word	0x40014000
 8007788:	40015000 	.word	0x40015000
 800778c:	00010007 	.word	0x00010007

08007790 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2200      	movs	r2, #0
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 f9f3 	bl	8007b8e <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6a1a      	ldr	r2, [r3, #32]
 80077ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80077b2:	4013      	ands	r3, r2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10f      	bne.n	80077d8 <HAL_TIMEx_PWMN_Stop+0x48>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6a1a      	ldr	r2, [r3, #32]
 80077be:	f244 4344 	movw	r3, #17476	@ 0x4444
 80077c2:	4013      	ands	r3, r2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d107      	bne.n	80077d8 <HAL_TIMEx_PWMN_Stop+0x48>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6a1a      	ldr	r2, [r3, #32]
 80077de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80077e2:	4013      	ands	r3, r2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10f      	bne.n	8007808 <HAL_TIMEx_PWMN_Stop+0x78>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6a1a      	ldr	r2, [r3, #32]
 80077ee:	f244 4344 	movw	r3, #17476	@ 0x4444
 80077f2:	4013      	ands	r3, r2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d107      	bne.n	8007808 <HAL_TIMEx_PWMN_Stop+0x78>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f022 0201 	bic.w	r2, r2, #1
 8007806:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d104      	bne.n	8007818 <HAL_TIMEx_PWMN_Stop+0x88>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007816:	e013      	b.n	8007840 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2b04      	cmp	r3, #4
 800781c:	d104      	bne.n	8007828 <HAL_TIMEx_PWMN_Stop+0x98>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007826:	e00b      	b.n	8007840 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2b08      	cmp	r3, #8
 800782c:	d104      	bne.n	8007838 <HAL_TIMEx_PWMN_Stop+0xa8>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007836:	e003      	b.n	8007840 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800785c:	2b01      	cmp	r3, #1
 800785e:	d101      	bne.n	8007864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007860:	2302      	movs	r3, #2
 8007862:	e074      	b.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a34      	ldr	r2, [pc, #208]	@ (800795c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d009      	beq.n	80078a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a33      	ldr	r2, [pc, #204]	@ (8007960 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d004      	beq.n	80078a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a31      	ldr	r2, [pc, #196]	@ (8007964 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d108      	bne.n	80078b4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80078a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80078ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a21      	ldr	r2, [pc, #132]	@ (800795c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d022      	beq.n	8007922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e4:	d01d      	beq.n	8007922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007968 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d018      	beq.n	8007922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a1d      	ldr	r2, [pc, #116]	@ (800796c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d013      	beq.n	8007922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a1c      	ldr	r2, [pc, #112]	@ (8007970 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00e      	beq.n	8007922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a15      	ldr	r2, [pc, #84]	@ (8007960 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d009      	beq.n	8007922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a18      	ldr	r2, [pc, #96]	@ (8007974 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d004      	beq.n	8007922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a11      	ldr	r2, [pc, #68]	@ (8007964 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d10c      	bne.n	800793c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007928:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	4313      	orrs	r3, r2
 8007932:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	40012c00 	.word	0x40012c00
 8007960:	40013400 	.word	0x40013400
 8007964:	40015000 	.word	0x40015000
 8007968:	40000400 	.word	0x40000400
 800796c:	40000800 	.word	0x40000800
 8007970:	40000c00 	.word	0x40000c00
 8007974:	40014000 	.word	0x40014000

08007978 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007990:	2302      	movs	r3, #2
 8007992:	e096      	b.n	8007ac2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	041b      	lsls	r3, r3, #16
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a2f      	ldr	r2, [pc, #188]	@ (8007ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d009      	beq.n	8007a2c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8007ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d004      	beq.n	8007a2c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a2c      	ldr	r2, [pc, #176]	@ (8007ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d106      	bne.n	8007a3a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a24      	ldr	r2, [pc, #144]	@ (8007ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d009      	beq.n	8007a58 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a22      	ldr	r2, [pc, #136]	@ (8007ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d004      	beq.n	8007a58 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a21      	ldr	r2, [pc, #132]	@ (8007ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d12b      	bne.n	8007ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a62:	051b      	lsls	r3, r3, #20
 8007a64:	4313      	orrs	r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a11      	ldr	r2, [pc, #68]	@ (8007ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d009      	beq.n	8007aa2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a10      	ldr	r2, [pc, #64]	@ (8007ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d004      	beq.n	8007aa2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a0e      	ldr	r2, [pc, #56]	@ (8007ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d106      	bne.n	8007ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	40012c00 	.word	0x40012c00
 8007ad4:	40013400 	.word	0x40013400
 8007ad8:	40015000 	.word	0x40015000

08007adc <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007af2:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b0a:	bf00      	nop
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007b5a:	bf00      	nop
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b087      	sub	sp, #28
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	f003 031f 	and.w	r3, r3, #31
 8007ba0:	2204      	movs	r2, #4
 8007ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6a1a      	ldr	r2, [r3, #32]
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	43db      	mvns	r3, r3
 8007bb0:	401a      	ands	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6a1a      	ldr	r2, [r3, #32]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f003 031f 	and.w	r3, r3, #31
 8007bc0:	6879      	ldr	r1, [r7, #4]
 8007bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	621a      	str	r2, [r3, #32]
}
 8007bcc:	bf00      	nop
 8007bce:	371c      	adds	r7, #28
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e042      	b.n	8007c70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d106      	bne.n	8007c02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7fa fbd5 	bl	80023ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2224      	movs	r2, #36	@ 0x24
 8007c06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0201 	bic.w	r2, r2, #1
 8007c18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fc50 	bl	80084c0 <UART_SetConfig>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d101      	bne.n	8007c2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e022      	b.n	8007c70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 ff40 	bl	8008ab8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0201 	orr.w	r2, r2, #1
 8007c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 ffc7 	bl	8008bfc <UART_CheckIdleState>
 8007c6e:	4603      	mov	r3, r0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	@ 0x28
 8007c7c:	af02      	add	r7, sp, #8
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	4613      	mov	r3, r2
 8007c86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c8e:	2b20      	cmp	r3, #32
 8007c90:	f040 8083 	bne.w	8007d9a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <HAL_UART_Transmit+0x28>
 8007c9a:	88fb      	ldrh	r3, [r7, #6]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e07b      	b.n	8007d9c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d101      	bne.n	8007cb2 <HAL_UART_Transmit+0x3a>
 8007cae:	2302      	movs	r3, #2
 8007cb0:	e074      	b.n	8007d9c <HAL_UART_Transmit+0x124>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2221      	movs	r2, #33	@ 0x21
 8007cc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cca:	f7fa fe27 	bl	800291c <HAL_GetTick>
 8007cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	88fa      	ldrh	r2, [r7, #6]
 8007cd4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	88fa      	ldrh	r2, [r7, #6]
 8007cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ce8:	d108      	bne.n	8007cfc <HAL_UART_Transmit+0x84>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d104      	bne.n	8007cfc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	e003      	b.n	8007d04 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d00:	2300      	movs	r3, #0
 8007d02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8007d0c:	e02c      	b.n	8007d68 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2200      	movs	r2, #0
 8007d16:	2180      	movs	r1, #128	@ 0x80
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 ffba 	bl	8008c92 <UART_WaitOnFlagUntilTimeout>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e039      	b.n	8007d9c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10b      	bne.n	8007d46 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	3302      	adds	r3, #2
 8007d42:	61bb      	str	r3, [r7, #24]
 8007d44:	e007      	b.n	8007d56 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	781a      	ldrb	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	3301      	adds	r3, #1
 8007d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1cc      	bne.n	8007d0e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2140      	movs	r1, #64	@ 0x40
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 ff87 	bl	8008c92 <UART_WaitOnFlagUntilTimeout>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e006      	b.n	8007d9c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	e000      	b.n	8007d9c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007d9a:	2302      	movs	r3, #2
  }
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3720      	adds	r7, #32
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	@ 0x28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	4613      	mov	r3, r2
 8007db0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007db8:	2b20      	cmp	r3, #32
 8007dba:	d142      	bne.n	8007e42 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d002      	beq.n	8007dc8 <HAL_UART_Receive_IT+0x24>
 8007dc2:	88fb      	ldrh	r3, [r7, #6]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e03b      	b.n	8007e44 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d101      	bne.n	8007dda <HAL_UART_Receive_IT+0x36>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	e034      	b.n	8007e44 <HAL_UART_Receive_IT+0xa0>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a17      	ldr	r2, [pc, #92]	@ (8007e4c <HAL_UART_Receive_IT+0xa8>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d01f      	beq.n	8007e32 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d018      	beq.n	8007e32 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1e:	623b      	str	r3, [r7, #32]
 8007e20:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	69f9      	ldr	r1, [r7, #28]
 8007e24:	6a3a      	ldr	r2, [r7, #32]
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e6      	bne.n	8007e00 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e32:	88fb      	ldrh	r3, [r7, #6]
 8007e34:	461a      	mov	r2, r3
 8007e36:	68b9      	ldr	r1, [r7, #8]
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f000 fff3 	bl	8008e24 <UART_Start_Receive_IT>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	e000      	b.n	8007e44 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007e42:	2302      	movs	r3, #2
  }
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3728      	adds	r7, #40	@ 0x28
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	40008000 	.word	0x40008000

08007e50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b0ba      	sub	sp, #232	@ 0xe8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007e7a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007e7e:	4013      	ands	r3, r2
 8007e80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007e84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d11b      	bne.n	8007ec4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e90:	f003 0320 	and.w	r3, r3, #32
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d015      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e9c:	f003 0320 	and.w	r3, r3, #32
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d105      	bne.n	8007eb0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d009      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 82d6 	beq.w	8008466 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	4798      	blx	r3
      }
      return;
 8007ec2:	e2d0      	b.n	8008466 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 811f 	beq.w	800810c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007ece:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007ed2:	4b8b      	ldr	r3, [pc, #556]	@ (8008100 <HAL_UART_IRQHandler+0x2b0>)
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d106      	bne.n	8007ee8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007eda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007ede:	4b89      	ldr	r3, [pc, #548]	@ (8008104 <HAL_UART_IRQHandler+0x2b4>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 8112 	beq.w	800810c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d011      	beq.n	8007f18 <HAL_UART_IRQHandler+0xc8>
 8007ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00b      	beq.n	8007f18 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2201      	movs	r2, #1
 8007f06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f0e:	f043 0201 	orr.w	r2, r3, #1
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d011      	beq.n	8007f48 <HAL_UART_IRQHandler+0xf8>
 8007f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00b      	beq.n	8007f48 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2202      	movs	r2, #2
 8007f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f3e:	f043 0204 	orr.w	r2, r3, #4
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f4c:	f003 0304 	and.w	r3, r3, #4
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d011      	beq.n	8007f78 <HAL_UART_IRQHandler+0x128>
 8007f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00b      	beq.n	8007f78 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2204      	movs	r2, #4
 8007f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f6e:	f043 0202 	orr.w	r2, r3, #2
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f7c:	f003 0308 	and.w	r3, r3, #8
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d017      	beq.n	8007fb4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f88:	f003 0320 	and.w	r3, r3, #32
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d105      	bne.n	8007f9c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007f94:	4b5a      	ldr	r3, [pc, #360]	@ (8008100 <HAL_UART_IRQHandler+0x2b0>)
 8007f96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00b      	beq.n	8007fb4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2208      	movs	r2, #8
 8007fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007faa:	f043 0208 	orr.w	r2, r3, #8
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d012      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x196>
 8007fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00c      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fdc:	f043 0220 	orr.w	r2, r3, #32
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 823c 	beq.w	800846a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ff6:	f003 0320 	and.w	r3, r3, #32
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d013      	beq.n	8008026 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008002:	f003 0320 	and.w	r3, r3, #32
 8008006:	2b00      	cmp	r3, #0
 8008008:	d105      	bne.n	8008016 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800800a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800800e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d007      	beq.n	8008026 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800802c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800803a:	2b40      	cmp	r3, #64	@ 0x40
 800803c:	d005      	beq.n	800804a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800803e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008042:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008046:	2b00      	cmp	r3, #0
 8008048:	d04f      	beq.n	80080ea <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 f814 	bl	8009078 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800805a:	2b40      	cmp	r3, #64	@ 0x40
 800805c:	d141      	bne.n	80080e2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3308      	adds	r3, #8
 8008064:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008068:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800806c:	e853 3f00 	ldrex	r3, [r3]
 8008070:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008074:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800807c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3308      	adds	r3, #8
 8008086:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800808a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800808e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008092:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80080a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1d9      	bne.n	800805e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d013      	beq.n	80080da <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080b6:	4a14      	ldr	r2, [pc, #80]	@ (8008108 <HAL_UART_IRQHandler+0x2b8>)
 80080b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fc fa2d 	bl	800451e <HAL_DMA_Abort_IT>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d017      	beq.n	80080fa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 80080d4:	4610      	mov	r0, r2
 80080d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d8:	e00f      	b.n	80080fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f9da 	bl	8008494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e0:	e00b      	b.n	80080fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f9d6 	bl	8008494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e8:	e007      	b.n	80080fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f9d2 	bl	8008494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 80080f8:	e1b7      	b.n	800846a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080fa:	bf00      	nop
    return;
 80080fc:	e1b5      	b.n	800846a <HAL_UART_IRQHandler+0x61a>
 80080fe:	bf00      	nop
 8008100:	10000001 	.word	0x10000001
 8008104:	04000120 	.word	0x04000120
 8008108:	08009145 	.word	0x08009145

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008110:	2b01      	cmp	r3, #1
 8008112:	f040 814a 	bne.w	80083aa <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800811a:	f003 0310 	and.w	r3, r3, #16
 800811e:	2b00      	cmp	r3, #0
 8008120:	f000 8143 	beq.w	80083aa <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008128:	f003 0310 	and.w	r3, r3, #16
 800812c:	2b00      	cmp	r3, #0
 800812e:	f000 813c 	beq.w	80083aa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2210      	movs	r2, #16
 8008138:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008144:	2b40      	cmp	r3, #64	@ 0x40
 8008146:	f040 80b5 	bne.w	80082b4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008156:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 8187 	beq.w	800846e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800816a:	429a      	cmp	r2, r3
 800816c:	f080 817f 	bcs.w	800846e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008176:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b00      	cmp	r3, #0
 8008188:	f040 8086 	bne.w	8008298 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008194:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80081a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	461a      	mov	r2, r3
 80081b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80081c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80081ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1da      	bne.n	800818c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3308      	adds	r3, #8
 80081dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80081e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081e8:	f023 0301 	bic.w	r3, r3, #1
 80081ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3308      	adds	r3, #8
 80081f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80081fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80081fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008200:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008202:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800820c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e1      	bne.n	80081d6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3308      	adds	r3, #8
 8008218:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008224:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008228:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3308      	adds	r3, #8
 8008232:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008236:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008238:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800823c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800823e:	e841 2300 	strex	r3, r2, [r1]
 8008242:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008244:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e3      	bne.n	8008212 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2220      	movs	r2, #32
 800824e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008266:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008268:	f023 0310 	bic.w	r3, r3, #16
 800826c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	461a      	mov	r2, r3
 8008276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800827a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800827c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008280:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008282:	e841 2300 	strex	r3, r2, [r1]
 8008286:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1e4      	bne.n	8008258 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008292:	4618      	mov	r0, r3
 8008294:	f7fc f8ea 	bl	800446c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f8fb 	bl	80084a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082b2:	e0dc      	b.n	800846e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 80ce 	beq.w	8008472 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80082d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 80c9 	beq.w	8008472 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	461a      	mov	r2, r3
 80082fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008302:	647b      	str	r3, [r7, #68]	@ 0x44
 8008304:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008308:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e4      	bne.n	80082e0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3308      	adds	r3, #8
 800831c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008320:	e853 3f00 	ldrex	r3, [r3]
 8008324:	623b      	str	r3, [r7, #32]
   return(result);
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800832c:	f023 0301 	bic.w	r3, r3, #1
 8008330:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3308      	adds	r3, #8
 800833a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800833e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008340:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008342:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008346:	e841 2300 	strex	r3, r2, [r1]
 800834a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800834c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1e1      	bne.n	8008316 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2220      	movs	r2, #32
 8008356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	e853 3f00 	ldrex	r3, [r3]
 8008372:	60fb      	str	r3, [r7, #12]
   return(result);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f023 0310 	bic.w	r3, r3, #16
 800837a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008388:	61fb      	str	r3, [r7, #28]
 800838a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	69b9      	ldr	r1, [r7, #24]
 800838e:	69fa      	ldr	r2, [r7, #28]
 8008390:	e841 2300 	strex	r3, r2, [r1]
 8008394:	617b      	str	r3, [r7, #20]
   return(result);
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e4      	bne.n	8008366 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800839c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f880 	bl	80084a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083a8:	e063      	b.n	8008472 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80083aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00e      	beq.n	80083d4 <HAL_UART_IRQHandler+0x584>
 80083b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d008      	beq.n	80083d4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80083ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 fb57 	bl	8009a80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083d2:	e051      	b.n	8008478 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80083d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d014      	beq.n	800840a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80083e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d105      	bne.n	80083f8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80083ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d008      	beq.n	800840a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d03a      	beq.n	8008476 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	4798      	blx	r3
    }
    return;
 8008408:	e035      	b.n	8008476 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800840a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800840e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008412:	2b00      	cmp	r3, #0
 8008414:	d009      	beq.n	800842a <HAL_UART_IRQHandler+0x5da>
 8008416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800841a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800841e:	2b00      	cmp	r3, #0
 8008420:	d003      	beq.n	800842a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fea4 	bl	8009170 <UART_EndTransmit_IT>
    return;
 8008428:	e026      	b.n	8008478 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800842a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800842e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d009      	beq.n	800844a <HAL_UART_IRQHandler+0x5fa>
 8008436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800843a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f001 fb30 	bl	8009aa8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008448:	e016      	b.n	8008478 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800844a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800844e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d010      	beq.n	8008478 <HAL_UART_IRQHandler+0x628>
 8008456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800845a:	2b00      	cmp	r3, #0
 800845c:	da0c      	bge.n	8008478 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 fb18 	bl	8009a94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008464:	e008      	b.n	8008478 <HAL_UART_IRQHandler+0x628>
      return;
 8008466:	bf00      	nop
 8008468:	e006      	b.n	8008478 <HAL_UART_IRQHandler+0x628>
    return;
 800846a:	bf00      	nop
 800846c:	e004      	b.n	8008478 <HAL_UART_IRQHandler+0x628>
      return;
 800846e:	bf00      	nop
 8008470:	e002      	b.n	8008478 <HAL_UART_IRQHandler+0x628>
      return;
 8008472:	bf00      	nop
 8008474:	e000      	b.n	8008478 <HAL_UART_IRQHandler+0x628>
    return;
 8008476:	bf00      	nop
  }
}
 8008478:	37e8      	adds	r7, #232	@ 0xe8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop

08008480 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084c4:	b08c      	sub	sp, #48	@ 0x30
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	431a      	orrs	r2, r3
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	431a      	orrs	r2, r3
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	69db      	ldr	r3, [r3, #28]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	4baa      	ldr	r3, [pc, #680]	@ (8008798 <UART_SetConfig+0x2d8>)
 80084f0:	4013      	ands	r3, r2
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	6812      	ldr	r2, [r2, #0]
 80084f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084f8:	430b      	orrs	r3, r1
 80084fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	430a      	orrs	r2, r1
 8008510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a9f      	ldr	r2, [pc, #636]	@ (800879c <UART_SetConfig+0x2dc>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d004      	beq.n	800852c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008528:	4313      	orrs	r3, r2
 800852a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008536:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	6812      	ldr	r2, [r2, #0]
 800853e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008540:	430b      	orrs	r3, r1
 8008542:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854a:	f023 010f 	bic.w	r1, r3, #15
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	430a      	orrs	r2, r1
 8008558:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a90      	ldr	r2, [pc, #576]	@ (80087a0 <UART_SetConfig+0x2e0>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d125      	bne.n	80085b0 <UART_SetConfig+0xf0>
 8008564:	4b8f      	ldr	r3, [pc, #572]	@ (80087a4 <UART_SetConfig+0x2e4>)
 8008566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800856a:	f003 0303 	and.w	r3, r3, #3
 800856e:	2b03      	cmp	r3, #3
 8008570:	d81a      	bhi.n	80085a8 <UART_SetConfig+0xe8>
 8008572:	a201      	add	r2, pc, #4	@ (adr r2, 8008578 <UART_SetConfig+0xb8>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	08008589 	.word	0x08008589
 800857c:	08008599 	.word	0x08008599
 8008580:	08008591 	.word	0x08008591
 8008584:	080085a1 	.word	0x080085a1
 8008588:	2301      	movs	r3, #1
 800858a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800858e:	e116      	b.n	80087be <UART_SetConfig+0x2fe>
 8008590:	2302      	movs	r3, #2
 8008592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008596:	e112      	b.n	80087be <UART_SetConfig+0x2fe>
 8008598:	2304      	movs	r3, #4
 800859a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800859e:	e10e      	b.n	80087be <UART_SetConfig+0x2fe>
 80085a0:	2308      	movs	r3, #8
 80085a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085a6:	e10a      	b.n	80087be <UART_SetConfig+0x2fe>
 80085a8:	2310      	movs	r3, #16
 80085aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085ae:	e106      	b.n	80087be <UART_SetConfig+0x2fe>
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a7c      	ldr	r2, [pc, #496]	@ (80087a8 <UART_SetConfig+0x2e8>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d138      	bne.n	800862c <UART_SetConfig+0x16c>
 80085ba:	4b7a      	ldr	r3, [pc, #488]	@ (80087a4 <UART_SetConfig+0x2e4>)
 80085bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085c0:	f003 030c 	and.w	r3, r3, #12
 80085c4:	2b0c      	cmp	r3, #12
 80085c6:	d82d      	bhi.n	8008624 <UART_SetConfig+0x164>
 80085c8:	a201      	add	r2, pc, #4	@ (adr r2, 80085d0 <UART_SetConfig+0x110>)
 80085ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ce:	bf00      	nop
 80085d0:	08008605 	.word	0x08008605
 80085d4:	08008625 	.word	0x08008625
 80085d8:	08008625 	.word	0x08008625
 80085dc:	08008625 	.word	0x08008625
 80085e0:	08008615 	.word	0x08008615
 80085e4:	08008625 	.word	0x08008625
 80085e8:	08008625 	.word	0x08008625
 80085ec:	08008625 	.word	0x08008625
 80085f0:	0800860d 	.word	0x0800860d
 80085f4:	08008625 	.word	0x08008625
 80085f8:	08008625 	.word	0x08008625
 80085fc:	08008625 	.word	0x08008625
 8008600:	0800861d 	.word	0x0800861d
 8008604:	2300      	movs	r3, #0
 8008606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800860a:	e0d8      	b.n	80087be <UART_SetConfig+0x2fe>
 800860c:	2302      	movs	r3, #2
 800860e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008612:	e0d4      	b.n	80087be <UART_SetConfig+0x2fe>
 8008614:	2304      	movs	r3, #4
 8008616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800861a:	e0d0      	b.n	80087be <UART_SetConfig+0x2fe>
 800861c:	2308      	movs	r3, #8
 800861e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008622:	e0cc      	b.n	80087be <UART_SetConfig+0x2fe>
 8008624:	2310      	movs	r3, #16
 8008626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800862a:	e0c8      	b.n	80087be <UART_SetConfig+0x2fe>
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a5e      	ldr	r2, [pc, #376]	@ (80087ac <UART_SetConfig+0x2ec>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d125      	bne.n	8008682 <UART_SetConfig+0x1c2>
 8008636:	4b5b      	ldr	r3, [pc, #364]	@ (80087a4 <UART_SetConfig+0x2e4>)
 8008638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800863c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008640:	2b30      	cmp	r3, #48	@ 0x30
 8008642:	d016      	beq.n	8008672 <UART_SetConfig+0x1b2>
 8008644:	2b30      	cmp	r3, #48	@ 0x30
 8008646:	d818      	bhi.n	800867a <UART_SetConfig+0x1ba>
 8008648:	2b20      	cmp	r3, #32
 800864a:	d00a      	beq.n	8008662 <UART_SetConfig+0x1a2>
 800864c:	2b20      	cmp	r3, #32
 800864e:	d814      	bhi.n	800867a <UART_SetConfig+0x1ba>
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <UART_SetConfig+0x19a>
 8008654:	2b10      	cmp	r3, #16
 8008656:	d008      	beq.n	800866a <UART_SetConfig+0x1aa>
 8008658:	e00f      	b.n	800867a <UART_SetConfig+0x1ba>
 800865a:	2300      	movs	r3, #0
 800865c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008660:	e0ad      	b.n	80087be <UART_SetConfig+0x2fe>
 8008662:	2302      	movs	r3, #2
 8008664:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008668:	e0a9      	b.n	80087be <UART_SetConfig+0x2fe>
 800866a:	2304      	movs	r3, #4
 800866c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008670:	e0a5      	b.n	80087be <UART_SetConfig+0x2fe>
 8008672:	2308      	movs	r3, #8
 8008674:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008678:	e0a1      	b.n	80087be <UART_SetConfig+0x2fe>
 800867a:	2310      	movs	r3, #16
 800867c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008680:	e09d      	b.n	80087be <UART_SetConfig+0x2fe>
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a4a      	ldr	r2, [pc, #296]	@ (80087b0 <UART_SetConfig+0x2f0>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d125      	bne.n	80086d8 <UART_SetConfig+0x218>
 800868c:	4b45      	ldr	r3, [pc, #276]	@ (80087a4 <UART_SetConfig+0x2e4>)
 800868e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008692:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008696:	2bc0      	cmp	r3, #192	@ 0xc0
 8008698:	d016      	beq.n	80086c8 <UART_SetConfig+0x208>
 800869a:	2bc0      	cmp	r3, #192	@ 0xc0
 800869c:	d818      	bhi.n	80086d0 <UART_SetConfig+0x210>
 800869e:	2b80      	cmp	r3, #128	@ 0x80
 80086a0:	d00a      	beq.n	80086b8 <UART_SetConfig+0x1f8>
 80086a2:	2b80      	cmp	r3, #128	@ 0x80
 80086a4:	d814      	bhi.n	80086d0 <UART_SetConfig+0x210>
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <UART_SetConfig+0x1f0>
 80086aa:	2b40      	cmp	r3, #64	@ 0x40
 80086ac:	d008      	beq.n	80086c0 <UART_SetConfig+0x200>
 80086ae:	e00f      	b.n	80086d0 <UART_SetConfig+0x210>
 80086b0:	2300      	movs	r3, #0
 80086b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086b6:	e082      	b.n	80087be <UART_SetConfig+0x2fe>
 80086b8:	2302      	movs	r3, #2
 80086ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086be:	e07e      	b.n	80087be <UART_SetConfig+0x2fe>
 80086c0:	2304      	movs	r3, #4
 80086c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086c6:	e07a      	b.n	80087be <UART_SetConfig+0x2fe>
 80086c8:	2308      	movs	r3, #8
 80086ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086ce:	e076      	b.n	80087be <UART_SetConfig+0x2fe>
 80086d0:	2310      	movs	r3, #16
 80086d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086d6:	e072      	b.n	80087be <UART_SetConfig+0x2fe>
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a35      	ldr	r2, [pc, #212]	@ (80087b4 <UART_SetConfig+0x2f4>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d12a      	bne.n	8008738 <UART_SetConfig+0x278>
 80086e2:	4b30      	ldr	r3, [pc, #192]	@ (80087a4 <UART_SetConfig+0x2e4>)
 80086e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086f0:	d01a      	beq.n	8008728 <UART_SetConfig+0x268>
 80086f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086f6:	d81b      	bhi.n	8008730 <UART_SetConfig+0x270>
 80086f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086fc:	d00c      	beq.n	8008718 <UART_SetConfig+0x258>
 80086fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008702:	d815      	bhi.n	8008730 <UART_SetConfig+0x270>
 8008704:	2b00      	cmp	r3, #0
 8008706:	d003      	beq.n	8008710 <UART_SetConfig+0x250>
 8008708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800870c:	d008      	beq.n	8008720 <UART_SetConfig+0x260>
 800870e:	e00f      	b.n	8008730 <UART_SetConfig+0x270>
 8008710:	2300      	movs	r3, #0
 8008712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008716:	e052      	b.n	80087be <UART_SetConfig+0x2fe>
 8008718:	2302      	movs	r3, #2
 800871a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800871e:	e04e      	b.n	80087be <UART_SetConfig+0x2fe>
 8008720:	2304      	movs	r3, #4
 8008722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008726:	e04a      	b.n	80087be <UART_SetConfig+0x2fe>
 8008728:	2308      	movs	r3, #8
 800872a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800872e:	e046      	b.n	80087be <UART_SetConfig+0x2fe>
 8008730:	2310      	movs	r3, #16
 8008732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008736:	e042      	b.n	80087be <UART_SetConfig+0x2fe>
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a17      	ldr	r2, [pc, #92]	@ (800879c <UART_SetConfig+0x2dc>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d13a      	bne.n	80087b8 <UART_SetConfig+0x2f8>
 8008742:	4b18      	ldr	r3, [pc, #96]	@ (80087a4 <UART_SetConfig+0x2e4>)
 8008744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008748:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800874c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008750:	d01a      	beq.n	8008788 <UART_SetConfig+0x2c8>
 8008752:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008756:	d81b      	bhi.n	8008790 <UART_SetConfig+0x2d0>
 8008758:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800875c:	d00c      	beq.n	8008778 <UART_SetConfig+0x2b8>
 800875e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008762:	d815      	bhi.n	8008790 <UART_SetConfig+0x2d0>
 8008764:	2b00      	cmp	r3, #0
 8008766:	d003      	beq.n	8008770 <UART_SetConfig+0x2b0>
 8008768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800876c:	d008      	beq.n	8008780 <UART_SetConfig+0x2c0>
 800876e:	e00f      	b.n	8008790 <UART_SetConfig+0x2d0>
 8008770:	2300      	movs	r3, #0
 8008772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008776:	e022      	b.n	80087be <UART_SetConfig+0x2fe>
 8008778:	2302      	movs	r3, #2
 800877a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800877e:	e01e      	b.n	80087be <UART_SetConfig+0x2fe>
 8008780:	2304      	movs	r3, #4
 8008782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008786:	e01a      	b.n	80087be <UART_SetConfig+0x2fe>
 8008788:	2308      	movs	r3, #8
 800878a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800878e:	e016      	b.n	80087be <UART_SetConfig+0x2fe>
 8008790:	2310      	movs	r3, #16
 8008792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008796:	e012      	b.n	80087be <UART_SetConfig+0x2fe>
 8008798:	cfff69f3 	.word	0xcfff69f3
 800879c:	40008000 	.word	0x40008000
 80087a0:	40013800 	.word	0x40013800
 80087a4:	40021000 	.word	0x40021000
 80087a8:	40004400 	.word	0x40004400
 80087ac:	40004800 	.word	0x40004800
 80087b0:	40004c00 	.word	0x40004c00
 80087b4:	40005000 	.word	0x40005000
 80087b8:	2310      	movs	r3, #16
 80087ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4aae      	ldr	r2, [pc, #696]	@ (8008a7c <UART_SetConfig+0x5bc>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	f040 8097 	bne.w	80088f8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80087ce:	2b08      	cmp	r3, #8
 80087d0:	d823      	bhi.n	800881a <UART_SetConfig+0x35a>
 80087d2:	a201      	add	r2, pc, #4	@ (adr r2, 80087d8 <UART_SetConfig+0x318>)
 80087d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d8:	080087fd 	.word	0x080087fd
 80087dc:	0800881b 	.word	0x0800881b
 80087e0:	08008805 	.word	0x08008805
 80087e4:	0800881b 	.word	0x0800881b
 80087e8:	0800880b 	.word	0x0800880b
 80087ec:	0800881b 	.word	0x0800881b
 80087f0:	0800881b 	.word	0x0800881b
 80087f4:	0800881b 	.word	0x0800881b
 80087f8:	08008813 	.word	0x08008813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087fc:	f7fc ff3c 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8008800:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008802:	e010      	b.n	8008826 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008804:	4b9e      	ldr	r3, [pc, #632]	@ (8008a80 <UART_SetConfig+0x5c0>)
 8008806:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008808:	e00d      	b.n	8008826 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800880a:	f7fc fec7 	bl	800559c <HAL_RCC_GetSysClockFreq>
 800880e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008810:	e009      	b.n	8008826 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008816:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008818:	e005      	b.n	8008826 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008824:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008828:	2b00      	cmp	r3, #0
 800882a:	f000 8130 	beq.w	8008a8e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008832:	4a94      	ldr	r2, [pc, #592]	@ (8008a84 <UART_SetConfig+0x5c4>)
 8008834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008838:	461a      	mov	r2, r3
 800883a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008840:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	4613      	mov	r3, r2
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	4413      	add	r3, r2
 800884c:	69ba      	ldr	r2, [r7, #24]
 800884e:	429a      	cmp	r2, r3
 8008850:	d305      	bcc.n	800885e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008858:	69ba      	ldr	r2, [r7, #24]
 800885a:	429a      	cmp	r2, r3
 800885c:	d903      	bls.n	8008866 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008864:	e113      	b.n	8008a8e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	2200      	movs	r2, #0
 800886a:	60bb      	str	r3, [r7, #8]
 800886c:	60fa      	str	r2, [r7, #12]
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008872:	4a84      	ldr	r2, [pc, #528]	@ (8008a84 <UART_SetConfig+0x5c4>)
 8008874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008878:	b29b      	uxth	r3, r3
 800887a:	2200      	movs	r2, #0
 800887c:	603b      	str	r3, [r7, #0]
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008884:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008888:	f7f8 fa36 	bl	8000cf8 <__aeabi_uldivmod>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	4610      	mov	r0, r2
 8008892:	4619      	mov	r1, r3
 8008894:	f04f 0200 	mov.w	r2, #0
 8008898:	f04f 0300 	mov.w	r3, #0
 800889c:	020b      	lsls	r3, r1, #8
 800889e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088a2:	0202      	lsls	r2, r0, #8
 80088a4:	6979      	ldr	r1, [r7, #20]
 80088a6:	6849      	ldr	r1, [r1, #4]
 80088a8:	0849      	lsrs	r1, r1, #1
 80088aa:	2000      	movs	r0, #0
 80088ac:	460c      	mov	r4, r1
 80088ae:	4605      	mov	r5, r0
 80088b0:	eb12 0804 	adds.w	r8, r2, r4
 80088b4:	eb43 0905 	adc.w	r9, r3, r5
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	469a      	mov	sl, r3
 80088c0:	4693      	mov	fp, r2
 80088c2:	4652      	mov	r2, sl
 80088c4:	465b      	mov	r3, fp
 80088c6:	4640      	mov	r0, r8
 80088c8:	4649      	mov	r1, r9
 80088ca:	f7f8 fa15 	bl	8000cf8 <__aeabi_uldivmod>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	4613      	mov	r3, r2
 80088d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088dc:	d308      	bcc.n	80088f0 <UART_SetConfig+0x430>
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088e4:	d204      	bcs.n	80088f0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6a3a      	ldr	r2, [r7, #32]
 80088ec:	60da      	str	r2, [r3, #12]
 80088ee:	e0ce      	b.n	8008a8e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80088f6:	e0ca      	b.n	8008a8e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	69db      	ldr	r3, [r3, #28]
 80088fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008900:	d166      	bne.n	80089d0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008902:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008906:	2b08      	cmp	r3, #8
 8008908:	d827      	bhi.n	800895a <UART_SetConfig+0x49a>
 800890a:	a201      	add	r2, pc, #4	@ (adr r2, 8008910 <UART_SetConfig+0x450>)
 800890c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008910:	08008935 	.word	0x08008935
 8008914:	0800893d 	.word	0x0800893d
 8008918:	08008945 	.word	0x08008945
 800891c:	0800895b 	.word	0x0800895b
 8008920:	0800894b 	.word	0x0800894b
 8008924:	0800895b 	.word	0x0800895b
 8008928:	0800895b 	.word	0x0800895b
 800892c:	0800895b 	.word	0x0800895b
 8008930:	08008953 	.word	0x08008953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008934:	f7fc fea0 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8008938:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800893a:	e014      	b.n	8008966 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800893c:	f7fc feb2 	bl	80056a4 <HAL_RCC_GetPCLK2Freq>
 8008940:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008942:	e010      	b.n	8008966 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008944:	4b4e      	ldr	r3, [pc, #312]	@ (8008a80 <UART_SetConfig+0x5c0>)
 8008946:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008948:	e00d      	b.n	8008966 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800894a:	f7fc fe27 	bl	800559c <HAL_RCC_GetSysClockFreq>
 800894e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008950:	e009      	b.n	8008966 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008958:	e005      	b.n	8008966 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008964:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008968:	2b00      	cmp	r3, #0
 800896a:	f000 8090 	beq.w	8008a8e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008972:	4a44      	ldr	r2, [pc, #272]	@ (8008a84 <UART_SetConfig+0x5c4>)
 8008974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008978:	461a      	mov	r2, r3
 800897a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008980:	005a      	lsls	r2, r3, #1
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	085b      	lsrs	r3, r3, #1
 8008988:	441a      	add	r2, r3
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008992:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	2b0f      	cmp	r3, #15
 8008998:	d916      	bls.n	80089c8 <UART_SetConfig+0x508>
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089a0:	d212      	bcs.n	80089c8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089a2:	6a3b      	ldr	r3, [r7, #32]
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	f023 030f 	bic.w	r3, r3, #15
 80089aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	085b      	lsrs	r3, r3, #1
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	f003 0307 	and.w	r3, r3, #7
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	8bfb      	ldrh	r3, [r7, #30]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	8bfa      	ldrh	r2, [r7, #30]
 80089c4:	60da      	str	r2, [r3, #12]
 80089c6:	e062      	b.n	8008a8e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80089ce:	e05e      	b.n	8008a8e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80089d4:	2b08      	cmp	r3, #8
 80089d6:	d828      	bhi.n	8008a2a <UART_SetConfig+0x56a>
 80089d8:	a201      	add	r2, pc, #4	@ (adr r2, 80089e0 <UART_SetConfig+0x520>)
 80089da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089de:	bf00      	nop
 80089e0:	08008a05 	.word	0x08008a05
 80089e4:	08008a0d 	.word	0x08008a0d
 80089e8:	08008a15 	.word	0x08008a15
 80089ec:	08008a2b 	.word	0x08008a2b
 80089f0:	08008a1b 	.word	0x08008a1b
 80089f4:	08008a2b 	.word	0x08008a2b
 80089f8:	08008a2b 	.word	0x08008a2b
 80089fc:	08008a2b 	.word	0x08008a2b
 8008a00:	08008a23 	.word	0x08008a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a04:	f7fc fe38 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8008a08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a0a:	e014      	b.n	8008a36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a0c:	f7fc fe4a 	bl	80056a4 <HAL_RCC_GetPCLK2Freq>
 8008a10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a12:	e010      	b.n	8008a36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a14:	4b1a      	ldr	r3, [pc, #104]	@ (8008a80 <UART_SetConfig+0x5c0>)
 8008a16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a18:	e00d      	b.n	8008a36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a1a:	f7fc fdbf 	bl	800559c <HAL_RCC_GetSysClockFreq>
 8008a1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a20:	e009      	b.n	8008a36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a28:	e005      	b.n	8008a36 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a34:	bf00      	nop
    }

    if (pclk != 0U)
 8008a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d028      	beq.n	8008a8e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a40:	4a10      	ldr	r2, [pc, #64]	@ (8008a84 <UART_SetConfig+0x5c4>)
 8008a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a46:	461a      	mov	r2, r3
 8008a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	085b      	lsrs	r3, r3, #1
 8008a54:	441a      	add	r2, r3
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	2b0f      	cmp	r3, #15
 8008a64:	d910      	bls.n	8008a88 <UART_SetConfig+0x5c8>
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a6c:	d20c      	bcs.n	8008a88 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	60da      	str	r2, [r3, #12]
 8008a78:	e009      	b.n	8008a8e <UART_SetConfig+0x5ce>
 8008a7a:	bf00      	nop
 8008a7c:	40008000 	.word	0x40008000
 8008a80:	00f42400 	.word	0x00f42400
 8008a84:	0800e854 	.word	0x0800e854
      }
      else
      {
        ret = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8008aaa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3730      	adds	r7, #48	@ 0x30
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008ab8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00a      	beq.n	8008ae2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	430a      	orrs	r2, r1
 8008ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae6:	f003 0302 	and.w	r3, r3, #2
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00a      	beq.n	8008b04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	430a      	orrs	r2, r1
 8008b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00a      	beq.n	8008b26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b2a:	f003 0308 	and.w	r3, r3, #8
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00a      	beq.n	8008b48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	430a      	orrs	r2, r1
 8008b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b4c:	f003 0310 	and.w	r3, r3, #16
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00a      	beq.n	8008b6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	430a      	orrs	r2, r1
 8008b68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b6e:	f003 0320 	and.w	r3, r3, #32
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00a      	beq.n	8008b8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	430a      	orrs	r2, r1
 8008b8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d01a      	beq.n	8008bce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bb6:	d10a      	bne.n	8008bce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00a      	beq.n	8008bf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	430a      	orrs	r2, r1
 8008bee:	605a      	str	r2, [r3, #4]
  }
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af02      	add	r7, sp, #8
 8008c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c0c:	f7f9 fe86 	bl	800291c <HAL_GetTick>
 8008c10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0308 	and.w	r3, r3, #8
 8008c1c:	2b08      	cmp	r3, #8
 8008c1e:	d10e      	bne.n	8008c3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f82f 	bl	8008c92 <UART_WaitOnFlagUntilTimeout>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e025      	b.n	8008c8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0304 	and.w	r3, r3, #4
 8008c48:	2b04      	cmp	r3, #4
 8008c4a:	d10e      	bne.n	8008c6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f819 	bl	8008c92 <UART_WaitOnFlagUntilTimeout>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e00f      	b.n	8008c8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2220      	movs	r2, #32
 8008c6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2220      	movs	r2, #32
 8008c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b09c      	sub	sp, #112	@ 0x70
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	603b      	str	r3, [r7, #0]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ca2:	e0a9      	b.n	8008df8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ca4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008caa:	f000 80a5 	beq.w	8008df8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cae:	f7f9 fe35 	bl	800291c <HAL_GetTick>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d302      	bcc.n	8008cc4 <UART_WaitOnFlagUntilTimeout+0x32>
 8008cbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d140      	bne.n	8008d46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ccc:	e853 3f00 	ldrex	r3, [r3]
 8008cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cd4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008cd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ce2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ce4:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008ce8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008cea:	e841 2300 	strex	r3, r2, [r1]
 8008cee:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1e6      	bne.n	8008cc4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3308      	adds	r3, #8
 8008cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d00:	e853 3f00 	ldrex	r3, [r3]
 8008d04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d08:	f023 0301 	bic.w	r3, r3, #1
 8008d0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3308      	adds	r3, #8
 8008d14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008d16:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008d18:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d1e:	e841 2300 	strex	r3, r2, [r1]
 8008d22:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1e5      	bne.n	8008cf6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2220      	movs	r2, #32
 8008d36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e069      	b.n	8008e1a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 0304 	and.w	r3, r3, #4
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d051      	beq.n	8008df8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d62:	d149      	bne.n	8008df8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d76:	e853 3f00 	ldrex	r3, [r3]
 8008d7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008d82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d8e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d94:	e841 2300 	strex	r3, r2, [r1]
 8008d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e6      	bne.n	8008d6e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3308      	adds	r3, #8
 8008da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	e853 3f00 	ldrex	r3, [r3]
 8008dae:	613b      	str	r3, [r7, #16]
   return(result);
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f023 0301 	bic.w	r3, r3, #1
 8008db6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008dc0:	623a      	str	r2, [r7, #32]
 8008dc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	69f9      	ldr	r1, [r7, #28]
 8008dc6:	6a3a      	ldr	r2, [r7, #32]
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e5      	bne.n	8008da0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2220      	movs	r2, #32
 8008de0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2220      	movs	r2, #32
 8008de8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e010      	b.n	8008e1a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	69da      	ldr	r2, [r3, #28]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	4013      	ands	r3, r2
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	bf0c      	ite	eq
 8008e08:	2301      	moveq	r3, #1
 8008e0a:	2300      	movne	r3, #0
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	461a      	mov	r2, r3
 8008e10:	79fb      	ldrb	r3, [r7, #7]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	f43f af46 	beq.w	8008ca4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3770      	adds	r7, #112	@ 0x70
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b0a3      	sub	sp, #140	@ 0x8c
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	88fa      	ldrh	r2, [r7, #6]
 8008e3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	88fa      	ldrh	r2, [r7, #6]
 8008e44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e56:	d10e      	bne.n	8008e76 <UART_Start_Receive_IT+0x52>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d105      	bne.n	8008e6c <UART_Start_Receive_IT+0x48>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008e66:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e6a:	e02d      	b.n	8008ec8 <UART_Start_Receive_IT+0xa4>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	22ff      	movs	r2, #255	@ 0xff
 8008e70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e74:	e028      	b.n	8008ec8 <UART_Start_Receive_IT+0xa4>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10d      	bne.n	8008e9a <UART_Start_Receive_IT+0x76>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d104      	bne.n	8008e90 <UART_Start_Receive_IT+0x6c>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	22ff      	movs	r2, #255	@ 0xff
 8008e8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e8e:	e01b      	b.n	8008ec8 <UART_Start_Receive_IT+0xa4>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	227f      	movs	r2, #127	@ 0x7f
 8008e94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e98:	e016      	b.n	8008ec8 <UART_Start_Receive_IT+0xa4>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ea2:	d10d      	bne.n	8008ec0 <UART_Start_Receive_IT+0x9c>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d104      	bne.n	8008eb6 <UART_Start_Receive_IT+0x92>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	227f      	movs	r2, #127	@ 0x7f
 8008eb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008eb4:	e008      	b.n	8008ec8 <UART_Start_Receive_IT+0xa4>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	223f      	movs	r2, #63	@ 0x3f
 8008eba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ebe:	e003      	b.n	8008ec8 <UART_Start_Receive_IT+0xa4>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2222      	movs	r2, #34	@ 0x22
 8008ed4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3308      	adds	r3, #8
 8008ede:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ee2:	e853 3f00 	ldrex	r3, [r3]
 8008ee6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008ee8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008eea:	f043 0301 	orr.w	r3, r3, #1
 8008eee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008efc:	673a      	str	r2, [r7, #112]	@ 0x70
 8008efe:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008f02:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008f0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e3      	bne.n	8008ed8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f18:	d153      	bne.n	8008fc2 <UART_Start_Receive_IT+0x19e>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f20:	88fa      	ldrh	r2, [r7, #6]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d34d      	bcc.n	8008fc2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f2e:	d107      	bne.n	8008f40 <UART_Start_Receive_IT+0x11c>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d103      	bne.n	8008f40 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4a4b      	ldr	r2, [pc, #300]	@ (8009068 <UART_Start_Receive_IT+0x244>)
 8008f3c:	671a      	str	r2, [r3, #112]	@ 0x70
 8008f3e:	e002      	b.n	8008f46 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4a4a      	ldr	r2, [pc, #296]	@ (800906c <UART_Start_Receive_IT+0x248>)
 8008f44:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d01a      	beq.n	8008f8c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f5e:	e853 3f00 	ldrex	r3, [r3]
 8008f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008f78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f7a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008f7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008f80:	e841 2300 	strex	r3, r2, [r1]
 8008f84:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1e4      	bne.n	8008f56 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3308      	adds	r3, #8
 8008f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f96:	e853 3f00 	ldrex	r3, [r3]
 8008f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	3308      	adds	r3, #8
 8008faa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008fac:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008fae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008fb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fb4:	e841 2300 	strex	r3, r2, [r1]
 8008fb8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e5      	bne.n	8008f8c <UART_Start_Receive_IT+0x168>
 8008fc0:	e04a      	b.n	8009058 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fca:	d107      	bne.n	8008fdc <UART_Start_Receive_IT+0x1b8>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d103      	bne.n	8008fdc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	4a26      	ldr	r2, [pc, #152]	@ (8009070 <UART_Start_Receive_IT+0x24c>)
 8008fd8:	671a      	str	r2, [r3, #112]	@ 0x70
 8008fda:	e002      	b.n	8008fe2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4a25      	ldr	r2, [pc, #148]	@ (8009074 <UART_Start_Receive_IT+0x250>)
 8008fe0:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d019      	beq.n	8009026 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffa:	e853 3f00 	ldrex	r3, [r3]
 8008ffe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009002:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009006:	677b      	str	r3, [r7, #116]	@ 0x74
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	461a      	mov	r2, r3
 800900e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009010:	637b      	str	r3, [r7, #52]	@ 0x34
 8009012:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009014:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009016:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009018:	e841 2300 	strex	r3, r2, [r1]
 800901c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800901e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1e6      	bne.n	8008ff2 <UART_Start_Receive_IT+0x1ce>
 8009024:	e018      	b.n	8009058 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	e853 3f00 	ldrex	r3, [r3]
 8009032:	613b      	str	r3, [r7, #16]
   return(result);
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f043 0320 	orr.w	r3, r3, #32
 800903a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	461a      	mov	r2, r3
 8009042:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009044:	623b      	str	r3, [r7, #32]
 8009046:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009048:	69f9      	ldr	r1, [r7, #28]
 800904a:	6a3a      	ldr	r2, [r7, #32]
 800904c:	e841 2300 	strex	r3, r2, [r1]
 8009050:	61bb      	str	r3, [r7, #24]
   return(result);
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1e6      	bne.n	8009026 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	378c      	adds	r7, #140	@ 0x8c
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	08009781 	.word	0x08009781
 800906c:	08009489 	.word	0x08009489
 8009070:	08009327 	.word	0x08009327
 8009074:	080091c7 	.word	0x080091c7

08009078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009078:	b480      	push	{r7}
 800907a:	b095      	sub	sp, #84	@ 0x54
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009088:	e853 3f00 	ldrex	r3, [r3]
 800908c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800908e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009094:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	461a      	mov	r2, r3
 800909c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800909e:	643b      	str	r3, [r7, #64]	@ 0x40
 80090a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090a6:	e841 2300 	strex	r3, r2, [r1]
 80090aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1e6      	bne.n	8009080 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3308      	adds	r3, #8
 80090b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	e853 3f00 	ldrex	r3, [r3]
 80090c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090c8:	f023 0301 	bic.w	r3, r3, #1
 80090cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3308      	adds	r3, #8
 80090d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e3      	bne.n	80090b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d118      	bne.n	8009124 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	e853 3f00 	ldrex	r3, [r3]
 80090fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	f023 0310 	bic.w	r3, r3, #16
 8009106:	647b      	str	r3, [r7, #68]	@ 0x44
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	461a      	mov	r2, r3
 800910e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009110:	61bb      	str	r3, [r7, #24]
 8009112:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009114:	6979      	ldr	r1, [r7, #20]
 8009116:	69ba      	ldr	r2, [r7, #24]
 8009118:	e841 2300 	strex	r3, r2, [r1]
 800911c:	613b      	str	r3, [r7, #16]
   return(result);
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1e6      	bne.n	80090f2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2220      	movs	r2, #32
 8009128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8009138:	bf00      	nop
 800913a:	3754      	adds	r7, #84	@ 0x54
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009150:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f7ff f996 	bl	8008494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009168:	bf00      	nop
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b088      	sub	sp, #32
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	e853 3f00 	ldrex	r3, [r3]
 8009184:	60bb      	str	r3, [r7, #8]
   return(result);
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800918c:	61fb      	str	r3, [r7, #28]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	461a      	mov	r2, r3
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	61bb      	str	r3, [r7, #24]
 8009198:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919a:	6979      	ldr	r1, [r7, #20]
 800919c:	69ba      	ldr	r2, [r7, #24]
 800919e:	e841 2300 	strex	r3, r2, [r1]
 80091a2:	613b      	str	r3, [r7, #16]
   return(result);
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1e6      	bne.n	8009178 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2220      	movs	r2, #32
 80091ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7ff f961 	bl	8008480 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091be:	bf00      	nop
 80091c0:	3720      	adds	r7, #32
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b096      	sub	sp, #88	@ 0x58
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80091d4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091de:	2b22      	cmp	r3, #34	@ 0x22
 80091e0:	f040 8095 	bne.w	800930e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ea:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091ee:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80091f2:	b2d9      	uxtb	r1, r3
 80091f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091fe:	400a      	ands	r2, r1
 8009200:	b2d2      	uxtb	r2, r2
 8009202:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009214:	b29b      	uxth	r3, r3
 8009216:	3b01      	subs	r3, #1
 8009218:	b29a      	uxth	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009226:	b29b      	uxth	r3, r3
 8009228:	2b00      	cmp	r3, #0
 800922a:	d178      	bne.n	800931e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009234:	e853 3f00 	ldrex	r3, [r3]
 8009238:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800923a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800923c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009240:	653b      	str	r3, [r7, #80]	@ 0x50
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800924a:	647b      	str	r3, [r7, #68]	@ 0x44
 800924c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009250:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009252:	e841 2300 	strex	r3, r2, [r1]
 8009256:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1e6      	bne.n	800922c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3308      	adds	r3, #8
 8009264:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009268:	e853 3f00 	ldrex	r3, [r3]
 800926c:	623b      	str	r3, [r7, #32]
   return(result);
 800926e:	6a3b      	ldr	r3, [r7, #32]
 8009270:	f023 0301 	bic.w	r3, r3, #1
 8009274:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3308      	adds	r3, #8
 800927c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800927e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009280:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009282:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009286:	e841 2300 	strex	r3, r2, [r1]
 800928a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800928c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1e5      	bne.n	800925e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2220      	movs	r2, #32
 8009296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d12e      	bne.n	8009306 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	e853 3f00 	ldrex	r3, [r3]
 80092ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f023 0310 	bic.w	r3, r3, #16
 80092c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	461a      	mov	r2, r3
 80092ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092cc:	61fb      	str	r3, [r7, #28]
 80092ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d0:	69b9      	ldr	r1, [r7, #24]
 80092d2:	69fa      	ldr	r2, [r7, #28]
 80092d4:	e841 2300 	strex	r3, r2, [r1]
 80092d8:	617b      	str	r3, [r7, #20]
   return(result);
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1e6      	bne.n	80092ae <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	f003 0310 	and.w	r3, r3, #16
 80092ea:	2b10      	cmp	r3, #16
 80092ec:	d103      	bne.n	80092f6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2210      	movs	r2, #16
 80092f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092fc:	4619      	mov	r1, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7ff f8d2 	bl	80084a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009304:	e00b      	b.n	800931e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7f8 fd9e 	bl	8001e48 <HAL_UART_RxCpltCallback>
}
 800930c:	e007      	b.n	800931e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	699a      	ldr	r2, [r3, #24]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f042 0208 	orr.w	r2, r2, #8
 800931c:	619a      	str	r2, [r3, #24]
}
 800931e:	bf00      	nop
 8009320:	3758      	adds	r7, #88	@ 0x58
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b096      	sub	sp, #88	@ 0x58
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009334:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800933e:	2b22      	cmp	r3, #34	@ 0x22
 8009340:	f040 8095 	bne.w	800946e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800934a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009352:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009354:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8009358:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800935c:	4013      	ands	r3, r2
 800935e:	b29a      	uxth	r2, r3
 8009360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009362:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009368:	1c9a      	adds	r2, r3, #2
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009374:	b29b      	uxth	r3, r3
 8009376:	3b01      	subs	r3, #1
 8009378:	b29a      	uxth	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009386:	b29b      	uxth	r3, r3
 8009388:	2b00      	cmp	r3, #0
 800938a:	d178      	bne.n	800947e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009394:	e853 3f00 	ldrex	r3, [r3]
 8009398:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	461a      	mov	r2, r3
 80093a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80093ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093b2:	e841 2300 	strex	r3, r2, [r1]
 80093b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1e6      	bne.n	800938c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	3308      	adds	r3, #8
 80093c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c6:	6a3b      	ldr	r3, [r7, #32]
 80093c8:	e853 3f00 	ldrex	r3, [r3]
 80093cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	f023 0301 	bic.w	r3, r3, #1
 80093d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3308      	adds	r3, #8
 80093dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093e6:	e841 2300 	strex	r3, r2, [r1]
 80093ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1e5      	bne.n	80093be <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2220      	movs	r2, #32
 80093f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009404:	2b01      	cmp	r3, #1
 8009406:	d12e      	bne.n	8009466 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	e853 3f00 	ldrex	r3, [r3]
 800941a:	60bb      	str	r3, [r7, #8]
   return(result);
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f023 0310 	bic.w	r3, r3, #16
 8009422:	647b      	str	r3, [r7, #68]	@ 0x44
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	461a      	mov	r2, r3
 800942a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800942c:	61bb      	str	r3, [r7, #24]
 800942e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009430:	6979      	ldr	r1, [r7, #20]
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	e841 2300 	strex	r3, r2, [r1]
 8009438:	613b      	str	r3, [r7, #16]
   return(result);
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1e6      	bne.n	800940e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	f003 0310 	and.w	r3, r3, #16
 800944a:	2b10      	cmp	r3, #16
 800944c:	d103      	bne.n	8009456 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2210      	movs	r2, #16
 8009454:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7ff f822 	bl	80084a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009464:	e00b      	b.n	800947e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7f8 fcee 	bl	8001e48 <HAL_UART_RxCpltCallback>
}
 800946c:	e007      	b.n	800947e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	699a      	ldr	r2, [r3, #24]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f042 0208 	orr.w	r2, r2, #8
 800947c:	619a      	str	r2, [r3, #24]
}
 800947e:	bf00      	nop
 8009480:	3758      	adds	r7, #88	@ 0x58
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b0a6      	sub	sp, #152	@ 0x98
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009496:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094be:	2b22      	cmp	r3, #34	@ 0x22
 80094c0:	f040 814f 	bne.w	8009762 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80094ca:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094ce:	e0f6      	b.n	80096be <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094da:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80094de:	b2d9      	uxtb	r1, r3
 80094e0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ea:	400a      	ands	r2, r1
 80094ec:	b2d2      	uxtb	r2, r2
 80094ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094f4:	1c5a      	adds	r2, r3, #1
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009500:	b29b      	uxth	r3, r3
 8009502:	3b01      	subs	r3, #1
 8009504:	b29a      	uxth	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009516:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800951a:	f003 0307 	and.w	r3, r3, #7
 800951e:	2b00      	cmp	r3, #0
 8009520:	d053      	beq.n	80095ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009522:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d011      	beq.n	8009552 <UART_RxISR_8BIT_FIFOEN+0xca>
 800952e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00b      	beq.n	8009552 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2201      	movs	r2, #1
 8009540:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009548:	f043 0201 	orr.w	r2, r3, #1
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009552:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b00      	cmp	r3, #0
 800955c:	d011      	beq.n	8009582 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800955e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00b      	beq.n	8009582 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2202      	movs	r2, #2
 8009570:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009578:	f043 0204 	orr.w	r2, r3, #4
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009582:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009586:	f003 0304 	and.w	r3, r3, #4
 800958a:	2b00      	cmp	r3, #0
 800958c:	d011      	beq.n	80095b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800958e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00b      	beq.n	80095b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2204      	movs	r2, #4
 80095a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095a8:	f043 0202 	orr.w	r2, r3, #2
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d006      	beq.n	80095ca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7fe ff69 	bl	8008494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d173      	bne.n	80096be <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095de:	e853 3f00 	ldrex	r3, [r3]
 80095e2:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80095e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80095f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095fa:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fc:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80095fe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009600:	e841 2300 	strex	r3, r2, [r1]
 8009604:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1e4      	bne.n	80095d6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	3308      	adds	r3, #8
 8009612:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009614:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009616:	e853 3f00 	ldrex	r3, [r3]
 800961a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800961c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800961e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009622:	f023 0301 	bic.w	r3, r3, #1
 8009626:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3308      	adds	r3, #8
 800962e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009630:	657a      	str	r2, [r7, #84]	@ 0x54
 8009632:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009634:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009636:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009638:	e841 2300 	strex	r3, r2, [r1]
 800963c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800963e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1e3      	bne.n	800960c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2220      	movs	r2, #32
 8009648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009656:	2b01      	cmp	r3, #1
 8009658:	d12e      	bne.n	80096b8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009668:	e853 3f00 	ldrex	r3, [r3]
 800966c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	f023 0310 	bic.w	r3, r3, #16
 8009674:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800967e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009680:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009682:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009684:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009686:	e841 2300 	strex	r3, r2, [r1]
 800968a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800968c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1e6      	bne.n	8009660 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	f003 0310 	and.w	r3, r3, #16
 800969c:	2b10      	cmp	r3, #16
 800969e:	d103      	bne.n	80096a8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2210      	movs	r2, #16
 80096a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f7fe fef9 	bl	80084a8 <HAL_UARTEx_RxEventCallback>
 80096b6:	e002      	b.n	80096be <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7f8 fbc5 	bl	8001e48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d006      	beq.n	80096d4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80096c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80096ca:	f003 0320 	and.w	r3, r3, #32
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f47f aefe 	bne.w	80094d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80096de:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d045      	beq.n	8009772 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80096ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d23e      	bcs.n	8009772 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3308      	adds	r3, #8
 80096fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	e853 3f00 	ldrex	r3, [r3]
 8009702:	61fb      	str	r3, [r7, #28]
   return(result);
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800970a:	673b      	str	r3, [r7, #112]	@ 0x70
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3308      	adds	r3, #8
 8009712:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009714:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009716:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009718:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800971a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800971c:	e841 2300 	strex	r3, r2, [r1]
 8009720:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1e5      	bne.n	80096f4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a14      	ldr	r2, [pc, #80]	@ (800977c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800972c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	e853 3f00 	ldrex	r3, [r3]
 800973a:	60bb      	str	r3, [r7, #8]
   return(result);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	f043 0320 	orr.w	r3, r3, #32
 8009742:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	461a      	mov	r2, r3
 800974a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800974c:	61bb      	str	r3, [r7, #24]
 800974e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009750:	6979      	ldr	r1, [r7, #20]
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	e841 2300 	strex	r3, r2, [r1]
 8009758:	613b      	str	r3, [r7, #16]
   return(result);
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1e6      	bne.n	800972e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009760:	e007      	b.n	8009772 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	699a      	ldr	r2, [r3, #24]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f042 0208 	orr.w	r2, r2, #8
 8009770:	619a      	str	r2, [r3, #24]
}
 8009772:	bf00      	nop
 8009774:	3798      	adds	r7, #152	@ 0x98
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	080091c7 	.word	0x080091c7

08009780 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b0a8      	sub	sp, #160	@ 0xa0
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800978e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	69db      	ldr	r3, [r3, #28]
 8009798:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097b6:	2b22      	cmp	r3, #34	@ 0x22
 80097b8:	f040 8153 	bne.w	8009a62 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80097c2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097c6:	e0fa      	b.n	80099be <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ce:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80097da:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 80097de:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 80097e2:	4013      	ands	r3, r2
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80097ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097f0:	1c9a      	adds	r2, r3, #2
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	3b01      	subs	r3, #1
 8009800:	b29a      	uxth	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	69db      	ldr	r3, [r3, #28]
 800980e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009812:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009816:	f003 0307 	and.w	r3, r3, #7
 800981a:	2b00      	cmp	r3, #0
 800981c:	d053      	beq.n	80098c6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800981e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	2b00      	cmp	r3, #0
 8009828:	d011      	beq.n	800984e <UART_RxISR_16BIT_FIFOEN+0xce>
 800982a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800982e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00b      	beq.n	800984e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2201      	movs	r2, #1
 800983c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009844:	f043 0201 	orr.w	r2, r3, #1
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800984e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009852:	f003 0302 	and.w	r3, r3, #2
 8009856:	2b00      	cmp	r3, #0
 8009858:	d011      	beq.n	800987e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800985a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00b      	beq.n	800987e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2202      	movs	r2, #2
 800986c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009874:	f043 0204 	orr.w	r2, r3, #4
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800987e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009882:	f003 0304 	and.w	r3, r3, #4
 8009886:	2b00      	cmp	r3, #0
 8009888:	d011      	beq.n	80098ae <UART_RxISR_16BIT_FIFOEN+0x12e>
 800988a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00b      	beq.n	80098ae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2204      	movs	r2, #4
 800989c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098a4:	f043 0202 	orr.w	r2, r3, #2
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d006      	beq.n	80098c6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7fe fdeb 	bl	8008494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d175      	bne.n	80099be <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098da:	e853 3f00 	ldrex	r3, [r3]
 80098de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80098e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	461a      	mov	r2, r3
 80098f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80098f6:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80098fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80098fc:	e841 2300 	strex	r3, r2, [r1]
 8009900:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009902:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1e4      	bne.n	80098d2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3308      	adds	r3, #8
 800990e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009912:	e853 3f00 	ldrex	r3, [r3]
 8009916:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800991a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800991e:	f023 0301 	bic.w	r3, r3, #1
 8009922:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3308      	adds	r3, #8
 800992c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009930:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009932:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009934:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009936:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009938:	e841 2300 	strex	r3, r2, [r1]
 800993c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800993e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1e1      	bne.n	8009908 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2220      	movs	r2, #32
 8009948:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009956:	2b01      	cmp	r3, #1
 8009958:	d12e      	bne.n	80099b8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800996e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009970:	f023 0310 	bic.w	r3, r3, #16
 8009974:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	461a      	mov	r2, r3
 800997c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800997e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009980:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009982:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009984:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009986:	e841 2300 	strex	r3, r2, [r1]
 800998a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800998c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1e6      	bne.n	8009960 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	f003 0310 	and.w	r3, r3, #16
 800999c:	2b10      	cmp	r3, #16
 800999e:	d103      	bne.n	80099a8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2210      	movs	r2, #16
 80099a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7fe fd79 	bl	80084a8 <HAL_UARTEx_RxEventCallback>
 80099b6:	e002      	b.n	80099be <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7f8 fa45 	bl	8001e48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80099be:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d006      	beq.n	80099d4 <UART_RxISR_16BIT_FIFOEN+0x254>
 80099c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80099ca:	f003 0320 	and.w	r3, r3, #32
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f47f aefa 	bne.w	80097c8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099da:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80099de:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d045      	beq.n	8009a72 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80099ec:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d23e      	bcs.n	8009a72 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3308      	adds	r3, #8
 80099fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fe:	e853 3f00 	ldrex	r3, [r3]
 8009a02:	623b      	str	r3, [r7, #32]
   return(result);
 8009a04:	6a3b      	ldr	r3, [r7, #32]
 8009a06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	3308      	adds	r3, #8
 8009a12:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009a14:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a1c:	e841 2300 	strex	r3, r2, [r1]
 8009a20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1e5      	bne.n	80099f4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a14      	ldr	r2, [pc, #80]	@ (8009a7c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009a2c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	e853 3f00 	ldrex	r3, [r3]
 8009a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f043 0320 	orr.w	r3, r3, #32
 8009a42:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a4c:	61fb      	str	r3, [r7, #28]
 8009a4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a50:	69b9      	ldr	r1, [r7, #24]
 8009a52:	69fa      	ldr	r2, [r7, #28]
 8009a54:	e841 2300 	strex	r3, r2, [r1]
 8009a58:	617b      	str	r3, [r7, #20]
   return(result);
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1e6      	bne.n	8009a2e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a60:	e007      	b.n	8009a72 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	699a      	ldr	r2, [r3, #24]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f042 0208 	orr.w	r2, r2, #8
 8009a70:	619a      	str	r2, [r3, #24]
}
 8009a72:	bf00      	nop
 8009a74:	37a0      	adds	r7, #160	@ 0xa0
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	08009327 	.word	0x08009327

08009a80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d101      	bne.n	8009ad2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ace:	2302      	movs	r3, #2
 8009ad0:	e027      	b.n	8009b22 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2224      	movs	r2, #36	@ 0x24
 8009ade:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f022 0201 	bic.w	r2, r2, #1
 8009af8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009b00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2220      	movs	r2, #32
 8009b14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr

08009b2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b084      	sub	sp, #16
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
 8009b36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d101      	bne.n	8009b46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b42:	2302      	movs	r3, #2
 8009b44:	e02d      	b.n	8009ba2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2224      	movs	r2, #36	@ 0x24
 8009b52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f022 0201 	bic.w	r2, r2, #1
 8009b6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	430a      	orrs	r2, r1
 8009b80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f850 	bl	8009c28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2220      	movs	r2, #32
 8009b94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b084      	sub	sp, #16
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d101      	bne.n	8009bc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	e02d      	b.n	8009c1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2224      	movs	r2, #36	@ 0x24
 8009bce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f022 0201 	bic.w	r2, r2, #1
 8009be8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	430a      	orrs	r2, r1
 8009bfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f812 	bl	8009c28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2220      	movs	r2, #32
 8009c10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
	...

08009c28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d108      	bne.n	8009c4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c48:	e031      	b.n	8009cae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c4a:	2308      	movs	r3, #8
 8009c4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c4e:	2308      	movs	r3, #8
 8009c50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	0e5b      	lsrs	r3, r3, #25
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	f003 0307 	and.w	r3, r3, #7
 8009c60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	0f5b      	lsrs	r3, r3, #29
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	f003 0307 	and.w	r3, r3, #7
 8009c70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
 8009c74:	7b3a      	ldrb	r2, [r7, #12]
 8009c76:	4911      	ldr	r1, [pc, #68]	@ (8009cbc <UARTEx_SetNbDataToProcess+0x94>)
 8009c78:	5c8a      	ldrb	r2, [r1, r2]
 8009c7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c7e:	7b3a      	ldrb	r2, [r7, #12]
 8009c80:	490f      	ldr	r1, [pc, #60]	@ (8009cc0 <UARTEx_SetNbDataToProcess+0x98>)
 8009c82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c84:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
 8009c92:	7b7a      	ldrb	r2, [r7, #13]
 8009c94:	4909      	ldr	r1, [pc, #36]	@ (8009cbc <UARTEx_SetNbDataToProcess+0x94>)
 8009c96:	5c8a      	ldrb	r2, [r1, r2]
 8009c98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c9c:	7b7a      	ldrb	r2, [r7, #13]
 8009c9e:	4908      	ldr	r1, [pc, #32]	@ (8009cc0 <UARTEx_SetNbDataToProcess+0x98>)
 8009ca0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ca2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009cae:	bf00      	nop
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	0800e86c 	.word	0x0800e86c
 8009cc0:	0800e874 	.word	0x0800e874

08009cc4 <atoi>:
 8009cc4:	220a      	movs	r2, #10
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	f000 b87c 	b.w	8009dc4 <strtol>

08009ccc <_strtol_l.constprop.0>:
 8009ccc:	2b24      	cmp	r3, #36	@ 0x24
 8009cce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd2:	4686      	mov	lr, r0
 8009cd4:	4690      	mov	r8, r2
 8009cd6:	d801      	bhi.n	8009cdc <_strtol_l.constprop.0+0x10>
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d106      	bne.n	8009cea <_strtol_l.constprop.0+0x1e>
 8009cdc:	f001 f8bc 	bl	800ae58 <__errno>
 8009ce0:	2316      	movs	r3, #22
 8009ce2:	6003      	str	r3, [r0, #0]
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cea:	4834      	ldr	r0, [pc, #208]	@ (8009dbc <_strtol_l.constprop.0+0xf0>)
 8009cec:	460d      	mov	r5, r1
 8009cee:	462a      	mov	r2, r5
 8009cf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cf4:	5d06      	ldrb	r6, [r0, r4]
 8009cf6:	f016 0608 	ands.w	r6, r6, #8
 8009cfa:	d1f8      	bne.n	8009cee <_strtol_l.constprop.0+0x22>
 8009cfc:	2c2d      	cmp	r4, #45	@ 0x2d
 8009cfe:	d12d      	bne.n	8009d5c <_strtol_l.constprop.0+0x90>
 8009d00:	782c      	ldrb	r4, [r5, #0]
 8009d02:	2601      	movs	r6, #1
 8009d04:	1c95      	adds	r5, r2, #2
 8009d06:	f033 0210 	bics.w	r2, r3, #16
 8009d0a:	d109      	bne.n	8009d20 <_strtol_l.constprop.0+0x54>
 8009d0c:	2c30      	cmp	r4, #48	@ 0x30
 8009d0e:	d12a      	bne.n	8009d66 <_strtol_l.constprop.0+0x9a>
 8009d10:	782a      	ldrb	r2, [r5, #0]
 8009d12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d16:	2a58      	cmp	r2, #88	@ 0x58
 8009d18:	d125      	bne.n	8009d66 <_strtol_l.constprop.0+0x9a>
 8009d1a:	786c      	ldrb	r4, [r5, #1]
 8009d1c:	2310      	movs	r3, #16
 8009d1e:	3502      	adds	r5, #2
 8009d20:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009d24:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009d28:	2200      	movs	r2, #0
 8009d2a:	fbbc f9f3 	udiv	r9, ip, r3
 8009d2e:	4610      	mov	r0, r2
 8009d30:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009d38:	2f09      	cmp	r7, #9
 8009d3a:	d81b      	bhi.n	8009d74 <_strtol_l.constprop.0+0xa8>
 8009d3c:	463c      	mov	r4, r7
 8009d3e:	42a3      	cmp	r3, r4
 8009d40:	dd27      	ble.n	8009d92 <_strtol_l.constprop.0+0xc6>
 8009d42:	1c57      	adds	r7, r2, #1
 8009d44:	d007      	beq.n	8009d56 <_strtol_l.constprop.0+0x8a>
 8009d46:	4581      	cmp	r9, r0
 8009d48:	d320      	bcc.n	8009d8c <_strtol_l.constprop.0+0xc0>
 8009d4a:	d101      	bne.n	8009d50 <_strtol_l.constprop.0+0x84>
 8009d4c:	45a2      	cmp	sl, r4
 8009d4e:	db1d      	blt.n	8009d8c <_strtol_l.constprop.0+0xc0>
 8009d50:	fb00 4003 	mla	r0, r0, r3, r4
 8009d54:	2201      	movs	r2, #1
 8009d56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d5a:	e7eb      	b.n	8009d34 <_strtol_l.constprop.0+0x68>
 8009d5c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009d5e:	bf04      	itt	eq
 8009d60:	782c      	ldrbeq	r4, [r5, #0]
 8009d62:	1c95      	addeq	r5, r2, #2
 8009d64:	e7cf      	b.n	8009d06 <_strtol_l.constprop.0+0x3a>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1da      	bne.n	8009d20 <_strtol_l.constprop.0+0x54>
 8009d6a:	2c30      	cmp	r4, #48	@ 0x30
 8009d6c:	bf0c      	ite	eq
 8009d6e:	2308      	moveq	r3, #8
 8009d70:	230a      	movne	r3, #10
 8009d72:	e7d5      	b.n	8009d20 <_strtol_l.constprop.0+0x54>
 8009d74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009d78:	2f19      	cmp	r7, #25
 8009d7a:	d801      	bhi.n	8009d80 <_strtol_l.constprop.0+0xb4>
 8009d7c:	3c37      	subs	r4, #55	@ 0x37
 8009d7e:	e7de      	b.n	8009d3e <_strtol_l.constprop.0+0x72>
 8009d80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009d84:	2f19      	cmp	r7, #25
 8009d86:	d804      	bhi.n	8009d92 <_strtol_l.constprop.0+0xc6>
 8009d88:	3c57      	subs	r4, #87	@ 0x57
 8009d8a:	e7d8      	b.n	8009d3e <_strtol_l.constprop.0+0x72>
 8009d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d90:	e7e1      	b.n	8009d56 <_strtol_l.constprop.0+0x8a>
 8009d92:	1c53      	adds	r3, r2, #1
 8009d94:	d108      	bne.n	8009da8 <_strtol_l.constprop.0+0xdc>
 8009d96:	2322      	movs	r3, #34	@ 0x22
 8009d98:	f8ce 3000 	str.w	r3, [lr]
 8009d9c:	4660      	mov	r0, ip
 8009d9e:	f1b8 0f00 	cmp.w	r8, #0
 8009da2:	d0a0      	beq.n	8009ce6 <_strtol_l.constprop.0+0x1a>
 8009da4:	1e69      	subs	r1, r5, #1
 8009da6:	e006      	b.n	8009db6 <_strtol_l.constprop.0+0xea>
 8009da8:	b106      	cbz	r6, 8009dac <_strtol_l.constprop.0+0xe0>
 8009daa:	4240      	negs	r0, r0
 8009dac:	f1b8 0f00 	cmp.w	r8, #0
 8009db0:	d099      	beq.n	8009ce6 <_strtol_l.constprop.0+0x1a>
 8009db2:	2a00      	cmp	r2, #0
 8009db4:	d1f6      	bne.n	8009da4 <_strtol_l.constprop.0+0xd8>
 8009db6:	f8c8 1000 	str.w	r1, [r8]
 8009dba:	e794      	b.n	8009ce6 <_strtol_l.constprop.0+0x1a>
 8009dbc:	0800e87d 	.word	0x0800e87d

08009dc0 <_strtol_r>:
 8009dc0:	f7ff bf84 	b.w	8009ccc <_strtol_l.constprop.0>

08009dc4 <strtol>:
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	460a      	mov	r2, r1
 8009dc8:	4601      	mov	r1, r0
 8009dca:	4802      	ldr	r0, [pc, #8]	@ (8009dd4 <strtol+0x10>)
 8009dcc:	6800      	ldr	r0, [r0, #0]
 8009dce:	f7ff bf7d 	b.w	8009ccc <_strtol_l.constprop.0>
 8009dd2:	bf00      	nop
 8009dd4:	20000018 	.word	0x20000018

08009dd8 <__cvt>:
 8009dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ddc:	ec57 6b10 	vmov	r6, r7, d0
 8009de0:	2f00      	cmp	r7, #0
 8009de2:	460c      	mov	r4, r1
 8009de4:	4619      	mov	r1, r3
 8009de6:	463b      	mov	r3, r7
 8009de8:	bfbb      	ittet	lt
 8009dea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009dee:	461f      	movlt	r7, r3
 8009df0:	2300      	movge	r3, #0
 8009df2:	232d      	movlt	r3, #45	@ 0x2d
 8009df4:	700b      	strb	r3, [r1, #0]
 8009df6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009df8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009dfc:	4691      	mov	r9, r2
 8009dfe:	f023 0820 	bic.w	r8, r3, #32
 8009e02:	bfbc      	itt	lt
 8009e04:	4632      	movlt	r2, r6
 8009e06:	4616      	movlt	r6, r2
 8009e08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e0c:	d005      	beq.n	8009e1a <__cvt+0x42>
 8009e0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009e12:	d100      	bne.n	8009e16 <__cvt+0x3e>
 8009e14:	3401      	adds	r4, #1
 8009e16:	2102      	movs	r1, #2
 8009e18:	e000      	b.n	8009e1c <__cvt+0x44>
 8009e1a:	2103      	movs	r1, #3
 8009e1c:	ab03      	add	r3, sp, #12
 8009e1e:	9301      	str	r3, [sp, #4]
 8009e20:	ab02      	add	r3, sp, #8
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	ec47 6b10 	vmov	d0, r6, r7
 8009e28:	4653      	mov	r3, sl
 8009e2a:	4622      	mov	r2, r4
 8009e2c:	f001 f8f0 	bl	800b010 <_dtoa_r>
 8009e30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009e34:	4605      	mov	r5, r0
 8009e36:	d119      	bne.n	8009e6c <__cvt+0x94>
 8009e38:	f019 0f01 	tst.w	r9, #1
 8009e3c:	d00e      	beq.n	8009e5c <__cvt+0x84>
 8009e3e:	eb00 0904 	add.w	r9, r0, r4
 8009e42:	2200      	movs	r2, #0
 8009e44:	2300      	movs	r3, #0
 8009e46:	4630      	mov	r0, r6
 8009e48:	4639      	mov	r1, r7
 8009e4a:	f7f6 fe75 	bl	8000b38 <__aeabi_dcmpeq>
 8009e4e:	b108      	cbz	r0, 8009e54 <__cvt+0x7c>
 8009e50:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e54:	2230      	movs	r2, #48	@ 0x30
 8009e56:	9b03      	ldr	r3, [sp, #12]
 8009e58:	454b      	cmp	r3, r9
 8009e5a:	d31e      	bcc.n	8009e9a <__cvt+0xc2>
 8009e5c:	9b03      	ldr	r3, [sp, #12]
 8009e5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e60:	1b5b      	subs	r3, r3, r5
 8009e62:	4628      	mov	r0, r5
 8009e64:	6013      	str	r3, [r2, #0]
 8009e66:	b004      	add	sp, #16
 8009e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e70:	eb00 0904 	add.w	r9, r0, r4
 8009e74:	d1e5      	bne.n	8009e42 <__cvt+0x6a>
 8009e76:	7803      	ldrb	r3, [r0, #0]
 8009e78:	2b30      	cmp	r3, #48	@ 0x30
 8009e7a:	d10a      	bne.n	8009e92 <__cvt+0xba>
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	2300      	movs	r3, #0
 8009e80:	4630      	mov	r0, r6
 8009e82:	4639      	mov	r1, r7
 8009e84:	f7f6 fe58 	bl	8000b38 <__aeabi_dcmpeq>
 8009e88:	b918      	cbnz	r0, 8009e92 <__cvt+0xba>
 8009e8a:	f1c4 0401 	rsb	r4, r4, #1
 8009e8e:	f8ca 4000 	str.w	r4, [sl]
 8009e92:	f8da 3000 	ldr.w	r3, [sl]
 8009e96:	4499      	add	r9, r3
 8009e98:	e7d3      	b.n	8009e42 <__cvt+0x6a>
 8009e9a:	1c59      	adds	r1, r3, #1
 8009e9c:	9103      	str	r1, [sp, #12]
 8009e9e:	701a      	strb	r2, [r3, #0]
 8009ea0:	e7d9      	b.n	8009e56 <__cvt+0x7e>

08009ea2 <__exponent>:
 8009ea2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ea4:	2900      	cmp	r1, #0
 8009ea6:	bfba      	itte	lt
 8009ea8:	4249      	neglt	r1, r1
 8009eaa:	232d      	movlt	r3, #45	@ 0x2d
 8009eac:	232b      	movge	r3, #43	@ 0x2b
 8009eae:	2909      	cmp	r1, #9
 8009eb0:	7002      	strb	r2, [r0, #0]
 8009eb2:	7043      	strb	r3, [r0, #1]
 8009eb4:	dd29      	ble.n	8009f0a <__exponent+0x68>
 8009eb6:	f10d 0307 	add.w	r3, sp, #7
 8009eba:	461d      	mov	r5, r3
 8009ebc:	270a      	movs	r7, #10
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	fbb1 f6f7 	udiv	r6, r1, r7
 8009ec4:	fb07 1416 	mls	r4, r7, r6, r1
 8009ec8:	3430      	adds	r4, #48	@ 0x30
 8009eca:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009ece:	460c      	mov	r4, r1
 8009ed0:	2c63      	cmp	r4, #99	@ 0x63
 8009ed2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ed6:	4631      	mov	r1, r6
 8009ed8:	dcf1      	bgt.n	8009ebe <__exponent+0x1c>
 8009eda:	3130      	adds	r1, #48	@ 0x30
 8009edc:	1e94      	subs	r4, r2, #2
 8009ede:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ee2:	1c41      	adds	r1, r0, #1
 8009ee4:	4623      	mov	r3, r4
 8009ee6:	42ab      	cmp	r3, r5
 8009ee8:	d30a      	bcc.n	8009f00 <__exponent+0x5e>
 8009eea:	f10d 0309 	add.w	r3, sp, #9
 8009eee:	1a9b      	subs	r3, r3, r2
 8009ef0:	42ac      	cmp	r4, r5
 8009ef2:	bf88      	it	hi
 8009ef4:	2300      	movhi	r3, #0
 8009ef6:	3302      	adds	r3, #2
 8009ef8:	4403      	add	r3, r0
 8009efa:	1a18      	subs	r0, r3, r0
 8009efc:	b003      	add	sp, #12
 8009efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f00:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009f04:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009f08:	e7ed      	b.n	8009ee6 <__exponent+0x44>
 8009f0a:	2330      	movs	r3, #48	@ 0x30
 8009f0c:	3130      	adds	r1, #48	@ 0x30
 8009f0e:	7083      	strb	r3, [r0, #2]
 8009f10:	70c1      	strb	r1, [r0, #3]
 8009f12:	1d03      	adds	r3, r0, #4
 8009f14:	e7f1      	b.n	8009efa <__exponent+0x58>
	...

08009f18 <_printf_float>:
 8009f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1c:	b08d      	sub	sp, #52	@ 0x34
 8009f1e:	460c      	mov	r4, r1
 8009f20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009f24:	4616      	mov	r6, r2
 8009f26:	461f      	mov	r7, r3
 8009f28:	4605      	mov	r5, r0
 8009f2a:	f000 ff4b 	bl	800adc4 <_localeconv_r>
 8009f2e:	6803      	ldr	r3, [r0, #0]
 8009f30:	9304      	str	r3, [sp, #16]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7f6 f9d4 	bl	80002e0 <strlen>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8009f40:	9005      	str	r0, [sp, #20]
 8009f42:	3307      	adds	r3, #7
 8009f44:	f023 0307 	bic.w	r3, r3, #7
 8009f48:	f103 0208 	add.w	r2, r3, #8
 8009f4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009f50:	f8d4 b000 	ldr.w	fp, [r4]
 8009f54:	f8c8 2000 	str.w	r2, [r8]
 8009f58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009f60:	9307      	str	r3, [sp, #28]
 8009f62:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009f6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f6e:	4b9c      	ldr	r3, [pc, #624]	@ (800a1e0 <_printf_float+0x2c8>)
 8009f70:	f04f 32ff 	mov.w	r2, #4294967295
 8009f74:	f7f6 fe12 	bl	8000b9c <__aeabi_dcmpun>
 8009f78:	bb70      	cbnz	r0, 8009fd8 <_printf_float+0xc0>
 8009f7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f7e:	4b98      	ldr	r3, [pc, #608]	@ (800a1e0 <_printf_float+0x2c8>)
 8009f80:	f04f 32ff 	mov.w	r2, #4294967295
 8009f84:	f7f6 fdec 	bl	8000b60 <__aeabi_dcmple>
 8009f88:	bb30      	cbnz	r0, 8009fd8 <_printf_float+0xc0>
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	4640      	mov	r0, r8
 8009f90:	4649      	mov	r1, r9
 8009f92:	f7f6 fddb 	bl	8000b4c <__aeabi_dcmplt>
 8009f96:	b110      	cbz	r0, 8009f9e <_printf_float+0x86>
 8009f98:	232d      	movs	r3, #45	@ 0x2d
 8009f9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f9e:	4a91      	ldr	r2, [pc, #580]	@ (800a1e4 <_printf_float+0x2cc>)
 8009fa0:	4b91      	ldr	r3, [pc, #580]	@ (800a1e8 <_printf_float+0x2d0>)
 8009fa2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009fa6:	bf94      	ite	ls
 8009fa8:	4690      	movls	r8, r2
 8009faa:	4698      	movhi	r8, r3
 8009fac:	2303      	movs	r3, #3
 8009fae:	6123      	str	r3, [r4, #16]
 8009fb0:	f02b 0304 	bic.w	r3, fp, #4
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	f04f 0900 	mov.w	r9, #0
 8009fba:	9700      	str	r7, [sp, #0]
 8009fbc:	4633      	mov	r3, r6
 8009fbe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009fc0:	4621      	mov	r1, r4
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	f000 f9d2 	bl	800a36c <_printf_common>
 8009fc8:	3001      	adds	r0, #1
 8009fca:	f040 808d 	bne.w	800a0e8 <_printf_float+0x1d0>
 8009fce:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd2:	b00d      	add	sp, #52	@ 0x34
 8009fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd8:	4642      	mov	r2, r8
 8009fda:	464b      	mov	r3, r9
 8009fdc:	4640      	mov	r0, r8
 8009fde:	4649      	mov	r1, r9
 8009fe0:	f7f6 fddc 	bl	8000b9c <__aeabi_dcmpun>
 8009fe4:	b140      	cbz	r0, 8009ff8 <_printf_float+0xe0>
 8009fe6:	464b      	mov	r3, r9
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	bfbc      	itt	lt
 8009fec:	232d      	movlt	r3, #45	@ 0x2d
 8009fee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009ff2:	4a7e      	ldr	r2, [pc, #504]	@ (800a1ec <_printf_float+0x2d4>)
 8009ff4:	4b7e      	ldr	r3, [pc, #504]	@ (800a1f0 <_printf_float+0x2d8>)
 8009ff6:	e7d4      	b.n	8009fa2 <_printf_float+0x8a>
 8009ff8:	6863      	ldr	r3, [r4, #4]
 8009ffa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009ffe:	9206      	str	r2, [sp, #24]
 800a000:	1c5a      	adds	r2, r3, #1
 800a002:	d13b      	bne.n	800a07c <_printf_float+0x164>
 800a004:	2306      	movs	r3, #6
 800a006:	6063      	str	r3, [r4, #4]
 800a008:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a00c:	2300      	movs	r3, #0
 800a00e:	6022      	str	r2, [r4, #0]
 800a010:	9303      	str	r3, [sp, #12]
 800a012:	ab0a      	add	r3, sp, #40	@ 0x28
 800a014:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a018:	ab09      	add	r3, sp, #36	@ 0x24
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	6861      	ldr	r1, [r4, #4]
 800a01e:	ec49 8b10 	vmov	d0, r8, r9
 800a022:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a026:	4628      	mov	r0, r5
 800a028:	f7ff fed6 	bl	8009dd8 <__cvt>
 800a02c:	9b06      	ldr	r3, [sp, #24]
 800a02e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a030:	2b47      	cmp	r3, #71	@ 0x47
 800a032:	4680      	mov	r8, r0
 800a034:	d129      	bne.n	800a08a <_printf_float+0x172>
 800a036:	1cc8      	adds	r0, r1, #3
 800a038:	db02      	blt.n	800a040 <_printf_float+0x128>
 800a03a:	6863      	ldr	r3, [r4, #4]
 800a03c:	4299      	cmp	r1, r3
 800a03e:	dd41      	ble.n	800a0c4 <_printf_float+0x1ac>
 800a040:	f1aa 0a02 	sub.w	sl, sl, #2
 800a044:	fa5f fa8a 	uxtb.w	sl, sl
 800a048:	3901      	subs	r1, #1
 800a04a:	4652      	mov	r2, sl
 800a04c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a050:	9109      	str	r1, [sp, #36]	@ 0x24
 800a052:	f7ff ff26 	bl	8009ea2 <__exponent>
 800a056:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a058:	1813      	adds	r3, r2, r0
 800a05a:	2a01      	cmp	r2, #1
 800a05c:	4681      	mov	r9, r0
 800a05e:	6123      	str	r3, [r4, #16]
 800a060:	dc02      	bgt.n	800a068 <_printf_float+0x150>
 800a062:	6822      	ldr	r2, [r4, #0]
 800a064:	07d2      	lsls	r2, r2, #31
 800a066:	d501      	bpl.n	800a06c <_printf_float+0x154>
 800a068:	3301      	adds	r3, #1
 800a06a:	6123      	str	r3, [r4, #16]
 800a06c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a070:	2b00      	cmp	r3, #0
 800a072:	d0a2      	beq.n	8009fba <_printf_float+0xa2>
 800a074:	232d      	movs	r3, #45	@ 0x2d
 800a076:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a07a:	e79e      	b.n	8009fba <_printf_float+0xa2>
 800a07c:	9a06      	ldr	r2, [sp, #24]
 800a07e:	2a47      	cmp	r2, #71	@ 0x47
 800a080:	d1c2      	bne.n	800a008 <_printf_float+0xf0>
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1c0      	bne.n	800a008 <_printf_float+0xf0>
 800a086:	2301      	movs	r3, #1
 800a088:	e7bd      	b.n	800a006 <_printf_float+0xee>
 800a08a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a08e:	d9db      	bls.n	800a048 <_printf_float+0x130>
 800a090:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a094:	d118      	bne.n	800a0c8 <_printf_float+0x1b0>
 800a096:	2900      	cmp	r1, #0
 800a098:	6863      	ldr	r3, [r4, #4]
 800a09a:	dd0b      	ble.n	800a0b4 <_printf_float+0x19c>
 800a09c:	6121      	str	r1, [r4, #16]
 800a09e:	b913      	cbnz	r3, 800a0a6 <_printf_float+0x18e>
 800a0a0:	6822      	ldr	r2, [r4, #0]
 800a0a2:	07d0      	lsls	r0, r2, #31
 800a0a4:	d502      	bpl.n	800a0ac <_printf_float+0x194>
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	440b      	add	r3, r1
 800a0aa:	6123      	str	r3, [r4, #16]
 800a0ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a0ae:	f04f 0900 	mov.w	r9, #0
 800a0b2:	e7db      	b.n	800a06c <_printf_float+0x154>
 800a0b4:	b913      	cbnz	r3, 800a0bc <_printf_float+0x1a4>
 800a0b6:	6822      	ldr	r2, [r4, #0]
 800a0b8:	07d2      	lsls	r2, r2, #31
 800a0ba:	d501      	bpl.n	800a0c0 <_printf_float+0x1a8>
 800a0bc:	3302      	adds	r3, #2
 800a0be:	e7f4      	b.n	800a0aa <_printf_float+0x192>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e7f2      	b.n	800a0aa <_printf_float+0x192>
 800a0c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a0c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0ca:	4299      	cmp	r1, r3
 800a0cc:	db05      	blt.n	800a0da <_printf_float+0x1c2>
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	6121      	str	r1, [r4, #16]
 800a0d2:	07d8      	lsls	r0, r3, #31
 800a0d4:	d5ea      	bpl.n	800a0ac <_printf_float+0x194>
 800a0d6:	1c4b      	adds	r3, r1, #1
 800a0d8:	e7e7      	b.n	800a0aa <_printf_float+0x192>
 800a0da:	2900      	cmp	r1, #0
 800a0dc:	bfd4      	ite	le
 800a0de:	f1c1 0202 	rsble	r2, r1, #2
 800a0e2:	2201      	movgt	r2, #1
 800a0e4:	4413      	add	r3, r2
 800a0e6:	e7e0      	b.n	800a0aa <_printf_float+0x192>
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	055a      	lsls	r2, r3, #21
 800a0ec:	d407      	bmi.n	800a0fe <_printf_float+0x1e6>
 800a0ee:	6923      	ldr	r3, [r4, #16]
 800a0f0:	4642      	mov	r2, r8
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	47b8      	blx	r7
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d12b      	bne.n	800a154 <_printf_float+0x23c>
 800a0fc:	e767      	b.n	8009fce <_printf_float+0xb6>
 800a0fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a102:	f240 80dd 	bls.w	800a2c0 <_printf_float+0x3a8>
 800a106:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a10a:	2200      	movs	r2, #0
 800a10c:	2300      	movs	r3, #0
 800a10e:	f7f6 fd13 	bl	8000b38 <__aeabi_dcmpeq>
 800a112:	2800      	cmp	r0, #0
 800a114:	d033      	beq.n	800a17e <_printf_float+0x266>
 800a116:	4a37      	ldr	r2, [pc, #220]	@ (800a1f4 <_printf_float+0x2dc>)
 800a118:	2301      	movs	r3, #1
 800a11a:	4631      	mov	r1, r6
 800a11c:	4628      	mov	r0, r5
 800a11e:	47b8      	blx	r7
 800a120:	3001      	adds	r0, #1
 800a122:	f43f af54 	beq.w	8009fce <_printf_float+0xb6>
 800a126:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a12a:	4543      	cmp	r3, r8
 800a12c:	db02      	blt.n	800a134 <_printf_float+0x21c>
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	07d8      	lsls	r0, r3, #31
 800a132:	d50f      	bpl.n	800a154 <_printf_float+0x23c>
 800a134:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a138:	4631      	mov	r1, r6
 800a13a:	4628      	mov	r0, r5
 800a13c:	47b8      	blx	r7
 800a13e:	3001      	adds	r0, #1
 800a140:	f43f af45 	beq.w	8009fce <_printf_float+0xb6>
 800a144:	f04f 0900 	mov.w	r9, #0
 800a148:	f108 38ff 	add.w	r8, r8, #4294967295
 800a14c:	f104 0a1a 	add.w	sl, r4, #26
 800a150:	45c8      	cmp	r8, r9
 800a152:	dc09      	bgt.n	800a168 <_printf_float+0x250>
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	079b      	lsls	r3, r3, #30
 800a158:	f100 8103 	bmi.w	800a362 <_printf_float+0x44a>
 800a15c:	68e0      	ldr	r0, [r4, #12]
 800a15e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a160:	4298      	cmp	r0, r3
 800a162:	bfb8      	it	lt
 800a164:	4618      	movlt	r0, r3
 800a166:	e734      	b.n	8009fd2 <_printf_float+0xba>
 800a168:	2301      	movs	r3, #1
 800a16a:	4652      	mov	r2, sl
 800a16c:	4631      	mov	r1, r6
 800a16e:	4628      	mov	r0, r5
 800a170:	47b8      	blx	r7
 800a172:	3001      	adds	r0, #1
 800a174:	f43f af2b 	beq.w	8009fce <_printf_float+0xb6>
 800a178:	f109 0901 	add.w	r9, r9, #1
 800a17c:	e7e8      	b.n	800a150 <_printf_float+0x238>
 800a17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a180:	2b00      	cmp	r3, #0
 800a182:	dc39      	bgt.n	800a1f8 <_printf_float+0x2e0>
 800a184:	4a1b      	ldr	r2, [pc, #108]	@ (800a1f4 <_printf_float+0x2dc>)
 800a186:	2301      	movs	r3, #1
 800a188:	4631      	mov	r1, r6
 800a18a:	4628      	mov	r0, r5
 800a18c:	47b8      	blx	r7
 800a18e:	3001      	adds	r0, #1
 800a190:	f43f af1d 	beq.w	8009fce <_printf_float+0xb6>
 800a194:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a198:	ea59 0303 	orrs.w	r3, r9, r3
 800a19c:	d102      	bne.n	800a1a4 <_printf_float+0x28c>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	07d9      	lsls	r1, r3, #31
 800a1a2:	d5d7      	bpl.n	800a154 <_printf_float+0x23c>
 800a1a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1a8:	4631      	mov	r1, r6
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	47b8      	blx	r7
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	f43f af0d 	beq.w	8009fce <_printf_float+0xb6>
 800a1b4:	f04f 0a00 	mov.w	sl, #0
 800a1b8:	f104 0b1a 	add.w	fp, r4, #26
 800a1bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1be:	425b      	negs	r3, r3
 800a1c0:	4553      	cmp	r3, sl
 800a1c2:	dc01      	bgt.n	800a1c8 <_printf_float+0x2b0>
 800a1c4:	464b      	mov	r3, r9
 800a1c6:	e793      	b.n	800a0f0 <_printf_float+0x1d8>
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	465a      	mov	r2, fp
 800a1cc:	4631      	mov	r1, r6
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	47b8      	blx	r7
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	f43f aefb 	beq.w	8009fce <_printf_float+0xb6>
 800a1d8:	f10a 0a01 	add.w	sl, sl, #1
 800a1dc:	e7ee      	b.n	800a1bc <_printf_float+0x2a4>
 800a1de:	bf00      	nop
 800a1e0:	7fefffff 	.word	0x7fefffff
 800a1e4:	0800e97d 	.word	0x0800e97d
 800a1e8:	0800e981 	.word	0x0800e981
 800a1ec:	0800e985 	.word	0x0800e985
 800a1f0:	0800e989 	.word	0x0800e989
 800a1f4:	0800e98d 	.word	0x0800e98d
 800a1f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a1fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a1fe:	4553      	cmp	r3, sl
 800a200:	bfa8      	it	ge
 800a202:	4653      	movge	r3, sl
 800a204:	2b00      	cmp	r3, #0
 800a206:	4699      	mov	r9, r3
 800a208:	dc36      	bgt.n	800a278 <_printf_float+0x360>
 800a20a:	f04f 0b00 	mov.w	fp, #0
 800a20e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a212:	f104 021a 	add.w	r2, r4, #26
 800a216:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a218:	9306      	str	r3, [sp, #24]
 800a21a:	eba3 0309 	sub.w	r3, r3, r9
 800a21e:	455b      	cmp	r3, fp
 800a220:	dc31      	bgt.n	800a286 <_printf_float+0x36e>
 800a222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a224:	459a      	cmp	sl, r3
 800a226:	dc3a      	bgt.n	800a29e <_printf_float+0x386>
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	07da      	lsls	r2, r3, #31
 800a22c:	d437      	bmi.n	800a29e <_printf_float+0x386>
 800a22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a230:	ebaa 0903 	sub.w	r9, sl, r3
 800a234:	9b06      	ldr	r3, [sp, #24]
 800a236:	ebaa 0303 	sub.w	r3, sl, r3
 800a23a:	4599      	cmp	r9, r3
 800a23c:	bfa8      	it	ge
 800a23e:	4699      	movge	r9, r3
 800a240:	f1b9 0f00 	cmp.w	r9, #0
 800a244:	dc33      	bgt.n	800a2ae <_printf_float+0x396>
 800a246:	f04f 0800 	mov.w	r8, #0
 800a24a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a24e:	f104 0b1a 	add.w	fp, r4, #26
 800a252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a254:	ebaa 0303 	sub.w	r3, sl, r3
 800a258:	eba3 0309 	sub.w	r3, r3, r9
 800a25c:	4543      	cmp	r3, r8
 800a25e:	f77f af79 	ble.w	800a154 <_printf_float+0x23c>
 800a262:	2301      	movs	r3, #1
 800a264:	465a      	mov	r2, fp
 800a266:	4631      	mov	r1, r6
 800a268:	4628      	mov	r0, r5
 800a26a:	47b8      	blx	r7
 800a26c:	3001      	adds	r0, #1
 800a26e:	f43f aeae 	beq.w	8009fce <_printf_float+0xb6>
 800a272:	f108 0801 	add.w	r8, r8, #1
 800a276:	e7ec      	b.n	800a252 <_printf_float+0x33a>
 800a278:	4642      	mov	r2, r8
 800a27a:	4631      	mov	r1, r6
 800a27c:	4628      	mov	r0, r5
 800a27e:	47b8      	blx	r7
 800a280:	3001      	adds	r0, #1
 800a282:	d1c2      	bne.n	800a20a <_printf_float+0x2f2>
 800a284:	e6a3      	b.n	8009fce <_printf_float+0xb6>
 800a286:	2301      	movs	r3, #1
 800a288:	4631      	mov	r1, r6
 800a28a:	4628      	mov	r0, r5
 800a28c:	9206      	str	r2, [sp, #24]
 800a28e:	47b8      	blx	r7
 800a290:	3001      	adds	r0, #1
 800a292:	f43f ae9c 	beq.w	8009fce <_printf_float+0xb6>
 800a296:	9a06      	ldr	r2, [sp, #24]
 800a298:	f10b 0b01 	add.w	fp, fp, #1
 800a29c:	e7bb      	b.n	800a216 <_printf_float+0x2fe>
 800a29e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	47b8      	blx	r7
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d1c0      	bne.n	800a22e <_printf_float+0x316>
 800a2ac:	e68f      	b.n	8009fce <_printf_float+0xb6>
 800a2ae:	9a06      	ldr	r2, [sp, #24]
 800a2b0:	464b      	mov	r3, r9
 800a2b2:	4442      	add	r2, r8
 800a2b4:	4631      	mov	r1, r6
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	47b8      	blx	r7
 800a2ba:	3001      	adds	r0, #1
 800a2bc:	d1c3      	bne.n	800a246 <_printf_float+0x32e>
 800a2be:	e686      	b.n	8009fce <_printf_float+0xb6>
 800a2c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a2c4:	f1ba 0f01 	cmp.w	sl, #1
 800a2c8:	dc01      	bgt.n	800a2ce <_printf_float+0x3b6>
 800a2ca:	07db      	lsls	r3, r3, #31
 800a2cc:	d536      	bpl.n	800a33c <_printf_float+0x424>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	4642      	mov	r2, r8
 800a2d2:	4631      	mov	r1, r6
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	47b8      	blx	r7
 800a2d8:	3001      	adds	r0, #1
 800a2da:	f43f ae78 	beq.w	8009fce <_printf_float+0xb6>
 800a2de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	47b8      	blx	r7
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	f43f ae70 	beq.w	8009fce <_printf_float+0xb6>
 800a2ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2fa:	f7f6 fc1d 	bl	8000b38 <__aeabi_dcmpeq>
 800a2fe:	b9c0      	cbnz	r0, 800a332 <_printf_float+0x41a>
 800a300:	4653      	mov	r3, sl
 800a302:	f108 0201 	add.w	r2, r8, #1
 800a306:	4631      	mov	r1, r6
 800a308:	4628      	mov	r0, r5
 800a30a:	47b8      	blx	r7
 800a30c:	3001      	adds	r0, #1
 800a30e:	d10c      	bne.n	800a32a <_printf_float+0x412>
 800a310:	e65d      	b.n	8009fce <_printf_float+0xb6>
 800a312:	2301      	movs	r3, #1
 800a314:	465a      	mov	r2, fp
 800a316:	4631      	mov	r1, r6
 800a318:	4628      	mov	r0, r5
 800a31a:	47b8      	blx	r7
 800a31c:	3001      	adds	r0, #1
 800a31e:	f43f ae56 	beq.w	8009fce <_printf_float+0xb6>
 800a322:	f108 0801 	add.w	r8, r8, #1
 800a326:	45d0      	cmp	r8, sl
 800a328:	dbf3      	blt.n	800a312 <_printf_float+0x3fa>
 800a32a:	464b      	mov	r3, r9
 800a32c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a330:	e6df      	b.n	800a0f2 <_printf_float+0x1da>
 800a332:	f04f 0800 	mov.w	r8, #0
 800a336:	f104 0b1a 	add.w	fp, r4, #26
 800a33a:	e7f4      	b.n	800a326 <_printf_float+0x40e>
 800a33c:	2301      	movs	r3, #1
 800a33e:	4642      	mov	r2, r8
 800a340:	e7e1      	b.n	800a306 <_printf_float+0x3ee>
 800a342:	2301      	movs	r3, #1
 800a344:	464a      	mov	r2, r9
 800a346:	4631      	mov	r1, r6
 800a348:	4628      	mov	r0, r5
 800a34a:	47b8      	blx	r7
 800a34c:	3001      	adds	r0, #1
 800a34e:	f43f ae3e 	beq.w	8009fce <_printf_float+0xb6>
 800a352:	f108 0801 	add.w	r8, r8, #1
 800a356:	68e3      	ldr	r3, [r4, #12]
 800a358:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a35a:	1a5b      	subs	r3, r3, r1
 800a35c:	4543      	cmp	r3, r8
 800a35e:	dcf0      	bgt.n	800a342 <_printf_float+0x42a>
 800a360:	e6fc      	b.n	800a15c <_printf_float+0x244>
 800a362:	f04f 0800 	mov.w	r8, #0
 800a366:	f104 0919 	add.w	r9, r4, #25
 800a36a:	e7f4      	b.n	800a356 <_printf_float+0x43e>

0800a36c <_printf_common>:
 800a36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a370:	4616      	mov	r6, r2
 800a372:	4698      	mov	r8, r3
 800a374:	688a      	ldr	r2, [r1, #8]
 800a376:	690b      	ldr	r3, [r1, #16]
 800a378:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a37c:	4293      	cmp	r3, r2
 800a37e:	bfb8      	it	lt
 800a380:	4613      	movlt	r3, r2
 800a382:	6033      	str	r3, [r6, #0]
 800a384:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a388:	4607      	mov	r7, r0
 800a38a:	460c      	mov	r4, r1
 800a38c:	b10a      	cbz	r2, 800a392 <_printf_common+0x26>
 800a38e:	3301      	adds	r3, #1
 800a390:	6033      	str	r3, [r6, #0]
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	0699      	lsls	r1, r3, #26
 800a396:	bf42      	ittt	mi
 800a398:	6833      	ldrmi	r3, [r6, #0]
 800a39a:	3302      	addmi	r3, #2
 800a39c:	6033      	strmi	r3, [r6, #0]
 800a39e:	6825      	ldr	r5, [r4, #0]
 800a3a0:	f015 0506 	ands.w	r5, r5, #6
 800a3a4:	d106      	bne.n	800a3b4 <_printf_common+0x48>
 800a3a6:	f104 0a19 	add.w	sl, r4, #25
 800a3aa:	68e3      	ldr	r3, [r4, #12]
 800a3ac:	6832      	ldr	r2, [r6, #0]
 800a3ae:	1a9b      	subs	r3, r3, r2
 800a3b0:	42ab      	cmp	r3, r5
 800a3b2:	dc26      	bgt.n	800a402 <_printf_common+0x96>
 800a3b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3b8:	6822      	ldr	r2, [r4, #0]
 800a3ba:	3b00      	subs	r3, #0
 800a3bc:	bf18      	it	ne
 800a3be:	2301      	movne	r3, #1
 800a3c0:	0692      	lsls	r2, r2, #26
 800a3c2:	d42b      	bmi.n	800a41c <_printf_common+0xb0>
 800a3c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a3c8:	4641      	mov	r1, r8
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	47c8      	blx	r9
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	d01e      	beq.n	800a410 <_printf_common+0xa4>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	6922      	ldr	r2, [r4, #16]
 800a3d6:	f003 0306 	and.w	r3, r3, #6
 800a3da:	2b04      	cmp	r3, #4
 800a3dc:	bf02      	ittt	eq
 800a3de:	68e5      	ldreq	r5, [r4, #12]
 800a3e0:	6833      	ldreq	r3, [r6, #0]
 800a3e2:	1aed      	subeq	r5, r5, r3
 800a3e4:	68a3      	ldr	r3, [r4, #8]
 800a3e6:	bf0c      	ite	eq
 800a3e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3ec:	2500      	movne	r5, #0
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	bfc4      	itt	gt
 800a3f2:	1a9b      	subgt	r3, r3, r2
 800a3f4:	18ed      	addgt	r5, r5, r3
 800a3f6:	2600      	movs	r6, #0
 800a3f8:	341a      	adds	r4, #26
 800a3fa:	42b5      	cmp	r5, r6
 800a3fc:	d11a      	bne.n	800a434 <_printf_common+0xc8>
 800a3fe:	2000      	movs	r0, #0
 800a400:	e008      	b.n	800a414 <_printf_common+0xa8>
 800a402:	2301      	movs	r3, #1
 800a404:	4652      	mov	r2, sl
 800a406:	4641      	mov	r1, r8
 800a408:	4638      	mov	r0, r7
 800a40a:	47c8      	blx	r9
 800a40c:	3001      	adds	r0, #1
 800a40e:	d103      	bne.n	800a418 <_printf_common+0xac>
 800a410:	f04f 30ff 	mov.w	r0, #4294967295
 800a414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a418:	3501      	adds	r5, #1
 800a41a:	e7c6      	b.n	800a3aa <_printf_common+0x3e>
 800a41c:	18e1      	adds	r1, r4, r3
 800a41e:	1c5a      	adds	r2, r3, #1
 800a420:	2030      	movs	r0, #48	@ 0x30
 800a422:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a426:	4422      	add	r2, r4
 800a428:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a42c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a430:	3302      	adds	r3, #2
 800a432:	e7c7      	b.n	800a3c4 <_printf_common+0x58>
 800a434:	2301      	movs	r3, #1
 800a436:	4622      	mov	r2, r4
 800a438:	4641      	mov	r1, r8
 800a43a:	4638      	mov	r0, r7
 800a43c:	47c8      	blx	r9
 800a43e:	3001      	adds	r0, #1
 800a440:	d0e6      	beq.n	800a410 <_printf_common+0xa4>
 800a442:	3601      	adds	r6, #1
 800a444:	e7d9      	b.n	800a3fa <_printf_common+0x8e>
	...

0800a448 <_printf_i>:
 800a448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a44c:	7e0f      	ldrb	r7, [r1, #24]
 800a44e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a450:	2f78      	cmp	r7, #120	@ 0x78
 800a452:	4691      	mov	r9, r2
 800a454:	4680      	mov	r8, r0
 800a456:	460c      	mov	r4, r1
 800a458:	469a      	mov	sl, r3
 800a45a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a45e:	d807      	bhi.n	800a470 <_printf_i+0x28>
 800a460:	2f62      	cmp	r7, #98	@ 0x62
 800a462:	d80a      	bhi.n	800a47a <_printf_i+0x32>
 800a464:	2f00      	cmp	r7, #0
 800a466:	f000 80d2 	beq.w	800a60e <_printf_i+0x1c6>
 800a46a:	2f58      	cmp	r7, #88	@ 0x58
 800a46c:	f000 80b9 	beq.w	800a5e2 <_printf_i+0x19a>
 800a470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a474:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a478:	e03a      	b.n	800a4f0 <_printf_i+0xa8>
 800a47a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a47e:	2b15      	cmp	r3, #21
 800a480:	d8f6      	bhi.n	800a470 <_printf_i+0x28>
 800a482:	a101      	add	r1, pc, #4	@ (adr r1, 800a488 <_printf_i+0x40>)
 800a484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a488:	0800a4e1 	.word	0x0800a4e1
 800a48c:	0800a4f5 	.word	0x0800a4f5
 800a490:	0800a471 	.word	0x0800a471
 800a494:	0800a471 	.word	0x0800a471
 800a498:	0800a471 	.word	0x0800a471
 800a49c:	0800a471 	.word	0x0800a471
 800a4a0:	0800a4f5 	.word	0x0800a4f5
 800a4a4:	0800a471 	.word	0x0800a471
 800a4a8:	0800a471 	.word	0x0800a471
 800a4ac:	0800a471 	.word	0x0800a471
 800a4b0:	0800a471 	.word	0x0800a471
 800a4b4:	0800a5f5 	.word	0x0800a5f5
 800a4b8:	0800a51f 	.word	0x0800a51f
 800a4bc:	0800a5af 	.word	0x0800a5af
 800a4c0:	0800a471 	.word	0x0800a471
 800a4c4:	0800a471 	.word	0x0800a471
 800a4c8:	0800a617 	.word	0x0800a617
 800a4cc:	0800a471 	.word	0x0800a471
 800a4d0:	0800a51f 	.word	0x0800a51f
 800a4d4:	0800a471 	.word	0x0800a471
 800a4d8:	0800a471 	.word	0x0800a471
 800a4dc:	0800a5b7 	.word	0x0800a5b7
 800a4e0:	6833      	ldr	r3, [r6, #0]
 800a4e2:	1d1a      	adds	r2, r3, #4
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	6032      	str	r2, [r6, #0]
 800a4e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e09d      	b.n	800a630 <_printf_i+0x1e8>
 800a4f4:	6833      	ldr	r3, [r6, #0]
 800a4f6:	6820      	ldr	r0, [r4, #0]
 800a4f8:	1d19      	adds	r1, r3, #4
 800a4fa:	6031      	str	r1, [r6, #0]
 800a4fc:	0606      	lsls	r6, r0, #24
 800a4fe:	d501      	bpl.n	800a504 <_printf_i+0xbc>
 800a500:	681d      	ldr	r5, [r3, #0]
 800a502:	e003      	b.n	800a50c <_printf_i+0xc4>
 800a504:	0645      	lsls	r5, r0, #25
 800a506:	d5fb      	bpl.n	800a500 <_printf_i+0xb8>
 800a508:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a50c:	2d00      	cmp	r5, #0
 800a50e:	da03      	bge.n	800a518 <_printf_i+0xd0>
 800a510:	232d      	movs	r3, #45	@ 0x2d
 800a512:	426d      	negs	r5, r5
 800a514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a518:	4859      	ldr	r0, [pc, #356]	@ (800a680 <_printf_i+0x238>)
 800a51a:	230a      	movs	r3, #10
 800a51c:	e011      	b.n	800a542 <_printf_i+0xfa>
 800a51e:	6821      	ldr	r1, [r4, #0]
 800a520:	6833      	ldr	r3, [r6, #0]
 800a522:	0608      	lsls	r0, r1, #24
 800a524:	f853 5b04 	ldr.w	r5, [r3], #4
 800a528:	d402      	bmi.n	800a530 <_printf_i+0xe8>
 800a52a:	0649      	lsls	r1, r1, #25
 800a52c:	bf48      	it	mi
 800a52e:	b2ad      	uxthmi	r5, r5
 800a530:	2f6f      	cmp	r7, #111	@ 0x6f
 800a532:	4853      	ldr	r0, [pc, #332]	@ (800a680 <_printf_i+0x238>)
 800a534:	6033      	str	r3, [r6, #0]
 800a536:	bf14      	ite	ne
 800a538:	230a      	movne	r3, #10
 800a53a:	2308      	moveq	r3, #8
 800a53c:	2100      	movs	r1, #0
 800a53e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a542:	6866      	ldr	r6, [r4, #4]
 800a544:	60a6      	str	r6, [r4, #8]
 800a546:	2e00      	cmp	r6, #0
 800a548:	bfa2      	ittt	ge
 800a54a:	6821      	ldrge	r1, [r4, #0]
 800a54c:	f021 0104 	bicge.w	r1, r1, #4
 800a550:	6021      	strge	r1, [r4, #0]
 800a552:	b90d      	cbnz	r5, 800a558 <_printf_i+0x110>
 800a554:	2e00      	cmp	r6, #0
 800a556:	d04b      	beq.n	800a5f0 <_printf_i+0x1a8>
 800a558:	4616      	mov	r6, r2
 800a55a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a55e:	fb03 5711 	mls	r7, r3, r1, r5
 800a562:	5dc7      	ldrb	r7, [r0, r7]
 800a564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a568:	462f      	mov	r7, r5
 800a56a:	42bb      	cmp	r3, r7
 800a56c:	460d      	mov	r5, r1
 800a56e:	d9f4      	bls.n	800a55a <_printf_i+0x112>
 800a570:	2b08      	cmp	r3, #8
 800a572:	d10b      	bne.n	800a58c <_printf_i+0x144>
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	07df      	lsls	r7, r3, #31
 800a578:	d508      	bpl.n	800a58c <_printf_i+0x144>
 800a57a:	6923      	ldr	r3, [r4, #16]
 800a57c:	6861      	ldr	r1, [r4, #4]
 800a57e:	4299      	cmp	r1, r3
 800a580:	bfde      	ittt	le
 800a582:	2330      	movle	r3, #48	@ 0x30
 800a584:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a588:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a58c:	1b92      	subs	r2, r2, r6
 800a58e:	6122      	str	r2, [r4, #16]
 800a590:	f8cd a000 	str.w	sl, [sp]
 800a594:	464b      	mov	r3, r9
 800a596:	aa03      	add	r2, sp, #12
 800a598:	4621      	mov	r1, r4
 800a59a:	4640      	mov	r0, r8
 800a59c:	f7ff fee6 	bl	800a36c <_printf_common>
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d14a      	bne.n	800a63a <_printf_i+0x1f2>
 800a5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a8:	b004      	add	sp, #16
 800a5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ae:	6823      	ldr	r3, [r4, #0]
 800a5b0:	f043 0320 	orr.w	r3, r3, #32
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	4833      	ldr	r0, [pc, #204]	@ (800a684 <_printf_i+0x23c>)
 800a5b8:	2778      	movs	r7, #120	@ 0x78
 800a5ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	6831      	ldr	r1, [r6, #0]
 800a5c2:	061f      	lsls	r7, r3, #24
 800a5c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a5c8:	d402      	bmi.n	800a5d0 <_printf_i+0x188>
 800a5ca:	065f      	lsls	r7, r3, #25
 800a5cc:	bf48      	it	mi
 800a5ce:	b2ad      	uxthmi	r5, r5
 800a5d0:	6031      	str	r1, [r6, #0]
 800a5d2:	07d9      	lsls	r1, r3, #31
 800a5d4:	bf44      	itt	mi
 800a5d6:	f043 0320 	orrmi.w	r3, r3, #32
 800a5da:	6023      	strmi	r3, [r4, #0]
 800a5dc:	b11d      	cbz	r5, 800a5e6 <_printf_i+0x19e>
 800a5de:	2310      	movs	r3, #16
 800a5e0:	e7ac      	b.n	800a53c <_printf_i+0xf4>
 800a5e2:	4827      	ldr	r0, [pc, #156]	@ (800a680 <_printf_i+0x238>)
 800a5e4:	e7e9      	b.n	800a5ba <_printf_i+0x172>
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	f023 0320 	bic.w	r3, r3, #32
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	e7f6      	b.n	800a5de <_printf_i+0x196>
 800a5f0:	4616      	mov	r6, r2
 800a5f2:	e7bd      	b.n	800a570 <_printf_i+0x128>
 800a5f4:	6833      	ldr	r3, [r6, #0]
 800a5f6:	6825      	ldr	r5, [r4, #0]
 800a5f8:	6961      	ldr	r1, [r4, #20]
 800a5fa:	1d18      	adds	r0, r3, #4
 800a5fc:	6030      	str	r0, [r6, #0]
 800a5fe:	062e      	lsls	r6, r5, #24
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	d501      	bpl.n	800a608 <_printf_i+0x1c0>
 800a604:	6019      	str	r1, [r3, #0]
 800a606:	e002      	b.n	800a60e <_printf_i+0x1c6>
 800a608:	0668      	lsls	r0, r5, #25
 800a60a:	d5fb      	bpl.n	800a604 <_printf_i+0x1bc>
 800a60c:	8019      	strh	r1, [r3, #0]
 800a60e:	2300      	movs	r3, #0
 800a610:	6123      	str	r3, [r4, #16]
 800a612:	4616      	mov	r6, r2
 800a614:	e7bc      	b.n	800a590 <_printf_i+0x148>
 800a616:	6833      	ldr	r3, [r6, #0]
 800a618:	1d1a      	adds	r2, r3, #4
 800a61a:	6032      	str	r2, [r6, #0]
 800a61c:	681e      	ldr	r6, [r3, #0]
 800a61e:	6862      	ldr	r2, [r4, #4]
 800a620:	2100      	movs	r1, #0
 800a622:	4630      	mov	r0, r6
 800a624:	f7f5 fe0c 	bl	8000240 <memchr>
 800a628:	b108      	cbz	r0, 800a62e <_printf_i+0x1e6>
 800a62a:	1b80      	subs	r0, r0, r6
 800a62c:	6060      	str	r0, [r4, #4]
 800a62e:	6863      	ldr	r3, [r4, #4]
 800a630:	6123      	str	r3, [r4, #16]
 800a632:	2300      	movs	r3, #0
 800a634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a638:	e7aa      	b.n	800a590 <_printf_i+0x148>
 800a63a:	6923      	ldr	r3, [r4, #16]
 800a63c:	4632      	mov	r2, r6
 800a63e:	4649      	mov	r1, r9
 800a640:	4640      	mov	r0, r8
 800a642:	47d0      	blx	sl
 800a644:	3001      	adds	r0, #1
 800a646:	d0ad      	beq.n	800a5a4 <_printf_i+0x15c>
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	079b      	lsls	r3, r3, #30
 800a64c:	d413      	bmi.n	800a676 <_printf_i+0x22e>
 800a64e:	68e0      	ldr	r0, [r4, #12]
 800a650:	9b03      	ldr	r3, [sp, #12]
 800a652:	4298      	cmp	r0, r3
 800a654:	bfb8      	it	lt
 800a656:	4618      	movlt	r0, r3
 800a658:	e7a6      	b.n	800a5a8 <_printf_i+0x160>
 800a65a:	2301      	movs	r3, #1
 800a65c:	4632      	mov	r2, r6
 800a65e:	4649      	mov	r1, r9
 800a660:	4640      	mov	r0, r8
 800a662:	47d0      	blx	sl
 800a664:	3001      	adds	r0, #1
 800a666:	d09d      	beq.n	800a5a4 <_printf_i+0x15c>
 800a668:	3501      	adds	r5, #1
 800a66a:	68e3      	ldr	r3, [r4, #12]
 800a66c:	9903      	ldr	r1, [sp, #12]
 800a66e:	1a5b      	subs	r3, r3, r1
 800a670:	42ab      	cmp	r3, r5
 800a672:	dcf2      	bgt.n	800a65a <_printf_i+0x212>
 800a674:	e7eb      	b.n	800a64e <_printf_i+0x206>
 800a676:	2500      	movs	r5, #0
 800a678:	f104 0619 	add.w	r6, r4, #25
 800a67c:	e7f5      	b.n	800a66a <_printf_i+0x222>
 800a67e:	bf00      	nop
 800a680:	0800e98f 	.word	0x0800e98f
 800a684:	0800e9a0 	.word	0x0800e9a0

0800a688 <_scanf_float>:
 800a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	b087      	sub	sp, #28
 800a68e:	4617      	mov	r7, r2
 800a690:	9303      	str	r3, [sp, #12]
 800a692:	688b      	ldr	r3, [r1, #8]
 800a694:	1e5a      	subs	r2, r3, #1
 800a696:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a69a:	bf81      	itttt	hi
 800a69c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a6a0:	eb03 0b05 	addhi.w	fp, r3, r5
 800a6a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a6a8:	608b      	strhi	r3, [r1, #8]
 800a6aa:	680b      	ldr	r3, [r1, #0]
 800a6ac:	460a      	mov	r2, r1
 800a6ae:	f04f 0500 	mov.w	r5, #0
 800a6b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a6b6:	f842 3b1c 	str.w	r3, [r2], #28
 800a6ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a6be:	4680      	mov	r8, r0
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	bf98      	it	ls
 800a6c4:	f04f 0b00 	movls.w	fp, #0
 800a6c8:	9201      	str	r2, [sp, #4]
 800a6ca:	4616      	mov	r6, r2
 800a6cc:	46aa      	mov	sl, r5
 800a6ce:	46a9      	mov	r9, r5
 800a6d0:	9502      	str	r5, [sp, #8]
 800a6d2:	68a2      	ldr	r2, [r4, #8]
 800a6d4:	b152      	cbz	r2, 800a6ec <_scanf_float+0x64>
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	2b4e      	cmp	r3, #78	@ 0x4e
 800a6dc:	d864      	bhi.n	800a7a8 <_scanf_float+0x120>
 800a6de:	2b40      	cmp	r3, #64	@ 0x40
 800a6e0:	d83c      	bhi.n	800a75c <_scanf_float+0xd4>
 800a6e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a6e6:	b2c8      	uxtb	r0, r1
 800a6e8:	280e      	cmp	r0, #14
 800a6ea:	d93a      	bls.n	800a762 <_scanf_float+0xda>
 800a6ec:	f1b9 0f00 	cmp.w	r9, #0
 800a6f0:	d003      	beq.n	800a6fa <_scanf_float+0x72>
 800a6f2:	6823      	ldr	r3, [r4, #0]
 800a6f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6fe:	f1ba 0f01 	cmp.w	sl, #1
 800a702:	f200 8117 	bhi.w	800a934 <_scanf_float+0x2ac>
 800a706:	9b01      	ldr	r3, [sp, #4]
 800a708:	429e      	cmp	r6, r3
 800a70a:	f200 8108 	bhi.w	800a91e <_scanf_float+0x296>
 800a70e:	2001      	movs	r0, #1
 800a710:	b007      	add	sp, #28
 800a712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a716:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a71a:	2a0d      	cmp	r2, #13
 800a71c:	d8e6      	bhi.n	800a6ec <_scanf_float+0x64>
 800a71e:	a101      	add	r1, pc, #4	@ (adr r1, 800a724 <_scanf_float+0x9c>)
 800a720:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a724:	0800a86b 	.word	0x0800a86b
 800a728:	0800a6ed 	.word	0x0800a6ed
 800a72c:	0800a6ed 	.word	0x0800a6ed
 800a730:	0800a6ed 	.word	0x0800a6ed
 800a734:	0800a8cb 	.word	0x0800a8cb
 800a738:	0800a8a3 	.word	0x0800a8a3
 800a73c:	0800a6ed 	.word	0x0800a6ed
 800a740:	0800a6ed 	.word	0x0800a6ed
 800a744:	0800a879 	.word	0x0800a879
 800a748:	0800a6ed 	.word	0x0800a6ed
 800a74c:	0800a6ed 	.word	0x0800a6ed
 800a750:	0800a6ed 	.word	0x0800a6ed
 800a754:	0800a6ed 	.word	0x0800a6ed
 800a758:	0800a831 	.word	0x0800a831
 800a75c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a760:	e7db      	b.n	800a71a <_scanf_float+0x92>
 800a762:	290e      	cmp	r1, #14
 800a764:	d8c2      	bhi.n	800a6ec <_scanf_float+0x64>
 800a766:	a001      	add	r0, pc, #4	@ (adr r0, 800a76c <_scanf_float+0xe4>)
 800a768:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a76c:	0800a821 	.word	0x0800a821
 800a770:	0800a6ed 	.word	0x0800a6ed
 800a774:	0800a821 	.word	0x0800a821
 800a778:	0800a8b7 	.word	0x0800a8b7
 800a77c:	0800a6ed 	.word	0x0800a6ed
 800a780:	0800a7c9 	.word	0x0800a7c9
 800a784:	0800a807 	.word	0x0800a807
 800a788:	0800a807 	.word	0x0800a807
 800a78c:	0800a807 	.word	0x0800a807
 800a790:	0800a807 	.word	0x0800a807
 800a794:	0800a807 	.word	0x0800a807
 800a798:	0800a807 	.word	0x0800a807
 800a79c:	0800a807 	.word	0x0800a807
 800a7a0:	0800a807 	.word	0x0800a807
 800a7a4:	0800a807 	.word	0x0800a807
 800a7a8:	2b6e      	cmp	r3, #110	@ 0x6e
 800a7aa:	d809      	bhi.n	800a7c0 <_scanf_float+0x138>
 800a7ac:	2b60      	cmp	r3, #96	@ 0x60
 800a7ae:	d8b2      	bhi.n	800a716 <_scanf_float+0x8e>
 800a7b0:	2b54      	cmp	r3, #84	@ 0x54
 800a7b2:	d07b      	beq.n	800a8ac <_scanf_float+0x224>
 800a7b4:	2b59      	cmp	r3, #89	@ 0x59
 800a7b6:	d199      	bne.n	800a6ec <_scanf_float+0x64>
 800a7b8:	2d07      	cmp	r5, #7
 800a7ba:	d197      	bne.n	800a6ec <_scanf_float+0x64>
 800a7bc:	2508      	movs	r5, #8
 800a7be:	e02c      	b.n	800a81a <_scanf_float+0x192>
 800a7c0:	2b74      	cmp	r3, #116	@ 0x74
 800a7c2:	d073      	beq.n	800a8ac <_scanf_float+0x224>
 800a7c4:	2b79      	cmp	r3, #121	@ 0x79
 800a7c6:	e7f6      	b.n	800a7b6 <_scanf_float+0x12e>
 800a7c8:	6821      	ldr	r1, [r4, #0]
 800a7ca:	05c8      	lsls	r0, r1, #23
 800a7cc:	d51b      	bpl.n	800a806 <_scanf_float+0x17e>
 800a7ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a7d2:	6021      	str	r1, [r4, #0]
 800a7d4:	f109 0901 	add.w	r9, r9, #1
 800a7d8:	f1bb 0f00 	cmp.w	fp, #0
 800a7dc:	d003      	beq.n	800a7e6 <_scanf_float+0x15e>
 800a7de:	3201      	adds	r2, #1
 800a7e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a7e4:	60a2      	str	r2, [r4, #8]
 800a7e6:	68a3      	ldr	r3, [r4, #8]
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	60a3      	str	r3, [r4, #8]
 800a7ec:	6923      	ldr	r3, [r4, #16]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	6123      	str	r3, [r4, #16]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	607b      	str	r3, [r7, #4]
 800a7fa:	f340 8087 	ble.w	800a90c <_scanf_float+0x284>
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	3301      	adds	r3, #1
 800a802:	603b      	str	r3, [r7, #0]
 800a804:	e765      	b.n	800a6d2 <_scanf_float+0x4a>
 800a806:	eb1a 0105 	adds.w	r1, sl, r5
 800a80a:	f47f af6f 	bne.w	800a6ec <_scanf_float+0x64>
 800a80e:	6822      	ldr	r2, [r4, #0]
 800a810:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a814:	6022      	str	r2, [r4, #0]
 800a816:	460d      	mov	r5, r1
 800a818:	468a      	mov	sl, r1
 800a81a:	f806 3b01 	strb.w	r3, [r6], #1
 800a81e:	e7e2      	b.n	800a7e6 <_scanf_float+0x15e>
 800a820:	6822      	ldr	r2, [r4, #0]
 800a822:	0610      	lsls	r0, r2, #24
 800a824:	f57f af62 	bpl.w	800a6ec <_scanf_float+0x64>
 800a828:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a82c:	6022      	str	r2, [r4, #0]
 800a82e:	e7f4      	b.n	800a81a <_scanf_float+0x192>
 800a830:	f1ba 0f00 	cmp.w	sl, #0
 800a834:	d10e      	bne.n	800a854 <_scanf_float+0x1cc>
 800a836:	f1b9 0f00 	cmp.w	r9, #0
 800a83a:	d10e      	bne.n	800a85a <_scanf_float+0x1d2>
 800a83c:	6822      	ldr	r2, [r4, #0]
 800a83e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a842:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a846:	d108      	bne.n	800a85a <_scanf_float+0x1d2>
 800a848:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a84c:	6022      	str	r2, [r4, #0]
 800a84e:	f04f 0a01 	mov.w	sl, #1
 800a852:	e7e2      	b.n	800a81a <_scanf_float+0x192>
 800a854:	f1ba 0f02 	cmp.w	sl, #2
 800a858:	d055      	beq.n	800a906 <_scanf_float+0x27e>
 800a85a:	2d01      	cmp	r5, #1
 800a85c:	d002      	beq.n	800a864 <_scanf_float+0x1dc>
 800a85e:	2d04      	cmp	r5, #4
 800a860:	f47f af44 	bne.w	800a6ec <_scanf_float+0x64>
 800a864:	3501      	adds	r5, #1
 800a866:	b2ed      	uxtb	r5, r5
 800a868:	e7d7      	b.n	800a81a <_scanf_float+0x192>
 800a86a:	f1ba 0f01 	cmp.w	sl, #1
 800a86e:	f47f af3d 	bne.w	800a6ec <_scanf_float+0x64>
 800a872:	f04f 0a02 	mov.w	sl, #2
 800a876:	e7d0      	b.n	800a81a <_scanf_float+0x192>
 800a878:	b97d      	cbnz	r5, 800a89a <_scanf_float+0x212>
 800a87a:	f1b9 0f00 	cmp.w	r9, #0
 800a87e:	f47f af38 	bne.w	800a6f2 <_scanf_float+0x6a>
 800a882:	6822      	ldr	r2, [r4, #0]
 800a884:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a888:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a88c:	f040 8108 	bne.w	800aaa0 <_scanf_float+0x418>
 800a890:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a894:	6022      	str	r2, [r4, #0]
 800a896:	2501      	movs	r5, #1
 800a898:	e7bf      	b.n	800a81a <_scanf_float+0x192>
 800a89a:	2d03      	cmp	r5, #3
 800a89c:	d0e2      	beq.n	800a864 <_scanf_float+0x1dc>
 800a89e:	2d05      	cmp	r5, #5
 800a8a0:	e7de      	b.n	800a860 <_scanf_float+0x1d8>
 800a8a2:	2d02      	cmp	r5, #2
 800a8a4:	f47f af22 	bne.w	800a6ec <_scanf_float+0x64>
 800a8a8:	2503      	movs	r5, #3
 800a8aa:	e7b6      	b.n	800a81a <_scanf_float+0x192>
 800a8ac:	2d06      	cmp	r5, #6
 800a8ae:	f47f af1d 	bne.w	800a6ec <_scanf_float+0x64>
 800a8b2:	2507      	movs	r5, #7
 800a8b4:	e7b1      	b.n	800a81a <_scanf_float+0x192>
 800a8b6:	6822      	ldr	r2, [r4, #0]
 800a8b8:	0591      	lsls	r1, r2, #22
 800a8ba:	f57f af17 	bpl.w	800a6ec <_scanf_float+0x64>
 800a8be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a8c2:	6022      	str	r2, [r4, #0]
 800a8c4:	f8cd 9008 	str.w	r9, [sp, #8]
 800a8c8:	e7a7      	b.n	800a81a <_scanf_float+0x192>
 800a8ca:	6822      	ldr	r2, [r4, #0]
 800a8cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a8d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a8d4:	d006      	beq.n	800a8e4 <_scanf_float+0x25c>
 800a8d6:	0550      	lsls	r0, r2, #21
 800a8d8:	f57f af08 	bpl.w	800a6ec <_scanf_float+0x64>
 800a8dc:	f1b9 0f00 	cmp.w	r9, #0
 800a8e0:	f000 80de 	beq.w	800aaa0 <_scanf_float+0x418>
 800a8e4:	0591      	lsls	r1, r2, #22
 800a8e6:	bf58      	it	pl
 800a8e8:	9902      	ldrpl	r1, [sp, #8]
 800a8ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a8ee:	bf58      	it	pl
 800a8f0:	eba9 0101 	subpl.w	r1, r9, r1
 800a8f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a8f8:	bf58      	it	pl
 800a8fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a8fe:	6022      	str	r2, [r4, #0]
 800a900:	f04f 0900 	mov.w	r9, #0
 800a904:	e789      	b.n	800a81a <_scanf_float+0x192>
 800a906:	f04f 0a03 	mov.w	sl, #3
 800a90a:	e786      	b.n	800a81a <_scanf_float+0x192>
 800a90c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a910:	4639      	mov	r1, r7
 800a912:	4640      	mov	r0, r8
 800a914:	4798      	blx	r3
 800a916:	2800      	cmp	r0, #0
 800a918:	f43f aedb 	beq.w	800a6d2 <_scanf_float+0x4a>
 800a91c:	e6e6      	b.n	800a6ec <_scanf_float+0x64>
 800a91e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a922:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a926:	463a      	mov	r2, r7
 800a928:	4640      	mov	r0, r8
 800a92a:	4798      	blx	r3
 800a92c:	6923      	ldr	r3, [r4, #16]
 800a92e:	3b01      	subs	r3, #1
 800a930:	6123      	str	r3, [r4, #16]
 800a932:	e6e8      	b.n	800a706 <_scanf_float+0x7e>
 800a934:	1e6b      	subs	r3, r5, #1
 800a936:	2b06      	cmp	r3, #6
 800a938:	d824      	bhi.n	800a984 <_scanf_float+0x2fc>
 800a93a:	2d02      	cmp	r5, #2
 800a93c:	d836      	bhi.n	800a9ac <_scanf_float+0x324>
 800a93e:	9b01      	ldr	r3, [sp, #4]
 800a940:	429e      	cmp	r6, r3
 800a942:	f67f aee4 	bls.w	800a70e <_scanf_float+0x86>
 800a946:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a94a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a94e:	463a      	mov	r2, r7
 800a950:	4640      	mov	r0, r8
 800a952:	4798      	blx	r3
 800a954:	6923      	ldr	r3, [r4, #16]
 800a956:	3b01      	subs	r3, #1
 800a958:	6123      	str	r3, [r4, #16]
 800a95a:	e7f0      	b.n	800a93e <_scanf_float+0x2b6>
 800a95c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a960:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a964:	463a      	mov	r2, r7
 800a966:	4640      	mov	r0, r8
 800a968:	4798      	blx	r3
 800a96a:	6923      	ldr	r3, [r4, #16]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	6123      	str	r3, [r4, #16]
 800a970:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a974:	fa5f fa8a 	uxtb.w	sl, sl
 800a978:	f1ba 0f02 	cmp.w	sl, #2
 800a97c:	d1ee      	bne.n	800a95c <_scanf_float+0x2d4>
 800a97e:	3d03      	subs	r5, #3
 800a980:	b2ed      	uxtb	r5, r5
 800a982:	1b76      	subs	r6, r6, r5
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	05da      	lsls	r2, r3, #23
 800a988:	d530      	bpl.n	800a9ec <_scanf_float+0x364>
 800a98a:	055b      	lsls	r3, r3, #21
 800a98c:	d511      	bpl.n	800a9b2 <_scanf_float+0x32a>
 800a98e:	9b01      	ldr	r3, [sp, #4]
 800a990:	429e      	cmp	r6, r3
 800a992:	f67f aebc 	bls.w	800a70e <_scanf_float+0x86>
 800a996:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a99a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a99e:	463a      	mov	r2, r7
 800a9a0:	4640      	mov	r0, r8
 800a9a2:	4798      	blx	r3
 800a9a4:	6923      	ldr	r3, [r4, #16]
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	6123      	str	r3, [r4, #16]
 800a9aa:	e7f0      	b.n	800a98e <_scanf_float+0x306>
 800a9ac:	46aa      	mov	sl, r5
 800a9ae:	46b3      	mov	fp, r6
 800a9b0:	e7de      	b.n	800a970 <_scanf_float+0x2e8>
 800a9b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a9b6:	6923      	ldr	r3, [r4, #16]
 800a9b8:	2965      	cmp	r1, #101	@ 0x65
 800a9ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800a9be:	f106 35ff 	add.w	r5, r6, #4294967295
 800a9c2:	6123      	str	r3, [r4, #16]
 800a9c4:	d00c      	beq.n	800a9e0 <_scanf_float+0x358>
 800a9c6:	2945      	cmp	r1, #69	@ 0x45
 800a9c8:	d00a      	beq.n	800a9e0 <_scanf_float+0x358>
 800a9ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9ce:	463a      	mov	r2, r7
 800a9d0:	4640      	mov	r0, r8
 800a9d2:	4798      	blx	r3
 800a9d4:	6923      	ldr	r3, [r4, #16]
 800a9d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	1eb5      	subs	r5, r6, #2
 800a9de:	6123      	str	r3, [r4, #16]
 800a9e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9e4:	463a      	mov	r2, r7
 800a9e6:	4640      	mov	r0, r8
 800a9e8:	4798      	blx	r3
 800a9ea:	462e      	mov	r6, r5
 800a9ec:	6822      	ldr	r2, [r4, #0]
 800a9ee:	f012 0210 	ands.w	r2, r2, #16
 800a9f2:	d001      	beq.n	800a9f8 <_scanf_float+0x370>
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	e68b      	b.n	800a710 <_scanf_float+0x88>
 800a9f8:	7032      	strb	r2, [r6, #0]
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800aa00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa04:	d11c      	bne.n	800aa40 <_scanf_float+0x3b8>
 800aa06:	9b02      	ldr	r3, [sp, #8]
 800aa08:	454b      	cmp	r3, r9
 800aa0a:	eba3 0209 	sub.w	r2, r3, r9
 800aa0e:	d123      	bne.n	800aa58 <_scanf_float+0x3d0>
 800aa10:	9901      	ldr	r1, [sp, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	4640      	mov	r0, r8
 800aa16:	f002 fc73 	bl	800d300 <_strtod_r>
 800aa1a:	9b03      	ldr	r3, [sp, #12]
 800aa1c:	6821      	ldr	r1, [r4, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f011 0f02 	tst.w	r1, #2
 800aa24:	ec57 6b10 	vmov	r6, r7, d0
 800aa28:	f103 0204 	add.w	r2, r3, #4
 800aa2c:	d01f      	beq.n	800aa6e <_scanf_float+0x3e6>
 800aa2e:	9903      	ldr	r1, [sp, #12]
 800aa30:	600a      	str	r2, [r1, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	e9c3 6700 	strd	r6, r7, [r3]
 800aa38:	68e3      	ldr	r3, [r4, #12]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	60e3      	str	r3, [r4, #12]
 800aa3e:	e7d9      	b.n	800a9f4 <_scanf_float+0x36c>
 800aa40:	9b04      	ldr	r3, [sp, #16]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d0e4      	beq.n	800aa10 <_scanf_float+0x388>
 800aa46:	9905      	ldr	r1, [sp, #20]
 800aa48:	230a      	movs	r3, #10
 800aa4a:	3101      	adds	r1, #1
 800aa4c:	4640      	mov	r0, r8
 800aa4e:	f7ff f9b7 	bl	8009dc0 <_strtol_r>
 800aa52:	9b04      	ldr	r3, [sp, #16]
 800aa54:	9e05      	ldr	r6, [sp, #20]
 800aa56:	1ac2      	subs	r2, r0, r3
 800aa58:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800aa5c:	429e      	cmp	r6, r3
 800aa5e:	bf28      	it	cs
 800aa60:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800aa64:	4910      	ldr	r1, [pc, #64]	@ (800aaa8 <_scanf_float+0x420>)
 800aa66:	4630      	mov	r0, r6
 800aa68:	f000 f8e4 	bl	800ac34 <siprintf>
 800aa6c:	e7d0      	b.n	800aa10 <_scanf_float+0x388>
 800aa6e:	f011 0f04 	tst.w	r1, #4
 800aa72:	9903      	ldr	r1, [sp, #12]
 800aa74:	600a      	str	r2, [r1, #0]
 800aa76:	d1dc      	bne.n	800aa32 <_scanf_float+0x3aa>
 800aa78:	681d      	ldr	r5, [r3, #0]
 800aa7a:	4632      	mov	r2, r6
 800aa7c:	463b      	mov	r3, r7
 800aa7e:	4630      	mov	r0, r6
 800aa80:	4639      	mov	r1, r7
 800aa82:	f7f6 f88b 	bl	8000b9c <__aeabi_dcmpun>
 800aa86:	b128      	cbz	r0, 800aa94 <_scanf_float+0x40c>
 800aa88:	4808      	ldr	r0, [pc, #32]	@ (800aaac <_scanf_float+0x424>)
 800aa8a:	f000 fa13 	bl	800aeb4 <nanf>
 800aa8e:	ed85 0a00 	vstr	s0, [r5]
 800aa92:	e7d1      	b.n	800aa38 <_scanf_float+0x3b0>
 800aa94:	4630      	mov	r0, r6
 800aa96:	4639      	mov	r1, r7
 800aa98:	f7f6 f8de 	bl	8000c58 <__aeabi_d2f>
 800aa9c:	6028      	str	r0, [r5, #0]
 800aa9e:	e7cb      	b.n	800aa38 <_scanf_float+0x3b0>
 800aaa0:	f04f 0900 	mov.w	r9, #0
 800aaa4:	e629      	b.n	800a6fa <_scanf_float+0x72>
 800aaa6:	bf00      	nop
 800aaa8:	0800e9b1 	.word	0x0800e9b1
 800aaac:	0800ea62 	.word	0x0800ea62

0800aab0 <std>:
 800aab0:	2300      	movs	r3, #0
 800aab2:	b510      	push	{r4, lr}
 800aab4:	4604      	mov	r4, r0
 800aab6:	e9c0 3300 	strd	r3, r3, [r0]
 800aaba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aabe:	6083      	str	r3, [r0, #8]
 800aac0:	8181      	strh	r1, [r0, #12]
 800aac2:	6643      	str	r3, [r0, #100]	@ 0x64
 800aac4:	81c2      	strh	r2, [r0, #14]
 800aac6:	6183      	str	r3, [r0, #24]
 800aac8:	4619      	mov	r1, r3
 800aaca:	2208      	movs	r2, #8
 800aacc:	305c      	adds	r0, #92	@ 0x5c
 800aace:	f000 f914 	bl	800acfa <memset>
 800aad2:	4b0d      	ldr	r3, [pc, #52]	@ (800ab08 <std+0x58>)
 800aad4:	6263      	str	r3, [r4, #36]	@ 0x24
 800aad6:	4b0d      	ldr	r3, [pc, #52]	@ (800ab0c <std+0x5c>)
 800aad8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aada:	4b0d      	ldr	r3, [pc, #52]	@ (800ab10 <std+0x60>)
 800aadc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aade:	4b0d      	ldr	r3, [pc, #52]	@ (800ab14 <std+0x64>)
 800aae0:	6323      	str	r3, [r4, #48]	@ 0x30
 800aae2:	4b0d      	ldr	r3, [pc, #52]	@ (800ab18 <std+0x68>)
 800aae4:	6224      	str	r4, [r4, #32]
 800aae6:	429c      	cmp	r4, r3
 800aae8:	d006      	beq.n	800aaf8 <std+0x48>
 800aaea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aaee:	4294      	cmp	r4, r2
 800aaf0:	d002      	beq.n	800aaf8 <std+0x48>
 800aaf2:	33d0      	adds	r3, #208	@ 0xd0
 800aaf4:	429c      	cmp	r4, r3
 800aaf6:	d105      	bne.n	800ab04 <std+0x54>
 800aaf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab00:	f000 b9d4 	b.w	800aeac <__retarget_lock_init_recursive>
 800ab04:	bd10      	pop	{r4, pc}
 800ab06:	bf00      	nop
 800ab08:	0800ac75 	.word	0x0800ac75
 800ab0c:	0800ac97 	.word	0x0800ac97
 800ab10:	0800accf 	.word	0x0800accf
 800ab14:	0800acf3 	.word	0x0800acf3
 800ab18:	20000670 	.word	0x20000670

0800ab1c <stdio_exit_handler>:
 800ab1c:	4a02      	ldr	r2, [pc, #8]	@ (800ab28 <stdio_exit_handler+0xc>)
 800ab1e:	4903      	ldr	r1, [pc, #12]	@ (800ab2c <stdio_exit_handler+0x10>)
 800ab20:	4803      	ldr	r0, [pc, #12]	@ (800ab30 <stdio_exit_handler+0x14>)
 800ab22:	f000 b869 	b.w	800abf8 <_fwalk_sglue>
 800ab26:	bf00      	nop
 800ab28:	2000000c 	.word	0x2000000c
 800ab2c:	0800d6c5 	.word	0x0800d6c5
 800ab30:	2000001c 	.word	0x2000001c

0800ab34 <cleanup_stdio>:
 800ab34:	6841      	ldr	r1, [r0, #4]
 800ab36:	4b0c      	ldr	r3, [pc, #48]	@ (800ab68 <cleanup_stdio+0x34>)
 800ab38:	4299      	cmp	r1, r3
 800ab3a:	b510      	push	{r4, lr}
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	d001      	beq.n	800ab44 <cleanup_stdio+0x10>
 800ab40:	f002 fdc0 	bl	800d6c4 <_fflush_r>
 800ab44:	68a1      	ldr	r1, [r4, #8]
 800ab46:	4b09      	ldr	r3, [pc, #36]	@ (800ab6c <cleanup_stdio+0x38>)
 800ab48:	4299      	cmp	r1, r3
 800ab4a:	d002      	beq.n	800ab52 <cleanup_stdio+0x1e>
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f002 fdb9 	bl	800d6c4 <_fflush_r>
 800ab52:	68e1      	ldr	r1, [r4, #12]
 800ab54:	4b06      	ldr	r3, [pc, #24]	@ (800ab70 <cleanup_stdio+0x3c>)
 800ab56:	4299      	cmp	r1, r3
 800ab58:	d004      	beq.n	800ab64 <cleanup_stdio+0x30>
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab60:	f002 bdb0 	b.w	800d6c4 <_fflush_r>
 800ab64:	bd10      	pop	{r4, pc}
 800ab66:	bf00      	nop
 800ab68:	20000670 	.word	0x20000670
 800ab6c:	200006d8 	.word	0x200006d8
 800ab70:	20000740 	.word	0x20000740

0800ab74 <global_stdio_init.part.0>:
 800ab74:	b510      	push	{r4, lr}
 800ab76:	4b0b      	ldr	r3, [pc, #44]	@ (800aba4 <global_stdio_init.part.0+0x30>)
 800ab78:	4c0b      	ldr	r4, [pc, #44]	@ (800aba8 <global_stdio_init.part.0+0x34>)
 800ab7a:	4a0c      	ldr	r2, [pc, #48]	@ (800abac <global_stdio_init.part.0+0x38>)
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	4620      	mov	r0, r4
 800ab80:	2200      	movs	r2, #0
 800ab82:	2104      	movs	r1, #4
 800ab84:	f7ff ff94 	bl	800aab0 <std>
 800ab88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	2109      	movs	r1, #9
 800ab90:	f7ff ff8e 	bl	800aab0 <std>
 800ab94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ab98:	2202      	movs	r2, #2
 800ab9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab9e:	2112      	movs	r1, #18
 800aba0:	f7ff bf86 	b.w	800aab0 <std>
 800aba4:	200007a8 	.word	0x200007a8
 800aba8:	20000670 	.word	0x20000670
 800abac:	0800ab1d 	.word	0x0800ab1d

0800abb0 <__sfp_lock_acquire>:
 800abb0:	4801      	ldr	r0, [pc, #4]	@ (800abb8 <__sfp_lock_acquire+0x8>)
 800abb2:	f000 b97c 	b.w	800aeae <__retarget_lock_acquire_recursive>
 800abb6:	bf00      	nop
 800abb8:	200007b1 	.word	0x200007b1

0800abbc <__sfp_lock_release>:
 800abbc:	4801      	ldr	r0, [pc, #4]	@ (800abc4 <__sfp_lock_release+0x8>)
 800abbe:	f000 b977 	b.w	800aeb0 <__retarget_lock_release_recursive>
 800abc2:	bf00      	nop
 800abc4:	200007b1 	.word	0x200007b1

0800abc8 <__sinit>:
 800abc8:	b510      	push	{r4, lr}
 800abca:	4604      	mov	r4, r0
 800abcc:	f7ff fff0 	bl	800abb0 <__sfp_lock_acquire>
 800abd0:	6a23      	ldr	r3, [r4, #32]
 800abd2:	b11b      	cbz	r3, 800abdc <__sinit+0x14>
 800abd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abd8:	f7ff bff0 	b.w	800abbc <__sfp_lock_release>
 800abdc:	4b04      	ldr	r3, [pc, #16]	@ (800abf0 <__sinit+0x28>)
 800abde:	6223      	str	r3, [r4, #32]
 800abe0:	4b04      	ldr	r3, [pc, #16]	@ (800abf4 <__sinit+0x2c>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d1f5      	bne.n	800abd4 <__sinit+0xc>
 800abe8:	f7ff ffc4 	bl	800ab74 <global_stdio_init.part.0>
 800abec:	e7f2      	b.n	800abd4 <__sinit+0xc>
 800abee:	bf00      	nop
 800abf0:	0800ab35 	.word	0x0800ab35
 800abf4:	200007a8 	.word	0x200007a8

0800abf8 <_fwalk_sglue>:
 800abf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abfc:	4607      	mov	r7, r0
 800abfe:	4688      	mov	r8, r1
 800ac00:	4614      	mov	r4, r2
 800ac02:	2600      	movs	r6, #0
 800ac04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac08:	f1b9 0901 	subs.w	r9, r9, #1
 800ac0c:	d505      	bpl.n	800ac1a <_fwalk_sglue+0x22>
 800ac0e:	6824      	ldr	r4, [r4, #0]
 800ac10:	2c00      	cmp	r4, #0
 800ac12:	d1f7      	bne.n	800ac04 <_fwalk_sglue+0xc>
 800ac14:	4630      	mov	r0, r6
 800ac16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac1a:	89ab      	ldrh	r3, [r5, #12]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d907      	bls.n	800ac30 <_fwalk_sglue+0x38>
 800ac20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac24:	3301      	adds	r3, #1
 800ac26:	d003      	beq.n	800ac30 <_fwalk_sglue+0x38>
 800ac28:	4629      	mov	r1, r5
 800ac2a:	4638      	mov	r0, r7
 800ac2c:	47c0      	blx	r8
 800ac2e:	4306      	orrs	r6, r0
 800ac30:	3568      	adds	r5, #104	@ 0x68
 800ac32:	e7e9      	b.n	800ac08 <_fwalk_sglue+0x10>

0800ac34 <siprintf>:
 800ac34:	b40e      	push	{r1, r2, r3}
 800ac36:	b500      	push	{lr}
 800ac38:	b09c      	sub	sp, #112	@ 0x70
 800ac3a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ac3c:	9002      	str	r0, [sp, #8]
 800ac3e:	9006      	str	r0, [sp, #24]
 800ac40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ac44:	4809      	ldr	r0, [pc, #36]	@ (800ac6c <siprintf+0x38>)
 800ac46:	9107      	str	r1, [sp, #28]
 800ac48:	9104      	str	r1, [sp, #16]
 800ac4a:	4909      	ldr	r1, [pc, #36]	@ (800ac70 <siprintf+0x3c>)
 800ac4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac50:	9105      	str	r1, [sp, #20]
 800ac52:	6800      	ldr	r0, [r0, #0]
 800ac54:	9301      	str	r3, [sp, #4]
 800ac56:	a902      	add	r1, sp, #8
 800ac58:	f002 fbb4 	bl	800d3c4 <_svfiprintf_r>
 800ac5c:	9b02      	ldr	r3, [sp, #8]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	701a      	strb	r2, [r3, #0]
 800ac62:	b01c      	add	sp, #112	@ 0x70
 800ac64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac68:	b003      	add	sp, #12
 800ac6a:	4770      	bx	lr
 800ac6c:	20000018 	.word	0x20000018
 800ac70:	ffff0208 	.word	0xffff0208

0800ac74 <__sread>:
 800ac74:	b510      	push	{r4, lr}
 800ac76:	460c      	mov	r4, r1
 800ac78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac7c:	f000 f8c8 	bl	800ae10 <_read_r>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	bfab      	itete	ge
 800ac84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac86:	89a3      	ldrhlt	r3, [r4, #12]
 800ac88:	181b      	addge	r3, r3, r0
 800ac8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac8e:	bfac      	ite	ge
 800ac90:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac92:	81a3      	strhlt	r3, [r4, #12]
 800ac94:	bd10      	pop	{r4, pc}

0800ac96 <__swrite>:
 800ac96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9a:	461f      	mov	r7, r3
 800ac9c:	898b      	ldrh	r3, [r1, #12]
 800ac9e:	05db      	lsls	r3, r3, #23
 800aca0:	4605      	mov	r5, r0
 800aca2:	460c      	mov	r4, r1
 800aca4:	4616      	mov	r6, r2
 800aca6:	d505      	bpl.n	800acb4 <__swrite+0x1e>
 800aca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acac:	2302      	movs	r3, #2
 800acae:	2200      	movs	r2, #0
 800acb0:	f000 f89c 	bl	800adec <_lseek_r>
 800acb4:	89a3      	ldrh	r3, [r4, #12]
 800acb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800acbe:	81a3      	strh	r3, [r4, #12]
 800acc0:	4632      	mov	r2, r6
 800acc2:	463b      	mov	r3, r7
 800acc4:	4628      	mov	r0, r5
 800acc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acca:	f000 b8b3 	b.w	800ae34 <_write_r>

0800acce <__sseek>:
 800acce:	b510      	push	{r4, lr}
 800acd0:	460c      	mov	r4, r1
 800acd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd6:	f000 f889 	bl	800adec <_lseek_r>
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	bf15      	itete	ne
 800ace0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ace2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ace6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800acea:	81a3      	strheq	r3, [r4, #12]
 800acec:	bf18      	it	ne
 800acee:	81a3      	strhne	r3, [r4, #12]
 800acf0:	bd10      	pop	{r4, pc}

0800acf2 <__sclose>:
 800acf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acf6:	f000 b869 	b.w	800adcc <_close_r>

0800acfa <memset>:
 800acfa:	4402      	add	r2, r0
 800acfc:	4603      	mov	r3, r0
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d100      	bne.n	800ad04 <memset+0xa>
 800ad02:	4770      	bx	lr
 800ad04:	f803 1b01 	strb.w	r1, [r3], #1
 800ad08:	e7f9      	b.n	800acfe <memset+0x4>
	...

0800ad0c <strtok>:
 800ad0c:	4b16      	ldr	r3, [pc, #88]	@ (800ad68 <strtok+0x5c>)
 800ad0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad12:	681f      	ldr	r7, [r3, #0]
 800ad14:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ad16:	4605      	mov	r5, r0
 800ad18:	460e      	mov	r6, r1
 800ad1a:	b9ec      	cbnz	r4, 800ad58 <strtok+0x4c>
 800ad1c:	2050      	movs	r0, #80	@ 0x50
 800ad1e:	f000 ff85 	bl	800bc2c <malloc>
 800ad22:	4602      	mov	r2, r0
 800ad24:	6478      	str	r0, [r7, #68]	@ 0x44
 800ad26:	b920      	cbnz	r0, 800ad32 <strtok+0x26>
 800ad28:	4b10      	ldr	r3, [pc, #64]	@ (800ad6c <strtok+0x60>)
 800ad2a:	4811      	ldr	r0, [pc, #68]	@ (800ad70 <strtok+0x64>)
 800ad2c:	215b      	movs	r1, #91	@ 0x5b
 800ad2e:	f000 f8c7 	bl	800aec0 <__assert_func>
 800ad32:	e9c0 4400 	strd	r4, r4, [r0]
 800ad36:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ad3a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ad3e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ad42:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ad46:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ad4a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ad4e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ad52:	6184      	str	r4, [r0, #24]
 800ad54:	7704      	strb	r4, [r0, #28]
 800ad56:	6244      	str	r4, [r0, #36]	@ 0x24
 800ad58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad64:	f000 b806 	b.w	800ad74 <__strtok_r>
 800ad68:	20000018 	.word	0x20000018
 800ad6c:	0800e9b6 	.word	0x0800e9b6
 800ad70:	0800e9cd 	.word	0x0800e9cd

0800ad74 <__strtok_r>:
 800ad74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad76:	4604      	mov	r4, r0
 800ad78:	b908      	cbnz	r0, 800ad7e <__strtok_r+0xa>
 800ad7a:	6814      	ldr	r4, [r2, #0]
 800ad7c:	b144      	cbz	r4, 800ad90 <__strtok_r+0x1c>
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ad84:	460f      	mov	r7, r1
 800ad86:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ad8a:	b91e      	cbnz	r6, 800ad94 <__strtok_r+0x20>
 800ad8c:	b965      	cbnz	r5, 800ada8 <__strtok_r+0x34>
 800ad8e:	6015      	str	r5, [r2, #0]
 800ad90:	2000      	movs	r0, #0
 800ad92:	e005      	b.n	800ada0 <__strtok_r+0x2c>
 800ad94:	42b5      	cmp	r5, r6
 800ad96:	d1f6      	bne.n	800ad86 <__strtok_r+0x12>
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1f0      	bne.n	800ad7e <__strtok_r+0xa>
 800ad9c:	6014      	str	r4, [r2, #0]
 800ad9e:	7003      	strb	r3, [r0, #0]
 800ada0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ada2:	461c      	mov	r4, r3
 800ada4:	e00c      	b.n	800adc0 <__strtok_r+0x4c>
 800ada6:	b915      	cbnz	r5, 800adae <__strtok_r+0x3a>
 800ada8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800adac:	460e      	mov	r6, r1
 800adae:	f816 5b01 	ldrb.w	r5, [r6], #1
 800adb2:	42ab      	cmp	r3, r5
 800adb4:	d1f7      	bne.n	800ada6 <__strtok_r+0x32>
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d0f3      	beq.n	800ada2 <__strtok_r+0x2e>
 800adba:	2300      	movs	r3, #0
 800adbc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800adc0:	6014      	str	r4, [r2, #0]
 800adc2:	e7ed      	b.n	800ada0 <__strtok_r+0x2c>

0800adc4 <_localeconv_r>:
 800adc4:	4800      	ldr	r0, [pc, #0]	@ (800adc8 <_localeconv_r+0x4>)
 800adc6:	4770      	bx	lr
 800adc8:	20000158 	.word	0x20000158

0800adcc <_close_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d06      	ldr	r5, [pc, #24]	@ (800ade8 <_close_r+0x1c>)
 800add0:	2300      	movs	r3, #0
 800add2:	4604      	mov	r4, r0
 800add4:	4608      	mov	r0, r1
 800add6:	602b      	str	r3, [r5, #0]
 800add8:	f7f7 fcd0 	bl	800277c <_close>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d102      	bne.n	800ade6 <_close_r+0x1a>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	b103      	cbz	r3, 800ade6 <_close_r+0x1a>
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	200007ac 	.word	0x200007ac

0800adec <_lseek_r>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	4d07      	ldr	r5, [pc, #28]	@ (800ae0c <_lseek_r+0x20>)
 800adf0:	4604      	mov	r4, r0
 800adf2:	4608      	mov	r0, r1
 800adf4:	4611      	mov	r1, r2
 800adf6:	2200      	movs	r2, #0
 800adf8:	602a      	str	r2, [r5, #0]
 800adfa:	461a      	mov	r2, r3
 800adfc:	f7f7 fce5 	bl	80027ca <_lseek>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	d102      	bne.n	800ae0a <_lseek_r+0x1e>
 800ae04:	682b      	ldr	r3, [r5, #0]
 800ae06:	b103      	cbz	r3, 800ae0a <_lseek_r+0x1e>
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	200007ac 	.word	0x200007ac

0800ae10 <_read_r>:
 800ae10:	b538      	push	{r3, r4, r5, lr}
 800ae12:	4d07      	ldr	r5, [pc, #28]	@ (800ae30 <_read_r+0x20>)
 800ae14:	4604      	mov	r4, r0
 800ae16:	4608      	mov	r0, r1
 800ae18:	4611      	mov	r1, r2
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	602a      	str	r2, [r5, #0]
 800ae1e:	461a      	mov	r2, r3
 800ae20:	f7f7 fc73 	bl	800270a <_read>
 800ae24:	1c43      	adds	r3, r0, #1
 800ae26:	d102      	bne.n	800ae2e <_read_r+0x1e>
 800ae28:	682b      	ldr	r3, [r5, #0]
 800ae2a:	b103      	cbz	r3, 800ae2e <_read_r+0x1e>
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	bd38      	pop	{r3, r4, r5, pc}
 800ae30:	200007ac 	.word	0x200007ac

0800ae34 <_write_r>:
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	4d07      	ldr	r5, [pc, #28]	@ (800ae54 <_write_r+0x20>)
 800ae38:	4604      	mov	r4, r0
 800ae3a:	4608      	mov	r0, r1
 800ae3c:	4611      	mov	r1, r2
 800ae3e:	2200      	movs	r2, #0
 800ae40:	602a      	str	r2, [r5, #0]
 800ae42:	461a      	mov	r2, r3
 800ae44:	f7f7 fc7e 	bl	8002744 <_write>
 800ae48:	1c43      	adds	r3, r0, #1
 800ae4a:	d102      	bne.n	800ae52 <_write_r+0x1e>
 800ae4c:	682b      	ldr	r3, [r5, #0]
 800ae4e:	b103      	cbz	r3, 800ae52 <_write_r+0x1e>
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	200007ac 	.word	0x200007ac

0800ae58 <__errno>:
 800ae58:	4b01      	ldr	r3, [pc, #4]	@ (800ae60 <__errno+0x8>)
 800ae5a:	6818      	ldr	r0, [r3, #0]
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	20000018 	.word	0x20000018

0800ae64 <__libc_init_array>:
 800ae64:	b570      	push	{r4, r5, r6, lr}
 800ae66:	4d0d      	ldr	r5, [pc, #52]	@ (800ae9c <__libc_init_array+0x38>)
 800ae68:	4c0d      	ldr	r4, [pc, #52]	@ (800aea0 <__libc_init_array+0x3c>)
 800ae6a:	1b64      	subs	r4, r4, r5
 800ae6c:	10a4      	asrs	r4, r4, #2
 800ae6e:	2600      	movs	r6, #0
 800ae70:	42a6      	cmp	r6, r4
 800ae72:	d109      	bne.n	800ae88 <__libc_init_array+0x24>
 800ae74:	4d0b      	ldr	r5, [pc, #44]	@ (800aea4 <__libc_init_array+0x40>)
 800ae76:	4c0c      	ldr	r4, [pc, #48]	@ (800aea8 <__libc_init_array+0x44>)
 800ae78:	f003 faf8 	bl	800e46c <_init>
 800ae7c:	1b64      	subs	r4, r4, r5
 800ae7e:	10a4      	asrs	r4, r4, #2
 800ae80:	2600      	movs	r6, #0
 800ae82:	42a6      	cmp	r6, r4
 800ae84:	d105      	bne.n	800ae92 <__libc_init_array+0x2e>
 800ae86:	bd70      	pop	{r4, r5, r6, pc}
 800ae88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae8c:	4798      	blx	r3
 800ae8e:	3601      	adds	r6, #1
 800ae90:	e7ee      	b.n	800ae70 <__libc_init_array+0xc>
 800ae92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae96:	4798      	blx	r3
 800ae98:	3601      	adds	r6, #1
 800ae9a:	e7f2      	b.n	800ae82 <__libc_init_array+0x1e>
 800ae9c:	0800ed0c 	.word	0x0800ed0c
 800aea0:	0800ed0c 	.word	0x0800ed0c
 800aea4:	0800ed0c 	.word	0x0800ed0c
 800aea8:	0800ed10 	.word	0x0800ed10

0800aeac <__retarget_lock_init_recursive>:
 800aeac:	4770      	bx	lr

0800aeae <__retarget_lock_acquire_recursive>:
 800aeae:	4770      	bx	lr

0800aeb0 <__retarget_lock_release_recursive>:
 800aeb0:	4770      	bx	lr
	...

0800aeb4 <nanf>:
 800aeb4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aebc <nanf+0x8>
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	7fc00000 	.word	0x7fc00000

0800aec0 <__assert_func>:
 800aec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aec2:	4614      	mov	r4, r2
 800aec4:	461a      	mov	r2, r3
 800aec6:	4b09      	ldr	r3, [pc, #36]	@ (800aeec <__assert_func+0x2c>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4605      	mov	r5, r0
 800aecc:	68d8      	ldr	r0, [r3, #12]
 800aece:	b954      	cbnz	r4, 800aee6 <__assert_func+0x26>
 800aed0:	4b07      	ldr	r3, [pc, #28]	@ (800aef0 <__assert_func+0x30>)
 800aed2:	461c      	mov	r4, r3
 800aed4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aed8:	9100      	str	r1, [sp, #0]
 800aeda:	462b      	mov	r3, r5
 800aedc:	4905      	ldr	r1, [pc, #20]	@ (800aef4 <__assert_func+0x34>)
 800aede:	f002 fc19 	bl	800d714 <fiprintf>
 800aee2:	f002 fc7d 	bl	800d7e0 <abort>
 800aee6:	4b04      	ldr	r3, [pc, #16]	@ (800aef8 <__assert_func+0x38>)
 800aee8:	e7f4      	b.n	800aed4 <__assert_func+0x14>
 800aeea:	bf00      	nop
 800aeec:	20000018 	.word	0x20000018
 800aef0:	0800ea62 	.word	0x0800ea62
 800aef4:	0800ea34 	.word	0x0800ea34
 800aef8:	0800ea27 	.word	0x0800ea27

0800aefc <quorem>:
 800aefc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af00:	6903      	ldr	r3, [r0, #16]
 800af02:	690c      	ldr	r4, [r1, #16]
 800af04:	42a3      	cmp	r3, r4
 800af06:	4607      	mov	r7, r0
 800af08:	db7e      	blt.n	800b008 <quorem+0x10c>
 800af0a:	3c01      	subs	r4, #1
 800af0c:	f101 0814 	add.w	r8, r1, #20
 800af10:	00a3      	lsls	r3, r4, #2
 800af12:	f100 0514 	add.w	r5, r0, #20
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af1c:	9301      	str	r3, [sp, #4]
 800af1e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af26:	3301      	adds	r3, #1
 800af28:	429a      	cmp	r2, r3
 800af2a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af2e:	fbb2 f6f3 	udiv	r6, r2, r3
 800af32:	d32e      	bcc.n	800af92 <quorem+0x96>
 800af34:	f04f 0a00 	mov.w	sl, #0
 800af38:	46c4      	mov	ip, r8
 800af3a:	46ae      	mov	lr, r5
 800af3c:	46d3      	mov	fp, sl
 800af3e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af42:	b298      	uxth	r0, r3
 800af44:	fb06 a000 	mla	r0, r6, r0, sl
 800af48:	0c02      	lsrs	r2, r0, #16
 800af4a:	0c1b      	lsrs	r3, r3, #16
 800af4c:	fb06 2303 	mla	r3, r6, r3, r2
 800af50:	f8de 2000 	ldr.w	r2, [lr]
 800af54:	b280      	uxth	r0, r0
 800af56:	b292      	uxth	r2, r2
 800af58:	1a12      	subs	r2, r2, r0
 800af5a:	445a      	add	r2, fp
 800af5c:	f8de 0000 	ldr.w	r0, [lr]
 800af60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af64:	b29b      	uxth	r3, r3
 800af66:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800af6a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800af6e:	b292      	uxth	r2, r2
 800af70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800af74:	45e1      	cmp	r9, ip
 800af76:	f84e 2b04 	str.w	r2, [lr], #4
 800af7a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800af7e:	d2de      	bcs.n	800af3e <quorem+0x42>
 800af80:	9b00      	ldr	r3, [sp, #0]
 800af82:	58eb      	ldr	r3, [r5, r3]
 800af84:	b92b      	cbnz	r3, 800af92 <quorem+0x96>
 800af86:	9b01      	ldr	r3, [sp, #4]
 800af88:	3b04      	subs	r3, #4
 800af8a:	429d      	cmp	r5, r3
 800af8c:	461a      	mov	r2, r3
 800af8e:	d32f      	bcc.n	800aff0 <quorem+0xf4>
 800af90:	613c      	str	r4, [r7, #16]
 800af92:	4638      	mov	r0, r7
 800af94:	f001 f9c4 	bl	800c320 <__mcmp>
 800af98:	2800      	cmp	r0, #0
 800af9a:	db25      	blt.n	800afe8 <quorem+0xec>
 800af9c:	4629      	mov	r1, r5
 800af9e:	2000      	movs	r0, #0
 800afa0:	f858 2b04 	ldr.w	r2, [r8], #4
 800afa4:	f8d1 c000 	ldr.w	ip, [r1]
 800afa8:	fa1f fe82 	uxth.w	lr, r2
 800afac:	fa1f f38c 	uxth.w	r3, ip
 800afb0:	eba3 030e 	sub.w	r3, r3, lr
 800afb4:	4403      	add	r3, r0
 800afb6:	0c12      	lsrs	r2, r2, #16
 800afb8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800afbc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afc6:	45c1      	cmp	r9, r8
 800afc8:	f841 3b04 	str.w	r3, [r1], #4
 800afcc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800afd0:	d2e6      	bcs.n	800afa0 <quorem+0xa4>
 800afd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afda:	b922      	cbnz	r2, 800afe6 <quorem+0xea>
 800afdc:	3b04      	subs	r3, #4
 800afde:	429d      	cmp	r5, r3
 800afe0:	461a      	mov	r2, r3
 800afe2:	d30b      	bcc.n	800affc <quorem+0x100>
 800afe4:	613c      	str	r4, [r7, #16]
 800afe6:	3601      	adds	r6, #1
 800afe8:	4630      	mov	r0, r6
 800afea:	b003      	add	sp, #12
 800afec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff0:	6812      	ldr	r2, [r2, #0]
 800aff2:	3b04      	subs	r3, #4
 800aff4:	2a00      	cmp	r2, #0
 800aff6:	d1cb      	bne.n	800af90 <quorem+0x94>
 800aff8:	3c01      	subs	r4, #1
 800affa:	e7c6      	b.n	800af8a <quorem+0x8e>
 800affc:	6812      	ldr	r2, [r2, #0]
 800affe:	3b04      	subs	r3, #4
 800b000:	2a00      	cmp	r2, #0
 800b002:	d1ef      	bne.n	800afe4 <quorem+0xe8>
 800b004:	3c01      	subs	r4, #1
 800b006:	e7ea      	b.n	800afde <quorem+0xe2>
 800b008:	2000      	movs	r0, #0
 800b00a:	e7ee      	b.n	800afea <quorem+0xee>
 800b00c:	0000      	movs	r0, r0
	...

0800b010 <_dtoa_r>:
 800b010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b014:	69c7      	ldr	r7, [r0, #28]
 800b016:	b099      	sub	sp, #100	@ 0x64
 800b018:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b01c:	ec55 4b10 	vmov	r4, r5, d0
 800b020:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b022:	9109      	str	r1, [sp, #36]	@ 0x24
 800b024:	4683      	mov	fp, r0
 800b026:	920e      	str	r2, [sp, #56]	@ 0x38
 800b028:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b02a:	b97f      	cbnz	r7, 800b04c <_dtoa_r+0x3c>
 800b02c:	2010      	movs	r0, #16
 800b02e:	f000 fdfd 	bl	800bc2c <malloc>
 800b032:	4602      	mov	r2, r0
 800b034:	f8cb 001c 	str.w	r0, [fp, #28]
 800b038:	b920      	cbnz	r0, 800b044 <_dtoa_r+0x34>
 800b03a:	4ba7      	ldr	r3, [pc, #668]	@ (800b2d8 <_dtoa_r+0x2c8>)
 800b03c:	21ef      	movs	r1, #239	@ 0xef
 800b03e:	48a7      	ldr	r0, [pc, #668]	@ (800b2dc <_dtoa_r+0x2cc>)
 800b040:	f7ff ff3e 	bl	800aec0 <__assert_func>
 800b044:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b048:	6007      	str	r7, [r0, #0]
 800b04a:	60c7      	str	r7, [r0, #12]
 800b04c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b050:	6819      	ldr	r1, [r3, #0]
 800b052:	b159      	cbz	r1, 800b06c <_dtoa_r+0x5c>
 800b054:	685a      	ldr	r2, [r3, #4]
 800b056:	604a      	str	r2, [r1, #4]
 800b058:	2301      	movs	r3, #1
 800b05a:	4093      	lsls	r3, r2
 800b05c:	608b      	str	r3, [r1, #8]
 800b05e:	4658      	mov	r0, fp
 800b060:	f000 feda 	bl	800be18 <_Bfree>
 800b064:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	1e2b      	subs	r3, r5, #0
 800b06e:	bfb9      	ittee	lt
 800b070:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b074:	9303      	strlt	r3, [sp, #12]
 800b076:	2300      	movge	r3, #0
 800b078:	6033      	strge	r3, [r6, #0]
 800b07a:	9f03      	ldr	r7, [sp, #12]
 800b07c:	4b98      	ldr	r3, [pc, #608]	@ (800b2e0 <_dtoa_r+0x2d0>)
 800b07e:	bfbc      	itt	lt
 800b080:	2201      	movlt	r2, #1
 800b082:	6032      	strlt	r2, [r6, #0]
 800b084:	43bb      	bics	r3, r7
 800b086:	d112      	bne.n	800b0ae <_dtoa_r+0x9e>
 800b088:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b08a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b08e:	6013      	str	r3, [r2, #0]
 800b090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b094:	4323      	orrs	r3, r4
 800b096:	f000 854d 	beq.w	800bb34 <_dtoa_r+0xb24>
 800b09a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b09c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b2f4 <_dtoa_r+0x2e4>
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f000 854f 	beq.w	800bb44 <_dtoa_r+0xb34>
 800b0a6:	f10a 0303 	add.w	r3, sl, #3
 800b0aa:	f000 bd49 	b.w	800bb40 <_dtoa_r+0xb30>
 800b0ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	ec51 0b17 	vmov	r0, r1, d7
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b0be:	f7f5 fd3b 	bl	8000b38 <__aeabi_dcmpeq>
 800b0c2:	4680      	mov	r8, r0
 800b0c4:	b158      	cbz	r0, 800b0de <_dtoa_r+0xce>
 800b0c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	6013      	str	r3, [r2, #0]
 800b0cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b0ce:	b113      	cbz	r3, 800b0d6 <_dtoa_r+0xc6>
 800b0d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b0d2:	4b84      	ldr	r3, [pc, #528]	@ (800b2e4 <_dtoa_r+0x2d4>)
 800b0d4:	6013      	str	r3, [r2, #0]
 800b0d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b2f8 <_dtoa_r+0x2e8>
 800b0da:	f000 bd33 	b.w	800bb44 <_dtoa_r+0xb34>
 800b0de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b0e2:	aa16      	add	r2, sp, #88	@ 0x58
 800b0e4:	a917      	add	r1, sp, #92	@ 0x5c
 800b0e6:	4658      	mov	r0, fp
 800b0e8:	f001 fa3a 	bl	800c560 <__d2b>
 800b0ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b0f0:	4681      	mov	r9, r0
 800b0f2:	2e00      	cmp	r6, #0
 800b0f4:	d077      	beq.n	800b1e6 <_dtoa_r+0x1d6>
 800b0f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b0fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b104:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b108:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b10c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b110:	4619      	mov	r1, r3
 800b112:	2200      	movs	r2, #0
 800b114:	4b74      	ldr	r3, [pc, #464]	@ (800b2e8 <_dtoa_r+0x2d8>)
 800b116:	f7f5 f8ef 	bl	80002f8 <__aeabi_dsub>
 800b11a:	a369      	add	r3, pc, #420	@ (adr r3, 800b2c0 <_dtoa_r+0x2b0>)
 800b11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b120:	f7f5 faa2 	bl	8000668 <__aeabi_dmul>
 800b124:	a368      	add	r3, pc, #416	@ (adr r3, 800b2c8 <_dtoa_r+0x2b8>)
 800b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12a:	f7f5 f8e7 	bl	80002fc <__adddf3>
 800b12e:	4604      	mov	r4, r0
 800b130:	4630      	mov	r0, r6
 800b132:	460d      	mov	r5, r1
 800b134:	f7f5 fa2e 	bl	8000594 <__aeabi_i2d>
 800b138:	a365      	add	r3, pc, #404	@ (adr r3, 800b2d0 <_dtoa_r+0x2c0>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	f7f5 fa93 	bl	8000668 <__aeabi_dmul>
 800b142:	4602      	mov	r2, r0
 800b144:	460b      	mov	r3, r1
 800b146:	4620      	mov	r0, r4
 800b148:	4629      	mov	r1, r5
 800b14a:	f7f5 f8d7 	bl	80002fc <__adddf3>
 800b14e:	4604      	mov	r4, r0
 800b150:	460d      	mov	r5, r1
 800b152:	f7f5 fd39 	bl	8000bc8 <__aeabi_d2iz>
 800b156:	2200      	movs	r2, #0
 800b158:	4607      	mov	r7, r0
 800b15a:	2300      	movs	r3, #0
 800b15c:	4620      	mov	r0, r4
 800b15e:	4629      	mov	r1, r5
 800b160:	f7f5 fcf4 	bl	8000b4c <__aeabi_dcmplt>
 800b164:	b140      	cbz	r0, 800b178 <_dtoa_r+0x168>
 800b166:	4638      	mov	r0, r7
 800b168:	f7f5 fa14 	bl	8000594 <__aeabi_i2d>
 800b16c:	4622      	mov	r2, r4
 800b16e:	462b      	mov	r3, r5
 800b170:	f7f5 fce2 	bl	8000b38 <__aeabi_dcmpeq>
 800b174:	b900      	cbnz	r0, 800b178 <_dtoa_r+0x168>
 800b176:	3f01      	subs	r7, #1
 800b178:	2f16      	cmp	r7, #22
 800b17a:	d851      	bhi.n	800b220 <_dtoa_r+0x210>
 800b17c:	4b5b      	ldr	r3, [pc, #364]	@ (800b2ec <_dtoa_r+0x2dc>)
 800b17e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b18a:	f7f5 fcdf 	bl	8000b4c <__aeabi_dcmplt>
 800b18e:	2800      	cmp	r0, #0
 800b190:	d048      	beq.n	800b224 <_dtoa_r+0x214>
 800b192:	3f01      	subs	r7, #1
 800b194:	2300      	movs	r3, #0
 800b196:	9312      	str	r3, [sp, #72]	@ 0x48
 800b198:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b19a:	1b9b      	subs	r3, r3, r6
 800b19c:	1e5a      	subs	r2, r3, #1
 800b19e:	bf44      	itt	mi
 800b1a0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b1a4:	2300      	movmi	r3, #0
 800b1a6:	9208      	str	r2, [sp, #32]
 800b1a8:	bf54      	ite	pl
 800b1aa:	f04f 0800 	movpl.w	r8, #0
 800b1ae:	9308      	strmi	r3, [sp, #32]
 800b1b0:	2f00      	cmp	r7, #0
 800b1b2:	db39      	blt.n	800b228 <_dtoa_r+0x218>
 800b1b4:	9b08      	ldr	r3, [sp, #32]
 800b1b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b1b8:	443b      	add	r3, r7
 800b1ba:	9308      	str	r3, [sp, #32]
 800b1bc:	2300      	movs	r3, #0
 800b1be:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c2:	2b09      	cmp	r3, #9
 800b1c4:	d864      	bhi.n	800b290 <_dtoa_r+0x280>
 800b1c6:	2b05      	cmp	r3, #5
 800b1c8:	bfc4      	itt	gt
 800b1ca:	3b04      	subgt	r3, #4
 800b1cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1d0:	f1a3 0302 	sub.w	r3, r3, #2
 800b1d4:	bfcc      	ite	gt
 800b1d6:	2400      	movgt	r4, #0
 800b1d8:	2401      	movle	r4, #1
 800b1da:	2b03      	cmp	r3, #3
 800b1dc:	d863      	bhi.n	800b2a6 <_dtoa_r+0x296>
 800b1de:	e8df f003 	tbb	[pc, r3]
 800b1e2:	372a      	.short	0x372a
 800b1e4:	5535      	.short	0x5535
 800b1e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b1ea:	441e      	add	r6, r3
 800b1ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b1f0:	2b20      	cmp	r3, #32
 800b1f2:	bfc1      	itttt	gt
 800b1f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b1f8:	409f      	lslgt	r7, r3
 800b1fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b1fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b202:	bfd6      	itet	le
 800b204:	f1c3 0320 	rsble	r3, r3, #32
 800b208:	ea47 0003 	orrgt.w	r0, r7, r3
 800b20c:	fa04 f003 	lslle.w	r0, r4, r3
 800b210:	f7f5 f9b0 	bl	8000574 <__aeabi_ui2d>
 800b214:	2201      	movs	r2, #1
 800b216:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b21a:	3e01      	subs	r6, #1
 800b21c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b21e:	e777      	b.n	800b110 <_dtoa_r+0x100>
 800b220:	2301      	movs	r3, #1
 800b222:	e7b8      	b.n	800b196 <_dtoa_r+0x186>
 800b224:	9012      	str	r0, [sp, #72]	@ 0x48
 800b226:	e7b7      	b.n	800b198 <_dtoa_r+0x188>
 800b228:	427b      	negs	r3, r7
 800b22a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b22c:	2300      	movs	r3, #0
 800b22e:	eba8 0807 	sub.w	r8, r8, r7
 800b232:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b234:	e7c4      	b.n	800b1c0 <_dtoa_r+0x1b0>
 800b236:	2300      	movs	r3, #0
 800b238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b23a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	dc35      	bgt.n	800b2ac <_dtoa_r+0x29c>
 800b240:	2301      	movs	r3, #1
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	9307      	str	r3, [sp, #28]
 800b246:	461a      	mov	r2, r3
 800b248:	920e      	str	r2, [sp, #56]	@ 0x38
 800b24a:	e00b      	b.n	800b264 <_dtoa_r+0x254>
 800b24c:	2301      	movs	r3, #1
 800b24e:	e7f3      	b.n	800b238 <_dtoa_r+0x228>
 800b250:	2300      	movs	r3, #0
 800b252:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b256:	18fb      	adds	r3, r7, r3
 800b258:	9300      	str	r3, [sp, #0]
 800b25a:	3301      	adds	r3, #1
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	9307      	str	r3, [sp, #28]
 800b260:	bfb8      	it	lt
 800b262:	2301      	movlt	r3, #1
 800b264:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b268:	2100      	movs	r1, #0
 800b26a:	2204      	movs	r2, #4
 800b26c:	f102 0514 	add.w	r5, r2, #20
 800b270:	429d      	cmp	r5, r3
 800b272:	d91f      	bls.n	800b2b4 <_dtoa_r+0x2a4>
 800b274:	6041      	str	r1, [r0, #4]
 800b276:	4658      	mov	r0, fp
 800b278:	f000 fd8e 	bl	800bd98 <_Balloc>
 800b27c:	4682      	mov	sl, r0
 800b27e:	2800      	cmp	r0, #0
 800b280:	d13c      	bne.n	800b2fc <_dtoa_r+0x2ec>
 800b282:	4b1b      	ldr	r3, [pc, #108]	@ (800b2f0 <_dtoa_r+0x2e0>)
 800b284:	4602      	mov	r2, r0
 800b286:	f240 11af 	movw	r1, #431	@ 0x1af
 800b28a:	e6d8      	b.n	800b03e <_dtoa_r+0x2e>
 800b28c:	2301      	movs	r3, #1
 800b28e:	e7e0      	b.n	800b252 <_dtoa_r+0x242>
 800b290:	2401      	movs	r4, #1
 800b292:	2300      	movs	r3, #0
 800b294:	9309      	str	r3, [sp, #36]	@ 0x24
 800b296:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b298:	f04f 33ff 	mov.w	r3, #4294967295
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	9307      	str	r3, [sp, #28]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	2312      	movs	r3, #18
 800b2a4:	e7d0      	b.n	800b248 <_dtoa_r+0x238>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2aa:	e7f5      	b.n	800b298 <_dtoa_r+0x288>
 800b2ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	9307      	str	r3, [sp, #28]
 800b2b2:	e7d7      	b.n	800b264 <_dtoa_r+0x254>
 800b2b4:	3101      	adds	r1, #1
 800b2b6:	0052      	lsls	r2, r2, #1
 800b2b8:	e7d8      	b.n	800b26c <_dtoa_r+0x25c>
 800b2ba:	bf00      	nop
 800b2bc:	f3af 8000 	nop.w
 800b2c0:	636f4361 	.word	0x636f4361
 800b2c4:	3fd287a7 	.word	0x3fd287a7
 800b2c8:	8b60c8b3 	.word	0x8b60c8b3
 800b2cc:	3fc68a28 	.word	0x3fc68a28
 800b2d0:	509f79fb 	.word	0x509f79fb
 800b2d4:	3fd34413 	.word	0x3fd34413
 800b2d8:	0800e9b6 	.word	0x0800e9b6
 800b2dc:	0800ea70 	.word	0x0800ea70
 800b2e0:	7ff00000 	.word	0x7ff00000
 800b2e4:	0800e98e 	.word	0x0800e98e
 800b2e8:	3ff80000 	.word	0x3ff80000
 800b2ec:	0800eb68 	.word	0x0800eb68
 800b2f0:	0800eac8 	.word	0x0800eac8
 800b2f4:	0800ea6c 	.word	0x0800ea6c
 800b2f8:	0800e98d 	.word	0x0800e98d
 800b2fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b300:	6018      	str	r0, [r3, #0]
 800b302:	9b07      	ldr	r3, [sp, #28]
 800b304:	2b0e      	cmp	r3, #14
 800b306:	f200 80a4 	bhi.w	800b452 <_dtoa_r+0x442>
 800b30a:	2c00      	cmp	r4, #0
 800b30c:	f000 80a1 	beq.w	800b452 <_dtoa_r+0x442>
 800b310:	2f00      	cmp	r7, #0
 800b312:	dd33      	ble.n	800b37c <_dtoa_r+0x36c>
 800b314:	4bad      	ldr	r3, [pc, #692]	@ (800b5cc <_dtoa_r+0x5bc>)
 800b316:	f007 020f 	and.w	r2, r7, #15
 800b31a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b31e:	ed93 7b00 	vldr	d7, [r3]
 800b322:	05f8      	lsls	r0, r7, #23
 800b324:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b328:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b32c:	d516      	bpl.n	800b35c <_dtoa_r+0x34c>
 800b32e:	4ba8      	ldr	r3, [pc, #672]	@ (800b5d0 <_dtoa_r+0x5c0>)
 800b330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b338:	f7f5 fac0 	bl	80008bc <__aeabi_ddiv>
 800b33c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b340:	f004 040f 	and.w	r4, r4, #15
 800b344:	2603      	movs	r6, #3
 800b346:	4da2      	ldr	r5, [pc, #648]	@ (800b5d0 <_dtoa_r+0x5c0>)
 800b348:	b954      	cbnz	r4, 800b360 <_dtoa_r+0x350>
 800b34a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b352:	f7f5 fab3 	bl	80008bc <__aeabi_ddiv>
 800b356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b35a:	e028      	b.n	800b3ae <_dtoa_r+0x39e>
 800b35c:	2602      	movs	r6, #2
 800b35e:	e7f2      	b.n	800b346 <_dtoa_r+0x336>
 800b360:	07e1      	lsls	r1, r4, #31
 800b362:	d508      	bpl.n	800b376 <_dtoa_r+0x366>
 800b364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b368:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b36c:	f7f5 f97c 	bl	8000668 <__aeabi_dmul>
 800b370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b374:	3601      	adds	r6, #1
 800b376:	1064      	asrs	r4, r4, #1
 800b378:	3508      	adds	r5, #8
 800b37a:	e7e5      	b.n	800b348 <_dtoa_r+0x338>
 800b37c:	f000 80d2 	beq.w	800b524 <_dtoa_r+0x514>
 800b380:	427c      	negs	r4, r7
 800b382:	4b92      	ldr	r3, [pc, #584]	@ (800b5cc <_dtoa_r+0x5bc>)
 800b384:	4d92      	ldr	r5, [pc, #584]	@ (800b5d0 <_dtoa_r+0x5c0>)
 800b386:	f004 020f 	and.w	r2, r4, #15
 800b38a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b392:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b396:	f7f5 f967 	bl	8000668 <__aeabi_dmul>
 800b39a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b39e:	1124      	asrs	r4, r4, #4
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	2602      	movs	r6, #2
 800b3a4:	2c00      	cmp	r4, #0
 800b3a6:	f040 80b2 	bne.w	800b50e <_dtoa_r+0x4fe>
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1d3      	bne.n	800b356 <_dtoa_r+0x346>
 800b3ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b3b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f000 80b7 	beq.w	800b528 <_dtoa_r+0x518>
 800b3ba:	4b86      	ldr	r3, [pc, #536]	@ (800b5d4 <_dtoa_r+0x5c4>)
 800b3bc:	2200      	movs	r2, #0
 800b3be:	4620      	mov	r0, r4
 800b3c0:	4629      	mov	r1, r5
 800b3c2:	f7f5 fbc3 	bl	8000b4c <__aeabi_dcmplt>
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	f000 80ae 	beq.w	800b528 <_dtoa_r+0x518>
 800b3cc:	9b07      	ldr	r3, [sp, #28]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f000 80aa 	beq.w	800b528 <_dtoa_r+0x518>
 800b3d4:	9b00      	ldr	r3, [sp, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	dd37      	ble.n	800b44a <_dtoa_r+0x43a>
 800b3da:	1e7b      	subs	r3, r7, #1
 800b3dc:	9304      	str	r3, [sp, #16]
 800b3de:	4620      	mov	r0, r4
 800b3e0:	4b7d      	ldr	r3, [pc, #500]	@ (800b5d8 <_dtoa_r+0x5c8>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	f7f5 f93f 	bl	8000668 <__aeabi_dmul>
 800b3ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3ee:	9c00      	ldr	r4, [sp, #0]
 800b3f0:	3601      	adds	r6, #1
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f7f5 f8ce 	bl	8000594 <__aeabi_i2d>
 800b3f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3fc:	f7f5 f934 	bl	8000668 <__aeabi_dmul>
 800b400:	4b76      	ldr	r3, [pc, #472]	@ (800b5dc <_dtoa_r+0x5cc>)
 800b402:	2200      	movs	r2, #0
 800b404:	f7f4 ff7a 	bl	80002fc <__adddf3>
 800b408:	4605      	mov	r5, r0
 800b40a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b40e:	2c00      	cmp	r4, #0
 800b410:	f040 808d 	bne.w	800b52e <_dtoa_r+0x51e>
 800b414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b418:	4b71      	ldr	r3, [pc, #452]	@ (800b5e0 <_dtoa_r+0x5d0>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	f7f4 ff6c 	bl	80002f8 <__aeabi_dsub>
 800b420:	4602      	mov	r2, r0
 800b422:	460b      	mov	r3, r1
 800b424:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b428:	462a      	mov	r2, r5
 800b42a:	4633      	mov	r3, r6
 800b42c:	f7f5 fbac 	bl	8000b88 <__aeabi_dcmpgt>
 800b430:	2800      	cmp	r0, #0
 800b432:	f040 828b 	bne.w	800b94c <_dtoa_r+0x93c>
 800b436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b43a:	462a      	mov	r2, r5
 800b43c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b440:	f7f5 fb84 	bl	8000b4c <__aeabi_dcmplt>
 800b444:	2800      	cmp	r0, #0
 800b446:	f040 8128 	bne.w	800b69a <_dtoa_r+0x68a>
 800b44a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b44e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b452:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b454:	2b00      	cmp	r3, #0
 800b456:	f2c0 815a 	blt.w	800b70e <_dtoa_r+0x6fe>
 800b45a:	2f0e      	cmp	r7, #14
 800b45c:	f300 8157 	bgt.w	800b70e <_dtoa_r+0x6fe>
 800b460:	4b5a      	ldr	r3, [pc, #360]	@ (800b5cc <_dtoa_r+0x5bc>)
 800b462:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b466:	ed93 7b00 	vldr	d7, [r3]
 800b46a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	ed8d 7b00 	vstr	d7, [sp]
 800b472:	da03      	bge.n	800b47c <_dtoa_r+0x46c>
 800b474:	9b07      	ldr	r3, [sp, #28]
 800b476:	2b00      	cmp	r3, #0
 800b478:	f340 8101 	ble.w	800b67e <_dtoa_r+0x66e>
 800b47c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b480:	4656      	mov	r6, sl
 800b482:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b486:	4620      	mov	r0, r4
 800b488:	4629      	mov	r1, r5
 800b48a:	f7f5 fa17 	bl	80008bc <__aeabi_ddiv>
 800b48e:	f7f5 fb9b 	bl	8000bc8 <__aeabi_d2iz>
 800b492:	4680      	mov	r8, r0
 800b494:	f7f5 f87e 	bl	8000594 <__aeabi_i2d>
 800b498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b49c:	f7f5 f8e4 	bl	8000668 <__aeabi_dmul>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b4ac:	f7f4 ff24 	bl	80002f8 <__aeabi_dsub>
 800b4b0:	f806 4b01 	strb.w	r4, [r6], #1
 800b4b4:	9d07      	ldr	r5, [sp, #28]
 800b4b6:	eba6 040a 	sub.w	r4, r6, sl
 800b4ba:	42a5      	cmp	r5, r4
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	f040 8117 	bne.w	800b6f2 <_dtoa_r+0x6e2>
 800b4c4:	f7f4 ff1a 	bl	80002fc <__adddf3>
 800b4c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	460d      	mov	r5, r1
 800b4d0:	f7f5 fb5a 	bl	8000b88 <__aeabi_dcmpgt>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	f040 80f9 	bne.w	800b6cc <_dtoa_r+0x6bc>
 800b4da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4de:	4620      	mov	r0, r4
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	f7f5 fb29 	bl	8000b38 <__aeabi_dcmpeq>
 800b4e6:	b118      	cbz	r0, 800b4f0 <_dtoa_r+0x4e0>
 800b4e8:	f018 0f01 	tst.w	r8, #1
 800b4ec:	f040 80ee 	bne.w	800b6cc <_dtoa_r+0x6bc>
 800b4f0:	4649      	mov	r1, r9
 800b4f2:	4658      	mov	r0, fp
 800b4f4:	f000 fc90 	bl	800be18 <_Bfree>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	7033      	strb	r3, [r6, #0]
 800b4fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b4fe:	3701      	adds	r7, #1
 800b500:	601f      	str	r7, [r3, #0]
 800b502:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b504:	2b00      	cmp	r3, #0
 800b506:	f000 831d 	beq.w	800bb44 <_dtoa_r+0xb34>
 800b50a:	601e      	str	r6, [r3, #0]
 800b50c:	e31a      	b.n	800bb44 <_dtoa_r+0xb34>
 800b50e:	07e2      	lsls	r2, r4, #31
 800b510:	d505      	bpl.n	800b51e <_dtoa_r+0x50e>
 800b512:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b516:	f7f5 f8a7 	bl	8000668 <__aeabi_dmul>
 800b51a:	3601      	adds	r6, #1
 800b51c:	2301      	movs	r3, #1
 800b51e:	1064      	asrs	r4, r4, #1
 800b520:	3508      	adds	r5, #8
 800b522:	e73f      	b.n	800b3a4 <_dtoa_r+0x394>
 800b524:	2602      	movs	r6, #2
 800b526:	e742      	b.n	800b3ae <_dtoa_r+0x39e>
 800b528:	9c07      	ldr	r4, [sp, #28]
 800b52a:	9704      	str	r7, [sp, #16]
 800b52c:	e761      	b.n	800b3f2 <_dtoa_r+0x3e2>
 800b52e:	4b27      	ldr	r3, [pc, #156]	@ (800b5cc <_dtoa_r+0x5bc>)
 800b530:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b532:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b536:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b53a:	4454      	add	r4, sl
 800b53c:	2900      	cmp	r1, #0
 800b53e:	d053      	beq.n	800b5e8 <_dtoa_r+0x5d8>
 800b540:	4928      	ldr	r1, [pc, #160]	@ (800b5e4 <_dtoa_r+0x5d4>)
 800b542:	2000      	movs	r0, #0
 800b544:	f7f5 f9ba 	bl	80008bc <__aeabi_ddiv>
 800b548:	4633      	mov	r3, r6
 800b54a:	462a      	mov	r2, r5
 800b54c:	f7f4 fed4 	bl	80002f8 <__aeabi_dsub>
 800b550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b554:	4656      	mov	r6, sl
 800b556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b55a:	f7f5 fb35 	bl	8000bc8 <__aeabi_d2iz>
 800b55e:	4605      	mov	r5, r0
 800b560:	f7f5 f818 	bl	8000594 <__aeabi_i2d>
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b56c:	f7f4 fec4 	bl	80002f8 <__aeabi_dsub>
 800b570:	3530      	adds	r5, #48	@ 0x30
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b57a:	f806 5b01 	strb.w	r5, [r6], #1
 800b57e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b582:	f7f5 fae3 	bl	8000b4c <__aeabi_dcmplt>
 800b586:	2800      	cmp	r0, #0
 800b588:	d171      	bne.n	800b66e <_dtoa_r+0x65e>
 800b58a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b58e:	4911      	ldr	r1, [pc, #68]	@ (800b5d4 <_dtoa_r+0x5c4>)
 800b590:	2000      	movs	r0, #0
 800b592:	f7f4 feb1 	bl	80002f8 <__aeabi_dsub>
 800b596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b59a:	f7f5 fad7 	bl	8000b4c <__aeabi_dcmplt>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	f040 8095 	bne.w	800b6ce <_dtoa_r+0x6be>
 800b5a4:	42a6      	cmp	r6, r4
 800b5a6:	f43f af50 	beq.w	800b44a <_dtoa_r+0x43a>
 800b5aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b5ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b5d8 <_dtoa_r+0x5c8>)
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f7f5 f859 	bl	8000668 <__aeabi_dmul>
 800b5b6:	4b08      	ldr	r3, [pc, #32]	@ (800b5d8 <_dtoa_r+0x5c8>)
 800b5b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b5bc:	2200      	movs	r2, #0
 800b5be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5c2:	f7f5 f851 	bl	8000668 <__aeabi_dmul>
 800b5c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5ca:	e7c4      	b.n	800b556 <_dtoa_r+0x546>
 800b5cc:	0800eb68 	.word	0x0800eb68
 800b5d0:	0800eb40 	.word	0x0800eb40
 800b5d4:	3ff00000 	.word	0x3ff00000
 800b5d8:	40240000 	.word	0x40240000
 800b5dc:	401c0000 	.word	0x401c0000
 800b5e0:	40140000 	.word	0x40140000
 800b5e4:	3fe00000 	.word	0x3fe00000
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	f7f5 f83c 	bl	8000668 <__aeabi_dmul>
 800b5f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b5f4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b5f6:	4656      	mov	r6, sl
 800b5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5fc:	f7f5 fae4 	bl	8000bc8 <__aeabi_d2iz>
 800b600:	4605      	mov	r5, r0
 800b602:	f7f4 ffc7 	bl	8000594 <__aeabi_i2d>
 800b606:	4602      	mov	r2, r0
 800b608:	460b      	mov	r3, r1
 800b60a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b60e:	f7f4 fe73 	bl	80002f8 <__aeabi_dsub>
 800b612:	3530      	adds	r5, #48	@ 0x30
 800b614:	f806 5b01 	strb.w	r5, [r6], #1
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	42a6      	cmp	r6, r4
 800b61e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b622:	f04f 0200 	mov.w	r2, #0
 800b626:	d124      	bne.n	800b672 <_dtoa_r+0x662>
 800b628:	4bac      	ldr	r3, [pc, #688]	@ (800b8dc <_dtoa_r+0x8cc>)
 800b62a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b62e:	f7f4 fe65 	bl	80002fc <__adddf3>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b63a:	f7f5 faa5 	bl	8000b88 <__aeabi_dcmpgt>
 800b63e:	2800      	cmp	r0, #0
 800b640:	d145      	bne.n	800b6ce <_dtoa_r+0x6be>
 800b642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b646:	49a5      	ldr	r1, [pc, #660]	@ (800b8dc <_dtoa_r+0x8cc>)
 800b648:	2000      	movs	r0, #0
 800b64a:	f7f4 fe55 	bl	80002f8 <__aeabi_dsub>
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b656:	f7f5 fa79 	bl	8000b4c <__aeabi_dcmplt>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	f43f aef5 	beq.w	800b44a <_dtoa_r+0x43a>
 800b660:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b662:	1e73      	subs	r3, r6, #1
 800b664:	9315      	str	r3, [sp, #84]	@ 0x54
 800b666:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b66a:	2b30      	cmp	r3, #48	@ 0x30
 800b66c:	d0f8      	beq.n	800b660 <_dtoa_r+0x650>
 800b66e:	9f04      	ldr	r7, [sp, #16]
 800b670:	e73e      	b.n	800b4f0 <_dtoa_r+0x4e0>
 800b672:	4b9b      	ldr	r3, [pc, #620]	@ (800b8e0 <_dtoa_r+0x8d0>)
 800b674:	f7f4 fff8 	bl	8000668 <__aeabi_dmul>
 800b678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b67c:	e7bc      	b.n	800b5f8 <_dtoa_r+0x5e8>
 800b67e:	d10c      	bne.n	800b69a <_dtoa_r+0x68a>
 800b680:	4b98      	ldr	r3, [pc, #608]	@ (800b8e4 <_dtoa_r+0x8d4>)
 800b682:	2200      	movs	r2, #0
 800b684:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b688:	f7f4 ffee 	bl	8000668 <__aeabi_dmul>
 800b68c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b690:	f7f5 fa70 	bl	8000b74 <__aeabi_dcmpge>
 800b694:	2800      	cmp	r0, #0
 800b696:	f000 8157 	beq.w	800b948 <_dtoa_r+0x938>
 800b69a:	2400      	movs	r4, #0
 800b69c:	4625      	mov	r5, r4
 800b69e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6a0:	43db      	mvns	r3, r3
 800b6a2:	9304      	str	r3, [sp, #16]
 800b6a4:	4656      	mov	r6, sl
 800b6a6:	2700      	movs	r7, #0
 800b6a8:	4621      	mov	r1, r4
 800b6aa:	4658      	mov	r0, fp
 800b6ac:	f000 fbb4 	bl	800be18 <_Bfree>
 800b6b0:	2d00      	cmp	r5, #0
 800b6b2:	d0dc      	beq.n	800b66e <_dtoa_r+0x65e>
 800b6b4:	b12f      	cbz	r7, 800b6c2 <_dtoa_r+0x6b2>
 800b6b6:	42af      	cmp	r7, r5
 800b6b8:	d003      	beq.n	800b6c2 <_dtoa_r+0x6b2>
 800b6ba:	4639      	mov	r1, r7
 800b6bc:	4658      	mov	r0, fp
 800b6be:	f000 fbab 	bl	800be18 <_Bfree>
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	4658      	mov	r0, fp
 800b6c6:	f000 fba7 	bl	800be18 <_Bfree>
 800b6ca:	e7d0      	b.n	800b66e <_dtoa_r+0x65e>
 800b6cc:	9704      	str	r7, [sp, #16]
 800b6ce:	4633      	mov	r3, r6
 800b6d0:	461e      	mov	r6, r3
 800b6d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6d6:	2a39      	cmp	r2, #57	@ 0x39
 800b6d8:	d107      	bne.n	800b6ea <_dtoa_r+0x6da>
 800b6da:	459a      	cmp	sl, r3
 800b6dc:	d1f8      	bne.n	800b6d0 <_dtoa_r+0x6c0>
 800b6de:	9a04      	ldr	r2, [sp, #16]
 800b6e0:	3201      	adds	r2, #1
 800b6e2:	9204      	str	r2, [sp, #16]
 800b6e4:	2230      	movs	r2, #48	@ 0x30
 800b6e6:	f88a 2000 	strb.w	r2, [sl]
 800b6ea:	781a      	ldrb	r2, [r3, #0]
 800b6ec:	3201      	adds	r2, #1
 800b6ee:	701a      	strb	r2, [r3, #0]
 800b6f0:	e7bd      	b.n	800b66e <_dtoa_r+0x65e>
 800b6f2:	4b7b      	ldr	r3, [pc, #492]	@ (800b8e0 <_dtoa_r+0x8d0>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f7f4 ffb7 	bl	8000668 <__aeabi_dmul>
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	4604      	mov	r4, r0
 800b700:	460d      	mov	r5, r1
 800b702:	f7f5 fa19 	bl	8000b38 <__aeabi_dcmpeq>
 800b706:	2800      	cmp	r0, #0
 800b708:	f43f aebb 	beq.w	800b482 <_dtoa_r+0x472>
 800b70c:	e6f0      	b.n	800b4f0 <_dtoa_r+0x4e0>
 800b70e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b710:	2a00      	cmp	r2, #0
 800b712:	f000 80db 	beq.w	800b8cc <_dtoa_r+0x8bc>
 800b716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b718:	2a01      	cmp	r2, #1
 800b71a:	f300 80bf 	bgt.w	800b89c <_dtoa_r+0x88c>
 800b71e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b720:	2a00      	cmp	r2, #0
 800b722:	f000 80b7 	beq.w	800b894 <_dtoa_r+0x884>
 800b726:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b72a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b72c:	4646      	mov	r6, r8
 800b72e:	9a08      	ldr	r2, [sp, #32]
 800b730:	2101      	movs	r1, #1
 800b732:	441a      	add	r2, r3
 800b734:	4658      	mov	r0, fp
 800b736:	4498      	add	r8, r3
 800b738:	9208      	str	r2, [sp, #32]
 800b73a:	f000 fc6b 	bl	800c014 <__i2b>
 800b73e:	4605      	mov	r5, r0
 800b740:	b15e      	cbz	r6, 800b75a <_dtoa_r+0x74a>
 800b742:	9b08      	ldr	r3, [sp, #32]
 800b744:	2b00      	cmp	r3, #0
 800b746:	dd08      	ble.n	800b75a <_dtoa_r+0x74a>
 800b748:	42b3      	cmp	r3, r6
 800b74a:	9a08      	ldr	r2, [sp, #32]
 800b74c:	bfa8      	it	ge
 800b74e:	4633      	movge	r3, r6
 800b750:	eba8 0803 	sub.w	r8, r8, r3
 800b754:	1af6      	subs	r6, r6, r3
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	9308      	str	r3, [sp, #32]
 800b75a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b75c:	b1f3      	cbz	r3, 800b79c <_dtoa_r+0x78c>
 800b75e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b760:	2b00      	cmp	r3, #0
 800b762:	f000 80b7 	beq.w	800b8d4 <_dtoa_r+0x8c4>
 800b766:	b18c      	cbz	r4, 800b78c <_dtoa_r+0x77c>
 800b768:	4629      	mov	r1, r5
 800b76a:	4622      	mov	r2, r4
 800b76c:	4658      	mov	r0, fp
 800b76e:	f000 fd11 	bl	800c194 <__pow5mult>
 800b772:	464a      	mov	r2, r9
 800b774:	4601      	mov	r1, r0
 800b776:	4605      	mov	r5, r0
 800b778:	4658      	mov	r0, fp
 800b77a:	f000 fc61 	bl	800c040 <__multiply>
 800b77e:	4649      	mov	r1, r9
 800b780:	9004      	str	r0, [sp, #16]
 800b782:	4658      	mov	r0, fp
 800b784:	f000 fb48 	bl	800be18 <_Bfree>
 800b788:	9b04      	ldr	r3, [sp, #16]
 800b78a:	4699      	mov	r9, r3
 800b78c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b78e:	1b1a      	subs	r2, r3, r4
 800b790:	d004      	beq.n	800b79c <_dtoa_r+0x78c>
 800b792:	4649      	mov	r1, r9
 800b794:	4658      	mov	r0, fp
 800b796:	f000 fcfd 	bl	800c194 <__pow5mult>
 800b79a:	4681      	mov	r9, r0
 800b79c:	2101      	movs	r1, #1
 800b79e:	4658      	mov	r0, fp
 800b7a0:	f000 fc38 	bl	800c014 <__i2b>
 800b7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f000 81cf 	beq.w	800bb4c <_dtoa_r+0xb3c>
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	4601      	mov	r1, r0
 800b7b2:	4658      	mov	r0, fp
 800b7b4:	f000 fcee 	bl	800c194 <__pow5mult>
 800b7b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	4604      	mov	r4, r0
 800b7be:	f300 8095 	bgt.w	800b8ec <_dtoa_r+0x8dc>
 800b7c2:	9b02      	ldr	r3, [sp, #8]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f040 8087 	bne.w	800b8d8 <_dtoa_r+0x8c8>
 800b7ca:	9b03      	ldr	r3, [sp, #12]
 800b7cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f040 8089 	bne.w	800b8e8 <_dtoa_r+0x8d8>
 800b7d6:	9b03      	ldr	r3, [sp, #12]
 800b7d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b7dc:	0d1b      	lsrs	r3, r3, #20
 800b7de:	051b      	lsls	r3, r3, #20
 800b7e0:	b12b      	cbz	r3, 800b7ee <_dtoa_r+0x7de>
 800b7e2:	9b08      	ldr	r3, [sp, #32]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	9308      	str	r3, [sp, #32]
 800b7e8:	f108 0801 	add.w	r8, r8, #1
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 81b0 	beq.w	800bb58 <_dtoa_r+0xb48>
 800b7f8:	6923      	ldr	r3, [r4, #16]
 800b7fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7fe:	6918      	ldr	r0, [r3, #16]
 800b800:	f000 fbbc 	bl	800bf7c <__hi0bits>
 800b804:	f1c0 0020 	rsb	r0, r0, #32
 800b808:	9b08      	ldr	r3, [sp, #32]
 800b80a:	4418      	add	r0, r3
 800b80c:	f010 001f 	ands.w	r0, r0, #31
 800b810:	d077      	beq.n	800b902 <_dtoa_r+0x8f2>
 800b812:	f1c0 0320 	rsb	r3, r0, #32
 800b816:	2b04      	cmp	r3, #4
 800b818:	dd6b      	ble.n	800b8f2 <_dtoa_r+0x8e2>
 800b81a:	9b08      	ldr	r3, [sp, #32]
 800b81c:	f1c0 001c 	rsb	r0, r0, #28
 800b820:	4403      	add	r3, r0
 800b822:	4480      	add	r8, r0
 800b824:	4406      	add	r6, r0
 800b826:	9308      	str	r3, [sp, #32]
 800b828:	f1b8 0f00 	cmp.w	r8, #0
 800b82c:	dd05      	ble.n	800b83a <_dtoa_r+0x82a>
 800b82e:	4649      	mov	r1, r9
 800b830:	4642      	mov	r2, r8
 800b832:	4658      	mov	r0, fp
 800b834:	f000 fd08 	bl	800c248 <__lshift>
 800b838:	4681      	mov	r9, r0
 800b83a:	9b08      	ldr	r3, [sp, #32]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	dd05      	ble.n	800b84c <_dtoa_r+0x83c>
 800b840:	4621      	mov	r1, r4
 800b842:	461a      	mov	r2, r3
 800b844:	4658      	mov	r0, fp
 800b846:	f000 fcff 	bl	800c248 <__lshift>
 800b84a:	4604      	mov	r4, r0
 800b84c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d059      	beq.n	800b906 <_dtoa_r+0x8f6>
 800b852:	4621      	mov	r1, r4
 800b854:	4648      	mov	r0, r9
 800b856:	f000 fd63 	bl	800c320 <__mcmp>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	da53      	bge.n	800b906 <_dtoa_r+0x8f6>
 800b85e:	1e7b      	subs	r3, r7, #1
 800b860:	9304      	str	r3, [sp, #16]
 800b862:	4649      	mov	r1, r9
 800b864:	2300      	movs	r3, #0
 800b866:	220a      	movs	r2, #10
 800b868:	4658      	mov	r0, fp
 800b86a:	f000 faf7 	bl	800be5c <__multadd>
 800b86e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b870:	4681      	mov	r9, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	f000 8172 	beq.w	800bb5c <_dtoa_r+0xb4c>
 800b878:	2300      	movs	r3, #0
 800b87a:	4629      	mov	r1, r5
 800b87c:	220a      	movs	r2, #10
 800b87e:	4658      	mov	r0, fp
 800b880:	f000 faec 	bl	800be5c <__multadd>
 800b884:	9b00      	ldr	r3, [sp, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	4605      	mov	r5, r0
 800b88a:	dc67      	bgt.n	800b95c <_dtoa_r+0x94c>
 800b88c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b88e:	2b02      	cmp	r3, #2
 800b890:	dc41      	bgt.n	800b916 <_dtoa_r+0x906>
 800b892:	e063      	b.n	800b95c <_dtoa_r+0x94c>
 800b894:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b896:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b89a:	e746      	b.n	800b72a <_dtoa_r+0x71a>
 800b89c:	9b07      	ldr	r3, [sp, #28]
 800b89e:	1e5c      	subs	r4, r3, #1
 800b8a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8a2:	42a3      	cmp	r3, r4
 800b8a4:	bfbf      	itttt	lt
 800b8a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b8a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b8aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b8ac:	1ae3      	sublt	r3, r4, r3
 800b8ae:	bfb4      	ite	lt
 800b8b0:	18d2      	addlt	r2, r2, r3
 800b8b2:	1b1c      	subge	r4, r3, r4
 800b8b4:	9b07      	ldr	r3, [sp, #28]
 800b8b6:	bfbc      	itt	lt
 800b8b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b8ba:	2400      	movlt	r4, #0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	bfb5      	itete	lt
 800b8c0:	eba8 0603 	sublt.w	r6, r8, r3
 800b8c4:	9b07      	ldrge	r3, [sp, #28]
 800b8c6:	2300      	movlt	r3, #0
 800b8c8:	4646      	movge	r6, r8
 800b8ca:	e730      	b.n	800b72e <_dtoa_r+0x71e>
 800b8cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b8ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b8d0:	4646      	mov	r6, r8
 800b8d2:	e735      	b.n	800b740 <_dtoa_r+0x730>
 800b8d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b8d6:	e75c      	b.n	800b792 <_dtoa_r+0x782>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	e788      	b.n	800b7ee <_dtoa_r+0x7de>
 800b8dc:	3fe00000 	.word	0x3fe00000
 800b8e0:	40240000 	.word	0x40240000
 800b8e4:	40140000 	.word	0x40140000
 800b8e8:	9b02      	ldr	r3, [sp, #8]
 800b8ea:	e780      	b.n	800b7ee <_dtoa_r+0x7de>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8f0:	e782      	b.n	800b7f8 <_dtoa_r+0x7e8>
 800b8f2:	d099      	beq.n	800b828 <_dtoa_r+0x818>
 800b8f4:	9a08      	ldr	r2, [sp, #32]
 800b8f6:	331c      	adds	r3, #28
 800b8f8:	441a      	add	r2, r3
 800b8fa:	4498      	add	r8, r3
 800b8fc:	441e      	add	r6, r3
 800b8fe:	9208      	str	r2, [sp, #32]
 800b900:	e792      	b.n	800b828 <_dtoa_r+0x818>
 800b902:	4603      	mov	r3, r0
 800b904:	e7f6      	b.n	800b8f4 <_dtoa_r+0x8e4>
 800b906:	9b07      	ldr	r3, [sp, #28]
 800b908:	9704      	str	r7, [sp, #16]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	dc20      	bgt.n	800b950 <_dtoa_r+0x940>
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b912:	2b02      	cmp	r3, #2
 800b914:	dd1e      	ble.n	800b954 <_dtoa_r+0x944>
 800b916:	9b00      	ldr	r3, [sp, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f47f aec0 	bne.w	800b69e <_dtoa_r+0x68e>
 800b91e:	4621      	mov	r1, r4
 800b920:	2205      	movs	r2, #5
 800b922:	4658      	mov	r0, fp
 800b924:	f000 fa9a 	bl	800be5c <__multadd>
 800b928:	4601      	mov	r1, r0
 800b92a:	4604      	mov	r4, r0
 800b92c:	4648      	mov	r0, r9
 800b92e:	f000 fcf7 	bl	800c320 <__mcmp>
 800b932:	2800      	cmp	r0, #0
 800b934:	f77f aeb3 	ble.w	800b69e <_dtoa_r+0x68e>
 800b938:	4656      	mov	r6, sl
 800b93a:	2331      	movs	r3, #49	@ 0x31
 800b93c:	f806 3b01 	strb.w	r3, [r6], #1
 800b940:	9b04      	ldr	r3, [sp, #16]
 800b942:	3301      	adds	r3, #1
 800b944:	9304      	str	r3, [sp, #16]
 800b946:	e6ae      	b.n	800b6a6 <_dtoa_r+0x696>
 800b948:	9c07      	ldr	r4, [sp, #28]
 800b94a:	9704      	str	r7, [sp, #16]
 800b94c:	4625      	mov	r5, r4
 800b94e:	e7f3      	b.n	800b938 <_dtoa_r+0x928>
 800b950:	9b07      	ldr	r3, [sp, #28]
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b956:	2b00      	cmp	r3, #0
 800b958:	f000 8104 	beq.w	800bb64 <_dtoa_r+0xb54>
 800b95c:	2e00      	cmp	r6, #0
 800b95e:	dd05      	ble.n	800b96c <_dtoa_r+0x95c>
 800b960:	4629      	mov	r1, r5
 800b962:	4632      	mov	r2, r6
 800b964:	4658      	mov	r0, fp
 800b966:	f000 fc6f 	bl	800c248 <__lshift>
 800b96a:	4605      	mov	r5, r0
 800b96c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d05a      	beq.n	800ba28 <_dtoa_r+0xa18>
 800b972:	6869      	ldr	r1, [r5, #4]
 800b974:	4658      	mov	r0, fp
 800b976:	f000 fa0f 	bl	800bd98 <_Balloc>
 800b97a:	4606      	mov	r6, r0
 800b97c:	b928      	cbnz	r0, 800b98a <_dtoa_r+0x97a>
 800b97e:	4b84      	ldr	r3, [pc, #528]	@ (800bb90 <_dtoa_r+0xb80>)
 800b980:	4602      	mov	r2, r0
 800b982:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b986:	f7ff bb5a 	b.w	800b03e <_dtoa_r+0x2e>
 800b98a:	692a      	ldr	r2, [r5, #16]
 800b98c:	3202      	adds	r2, #2
 800b98e:	0092      	lsls	r2, r2, #2
 800b990:	f105 010c 	add.w	r1, r5, #12
 800b994:	300c      	adds	r0, #12
 800b996:	f001 ff0b 	bl	800d7b0 <memcpy>
 800b99a:	2201      	movs	r2, #1
 800b99c:	4631      	mov	r1, r6
 800b99e:	4658      	mov	r0, fp
 800b9a0:	f000 fc52 	bl	800c248 <__lshift>
 800b9a4:	f10a 0301 	add.w	r3, sl, #1
 800b9a8:	9307      	str	r3, [sp, #28]
 800b9aa:	9b00      	ldr	r3, [sp, #0]
 800b9ac:	4453      	add	r3, sl
 800b9ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9b0:	9b02      	ldr	r3, [sp, #8]
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	462f      	mov	r7, r5
 800b9b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9ba:	4605      	mov	r5, r0
 800b9bc:	9b07      	ldr	r3, [sp, #28]
 800b9be:	4621      	mov	r1, r4
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	4648      	mov	r0, r9
 800b9c4:	9300      	str	r3, [sp, #0]
 800b9c6:	f7ff fa99 	bl	800aefc <quorem>
 800b9ca:	4639      	mov	r1, r7
 800b9cc:	9002      	str	r0, [sp, #8]
 800b9ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b9d2:	4648      	mov	r0, r9
 800b9d4:	f000 fca4 	bl	800c320 <__mcmp>
 800b9d8:	462a      	mov	r2, r5
 800b9da:	9008      	str	r0, [sp, #32]
 800b9dc:	4621      	mov	r1, r4
 800b9de:	4658      	mov	r0, fp
 800b9e0:	f000 fcba 	bl	800c358 <__mdiff>
 800b9e4:	68c2      	ldr	r2, [r0, #12]
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	bb02      	cbnz	r2, 800ba2c <_dtoa_r+0xa1c>
 800b9ea:	4601      	mov	r1, r0
 800b9ec:	4648      	mov	r0, r9
 800b9ee:	f000 fc97 	bl	800c320 <__mcmp>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	4631      	mov	r1, r6
 800b9f6:	4658      	mov	r0, fp
 800b9f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9fa:	f000 fa0d 	bl	800be18 <_Bfree>
 800b9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba02:	9e07      	ldr	r6, [sp, #28]
 800ba04:	ea43 0102 	orr.w	r1, r3, r2
 800ba08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba0a:	4319      	orrs	r1, r3
 800ba0c:	d110      	bne.n	800ba30 <_dtoa_r+0xa20>
 800ba0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba12:	d029      	beq.n	800ba68 <_dtoa_r+0xa58>
 800ba14:	9b08      	ldr	r3, [sp, #32]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	dd02      	ble.n	800ba20 <_dtoa_r+0xa10>
 800ba1a:	9b02      	ldr	r3, [sp, #8]
 800ba1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ba20:	9b00      	ldr	r3, [sp, #0]
 800ba22:	f883 8000 	strb.w	r8, [r3]
 800ba26:	e63f      	b.n	800b6a8 <_dtoa_r+0x698>
 800ba28:	4628      	mov	r0, r5
 800ba2a:	e7bb      	b.n	800b9a4 <_dtoa_r+0x994>
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	e7e1      	b.n	800b9f4 <_dtoa_r+0x9e4>
 800ba30:	9b08      	ldr	r3, [sp, #32]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	db04      	blt.n	800ba40 <_dtoa_r+0xa30>
 800ba36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba38:	430b      	orrs	r3, r1
 800ba3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ba3c:	430b      	orrs	r3, r1
 800ba3e:	d120      	bne.n	800ba82 <_dtoa_r+0xa72>
 800ba40:	2a00      	cmp	r2, #0
 800ba42:	dded      	ble.n	800ba20 <_dtoa_r+0xa10>
 800ba44:	4649      	mov	r1, r9
 800ba46:	2201      	movs	r2, #1
 800ba48:	4658      	mov	r0, fp
 800ba4a:	f000 fbfd 	bl	800c248 <__lshift>
 800ba4e:	4621      	mov	r1, r4
 800ba50:	4681      	mov	r9, r0
 800ba52:	f000 fc65 	bl	800c320 <__mcmp>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	dc03      	bgt.n	800ba62 <_dtoa_r+0xa52>
 800ba5a:	d1e1      	bne.n	800ba20 <_dtoa_r+0xa10>
 800ba5c:	f018 0f01 	tst.w	r8, #1
 800ba60:	d0de      	beq.n	800ba20 <_dtoa_r+0xa10>
 800ba62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba66:	d1d8      	bne.n	800ba1a <_dtoa_r+0xa0a>
 800ba68:	9a00      	ldr	r2, [sp, #0]
 800ba6a:	2339      	movs	r3, #57	@ 0x39
 800ba6c:	7013      	strb	r3, [r2, #0]
 800ba6e:	4633      	mov	r3, r6
 800ba70:	461e      	mov	r6, r3
 800ba72:	3b01      	subs	r3, #1
 800ba74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ba78:	2a39      	cmp	r2, #57	@ 0x39
 800ba7a:	d052      	beq.n	800bb22 <_dtoa_r+0xb12>
 800ba7c:	3201      	adds	r2, #1
 800ba7e:	701a      	strb	r2, [r3, #0]
 800ba80:	e612      	b.n	800b6a8 <_dtoa_r+0x698>
 800ba82:	2a00      	cmp	r2, #0
 800ba84:	dd07      	ble.n	800ba96 <_dtoa_r+0xa86>
 800ba86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba8a:	d0ed      	beq.n	800ba68 <_dtoa_r+0xa58>
 800ba8c:	9a00      	ldr	r2, [sp, #0]
 800ba8e:	f108 0301 	add.w	r3, r8, #1
 800ba92:	7013      	strb	r3, [r2, #0]
 800ba94:	e608      	b.n	800b6a8 <_dtoa_r+0x698>
 800ba96:	9b07      	ldr	r3, [sp, #28]
 800ba98:	9a07      	ldr	r2, [sp, #28]
 800ba9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ba9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d028      	beq.n	800baf6 <_dtoa_r+0xae6>
 800baa4:	4649      	mov	r1, r9
 800baa6:	2300      	movs	r3, #0
 800baa8:	220a      	movs	r2, #10
 800baaa:	4658      	mov	r0, fp
 800baac:	f000 f9d6 	bl	800be5c <__multadd>
 800bab0:	42af      	cmp	r7, r5
 800bab2:	4681      	mov	r9, r0
 800bab4:	f04f 0300 	mov.w	r3, #0
 800bab8:	f04f 020a 	mov.w	r2, #10
 800babc:	4639      	mov	r1, r7
 800babe:	4658      	mov	r0, fp
 800bac0:	d107      	bne.n	800bad2 <_dtoa_r+0xac2>
 800bac2:	f000 f9cb 	bl	800be5c <__multadd>
 800bac6:	4607      	mov	r7, r0
 800bac8:	4605      	mov	r5, r0
 800baca:	9b07      	ldr	r3, [sp, #28]
 800bacc:	3301      	adds	r3, #1
 800bace:	9307      	str	r3, [sp, #28]
 800bad0:	e774      	b.n	800b9bc <_dtoa_r+0x9ac>
 800bad2:	f000 f9c3 	bl	800be5c <__multadd>
 800bad6:	4629      	mov	r1, r5
 800bad8:	4607      	mov	r7, r0
 800bada:	2300      	movs	r3, #0
 800badc:	220a      	movs	r2, #10
 800bade:	4658      	mov	r0, fp
 800bae0:	f000 f9bc 	bl	800be5c <__multadd>
 800bae4:	4605      	mov	r5, r0
 800bae6:	e7f0      	b.n	800baca <_dtoa_r+0xaba>
 800bae8:	9b00      	ldr	r3, [sp, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	bfcc      	ite	gt
 800baee:	461e      	movgt	r6, r3
 800baf0:	2601      	movle	r6, #1
 800baf2:	4456      	add	r6, sl
 800baf4:	2700      	movs	r7, #0
 800baf6:	4649      	mov	r1, r9
 800baf8:	2201      	movs	r2, #1
 800bafa:	4658      	mov	r0, fp
 800bafc:	f000 fba4 	bl	800c248 <__lshift>
 800bb00:	4621      	mov	r1, r4
 800bb02:	4681      	mov	r9, r0
 800bb04:	f000 fc0c 	bl	800c320 <__mcmp>
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	dcb0      	bgt.n	800ba6e <_dtoa_r+0xa5e>
 800bb0c:	d102      	bne.n	800bb14 <_dtoa_r+0xb04>
 800bb0e:	f018 0f01 	tst.w	r8, #1
 800bb12:	d1ac      	bne.n	800ba6e <_dtoa_r+0xa5e>
 800bb14:	4633      	mov	r3, r6
 800bb16:	461e      	mov	r6, r3
 800bb18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb1c:	2a30      	cmp	r2, #48	@ 0x30
 800bb1e:	d0fa      	beq.n	800bb16 <_dtoa_r+0xb06>
 800bb20:	e5c2      	b.n	800b6a8 <_dtoa_r+0x698>
 800bb22:	459a      	cmp	sl, r3
 800bb24:	d1a4      	bne.n	800ba70 <_dtoa_r+0xa60>
 800bb26:	9b04      	ldr	r3, [sp, #16]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	9304      	str	r3, [sp, #16]
 800bb2c:	2331      	movs	r3, #49	@ 0x31
 800bb2e:	f88a 3000 	strb.w	r3, [sl]
 800bb32:	e5b9      	b.n	800b6a8 <_dtoa_r+0x698>
 800bb34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bb94 <_dtoa_r+0xb84>
 800bb3a:	b11b      	cbz	r3, 800bb44 <_dtoa_r+0xb34>
 800bb3c:	f10a 0308 	add.w	r3, sl, #8
 800bb40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb42:	6013      	str	r3, [r2, #0]
 800bb44:	4650      	mov	r0, sl
 800bb46:	b019      	add	sp, #100	@ 0x64
 800bb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	f77f ae37 	ble.w	800b7c2 <_dtoa_r+0x7b2>
 800bb54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb56:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb58:	2001      	movs	r0, #1
 800bb5a:	e655      	b.n	800b808 <_dtoa_r+0x7f8>
 800bb5c:	9b00      	ldr	r3, [sp, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f77f aed6 	ble.w	800b910 <_dtoa_r+0x900>
 800bb64:	4656      	mov	r6, sl
 800bb66:	4621      	mov	r1, r4
 800bb68:	4648      	mov	r0, r9
 800bb6a:	f7ff f9c7 	bl	800aefc <quorem>
 800bb6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb72:	f806 8b01 	strb.w	r8, [r6], #1
 800bb76:	9b00      	ldr	r3, [sp, #0]
 800bb78:	eba6 020a 	sub.w	r2, r6, sl
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	ddb3      	ble.n	800bae8 <_dtoa_r+0xad8>
 800bb80:	4649      	mov	r1, r9
 800bb82:	2300      	movs	r3, #0
 800bb84:	220a      	movs	r2, #10
 800bb86:	4658      	mov	r0, fp
 800bb88:	f000 f968 	bl	800be5c <__multadd>
 800bb8c:	4681      	mov	r9, r0
 800bb8e:	e7ea      	b.n	800bb66 <_dtoa_r+0xb56>
 800bb90:	0800eac8 	.word	0x0800eac8
 800bb94:	0800ea63 	.word	0x0800ea63

0800bb98 <_free_r>:
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	4605      	mov	r5, r0
 800bb9c:	2900      	cmp	r1, #0
 800bb9e:	d041      	beq.n	800bc24 <_free_r+0x8c>
 800bba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bba4:	1f0c      	subs	r4, r1, #4
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	bfb8      	it	lt
 800bbaa:	18e4      	addlt	r4, r4, r3
 800bbac:	f000 f8e8 	bl	800bd80 <__malloc_lock>
 800bbb0:	4a1d      	ldr	r2, [pc, #116]	@ (800bc28 <_free_r+0x90>)
 800bbb2:	6813      	ldr	r3, [r2, #0]
 800bbb4:	b933      	cbnz	r3, 800bbc4 <_free_r+0x2c>
 800bbb6:	6063      	str	r3, [r4, #4]
 800bbb8:	6014      	str	r4, [r2, #0]
 800bbba:	4628      	mov	r0, r5
 800bbbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbc0:	f000 b8e4 	b.w	800bd8c <__malloc_unlock>
 800bbc4:	42a3      	cmp	r3, r4
 800bbc6:	d908      	bls.n	800bbda <_free_r+0x42>
 800bbc8:	6820      	ldr	r0, [r4, #0]
 800bbca:	1821      	adds	r1, r4, r0
 800bbcc:	428b      	cmp	r3, r1
 800bbce:	bf01      	itttt	eq
 800bbd0:	6819      	ldreq	r1, [r3, #0]
 800bbd2:	685b      	ldreq	r3, [r3, #4]
 800bbd4:	1809      	addeq	r1, r1, r0
 800bbd6:	6021      	streq	r1, [r4, #0]
 800bbd8:	e7ed      	b.n	800bbb6 <_free_r+0x1e>
 800bbda:	461a      	mov	r2, r3
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	b10b      	cbz	r3, 800bbe4 <_free_r+0x4c>
 800bbe0:	42a3      	cmp	r3, r4
 800bbe2:	d9fa      	bls.n	800bbda <_free_r+0x42>
 800bbe4:	6811      	ldr	r1, [r2, #0]
 800bbe6:	1850      	adds	r0, r2, r1
 800bbe8:	42a0      	cmp	r0, r4
 800bbea:	d10b      	bne.n	800bc04 <_free_r+0x6c>
 800bbec:	6820      	ldr	r0, [r4, #0]
 800bbee:	4401      	add	r1, r0
 800bbf0:	1850      	adds	r0, r2, r1
 800bbf2:	4283      	cmp	r3, r0
 800bbf4:	6011      	str	r1, [r2, #0]
 800bbf6:	d1e0      	bne.n	800bbba <_free_r+0x22>
 800bbf8:	6818      	ldr	r0, [r3, #0]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	6053      	str	r3, [r2, #4]
 800bbfe:	4408      	add	r0, r1
 800bc00:	6010      	str	r0, [r2, #0]
 800bc02:	e7da      	b.n	800bbba <_free_r+0x22>
 800bc04:	d902      	bls.n	800bc0c <_free_r+0x74>
 800bc06:	230c      	movs	r3, #12
 800bc08:	602b      	str	r3, [r5, #0]
 800bc0a:	e7d6      	b.n	800bbba <_free_r+0x22>
 800bc0c:	6820      	ldr	r0, [r4, #0]
 800bc0e:	1821      	adds	r1, r4, r0
 800bc10:	428b      	cmp	r3, r1
 800bc12:	bf04      	itt	eq
 800bc14:	6819      	ldreq	r1, [r3, #0]
 800bc16:	685b      	ldreq	r3, [r3, #4]
 800bc18:	6063      	str	r3, [r4, #4]
 800bc1a:	bf04      	itt	eq
 800bc1c:	1809      	addeq	r1, r1, r0
 800bc1e:	6021      	streq	r1, [r4, #0]
 800bc20:	6054      	str	r4, [r2, #4]
 800bc22:	e7ca      	b.n	800bbba <_free_r+0x22>
 800bc24:	bd38      	pop	{r3, r4, r5, pc}
 800bc26:	bf00      	nop
 800bc28:	200007b8 	.word	0x200007b8

0800bc2c <malloc>:
 800bc2c:	4b02      	ldr	r3, [pc, #8]	@ (800bc38 <malloc+0xc>)
 800bc2e:	4601      	mov	r1, r0
 800bc30:	6818      	ldr	r0, [r3, #0]
 800bc32:	f000 b825 	b.w	800bc80 <_malloc_r>
 800bc36:	bf00      	nop
 800bc38:	20000018 	.word	0x20000018

0800bc3c <sbrk_aligned>:
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	4e0f      	ldr	r6, [pc, #60]	@ (800bc7c <sbrk_aligned+0x40>)
 800bc40:	460c      	mov	r4, r1
 800bc42:	6831      	ldr	r1, [r6, #0]
 800bc44:	4605      	mov	r5, r0
 800bc46:	b911      	cbnz	r1, 800bc4e <sbrk_aligned+0x12>
 800bc48:	f001 fda2 	bl	800d790 <_sbrk_r>
 800bc4c:	6030      	str	r0, [r6, #0]
 800bc4e:	4621      	mov	r1, r4
 800bc50:	4628      	mov	r0, r5
 800bc52:	f001 fd9d 	bl	800d790 <_sbrk_r>
 800bc56:	1c43      	adds	r3, r0, #1
 800bc58:	d103      	bne.n	800bc62 <sbrk_aligned+0x26>
 800bc5a:	f04f 34ff 	mov.w	r4, #4294967295
 800bc5e:	4620      	mov	r0, r4
 800bc60:	bd70      	pop	{r4, r5, r6, pc}
 800bc62:	1cc4      	adds	r4, r0, #3
 800bc64:	f024 0403 	bic.w	r4, r4, #3
 800bc68:	42a0      	cmp	r0, r4
 800bc6a:	d0f8      	beq.n	800bc5e <sbrk_aligned+0x22>
 800bc6c:	1a21      	subs	r1, r4, r0
 800bc6e:	4628      	mov	r0, r5
 800bc70:	f001 fd8e 	bl	800d790 <_sbrk_r>
 800bc74:	3001      	adds	r0, #1
 800bc76:	d1f2      	bne.n	800bc5e <sbrk_aligned+0x22>
 800bc78:	e7ef      	b.n	800bc5a <sbrk_aligned+0x1e>
 800bc7a:	bf00      	nop
 800bc7c:	200007b4 	.word	0x200007b4

0800bc80 <_malloc_r>:
 800bc80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc84:	1ccd      	adds	r5, r1, #3
 800bc86:	f025 0503 	bic.w	r5, r5, #3
 800bc8a:	3508      	adds	r5, #8
 800bc8c:	2d0c      	cmp	r5, #12
 800bc8e:	bf38      	it	cc
 800bc90:	250c      	movcc	r5, #12
 800bc92:	2d00      	cmp	r5, #0
 800bc94:	4606      	mov	r6, r0
 800bc96:	db01      	blt.n	800bc9c <_malloc_r+0x1c>
 800bc98:	42a9      	cmp	r1, r5
 800bc9a:	d904      	bls.n	800bca6 <_malloc_r+0x26>
 800bc9c:	230c      	movs	r3, #12
 800bc9e:	6033      	str	r3, [r6, #0]
 800bca0:	2000      	movs	r0, #0
 800bca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bca6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd7c <_malloc_r+0xfc>
 800bcaa:	f000 f869 	bl	800bd80 <__malloc_lock>
 800bcae:	f8d8 3000 	ldr.w	r3, [r8]
 800bcb2:	461c      	mov	r4, r3
 800bcb4:	bb44      	cbnz	r4, 800bd08 <_malloc_r+0x88>
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	4630      	mov	r0, r6
 800bcba:	f7ff ffbf 	bl	800bc3c <sbrk_aligned>
 800bcbe:	1c43      	adds	r3, r0, #1
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	d158      	bne.n	800bd76 <_malloc_r+0xf6>
 800bcc4:	f8d8 4000 	ldr.w	r4, [r8]
 800bcc8:	4627      	mov	r7, r4
 800bcca:	2f00      	cmp	r7, #0
 800bccc:	d143      	bne.n	800bd56 <_malloc_r+0xd6>
 800bcce:	2c00      	cmp	r4, #0
 800bcd0:	d04b      	beq.n	800bd6a <_malloc_r+0xea>
 800bcd2:	6823      	ldr	r3, [r4, #0]
 800bcd4:	4639      	mov	r1, r7
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	eb04 0903 	add.w	r9, r4, r3
 800bcdc:	f001 fd58 	bl	800d790 <_sbrk_r>
 800bce0:	4581      	cmp	r9, r0
 800bce2:	d142      	bne.n	800bd6a <_malloc_r+0xea>
 800bce4:	6821      	ldr	r1, [r4, #0]
 800bce6:	1a6d      	subs	r5, r5, r1
 800bce8:	4629      	mov	r1, r5
 800bcea:	4630      	mov	r0, r6
 800bcec:	f7ff ffa6 	bl	800bc3c <sbrk_aligned>
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	d03a      	beq.n	800bd6a <_malloc_r+0xea>
 800bcf4:	6823      	ldr	r3, [r4, #0]
 800bcf6:	442b      	add	r3, r5
 800bcf8:	6023      	str	r3, [r4, #0]
 800bcfa:	f8d8 3000 	ldr.w	r3, [r8]
 800bcfe:	685a      	ldr	r2, [r3, #4]
 800bd00:	bb62      	cbnz	r2, 800bd5c <_malloc_r+0xdc>
 800bd02:	f8c8 7000 	str.w	r7, [r8]
 800bd06:	e00f      	b.n	800bd28 <_malloc_r+0xa8>
 800bd08:	6822      	ldr	r2, [r4, #0]
 800bd0a:	1b52      	subs	r2, r2, r5
 800bd0c:	d420      	bmi.n	800bd50 <_malloc_r+0xd0>
 800bd0e:	2a0b      	cmp	r2, #11
 800bd10:	d917      	bls.n	800bd42 <_malloc_r+0xc2>
 800bd12:	1961      	adds	r1, r4, r5
 800bd14:	42a3      	cmp	r3, r4
 800bd16:	6025      	str	r5, [r4, #0]
 800bd18:	bf18      	it	ne
 800bd1a:	6059      	strne	r1, [r3, #4]
 800bd1c:	6863      	ldr	r3, [r4, #4]
 800bd1e:	bf08      	it	eq
 800bd20:	f8c8 1000 	streq.w	r1, [r8]
 800bd24:	5162      	str	r2, [r4, r5]
 800bd26:	604b      	str	r3, [r1, #4]
 800bd28:	4630      	mov	r0, r6
 800bd2a:	f000 f82f 	bl	800bd8c <__malloc_unlock>
 800bd2e:	f104 000b 	add.w	r0, r4, #11
 800bd32:	1d23      	adds	r3, r4, #4
 800bd34:	f020 0007 	bic.w	r0, r0, #7
 800bd38:	1ac2      	subs	r2, r0, r3
 800bd3a:	bf1c      	itt	ne
 800bd3c:	1a1b      	subne	r3, r3, r0
 800bd3e:	50a3      	strne	r3, [r4, r2]
 800bd40:	e7af      	b.n	800bca2 <_malloc_r+0x22>
 800bd42:	6862      	ldr	r2, [r4, #4]
 800bd44:	42a3      	cmp	r3, r4
 800bd46:	bf0c      	ite	eq
 800bd48:	f8c8 2000 	streq.w	r2, [r8]
 800bd4c:	605a      	strne	r2, [r3, #4]
 800bd4e:	e7eb      	b.n	800bd28 <_malloc_r+0xa8>
 800bd50:	4623      	mov	r3, r4
 800bd52:	6864      	ldr	r4, [r4, #4]
 800bd54:	e7ae      	b.n	800bcb4 <_malloc_r+0x34>
 800bd56:	463c      	mov	r4, r7
 800bd58:	687f      	ldr	r7, [r7, #4]
 800bd5a:	e7b6      	b.n	800bcca <_malloc_r+0x4a>
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	42a3      	cmp	r3, r4
 800bd62:	d1fb      	bne.n	800bd5c <_malloc_r+0xdc>
 800bd64:	2300      	movs	r3, #0
 800bd66:	6053      	str	r3, [r2, #4]
 800bd68:	e7de      	b.n	800bd28 <_malloc_r+0xa8>
 800bd6a:	230c      	movs	r3, #12
 800bd6c:	6033      	str	r3, [r6, #0]
 800bd6e:	4630      	mov	r0, r6
 800bd70:	f000 f80c 	bl	800bd8c <__malloc_unlock>
 800bd74:	e794      	b.n	800bca0 <_malloc_r+0x20>
 800bd76:	6005      	str	r5, [r0, #0]
 800bd78:	e7d6      	b.n	800bd28 <_malloc_r+0xa8>
 800bd7a:	bf00      	nop
 800bd7c:	200007b8 	.word	0x200007b8

0800bd80 <__malloc_lock>:
 800bd80:	4801      	ldr	r0, [pc, #4]	@ (800bd88 <__malloc_lock+0x8>)
 800bd82:	f7ff b894 	b.w	800aeae <__retarget_lock_acquire_recursive>
 800bd86:	bf00      	nop
 800bd88:	200007b0 	.word	0x200007b0

0800bd8c <__malloc_unlock>:
 800bd8c:	4801      	ldr	r0, [pc, #4]	@ (800bd94 <__malloc_unlock+0x8>)
 800bd8e:	f7ff b88f 	b.w	800aeb0 <__retarget_lock_release_recursive>
 800bd92:	bf00      	nop
 800bd94:	200007b0 	.word	0x200007b0

0800bd98 <_Balloc>:
 800bd98:	b570      	push	{r4, r5, r6, lr}
 800bd9a:	69c6      	ldr	r6, [r0, #28]
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	460d      	mov	r5, r1
 800bda0:	b976      	cbnz	r6, 800bdc0 <_Balloc+0x28>
 800bda2:	2010      	movs	r0, #16
 800bda4:	f7ff ff42 	bl	800bc2c <malloc>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	61e0      	str	r0, [r4, #28]
 800bdac:	b920      	cbnz	r0, 800bdb8 <_Balloc+0x20>
 800bdae:	4b18      	ldr	r3, [pc, #96]	@ (800be10 <_Balloc+0x78>)
 800bdb0:	4818      	ldr	r0, [pc, #96]	@ (800be14 <_Balloc+0x7c>)
 800bdb2:	216b      	movs	r1, #107	@ 0x6b
 800bdb4:	f7ff f884 	bl	800aec0 <__assert_func>
 800bdb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdbc:	6006      	str	r6, [r0, #0]
 800bdbe:	60c6      	str	r6, [r0, #12]
 800bdc0:	69e6      	ldr	r6, [r4, #28]
 800bdc2:	68f3      	ldr	r3, [r6, #12]
 800bdc4:	b183      	cbz	r3, 800bde8 <_Balloc+0x50>
 800bdc6:	69e3      	ldr	r3, [r4, #28]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bdce:	b9b8      	cbnz	r0, 800be00 <_Balloc+0x68>
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	fa01 f605 	lsl.w	r6, r1, r5
 800bdd6:	1d72      	adds	r2, r6, #5
 800bdd8:	0092      	lsls	r2, r2, #2
 800bdda:	4620      	mov	r0, r4
 800bddc:	f001 fd07 	bl	800d7ee <_calloc_r>
 800bde0:	b160      	cbz	r0, 800bdfc <_Balloc+0x64>
 800bde2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bde6:	e00e      	b.n	800be06 <_Balloc+0x6e>
 800bde8:	2221      	movs	r2, #33	@ 0x21
 800bdea:	2104      	movs	r1, #4
 800bdec:	4620      	mov	r0, r4
 800bdee:	f001 fcfe 	bl	800d7ee <_calloc_r>
 800bdf2:	69e3      	ldr	r3, [r4, #28]
 800bdf4:	60f0      	str	r0, [r6, #12]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d1e4      	bne.n	800bdc6 <_Balloc+0x2e>
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	bd70      	pop	{r4, r5, r6, pc}
 800be00:	6802      	ldr	r2, [r0, #0]
 800be02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be06:	2300      	movs	r3, #0
 800be08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be0c:	e7f7      	b.n	800bdfe <_Balloc+0x66>
 800be0e:	bf00      	nop
 800be10:	0800e9b6 	.word	0x0800e9b6
 800be14:	0800ead9 	.word	0x0800ead9

0800be18 <_Bfree>:
 800be18:	b570      	push	{r4, r5, r6, lr}
 800be1a:	69c6      	ldr	r6, [r0, #28]
 800be1c:	4605      	mov	r5, r0
 800be1e:	460c      	mov	r4, r1
 800be20:	b976      	cbnz	r6, 800be40 <_Bfree+0x28>
 800be22:	2010      	movs	r0, #16
 800be24:	f7ff ff02 	bl	800bc2c <malloc>
 800be28:	4602      	mov	r2, r0
 800be2a:	61e8      	str	r0, [r5, #28]
 800be2c:	b920      	cbnz	r0, 800be38 <_Bfree+0x20>
 800be2e:	4b09      	ldr	r3, [pc, #36]	@ (800be54 <_Bfree+0x3c>)
 800be30:	4809      	ldr	r0, [pc, #36]	@ (800be58 <_Bfree+0x40>)
 800be32:	218f      	movs	r1, #143	@ 0x8f
 800be34:	f7ff f844 	bl	800aec0 <__assert_func>
 800be38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be3c:	6006      	str	r6, [r0, #0]
 800be3e:	60c6      	str	r6, [r0, #12]
 800be40:	b13c      	cbz	r4, 800be52 <_Bfree+0x3a>
 800be42:	69eb      	ldr	r3, [r5, #28]
 800be44:	6862      	ldr	r2, [r4, #4]
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be4c:	6021      	str	r1, [r4, #0]
 800be4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be52:	bd70      	pop	{r4, r5, r6, pc}
 800be54:	0800e9b6 	.word	0x0800e9b6
 800be58:	0800ead9 	.word	0x0800ead9

0800be5c <__multadd>:
 800be5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be60:	690d      	ldr	r5, [r1, #16]
 800be62:	4607      	mov	r7, r0
 800be64:	460c      	mov	r4, r1
 800be66:	461e      	mov	r6, r3
 800be68:	f101 0c14 	add.w	ip, r1, #20
 800be6c:	2000      	movs	r0, #0
 800be6e:	f8dc 3000 	ldr.w	r3, [ip]
 800be72:	b299      	uxth	r1, r3
 800be74:	fb02 6101 	mla	r1, r2, r1, r6
 800be78:	0c1e      	lsrs	r6, r3, #16
 800be7a:	0c0b      	lsrs	r3, r1, #16
 800be7c:	fb02 3306 	mla	r3, r2, r6, r3
 800be80:	b289      	uxth	r1, r1
 800be82:	3001      	adds	r0, #1
 800be84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be88:	4285      	cmp	r5, r0
 800be8a:	f84c 1b04 	str.w	r1, [ip], #4
 800be8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be92:	dcec      	bgt.n	800be6e <__multadd+0x12>
 800be94:	b30e      	cbz	r6, 800beda <__multadd+0x7e>
 800be96:	68a3      	ldr	r3, [r4, #8]
 800be98:	42ab      	cmp	r3, r5
 800be9a:	dc19      	bgt.n	800bed0 <__multadd+0x74>
 800be9c:	6861      	ldr	r1, [r4, #4]
 800be9e:	4638      	mov	r0, r7
 800bea0:	3101      	adds	r1, #1
 800bea2:	f7ff ff79 	bl	800bd98 <_Balloc>
 800bea6:	4680      	mov	r8, r0
 800bea8:	b928      	cbnz	r0, 800beb6 <__multadd+0x5a>
 800beaa:	4602      	mov	r2, r0
 800beac:	4b0c      	ldr	r3, [pc, #48]	@ (800bee0 <__multadd+0x84>)
 800beae:	480d      	ldr	r0, [pc, #52]	@ (800bee4 <__multadd+0x88>)
 800beb0:	21ba      	movs	r1, #186	@ 0xba
 800beb2:	f7ff f805 	bl	800aec0 <__assert_func>
 800beb6:	6922      	ldr	r2, [r4, #16]
 800beb8:	3202      	adds	r2, #2
 800beba:	f104 010c 	add.w	r1, r4, #12
 800bebe:	0092      	lsls	r2, r2, #2
 800bec0:	300c      	adds	r0, #12
 800bec2:	f001 fc75 	bl	800d7b0 <memcpy>
 800bec6:	4621      	mov	r1, r4
 800bec8:	4638      	mov	r0, r7
 800beca:	f7ff ffa5 	bl	800be18 <_Bfree>
 800bece:	4644      	mov	r4, r8
 800bed0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bed4:	3501      	adds	r5, #1
 800bed6:	615e      	str	r6, [r3, #20]
 800bed8:	6125      	str	r5, [r4, #16]
 800beda:	4620      	mov	r0, r4
 800bedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bee0:	0800eac8 	.word	0x0800eac8
 800bee4:	0800ead9 	.word	0x0800ead9

0800bee8 <__s2b>:
 800bee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800beec:	460c      	mov	r4, r1
 800beee:	4615      	mov	r5, r2
 800bef0:	461f      	mov	r7, r3
 800bef2:	2209      	movs	r2, #9
 800bef4:	3308      	adds	r3, #8
 800bef6:	4606      	mov	r6, r0
 800bef8:	fb93 f3f2 	sdiv	r3, r3, r2
 800befc:	2100      	movs	r1, #0
 800befe:	2201      	movs	r2, #1
 800bf00:	429a      	cmp	r2, r3
 800bf02:	db09      	blt.n	800bf18 <__s2b+0x30>
 800bf04:	4630      	mov	r0, r6
 800bf06:	f7ff ff47 	bl	800bd98 <_Balloc>
 800bf0a:	b940      	cbnz	r0, 800bf1e <__s2b+0x36>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	4b19      	ldr	r3, [pc, #100]	@ (800bf74 <__s2b+0x8c>)
 800bf10:	4819      	ldr	r0, [pc, #100]	@ (800bf78 <__s2b+0x90>)
 800bf12:	21d3      	movs	r1, #211	@ 0xd3
 800bf14:	f7fe ffd4 	bl	800aec0 <__assert_func>
 800bf18:	0052      	lsls	r2, r2, #1
 800bf1a:	3101      	adds	r1, #1
 800bf1c:	e7f0      	b.n	800bf00 <__s2b+0x18>
 800bf1e:	9b08      	ldr	r3, [sp, #32]
 800bf20:	6143      	str	r3, [r0, #20]
 800bf22:	2d09      	cmp	r5, #9
 800bf24:	f04f 0301 	mov.w	r3, #1
 800bf28:	6103      	str	r3, [r0, #16]
 800bf2a:	dd16      	ble.n	800bf5a <__s2b+0x72>
 800bf2c:	f104 0909 	add.w	r9, r4, #9
 800bf30:	46c8      	mov	r8, r9
 800bf32:	442c      	add	r4, r5
 800bf34:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bf38:	4601      	mov	r1, r0
 800bf3a:	3b30      	subs	r3, #48	@ 0x30
 800bf3c:	220a      	movs	r2, #10
 800bf3e:	4630      	mov	r0, r6
 800bf40:	f7ff ff8c 	bl	800be5c <__multadd>
 800bf44:	45a0      	cmp	r8, r4
 800bf46:	d1f5      	bne.n	800bf34 <__s2b+0x4c>
 800bf48:	f1a5 0408 	sub.w	r4, r5, #8
 800bf4c:	444c      	add	r4, r9
 800bf4e:	1b2d      	subs	r5, r5, r4
 800bf50:	1963      	adds	r3, r4, r5
 800bf52:	42bb      	cmp	r3, r7
 800bf54:	db04      	blt.n	800bf60 <__s2b+0x78>
 800bf56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf5a:	340a      	adds	r4, #10
 800bf5c:	2509      	movs	r5, #9
 800bf5e:	e7f6      	b.n	800bf4e <__s2b+0x66>
 800bf60:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf64:	4601      	mov	r1, r0
 800bf66:	3b30      	subs	r3, #48	@ 0x30
 800bf68:	220a      	movs	r2, #10
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	f7ff ff76 	bl	800be5c <__multadd>
 800bf70:	e7ee      	b.n	800bf50 <__s2b+0x68>
 800bf72:	bf00      	nop
 800bf74:	0800eac8 	.word	0x0800eac8
 800bf78:	0800ead9 	.word	0x0800ead9

0800bf7c <__hi0bits>:
 800bf7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bf80:	4603      	mov	r3, r0
 800bf82:	bf36      	itet	cc
 800bf84:	0403      	lslcc	r3, r0, #16
 800bf86:	2000      	movcs	r0, #0
 800bf88:	2010      	movcc	r0, #16
 800bf8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bf8e:	bf3c      	itt	cc
 800bf90:	021b      	lslcc	r3, r3, #8
 800bf92:	3008      	addcc	r0, #8
 800bf94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf98:	bf3c      	itt	cc
 800bf9a:	011b      	lslcc	r3, r3, #4
 800bf9c:	3004      	addcc	r0, #4
 800bf9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfa2:	bf3c      	itt	cc
 800bfa4:	009b      	lslcc	r3, r3, #2
 800bfa6:	3002      	addcc	r0, #2
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	db05      	blt.n	800bfb8 <__hi0bits+0x3c>
 800bfac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bfb0:	f100 0001 	add.w	r0, r0, #1
 800bfb4:	bf08      	it	eq
 800bfb6:	2020      	moveq	r0, #32
 800bfb8:	4770      	bx	lr

0800bfba <__lo0bits>:
 800bfba:	6803      	ldr	r3, [r0, #0]
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	f013 0007 	ands.w	r0, r3, #7
 800bfc2:	d00b      	beq.n	800bfdc <__lo0bits+0x22>
 800bfc4:	07d9      	lsls	r1, r3, #31
 800bfc6:	d421      	bmi.n	800c00c <__lo0bits+0x52>
 800bfc8:	0798      	lsls	r0, r3, #30
 800bfca:	bf49      	itett	mi
 800bfcc:	085b      	lsrmi	r3, r3, #1
 800bfce:	089b      	lsrpl	r3, r3, #2
 800bfd0:	2001      	movmi	r0, #1
 800bfd2:	6013      	strmi	r3, [r2, #0]
 800bfd4:	bf5c      	itt	pl
 800bfd6:	6013      	strpl	r3, [r2, #0]
 800bfd8:	2002      	movpl	r0, #2
 800bfda:	4770      	bx	lr
 800bfdc:	b299      	uxth	r1, r3
 800bfde:	b909      	cbnz	r1, 800bfe4 <__lo0bits+0x2a>
 800bfe0:	0c1b      	lsrs	r3, r3, #16
 800bfe2:	2010      	movs	r0, #16
 800bfe4:	b2d9      	uxtb	r1, r3
 800bfe6:	b909      	cbnz	r1, 800bfec <__lo0bits+0x32>
 800bfe8:	3008      	adds	r0, #8
 800bfea:	0a1b      	lsrs	r3, r3, #8
 800bfec:	0719      	lsls	r1, r3, #28
 800bfee:	bf04      	itt	eq
 800bff0:	091b      	lsreq	r3, r3, #4
 800bff2:	3004      	addeq	r0, #4
 800bff4:	0799      	lsls	r1, r3, #30
 800bff6:	bf04      	itt	eq
 800bff8:	089b      	lsreq	r3, r3, #2
 800bffa:	3002      	addeq	r0, #2
 800bffc:	07d9      	lsls	r1, r3, #31
 800bffe:	d403      	bmi.n	800c008 <__lo0bits+0x4e>
 800c000:	085b      	lsrs	r3, r3, #1
 800c002:	f100 0001 	add.w	r0, r0, #1
 800c006:	d003      	beq.n	800c010 <__lo0bits+0x56>
 800c008:	6013      	str	r3, [r2, #0]
 800c00a:	4770      	bx	lr
 800c00c:	2000      	movs	r0, #0
 800c00e:	4770      	bx	lr
 800c010:	2020      	movs	r0, #32
 800c012:	4770      	bx	lr

0800c014 <__i2b>:
 800c014:	b510      	push	{r4, lr}
 800c016:	460c      	mov	r4, r1
 800c018:	2101      	movs	r1, #1
 800c01a:	f7ff febd 	bl	800bd98 <_Balloc>
 800c01e:	4602      	mov	r2, r0
 800c020:	b928      	cbnz	r0, 800c02e <__i2b+0x1a>
 800c022:	4b05      	ldr	r3, [pc, #20]	@ (800c038 <__i2b+0x24>)
 800c024:	4805      	ldr	r0, [pc, #20]	@ (800c03c <__i2b+0x28>)
 800c026:	f240 1145 	movw	r1, #325	@ 0x145
 800c02a:	f7fe ff49 	bl	800aec0 <__assert_func>
 800c02e:	2301      	movs	r3, #1
 800c030:	6144      	str	r4, [r0, #20]
 800c032:	6103      	str	r3, [r0, #16]
 800c034:	bd10      	pop	{r4, pc}
 800c036:	bf00      	nop
 800c038:	0800eac8 	.word	0x0800eac8
 800c03c:	0800ead9 	.word	0x0800ead9

0800c040 <__multiply>:
 800c040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c044:	4614      	mov	r4, r2
 800c046:	690a      	ldr	r2, [r1, #16]
 800c048:	6923      	ldr	r3, [r4, #16]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	bfa8      	it	ge
 800c04e:	4623      	movge	r3, r4
 800c050:	460f      	mov	r7, r1
 800c052:	bfa4      	itt	ge
 800c054:	460c      	movge	r4, r1
 800c056:	461f      	movge	r7, r3
 800c058:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c05c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c060:	68a3      	ldr	r3, [r4, #8]
 800c062:	6861      	ldr	r1, [r4, #4]
 800c064:	eb0a 0609 	add.w	r6, sl, r9
 800c068:	42b3      	cmp	r3, r6
 800c06a:	b085      	sub	sp, #20
 800c06c:	bfb8      	it	lt
 800c06e:	3101      	addlt	r1, #1
 800c070:	f7ff fe92 	bl	800bd98 <_Balloc>
 800c074:	b930      	cbnz	r0, 800c084 <__multiply+0x44>
 800c076:	4602      	mov	r2, r0
 800c078:	4b44      	ldr	r3, [pc, #272]	@ (800c18c <__multiply+0x14c>)
 800c07a:	4845      	ldr	r0, [pc, #276]	@ (800c190 <__multiply+0x150>)
 800c07c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c080:	f7fe ff1e 	bl	800aec0 <__assert_func>
 800c084:	f100 0514 	add.w	r5, r0, #20
 800c088:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c08c:	462b      	mov	r3, r5
 800c08e:	2200      	movs	r2, #0
 800c090:	4543      	cmp	r3, r8
 800c092:	d321      	bcc.n	800c0d8 <__multiply+0x98>
 800c094:	f107 0114 	add.w	r1, r7, #20
 800c098:	f104 0214 	add.w	r2, r4, #20
 800c09c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c0a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c0a4:	9302      	str	r3, [sp, #8]
 800c0a6:	1b13      	subs	r3, r2, r4
 800c0a8:	3b15      	subs	r3, #21
 800c0aa:	f023 0303 	bic.w	r3, r3, #3
 800c0ae:	3304      	adds	r3, #4
 800c0b0:	f104 0715 	add.w	r7, r4, #21
 800c0b4:	42ba      	cmp	r2, r7
 800c0b6:	bf38      	it	cc
 800c0b8:	2304      	movcc	r3, #4
 800c0ba:	9301      	str	r3, [sp, #4]
 800c0bc:	9b02      	ldr	r3, [sp, #8]
 800c0be:	9103      	str	r1, [sp, #12]
 800c0c0:	428b      	cmp	r3, r1
 800c0c2:	d80c      	bhi.n	800c0de <__multiply+0x9e>
 800c0c4:	2e00      	cmp	r6, #0
 800c0c6:	dd03      	ble.n	800c0d0 <__multiply+0x90>
 800c0c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d05b      	beq.n	800c188 <__multiply+0x148>
 800c0d0:	6106      	str	r6, [r0, #16]
 800c0d2:	b005      	add	sp, #20
 800c0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d8:	f843 2b04 	str.w	r2, [r3], #4
 800c0dc:	e7d8      	b.n	800c090 <__multiply+0x50>
 800c0de:	f8b1 a000 	ldrh.w	sl, [r1]
 800c0e2:	f1ba 0f00 	cmp.w	sl, #0
 800c0e6:	d024      	beq.n	800c132 <__multiply+0xf2>
 800c0e8:	f104 0e14 	add.w	lr, r4, #20
 800c0ec:	46a9      	mov	r9, r5
 800c0ee:	f04f 0c00 	mov.w	ip, #0
 800c0f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c0f6:	f8d9 3000 	ldr.w	r3, [r9]
 800c0fa:	fa1f fb87 	uxth.w	fp, r7
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	fb0a 330b 	mla	r3, sl, fp, r3
 800c104:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c108:	f8d9 7000 	ldr.w	r7, [r9]
 800c10c:	4463      	add	r3, ip
 800c10e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c112:	fb0a c70b 	mla	r7, sl, fp, ip
 800c116:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c120:	4572      	cmp	r2, lr
 800c122:	f849 3b04 	str.w	r3, [r9], #4
 800c126:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c12a:	d8e2      	bhi.n	800c0f2 <__multiply+0xb2>
 800c12c:	9b01      	ldr	r3, [sp, #4]
 800c12e:	f845 c003 	str.w	ip, [r5, r3]
 800c132:	9b03      	ldr	r3, [sp, #12]
 800c134:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c138:	3104      	adds	r1, #4
 800c13a:	f1b9 0f00 	cmp.w	r9, #0
 800c13e:	d021      	beq.n	800c184 <__multiply+0x144>
 800c140:	682b      	ldr	r3, [r5, #0]
 800c142:	f104 0c14 	add.w	ip, r4, #20
 800c146:	46ae      	mov	lr, r5
 800c148:	f04f 0a00 	mov.w	sl, #0
 800c14c:	f8bc b000 	ldrh.w	fp, [ip]
 800c150:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c154:	fb09 770b 	mla	r7, r9, fp, r7
 800c158:	4457      	add	r7, sl
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c160:	f84e 3b04 	str.w	r3, [lr], #4
 800c164:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c168:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c16c:	f8be 3000 	ldrh.w	r3, [lr]
 800c170:	fb09 330a 	mla	r3, r9, sl, r3
 800c174:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c178:	4562      	cmp	r2, ip
 800c17a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c17e:	d8e5      	bhi.n	800c14c <__multiply+0x10c>
 800c180:	9f01      	ldr	r7, [sp, #4]
 800c182:	51eb      	str	r3, [r5, r7]
 800c184:	3504      	adds	r5, #4
 800c186:	e799      	b.n	800c0bc <__multiply+0x7c>
 800c188:	3e01      	subs	r6, #1
 800c18a:	e79b      	b.n	800c0c4 <__multiply+0x84>
 800c18c:	0800eac8 	.word	0x0800eac8
 800c190:	0800ead9 	.word	0x0800ead9

0800c194 <__pow5mult>:
 800c194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c198:	4615      	mov	r5, r2
 800c19a:	f012 0203 	ands.w	r2, r2, #3
 800c19e:	4607      	mov	r7, r0
 800c1a0:	460e      	mov	r6, r1
 800c1a2:	d007      	beq.n	800c1b4 <__pow5mult+0x20>
 800c1a4:	4c25      	ldr	r4, [pc, #148]	@ (800c23c <__pow5mult+0xa8>)
 800c1a6:	3a01      	subs	r2, #1
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1ae:	f7ff fe55 	bl	800be5c <__multadd>
 800c1b2:	4606      	mov	r6, r0
 800c1b4:	10ad      	asrs	r5, r5, #2
 800c1b6:	d03d      	beq.n	800c234 <__pow5mult+0xa0>
 800c1b8:	69fc      	ldr	r4, [r7, #28]
 800c1ba:	b97c      	cbnz	r4, 800c1dc <__pow5mult+0x48>
 800c1bc:	2010      	movs	r0, #16
 800c1be:	f7ff fd35 	bl	800bc2c <malloc>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	61f8      	str	r0, [r7, #28]
 800c1c6:	b928      	cbnz	r0, 800c1d4 <__pow5mult+0x40>
 800c1c8:	4b1d      	ldr	r3, [pc, #116]	@ (800c240 <__pow5mult+0xac>)
 800c1ca:	481e      	ldr	r0, [pc, #120]	@ (800c244 <__pow5mult+0xb0>)
 800c1cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c1d0:	f7fe fe76 	bl	800aec0 <__assert_func>
 800c1d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1d8:	6004      	str	r4, [r0, #0]
 800c1da:	60c4      	str	r4, [r0, #12]
 800c1dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c1e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1e4:	b94c      	cbnz	r4, 800c1fa <__pow5mult+0x66>
 800c1e6:	f240 2171 	movw	r1, #625	@ 0x271
 800c1ea:	4638      	mov	r0, r7
 800c1ec:	f7ff ff12 	bl	800c014 <__i2b>
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	6003      	str	r3, [r0, #0]
 800c1fa:	f04f 0900 	mov.w	r9, #0
 800c1fe:	07eb      	lsls	r3, r5, #31
 800c200:	d50a      	bpl.n	800c218 <__pow5mult+0x84>
 800c202:	4631      	mov	r1, r6
 800c204:	4622      	mov	r2, r4
 800c206:	4638      	mov	r0, r7
 800c208:	f7ff ff1a 	bl	800c040 <__multiply>
 800c20c:	4631      	mov	r1, r6
 800c20e:	4680      	mov	r8, r0
 800c210:	4638      	mov	r0, r7
 800c212:	f7ff fe01 	bl	800be18 <_Bfree>
 800c216:	4646      	mov	r6, r8
 800c218:	106d      	asrs	r5, r5, #1
 800c21a:	d00b      	beq.n	800c234 <__pow5mult+0xa0>
 800c21c:	6820      	ldr	r0, [r4, #0]
 800c21e:	b938      	cbnz	r0, 800c230 <__pow5mult+0x9c>
 800c220:	4622      	mov	r2, r4
 800c222:	4621      	mov	r1, r4
 800c224:	4638      	mov	r0, r7
 800c226:	f7ff ff0b 	bl	800c040 <__multiply>
 800c22a:	6020      	str	r0, [r4, #0]
 800c22c:	f8c0 9000 	str.w	r9, [r0]
 800c230:	4604      	mov	r4, r0
 800c232:	e7e4      	b.n	800c1fe <__pow5mult+0x6a>
 800c234:	4630      	mov	r0, r6
 800c236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c23a:	bf00      	nop
 800c23c:	0800eb34 	.word	0x0800eb34
 800c240:	0800e9b6 	.word	0x0800e9b6
 800c244:	0800ead9 	.word	0x0800ead9

0800c248 <__lshift>:
 800c248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c24c:	460c      	mov	r4, r1
 800c24e:	6849      	ldr	r1, [r1, #4]
 800c250:	6923      	ldr	r3, [r4, #16]
 800c252:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c256:	68a3      	ldr	r3, [r4, #8]
 800c258:	4607      	mov	r7, r0
 800c25a:	4691      	mov	r9, r2
 800c25c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c260:	f108 0601 	add.w	r6, r8, #1
 800c264:	42b3      	cmp	r3, r6
 800c266:	db0b      	blt.n	800c280 <__lshift+0x38>
 800c268:	4638      	mov	r0, r7
 800c26a:	f7ff fd95 	bl	800bd98 <_Balloc>
 800c26e:	4605      	mov	r5, r0
 800c270:	b948      	cbnz	r0, 800c286 <__lshift+0x3e>
 800c272:	4602      	mov	r2, r0
 800c274:	4b28      	ldr	r3, [pc, #160]	@ (800c318 <__lshift+0xd0>)
 800c276:	4829      	ldr	r0, [pc, #164]	@ (800c31c <__lshift+0xd4>)
 800c278:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c27c:	f7fe fe20 	bl	800aec0 <__assert_func>
 800c280:	3101      	adds	r1, #1
 800c282:	005b      	lsls	r3, r3, #1
 800c284:	e7ee      	b.n	800c264 <__lshift+0x1c>
 800c286:	2300      	movs	r3, #0
 800c288:	f100 0114 	add.w	r1, r0, #20
 800c28c:	f100 0210 	add.w	r2, r0, #16
 800c290:	4618      	mov	r0, r3
 800c292:	4553      	cmp	r3, sl
 800c294:	db33      	blt.n	800c2fe <__lshift+0xb6>
 800c296:	6920      	ldr	r0, [r4, #16]
 800c298:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c29c:	f104 0314 	add.w	r3, r4, #20
 800c2a0:	f019 091f 	ands.w	r9, r9, #31
 800c2a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c2ac:	d02b      	beq.n	800c306 <__lshift+0xbe>
 800c2ae:	f1c9 0e20 	rsb	lr, r9, #32
 800c2b2:	468a      	mov	sl, r1
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	6818      	ldr	r0, [r3, #0]
 800c2b8:	fa00 f009 	lsl.w	r0, r0, r9
 800c2bc:	4310      	orrs	r0, r2
 800c2be:	f84a 0b04 	str.w	r0, [sl], #4
 800c2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2c6:	459c      	cmp	ip, r3
 800c2c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c2cc:	d8f3      	bhi.n	800c2b6 <__lshift+0x6e>
 800c2ce:	ebac 0304 	sub.w	r3, ip, r4
 800c2d2:	3b15      	subs	r3, #21
 800c2d4:	f023 0303 	bic.w	r3, r3, #3
 800c2d8:	3304      	adds	r3, #4
 800c2da:	f104 0015 	add.w	r0, r4, #21
 800c2de:	4584      	cmp	ip, r0
 800c2e0:	bf38      	it	cc
 800c2e2:	2304      	movcc	r3, #4
 800c2e4:	50ca      	str	r2, [r1, r3]
 800c2e6:	b10a      	cbz	r2, 800c2ec <__lshift+0xa4>
 800c2e8:	f108 0602 	add.w	r6, r8, #2
 800c2ec:	3e01      	subs	r6, #1
 800c2ee:	4638      	mov	r0, r7
 800c2f0:	612e      	str	r6, [r5, #16]
 800c2f2:	4621      	mov	r1, r4
 800c2f4:	f7ff fd90 	bl	800be18 <_Bfree>
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800c302:	3301      	adds	r3, #1
 800c304:	e7c5      	b.n	800c292 <__lshift+0x4a>
 800c306:	3904      	subs	r1, #4
 800c308:	f853 2b04 	ldr.w	r2, [r3], #4
 800c30c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c310:	459c      	cmp	ip, r3
 800c312:	d8f9      	bhi.n	800c308 <__lshift+0xc0>
 800c314:	e7ea      	b.n	800c2ec <__lshift+0xa4>
 800c316:	bf00      	nop
 800c318:	0800eac8 	.word	0x0800eac8
 800c31c:	0800ead9 	.word	0x0800ead9

0800c320 <__mcmp>:
 800c320:	690a      	ldr	r2, [r1, #16]
 800c322:	4603      	mov	r3, r0
 800c324:	6900      	ldr	r0, [r0, #16]
 800c326:	1a80      	subs	r0, r0, r2
 800c328:	b530      	push	{r4, r5, lr}
 800c32a:	d10e      	bne.n	800c34a <__mcmp+0x2a>
 800c32c:	3314      	adds	r3, #20
 800c32e:	3114      	adds	r1, #20
 800c330:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c334:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c338:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c33c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c340:	4295      	cmp	r5, r2
 800c342:	d003      	beq.n	800c34c <__mcmp+0x2c>
 800c344:	d205      	bcs.n	800c352 <__mcmp+0x32>
 800c346:	f04f 30ff 	mov.w	r0, #4294967295
 800c34a:	bd30      	pop	{r4, r5, pc}
 800c34c:	42a3      	cmp	r3, r4
 800c34e:	d3f3      	bcc.n	800c338 <__mcmp+0x18>
 800c350:	e7fb      	b.n	800c34a <__mcmp+0x2a>
 800c352:	2001      	movs	r0, #1
 800c354:	e7f9      	b.n	800c34a <__mcmp+0x2a>
	...

0800c358 <__mdiff>:
 800c358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35c:	4689      	mov	r9, r1
 800c35e:	4606      	mov	r6, r0
 800c360:	4611      	mov	r1, r2
 800c362:	4648      	mov	r0, r9
 800c364:	4614      	mov	r4, r2
 800c366:	f7ff ffdb 	bl	800c320 <__mcmp>
 800c36a:	1e05      	subs	r5, r0, #0
 800c36c:	d112      	bne.n	800c394 <__mdiff+0x3c>
 800c36e:	4629      	mov	r1, r5
 800c370:	4630      	mov	r0, r6
 800c372:	f7ff fd11 	bl	800bd98 <_Balloc>
 800c376:	4602      	mov	r2, r0
 800c378:	b928      	cbnz	r0, 800c386 <__mdiff+0x2e>
 800c37a:	4b3f      	ldr	r3, [pc, #252]	@ (800c478 <__mdiff+0x120>)
 800c37c:	f240 2137 	movw	r1, #567	@ 0x237
 800c380:	483e      	ldr	r0, [pc, #248]	@ (800c47c <__mdiff+0x124>)
 800c382:	f7fe fd9d 	bl	800aec0 <__assert_func>
 800c386:	2301      	movs	r3, #1
 800c388:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c38c:	4610      	mov	r0, r2
 800c38e:	b003      	add	sp, #12
 800c390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c394:	bfbc      	itt	lt
 800c396:	464b      	movlt	r3, r9
 800c398:	46a1      	movlt	r9, r4
 800c39a:	4630      	mov	r0, r6
 800c39c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c3a0:	bfba      	itte	lt
 800c3a2:	461c      	movlt	r4, r3
 800c3a4:	2501      	movlt	r5, #1
 800c3a6:	2500      	movge	r5, #0
 800c3a8:	f7ff fcf6 	bl	800bd98 <_Balloc>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	b918      	cbnz	r0, 800c3b8 <__mdiff+0x60>
 800c3b0:	4b31      	ldr	r3, [pc, #196]	@ (800c478 <__mdiff+0x120>)
 800c3b2:	f240 2145 	movw	r1, #581	@ 0x245
 800c3b6:	e7e3      	b.n	800c380 <__mdiff+0x28>
 800c3b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c3bc:	6926      	ldr	r6, [r4, #16]
 800c3be:	60c5      	str	r5, [r0, #12]
 800c3c0:	f109 0310 	add.w	r3, r9, #16
 800c3c4:	f109 0514 	add.w	r5, r9, #20
 800c3c8:	f104 0e14 	add.w	lr, r4, #20
 800c3cc:	f100 0b14 	add.w	fp, r0, #20
 800c3d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c3d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c3d8:	9301      	str	r3, [sp, #4]
 800c3da:	46d9      	mov	r9, fp
 800c3dc:	f04f 0c00 	mov.w	ip, #0
 800c3e0:	9b01      	ldr	r3, [sp, #4]
 800c3e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c3e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c3ea:	9301      	str	r3, [sp, #4]
 800c3ec:	fa1f f38a 	uxth.w	r3, sl
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	b283      	uxth	r3, r0
 800c3f4:	1acb      	subs	r3, r1, r3
 800c3f6:	0c00      	lsrs	r0, r0, #16
 800c3f8:	4463      	add	r3, ip
 800c3fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c3fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c402:	b29b      	uxth	r3, r3
 800c404:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c408:	4576      	cmp	r6, lr
 800c40a:	f849 3b04 	str.w	r3, [r9], #4
 800c40e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c412:	d8e5      	bhi.n	800c3e0 <__mdiff+0x88>
 800c414:	1b33      	subs	r3, r6, r4
 800c416:	3b15      	subs	r3, #21
 800c418:	f023 0303 	bic.w	r3, r3, #3
 800c41c:	3415      	adds	r4, #21
 800c41e:	3304      	adds	r3, #4
 800c420:	42a6      	cmp	r6, r4
 800c422:	bf38      	it	cc
 800c424:	2304      	movcc	r3, #4
 800c426:	441d      	add	r5, r3
 800c428:	445b      	add	r3, fp
 800c42a:	461e      	mov	r6, r3
 800c42c:	462c      	mov	r4, r5
 800c42e:	4544      	cmp	r4, r8
 800c430:	d30e      	bcc.n	800c450 <__mdiff+0xf8>
 800c432:	f108 0103 	add.w	r1, r8, #3
 800c436:	1b49      	subs	r1, r1, r5
 800c438:	f021 0103 	bic.w	r1, r1, #3
 800c43c:	3d03      	subs	r5, #3
 800c43e:	45a8      	cmp	r8, r5
 800c440:	bf38      	it	cc
 800c442:	2100      	movcc	r1, #0
 800c444:	440b      	add	r3, r1
 800c446:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c44a:	b191      	cbz	r1, 800c472 <__mdiff+0x11a>
 800c44c:	6117      	str	r7, [r2, #16]
 800c44e:	e79d      	b.n	800c38c <__mdiff+0x34>
 800c450:	f854 1b04 	ldr.w	r1, [r4], #4
 800c454:	46e6      	mov	lr, ip
 800c456:	0c08      	lsrs	r0, r1, #16
 800c458:	fa1c fc81 	uxtah	ip, ip, r1
 800c45c:	4471      	add	r1, lr
 800c45e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c462:	b289      	uxth	r1, r1
 800c464:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c468:	f846 1b04 	str.w	r1, [r6], #4
 800c46c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c470:	e7dd      	b.n	800c42e <__mdiff+0xd6>
 800c472:	3f01      	subs	r7, #1
 800c474:	e7e7      	b.n	800c446 <__mdiff+0xee>
 800c476:	bf00      	nop
 800c478:	0800eac8 	.word	0x0800eac8
 800c47c:	0800ead9 	.word	0x0800ead9

0800c480 <__ulp>:
 800c480:	b082      	sub	sp, #8
 800c482:	ed8d 0b00 	vstr	d0, [sp]
 800c486:	9a01      	ldr	r2, [sp, #4]
 800c488:	4b0f      	ldr	r3, [pc, #60]	@ (800c4c8 <__ulp+0x48>)
 800c48a:	4013      	ands	r3, r2
 800c48c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c490:	2b00      	cmp	r3, #0
 800c492:	dc08      	bgt.n	800c4a6 <__ulp+0x26>
 800c494:	425b      	negs	r3, r3
 800c496:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c49a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c49e:	da04      	bge.n	800c4aa <__ulp+0x2a>
 800c4a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c4a4:	4113      	asrs	r3, r2
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	e008      	b.n	800c4bc <__ulp+0x3c>
 800c4aa:	f1a2 0314 	sub.w	r3, r2, #20
 800c4ae:	2b1e      	cmp	r3, #30
 800c4b0:	bfda      	itte	le
 800c4b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c4b6:	40da      	lsrle	r2, r3
 800c4b8:	2201      	movgt	r2, #1
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	4619      	mov	r1, r3
 800c4be:	4610      	mov	r0, r2
 800c4c0:	ec41 0b10 	vmov	d0, r0, r1
 800c4c4:	b002      	add	sp, #8
 800c4c6:	4770      	bx	lr
 800c4c8:	7ff00000 	.word	0x7ff00000

0800c4cc <__b2d>:
 800c4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d0:	6906      	ldr	r6, [r0, #16]
 800c4d2:	f100 0814 	add.w	r8, r0, #20
 800c4d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c4da:	1f37      	subs	r7, r6, #4
 800c4dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c4e0:	4610      	mov	r0, r2
 800c4e2:	f7ff fd4b 	bl	800bf7c <__hi0bits>
 800c4e6:	f1c0 0320 	rsb	r3, r0, #32
 800c4ea:	280a      	cmp	r0, #10
 800c4ec:	600b      	str	r3, [r1, #0]
 800c4ee:	491b      	ldr	r1, [pc, #108]	@ (800c55c <__b2d+0x90>)
 800c4f0:	dc15      	bgt.n	800c51e <__b2d+0x52>
 800c4f2:	f1c0 0c0b 	rsb	ip, r0, #11
 800c4f6:	fa22 f30c 	lsr.w	r3, r2, ip
 800c4fa:	45b8      	cmp	r8, r7
 800c4fc:	ea43 0501 	orr.w	r5, r3, r1
 800c500:	bf34      	ite	cc
 800c502:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c506:	2300      	movcs	r3, #0
 800c508:	3015      	adds	r0, #21
 800c50a:	fa02 f000 	lsl.w	r0, r2, r0
 800c50e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c512:	4303      	orrs	r3, r0
 800c514:	461c      	mov	r4, r3
 800c516:	ec45 4b10 	vmov	d0, r4, r5
 800c51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c51e:	45b8      	cmp	r8, r7
 800c520:	bf3a      	itte	cc
 800c522:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c526:	f1a6 0708 	subcc.w	r7, r6, #8
 800c52a:	2300      	movcs	r3, #0
 800c52c:	380b      	subs	r0, #11
 800c52e:	d012      	beq.n	800c556 <__b2d+0x8a>
 800c530:	f1c0 0120 	rsb	r1, r0, #32
 800c534:	fa23 f401 	lsr.w	r4, r3, r1
 800c538:	4082      	lsls	r2, r0
 800c53a:	4322      	orrs	r2, r4
 800c53c:	4547      	cmp	r7, r8
 800c53e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c542:	bf8c      	ite	hi
 800c544:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c548:	2200      	movls	r2, #0
 800c54a:	4083      	lsls	r3, r0
 800c54c:	40ca      	lsrs	r2, r1
 800c54e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c552:	4313      	orrs	r3, r2
 800c554:	e7de      	b.n	800c514 <__b2d+0x48>
 800c556:	ea42 0501 	orr.w	r5, r2, r1
 800c55a:	e7db      	b.n	800c514 <__b2d+0x48>
 800c55c:	3ff00000 	.word	0x3ff00000

0800c560 <__d2b>:
 800c560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c564:	460f      	mov	r7, r1
 800c566:	2101      	movs	r1, #1
 800c568:	ec59 8b10 	vmov	r8, r9, d0
 800c56c:	4616      	mov	r6, r2
 800c56e:	f7ff fc13 	bl	800bd98 <_Balloc>
 800c572:	4604      	mov	r4, r0
 800c574:	b930      	cbnz	r0, 800c584 <__d2b+0x24>
 800c576:	4602      	mov	r2, r0
 800c578:	4b23      	ldr	r3, [pc, #140]	@ (800c608 <__d2b+0xa8>)
 800c57a:	4824      	ldr	r0, [pc, #144]	@ (800c60c <__d2b+0xac>)
 800c57c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c580:	f7fe fc9e 	bl	800aec0 <__assert_func>
 800c584:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c58c:	b10d      	cbz	r5, 800c592 <__d2b+0x32>
 800c58e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c592:	9301      	str	r3, [sp, #4]
 800c594:	f1b8 0300 	subs.w	r3, r8, #0
 800c598:	d023      	beq.n	800c5e2 <__d2b+0x82>
 800c59a:	4668      	mov	r0, sp
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	f7ff fd0c 	bl	800bfba <__lo0bits>
 800c5a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c5a6:	b1d0      	cbz	r0, 800c5de <__d2b+0x7e>
 800c5a8:	f1c0 0320 	rsb	r3, r0, #32
 800c5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b0:	430b      	orrs	r3, r1
 800c5b2:	40c2      	lsrs	r2, r0
 800c5b4:	6163      	str	r3, [r4, #20]
 800c5b6:	9201      	str	r2, [sp, #4]
 800c5b8:	9b01      	ldr	r3, [sp, #4]
 800c5ba:	61a3      	str	r3, [r4, #24]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	bf0c      	ite	eq
 800c5c0:	2201      	moveq	r2, #1
 800c5c2:	2202      	movne	r2, #2
 800c5c4:	6122      	str	r2, [r4, #16]
 800c5c6:	b1a5      	cbz	r5, 800c5f2 <__d2b+0x92>
 800c5c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c5cc:	4405      	add	r5, r0
 800c5ce:	603d      	str	r5, [r7, #0]
 800c5d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c5d4:	6030      	str	r0, [r6, #0]
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	b003      	add	sp, #12
 800c5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5de:	6161      	str	r1, [r4, #20]
 800c5e0:	e7ea      	b.n	800c5b8 <__d2b+0x58>
 800c5e2:	a801      	add	r0, sp, #4
 800c5e4:	f7ff fce9 	bl	800bfba <__lo0bits>
 800c5e8:	9b01      	ldr	r3, [sp, #4]
 800c5ea:	6163      	str	r3, [r4, #20]
 800c5ec:	3020      	adds	r0, #32
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	e7e8      	b.n	800c5c4 <__d2b+0x64>
 800c5f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c5fa:	6038      	str	r0, [r7, #0]
 800c5fc:	6918      	ldr	r0, [r3, #16]
 800c5fe:	f7ff fcbd 	bl	800bf7c <__hi0bits>
 800c602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c606:	e7e5      	b.n	800c5d4 <__d2b+0x74>
 800c608:	0800eac8 	.word	0x0800eac8
 800c60c:	0800ead9 	.word	0x0800ead9

0800c610 <__ratio>:
 800c610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c614:	b085      	sub	sp, #20
 800c616:	e9cd 1000 	strd	r1, r0, [sp]
 800c61a:	a902      	add	r1, sp, #8
 800c61c:	f7ff ff56 	bl	800c4cc <__b2d>
 800c620:	9800      	ldr	r0, [sp, #0]
 800c622:	a903      	add	r1, sp, #12
 800c624:	ec55 4b10 	vmov	r4, r5, d0
 800c628:	f7ff ff50 	bl	800c4cc <__b2d>
 800c62c:	9b01      	ldr	r3, [sp, #4]
 800c62e:	6919      	ldr	r1, [r3, #16]
 800c630:	9b00      	ldr	r3, [sp, #0]
 800c632:	691b      	ldr	r3, [r3, #16]
 800c634:	1ac9      	subs	r1, r1, r3
 800c636:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c63a:	1a9b      	subs	r3, r3, r2
 800c63c:	ec5b ab10 	vmov	sl, fp, d0
 800c640:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c644:	2b00      	cmp	r3, #0
 800c646:	bfce      	itee	gt
 800c648:	462a      	movgt	r2, r5
 800c64a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c64e:	465a      	movle	r2, fp
 800c650:	462f      	mov	r7, r5
 800c652:	46d9      	mov	r9, fp
 800c654:	bfcc      	ite	gt
 800c656:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c65a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c65e:	464b      	mov	r3, r9
 800c660:	4652      	mov	r2, sl
 800c662:	4620      	mov	r0, r4
 800c664:	4639      	mov	r1, r7
 800c666:	f7f4 f929 	bl	80008bc <__aeabi_ddiv>
 800c66a:	ec41 0b10 	vmov	d0, r0, r1
 800c66e:	b005      	add	sp, #20
 800c670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c674 <__copybits>:
 800c674:	3901      	subs	r1, #1
 800c676:	b570      	push	{r4, r5, r6, lr}
 800c678:	1149      	asrs	r1, r1, #5
 800c67a:	6914      	ldr	r4, [r2, #16]
 800c67c:	3101      	adds	r1, #1
 800c67e:	f102 0314 	add.w	r3, r2, #20
 800c682:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c686:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c68a:	1f05      	subs	r5, r0, #4
 800c68c:	42a3      	cmp	r3, r4
 800c68e:	d30c      	bcc.n	800c6aa <__copybits+0x36>
 800c690:	1aa3      	subs	r3, r4, r2
 800c692:	3b11      	subs	r3, #17
 800c694:	f023 0303 	bic.w	r3, r3, #3
 800c698:	3211      	adds	r2, #17
 800c69a:	42a2      	cmp	r2, r4
 800c69c:	bf88      	it	hi
 800c69e:	2300      	movhi	r3, #0
 800c6a0:	4418      	add	r0, r3
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	4288      	cmp	r0, r1
 800c6a6:	d305      	bcc.n	800c6b4 <__copybits+0x40>
 800c6a8:	bd70      	pop	{r4, r5, r6, pc}
 800c6aa:	f853 6b04 	ldr.w	r6, [r3], #4
 800c6ae:	f845 6f04 	str.w	r6, [r5, #4]!
 800c6b2:	e7eb      	b.n	800c68c <__copybits+0x18>
 800c6b4:	f840 3b04 	str.w	r3, [r0], #4
 800c6b8:	e7f4      	b.n	800c6a4 <__copybits+0x30>

0800c6ba <__any_on>:
 800c6ba:	f100 0214 	add.w	r2, r0, #20
 800c6be:	6900      	ldr	r0, [r0, #16]
 800c6c0:	114b      	asrs	r3, r1, #5
 800c6c2:	4298      	cmp	r0, r3
 800c6c4:	b510      	push	{r4, lr}
 800c6c6:	db11      	blt.n	800c6ec <__any_on+0x32>
 800c6c8:	dd0a      	ble.n	800c6e0 <__any_on+0x26>
 800c6ca:	f011 011f 	ands.w	r1, r1, #31
 800c6ce:	d007      	beq.n	800c6e0 <__any_on+0x26>
 800c6d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c6d4:	fa24 f001 	lsr.w	r0, r4, r1
 800c6d8:	fa00 f101 	lsl.w	r1, r0, r1
 800c6dc:	428c      	cmp	r4, r1
 800c6de:	d10b      	bne.n	800c6f8 <__any_on+0x3e>
 800c6e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d803      	bhi.n	800c6f0 <__any_on+0x36>
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	bd10      	pop	{r4, pc}
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	e7f7      	b.n	800c6e0 <__any_on+0x26>
 800c6f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c6f4:	2900      	cmp	r1, #0
 800c6f6:	d0f5      	beq.n	800c6e4 <__any_on+0x2a>
 800c6f8:	2001      	movs	r0, #1
 800c6fa:	e7f6      	b.n	800c6ea <__any_on+0x30>

0800c6fc <sulp>:
 800c6fc:	b570      	push	{r4, r5, r6, lr}
 800c6fe:	4604      	mov	r4, r0
 800c700:	460d      	mov	r5, r1
 800c702:	ec45 4b10 	vmov	d0, r4, r5
 800c706:	4616      	mov	r6, r2
 800c708:	f7ff feba 	bl	800c480 <__ulp>
 800c70c:	ec51 0b10 	vmov	r0, r1, d0
 800c710:	b17e      	cbz	r6, 800c732 <sulp+0x36>
 800c712:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c716:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	dd09      	ble.n	800c732 <sulp+0x36>
 800c71e:	051b      	lsls	r3, r3, #20
 800c720:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c724:	2400      	movs	r4, #0
 800c726:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c72a:	4622      	mov	r2, r4
 800c72c:	462b      	mov	r3, r5
 800c72e:	f7f3 ff9b 	bl	8000668 <__aeabi_dmul>
 800c732:	ec41 0b10 	vmov	d0, r0, r1
 800c736:	bd70      	pop	{r4, r5, r6, pc}

0800c738 <_strtod_l>:
 800c738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c73c:	b09f      	sub	sp, #124	@ 0x7c
 800c73e:	460c      	mov	r4, r1
 800c740:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c742:	2200      	movs	r2, #0
 800c744:	921a      	str	r2, [sp, #104]	@ 0x68
 800c746:	9005      	str	r0, [sp, #20]
 800c748:	f04f 0a00 	mov.w	sl, #0
 800c74c:	f04f 0b00 	mov.w	fp, #0
 800c750:	460a      	mov	r2, r1
 800c752:	9219      	str	r2, [sp, #100]	@ 0x64
 800c754:	7811      	ldrb	r1, [r2, #0]
 800c756:	292b      	cmp	r1, #43	@ 0x2b
 800c758:	d04a      	beq.n	800c7f0 <_strtod_l+0xb8>
 800c75a:	d838      	bhi.n	800c7ce <_strtod_l+0x96>
 800c75c:	290d      	cmp	r1, #13
 800c75e:	d832      	bhi.n	800c7c6 <_strtod_l+0x8e>
 800c760:	2908      	cmp	r1, #8
 800c762:	d832      	bhi.n	800c7ca <_strtod_l+0x92>
 800c764:	2900      	cmp	r1, #0
 800c766:	d03b      	beq.n	800c7e0 <_strtod_l+0xa8>
 800c768:	2200      	movs	r2, #0
 800c76a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c76c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c76e:	782a      	ldrb	r2, [r5, #0]
 800c770:	2a30      	cmp	r2, #48	@ 0x30
 800c772:	f040 80b3 	bne.w	800c8dc <_strtod_l+0x1a4>
 800c776:	786a      	ldrb	r2, [r5, #1]
 800c778:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c77c:	2a58      	cmp	r2, #88	@ 0x58
 800c77e:	d16e      	bne.n	800c85e <_strtod_l+0x126>
 800c780:	9302      	str	r3, [sp, #8]
 800c782:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c784:	9301      	str	r3, [sp, #4]
 800c786:	ab1a      	add	r3, sp, #104	@ 0x68
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	4a8e      	ldr	r2, [pc, #568]	@ (800c9c4 <_strtod_l+0x28c>)
 800c78c:	9805      	ldr	r0, [sp, #20]
 800c78e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c790:	a919      	add	r1, sp, #100	@ 0x64
 800c792:	f001 f8a7 	bl	800d8e4 <__gethex>
 800c796:	f010 060f 	ands.w	r6, r0, #15
 800c79a:	4604      	mov	r4, r0
 800c79c:	d005      	beq.n	800c7aa <_strtod_l+0x72>
 800c79e:	2e06      	cmp	r6, #6
 800c7a0:	d128      	bne.n	800c7f4 <_strtod_l+0xbc>
 800c7a2:	3501      	adds	r5, #1
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800c7a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f040 858e 	bne.w	800d2ce <_strtod_l+0xb96>
 800c7b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7b4:	b1cb      	cbz	r3, 800c7ea <_strtod_l+0xb2>
 800c7b6:	4652      	mov	r2, sl
 800c7b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c7bc:	ec43 2b10 	vmov	d0, r2, r3
 800c7c0:	b01f      	add	sp, #124	@ 0x7c
 800c7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c6:	2920      	cmp	r1, #32
 800c7c8:	d1ce      	bne.n	800c768 <_strtod_l+0x30>
 800c7ca:	3201      	adds	r2, #1
 800c7cc:	e7c1      	b.n	800c752 <_strtod_l+0x1a>
 800c7ce:	292d      	cmp	r1, #45	@ 0x2d
 800c7d0:	d1ca      	bne.n	800c768 <_strtod_l+0x30>
 800c7d2:	2101      	movs	r1, #1
 800c7d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c7d6:	1c51      	adds	r1, r2, #1
 800c7d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c7da:	7852      	ldrb	r2, [r2, #1]
 800c7dc:	2a00      	cmp	r2, #0
 800c7de:	d1c5      	bne.n	800c76c <_strtod_l+0x34>
 800c7e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c7e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f040 8570 	bne.w	800d2ca <_strtod_l+0xb92>
 800c7ea:	4652      	mov	r2, sl
 800c7ec:	465b      	mov	r3, fp
 800c7ee:	e7e5      	b.n	800c7bc <_strtod_l+0x84>
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	e7ef      	b.n	800c7d4 <_strtod_l+0x9c>
 800c7f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c7f6:	b13a      	cbz	r2, 800c808 <_strtod_l+0xd0>
 800c7f8:	2135      	movs	r1, #53	@ 0x35
 800c7fa:	a81c      	add	r0, sp, #112	@ 0x70
 800c7fc:	f7ff ff3a 	bl	800c674 <__copybits>
 800c800:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c802:	9805      	ldr	r0, [sp, #20]
 800c804:	f7ff fb08 	bl	800be18 <_Bfree>
 800c808:	3e01      	subs	r6, #1
 800c80a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c80c:	2e04      	cmp	r6, #4
 800c80e:	d806      	bhi.n	800c81e <_strtod_l+0xe6>
 800c810:	e8df f006 	tbb	[pc, r6]
 800c814:	201d0314 	.word	0x201d0314
 800c818:	14          	.byte	0x14
 800c819:	00          	.byte	0x00
 800c81a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c81e:	05e1      	lsls	r1, r4, #23
 800c820:	bf48      	it	mi
 800c822:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c826:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c82a:	0d1b      	lsrs	r3, r3, #20
 800c82c:	051b      	lsls	r3, r3, #20
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d1bb      	bne.n	800c7aa <_strtod_l+0x72>
 800c832:	f7fe fb11 	bl	800ae58 <__errno>
 800c836:	2322      	movs	r3, #34	@ 0x22
 800c838:	6003      	str	r3, [r0, #0]
 800c83a:	e7b6      	b.n	800c7aa <_strtod_l+0x72>
 800c83c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c840:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c844:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c848:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c84c:	e7e7      	b.n	800c81e <_strtod_l+0xe6>
 800c84e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c9cc <_strtod_l+0x294>
 800c852:	e7e4      	b.n	800c81e <_strtod_l+0xe6>
 800c854:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c858:	f04f 3aff 	mov.w	sl, #4294967295
 800c85c:	e7df      	b.n	800c81e <_strtod_l+0xe6>
 800c85e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c860:	1c5a      	adds	r2, r3, #1
 800c862:	9219      	str	r2, [sp, #100]	@ 0x64
 800c864:	785b      	ldrb	r3, [r3, #1]
 800c866:	2b30      	cmp	r3, #48	@ 0x30
 800c868:	d0f9      	beq.n	800c85e <_strtod_l+0x126>
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d09d      	beq.n	800c7aa <_strtod_l+0x72>
 800c86e:	2301      	movs	r3, #1
 800c870:	9309      	str	r3, [sp, #36]	@ 0x24
 800c872:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c874:	930c      	str	r3, [sp, #48]	@ 0x30
 800c876:	2300      	movs	r3, #0
 800c878:	9308      	str	r3, [sp, #32]
 800c87a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c87c:	461f      	mov	r7, r3
 800c87e:	220a      	movs	r2, #10
 800c880:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c882:	7805      	ldrb	r5, [r0, #0]
 800c884:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c888:	b2d9      	uxtb	r1, r3
 800c88a:	2909      	cmp	r1, #9
 800c88c:	d928      	bls.n	800c8e0 <_strtod_l+0x1a8>
 800c88e:	494e      	ldr	r1, [pc, #312]	@ (800c9c8 <_strtod_l+0x290>)
 800c890:	2201      	movs	r2, #1
 800c892:	f000 ff6b 	bl	800d76c <strncmp>
 800c896:	2800      	cmp	r0, #0
 800c898:	d032      	beq.n	800c900 <_strtod_l+0x1c8>
 800c89a:	2000      	movs	r0, #0
 800c89c:	462a      	mov	r2, r5
 800c89e:	4681      	mov	r9, r0
 800c8a0:	463d      	mov	r5, r7
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2a65      	cmp	r2, #101	@ 0x65
 800c8a6:	d001      	beq.n	800c8ac <_strtod_l+0x174>
 800c8a8:	2a45      	cmp	r2, #69	@ 0x45
 800c8aa:	d114      	bne.n	800c8d6 <_strtod_l+0x19e>
 800c8ac:	b91d      	cbnz	r5, 800c8b6 <_strtod_l+0x17e>
 800c8ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8b0:	4302      	orrs	r2, r0
 800c8b2:	d095      	beq.n	800c7e0 <_strtod_l+0xa8>
 800c8b4:	2500      	movs	r5, #0
 800c8b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c8b8:	1c62      	adds	r2, r4, #1
 800c8ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800c8bc:	7862      	ldrb	r2, [r4, #1]
 800c8be:	2a2b      	cmp	r2, #43	@ 0x2b
 800c8c0:	d077      	beq.n	800c9b2 <_strtod_l+0x27a>
 800c8c2:	2a2d      	cmp	r2, #45	@ 0x2d
 800c8c4:	d07b      	beq.n	800c9be <_strtod_l+0x286>
 800c8c6:	f04f 0c00 	mov.w	ip, #0
 800c8ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c8ce:	2909      	cmp	r1, #9
 800c8d0:	f240 8082 	bls.w	800c9d8 <_strtod_l+0x2a0>
 800c8d4:	9419      	str	r4, [sp, #100]	@ 0x64
 800c8d6:	f04f 0800 	mov.w	r8, #0
 800c8da:	e0a2      	b.n	800ca22 <_strtod_l+0x2ea>
 800c8dc:	2300      	movs	r3, #0
 800c8de:	e7c7      	b.n	800c870 <_strtod_l+0x138>
 800c8e0:	2f08      	cmp	r7, #8
 800c8e2:	bfd5      	itete	le
 800c8e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c8e6:	9908      	ldrgt	r1, [sp, #32]
 800c8e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800c8ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c8f0:	f100 0001 	add.w	r0, r0, #1
 800c8f4:	bfd4      	ite	le
 800c8f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c8f8:	9308      	strgt	r3, [sp, #32]
 800c8fa:	3701      	adds	r7, #1
 800c8fc:	9019      	str	r0, [sp, #100]	@ 0x64
 800c8fe:	e7bf      	b.n	800c880 <_strtod_l+0x148>
 800c900:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c902:	1c5a      	adds	r2, r3, #1
 800c904:	9219      	str	r2, [sp, #100]	@ 0x64
 800c906:	785a      	ldrb	r2, [r3, #1]
 800c908:	b37f      	cbz	r7, 800c96a <_strtod_l+0x232>
 800c90a:	4681      	mov	r9, r0
 800c90c:	463d      	mov	r5, r7
 800c90e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c912:	2b09      	cmp	r3, #9
 800c914:	d912      	bls.n	800c93c <_strtod_l+0x204>
 800c916:	2301      	movs	r3, #1
 800c918:	e7c4      	b.n	800c8a4 <_strtod_l+0x16c>
 800c91a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c91c:	1c5a      	adds	r2, r3, #1
 800c91e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c920:	785a      	ldrb	r2, [r3, #1]
 800c922:	3001      	adds	r0, #1
 800c924:	2a30      	cmp	r2, #48	@ 0x30
 800c926:	d0f8      	beq.n	800c91a <_strtod_l+0x1e2>
 800c928:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c92c:	2b08      	cmp	r3, #8
 800c92e:	f200 84d3 	bhi.w	800d2d8 <_strtod_l+0xba0>
 800c932:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c934:	930c      	str	r3, [sp, #48]	@ 0x30
 800c936:	4681      	mov	r9, r0
 800c938:	2000      	movs	r0, #0
 800c93a:	4605      	mov	r5, r0
 800c93c:	3a30      	subs	r2, #48	@ 0x30
 800c93e:	f100 0301 	add.w	r3, r0, #1
 800c942:	d02a      	beq.n	800c99a <_strtod_l+0x262>
 800c944:	4499      	add	r9, r3
 800c946:	eb00 0c05 	add.w	ip, r0, r5
 800c94a:	462b      	mov	r3, r5
 800c94c:	210a      	movs	r1, #10
 800c94e:	4563      	cmp	r3, ip
 800c950:	d10d      	bne.n	800c96e <_strtod_l+0x236>
 800c952:	1c69      	adds	r1, r5, #1
 800c954:	4401      	add	r1, r0
 800c956:	4428      	add	r0, r5
 800c958:	2808      	cmp	r0, #8
 800c95a:	dc16      	bgt.n	800c98a <_strtod_l+0x252>
 800c95c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c95e:	230a      	movs	r3, #10
 800c960:	fb03 2300 	mla	r3, r3, r0, r2
 800c964:	930a      	str	r3, [sp, #40]	@ 0x28
 800c966:	2300      	movs	r3, #0
 800c968:	e018      	b.n	800c99c <_strtod_l+0x264>
 800c96a:	4638      	mov	r0, r7
 800c96c:	e7da      	b.n	800c924 <_strtod_l+0x1ec>
 800c96e:	2b08      	cmp	r3, #8
 800c970:	f103 0301 	add.w	r3, r3, #1
 800c974:	dc03      	bgt.n	800c97e <_strtod_l+0x246>
 800c976:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c978:	434e      	muls	r6, r1
 800c97a:	960a      	str	r6, [sp, #40]	@ 0x28
 800c97c:	e7e7      	b.n	800c94e <_strtod_l+0x216>
 800c97e:	2b10      	cmp	r3, #16
 800c980:	bfde      	ittt	le
 800c982:	9e08      	ldrle	r6, [sp, #32]
 800c984:	434e      	mulle	r6, r1
 800c986:	9608      	strle	r6, [sp, #32]
 800c988:	e7e1      	b.n	800c94e <_strtod_l+0x216>
 800c98a:	280f      	cmp	r0, #15
 800c98c:	dceb      	bgt.n	800c966 <_strtod_l+0x22e>
 800c98e:	9808      	ldr	r0, [sp, #32]
 800c990:	230a      	movs	r3, #10
 800c992:	fb03 2300 	mla	r3, r3, r0, r2
 800c996:	9308      	str	r3, [sp, #32]
 800c998:	e7e5      	b.n	800c966 <_strtod_l+0x22e>
 800c99a:	4629      	mov	r1, r5
 800c99c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c99e:	1c50      	adds	r0, r2, #1
 800c9a0:	9019      	str	r0, [sp, #100]	@ 0x64
 800c9a2:	7852      	ldrb	r2, [r2, #1]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	460d      	mov	r5, r1
 800c9a8:	e7b1      	b.n	800c90e <_strtod_l+0x1d6>
 800c9aa:	f04f 0900 	mov.w	r9, #0
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e77d      	b.n	800c8ae <_strtod_l+0x176>
 800c9b2:	f04f 0c00 	mov.w	ip, #0
 800c9b6:	1ca2      	adds	r2, r4, #2
 800c9b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9ba:	78a2      	ldrb	r2, [r4, #2]
 800c9bc:	e785      	b.n	800c8ca <_strtod_l+0x192>
 800c9be:	f04f 0c01 	mov.w	ip, #1
 800c9c2:	e7f8      	b.n	800c9b6 <_strtod_l+0x27e>
 800c9c4:	0800ec48 	.word	0x0800ec48
 800c9c8:	0800ec30 	.word	0x0800ec30
 800c9cc:	7ff00000 	.word	0x7ff00000
 800c9d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c9d2:	1c51      	adds	r1, r2, #1
 800c9d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800c9d6:	7852      	ldrb	r2, [r2, #1]
 800c9d8:	2a30      	cmp	r2, #48	@ 0x30
 800c9da:	d0f9      	beq.n	800c9d0 <_strtod_l+0x298>
 800c9dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c9e0:	2908      	cmp	r1, #8
 800c9e2:	f63f af78 	bhi.w	800c8d6 <_strtod_l+0x19e>
 800c9e6:	3a30      	subs	r2, #48	@ 0x30
 800c9e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c9ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c9ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c9ee:	f04f 080a 	mov.w	r8, #10
 800c9f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c9f4:	1c56      	adds	r6, r2, #1
 800c9f6:	9619      	str	r6, [sp, #100]	@ 0x64
 800c9f8:	7852      	ldrb	r2, [r2, #1]
 800c9fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c9fe:	f1be 0f09 	cmp.w	lr, #9
 800ca02:	d939      	bls.n	800ca78 <_strtod_l+0x340>
 800ca04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ca06:	1a76      	subs	r6, r6, r1
 800ca08:	2e08      	cmp	r6, #8
 800ca0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ca0e:	dc03      	bgt.n	800ca18 <_strtod_l+0x2e0>
 800ca10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ca12:	4588      	cmp	r8, r1
 800ca14:	bfa8      	it	ge
 800ca16:	4688      	movge	r8, r1
 800ca18:	f1bc 0f00 	cmp.w	ip, #0
 800ca1c:	d001      	beq.n	800ca22 <_strtod_l+0x2ea>
 800ca1e:	f1c8 0800 	rsb	r8, r8, #0
 800ca22:	2d00      	cmp	r5, #0
 800ca24:	d14e      	bne.n	800cac4 <_strtod_l+0x38c>
 800ca26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca28:	4308      	orrs	r0, r1
 800ca2a:	f47f aebe 	bne.w	800c7aa <_strtod_l+0x72>
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	f47f aed6 	bne.w	800c7e0 <_strtod_l+0xa8>
 800ca34:	2a69      	cmp	r2, #105	@ 0x69
 800ca36:	d028      	beq.n	800ca8a <_strtod_l+0x352>
 800ca38:	dc25      	bgt.n	800ca86 <_strtod_l+0x34e>
 800ca3a:	2a49      	cmp	r2, #73	@ 0x49
 800ca3c:	d025      	beq.n	800ca8a <_strtod_l+0x352>
 800ca3e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ca40:	f47f aece 	bne.w	800c7e0 <_strtod_l+0xa8>
 800ca44:	499b      	ldr	r1, [pc, #620]	@ (800ccb4 <_strtod_l+0x57c>)
 800ca46:	a819      	add	r0, sp, #100	@ 0x64
 800ca48:	f001 f96e 	bl	800dd28 <__match>
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	f43f aec7 	beq.w	800c7e0 <_strtod_l+0xa8>
 800ca52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	2b28      	cmp	r3, #40	@ 0x28
 800ca58:	d12e      	bne.n	800cab8 <_strtod_l+0x380>
 800ca5a:	4997      	ldr	r1, [pc, #604]	@ (800ccb8 <_strtod_l+0x580>)
 800ca5c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ca5e:	a819      	add	r0, sp, #100	@ 0x64
 800ca60:	f001 f976 	bl	800dd50 <__hexnan>
 800ca64:	2805      	cmp	r0, #5
 800ca66:	d127      	bne.n	800cab8 <_strtod_l+0x380>
 800ca68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ca6a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ca6e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ca72:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ca76:	e698      	b.n	800c7aa <_strtod_l+0x72>
 800ca78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ca7a:	fb08 2101 	mla	r1, r8, r1, r2
 800ca7e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ca82:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca84:	e7b5      	b.n	800c9f2 <_strtod_l+0x2ba>
 800ca86:	2a6e      	cmp	r2, #110	@ 0x6e
 800ca88:	e7da      	b.n	800ca40 <_strtod_l+0x308>
 800ca8a:	498c      	ldr	r1, [pc, #560]	@ (800ccbc <_strtod_l+0x584>)
 800ca8c:	a819      	add	r0, sp, #100	@ 0x64
 800ca8e:	f001 f94b 	bl	800dd28 <__match>
 800ca92:	2800      	cmp	r0, #0
 800ca94:	f43f aea4 	beq.w	800c7e0 <_strtod_l+0xa8>
 800ca98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca9a:	4989      	ldr	r1, [pc, #548]	@ (800ccc0 <_strtod_l+0x588>)
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	a819      	add	r0, sp, #100	@ 0x64
 800caa0:	9319      	str	r3, [sp, #100]	@ 0x64
 800caa2:	f001 f941 	bl	800dd28 <__match>
 800caa6:	b910      	cbnz	r0, 800caae <_strtod_l+0x376>
 800caa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800caaa:	3301      	adds	r3, #1
 800caac:	9319      	str	r3, [sp, #100]	@ 0x64
 800caae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ccd0 <_strtod_l+0x598>
 800cab2:	f04f 0a00 	mov.w	sl, #0
 800cab6:	e678      	b.n	800c7aa <_strtod_l+0x72>
 800cab8:	4882      	ldr	r0, [pc, #520]	@ (800ccc4 <_strtod_l+0x58c>)
 800caba:	f000 fe89 	bl	800d7d0 <nan>
 800cabe:	ec5b ab10 	vmov	sl, fp, d0
 800cac2:	e672      	b.n	800c7aa <_strtod_l+0x72>
 800cac4:	eba8 0309 	sub.w	r3, r8, r9
 800cac8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800caca:	9309      	str	r3, [sp, #36]	@ 0x24
 800cacc:	2f00      	cmp	r7, #0
 800cace:	bf08      	it	eq
 800cad0:	462f      	moveq	r7, r5
 800cad2:	2d10      	cmp	r5, #16
 800cad4:	462c      	mov	r4, r5
 800cad6:	bfa8      	it	ge
 800cad8:	2410      	movge	r4, #16
 800cada:	f7f3 fd4b 	bl	8000574 <__aeabi_ui2d>
 800cade:	2d09      	cmp	r5, #9
 800cae0:	4682      	mov	sl, r0
 800cae2:	468b      	mov	fp, r1
 800cae4:	dc13      	bgt.n	800cb0e <_strtod_l+0x3d6>
 800cae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f43f ae5e 	beq.w	800c7aa <_strtod_l+0x72>
 800caee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caf0:	dd78      	ble.n	800cbe4 <_strtod_l+0x4ac>
 800caf2:	2b16      	cmp	r3, #22
 800caf4:	dc5f      	bgt.n	800cbb6 <_strtod_l+0x47e>
 800caf6:	4974      	ldr	r1, [pc, #464]	@ (800ccc8 <_strtod_l+0x590>)
 800caf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cafc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb00:	4652      	mov	r2, sl
 800cb02:	465b      	mov	r3, fp
 800cb04:	f7f3 fdb0 	bl	8000668 <__aeabi_dmul>
 800cb08:	4682      	mov	sl, r0
 800cb0a:	468b      	mov	fp, r1
 800cb0c:	e64d      	b.n	800c7aa <_strtod_l+0x72>
 800cb0e:	4b6e      	ldr	r3, [pc, #440]	@ (800ccc8 <_strtod_l+0x590>)
 800cb10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cb18:	f7f3 fda6 	bl	8000668 <__aeabi_dmul>
 800cb1c:	4682      	mov	sl, r0
 800cb1e:	9808      	ldr	r0, [sp, #32]
 800cb20:	468b      	mov	fp, r1
 800cb22:	f7f3 fd27 	bl	8000574 <__aeabi_ui2d>
 800cb26:	4602      	mov	r2, r0
 800cb28:	460b      	mov	r3, r1
 800cb2a:	4650      	mov	r0, sl
 800cb2c:	4659      	mov	r1, fp
 800cb2e:	f7f3 fbe5 	bl	80002fc <__adddf3>
 800cb32:	2d0f      	cmp	r5, #15
 800cb34:	4682      	mov	sl, r0
 800cb36:	468b      	mov	fp, r1
 800cb38:	ddd5      	ble.n	800cae6 <_strtod_l+0x3ae>
 800cb3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb3c:	1b2c      	subs	r4, r5, r4
 800cb3e:	441c      	add	r4, r3
 800cb40:	2c00      	cmp	r4, #0
 800cb42:	f340 8096 	ble.w	800cc72 <_strtod_l+0x53a>
 800cb46:	f014 030f 	ands.w	r3, r4, #15
 800cb4a:	d00a      	beq.n	800cb62 <_strtod_l+0x42a>
 800cb4c:	495e      	ldr	r1, [pc, #376]	@ (800ccc8 <_strtod_l+0x590>)
 800cb4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cb52:	4652      	mov	r2, sl
 800cb54:	465b      	mov	r3, fp
 800cb56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb5a:	f7f3 fd85 	bl	8000668 <__aeabi_dmul>
 800cb5e:	4682      	mov	sl, r0
 800cb60:	468b      	mov	fp, r1
 800cb62:	f034 040f 	bics.w	r4, r4, #15
 800cb66:	d073      	beq.n	800cc50 <_strtod_l+0x518>
 800cb68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cb6c:	dd48      	ble.n	800cc00 <_strtod_l+0x4c8>
 800cb6e:	2400      	movs	r4, #0
 800cb70:	46a0      	mov	r8, r4
 800cb72:	940a      	str	r4, [sp, #40]	@ 0x28
 800cb74:	46a1      	mov	r9, r4
 800cb76:	9a05      	ldr	r2, [sp, #20]
 800cb78:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ccd0 <_strtod_l+0x598>
 800cb7c:	2322      	movs	r3, #34	@ 0x22
 800cb7e:	6013      	str	r3, [r2, #0]
 800cb80:	f04f 0a00 	mov.w	sl, #0
 800cb84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f43f ae0f 	beq.w	800c7aa <_strtod_l+0x72>
 800cb8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb8e:	9805      	ldr	r0, [sp, #20]
 800cb90:	f7ff f942 	bl	800be18 <_Bfree>
 800cb94:	9805      	ldr	r0, [sp, #20]
 800cb96:	4649      	mov	r1, r9
 800cb98:	f7ff f93e 	bl	800be18 <_Bfree>
 800cb9c:	9805      	ldr	r0, [sp, #20]
 800cb9e:	4641      	mov	r1, r8
 800cba0:	f7ff f93a 	bl	800be18 <_Bfree>
 800cba4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cba6:	9805      	ldr	r0, [sp, #20]
 800cba8:	f7ff f936 	bl	800be18 <_Bfree>
 800cbac:	9805      	ldr	r0, [sp, #20]
 800cbae:	4621      	mov	r1, r4
 800cbb0:	f7ff f932 	bl	800be18 <_Bfree>
 800cbb4:	e5f9      	b.n	800c7aa <_strtod_l+0x72>
 800cbb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	dbbc      	blt.n	800cb3a <_strtod_l+0x402>
 800cbc0:	4c41      	ldr	r4, [pc, #260]	@ (800ccc8 <_strtod_l+0x590>)
 800cbc2:	f1c5 050f 	rsb	r5, r5, #15
 800cbc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cbca:	4652      	mov	r2, sl
 800cbcc:	465b      	mov	r3, fp
 800cbce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbd2:	f7f3 fd49 	bl	8000668 <__aeabi_dmul>
 800cbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbd8:	1b5d      	subs	r5, r3, r5
 800cbda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cbde:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cbe2:	e78f      	b.n	800cb04 <_strtod_l+0x3cc>
 800cbe4:	3316      	adds	r3, #22
 800cbe6:	dba8      	blt.n	800cb3a <_strtod_l+0x402>
 800cbe8:	4b37      	ldr	r3, [pc, #220]	@ (800ccc8 <_strtod_l+0x590>)
 800cbea:	eba9 0808 	sub.w	r8, r9, r8
 800cbee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cbf2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cbf6:	4650      	mov	r0, sl
 800cbf8:	4659      	mov	r1, fp
 800cbfa:	f7f3 fe5f 	bl	80008bc <__aeabi_ddiv>
 800cbfe:	e783      	b.n	800cb08 <_strtod_l+0x3d0>
 800cc00:	4b32      	ldr	r3, [pc, #200]	@ (800cccc <_strtod_l+0x594>)
 800cc02:	9308      	str	r3, [sp, #32]
 800cc04:	2300      	movs	r3, #0
 800cc06:	1124      	asrs	r4, r4, #4
 800cc08:	4650      	mov	r0, sl
 800cc0a:	4659      	mov	r1, fp
 800cc0c:	461e      	mov	r6, r3
 800cc0e:	2c01      	cmp	r4, #1
 800cc10:	dc21      	bgt.n	800cc56 <_strtod_l+0x51e>
 800cc12:	b10b      	cbz	r3, 800cc18 <_strtod_l+0x4e0>
 800cc14:	4682      	mov	sl, r0
 800cc16:	468b      	mov	fp, r1
 800cc18:	492c      	ldr	r1, [pc, #176]	@ (800cccc <_strtod_l+0x594>)
 800cc1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cc1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cc22:	4652      	mov	r2, sl
 800cc24:	465b      	mov	r3, fp
 800cc26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc2a:	f7f3 fd1d 	bl	8000668 <__aeabi_dmul>
 800cc2e:	4b28      	ldr	r3, [pc, #160]	@ (800ccd0 <_strtod_l+0x598>)
 800cc30:	460a      	mov	r2, r1
 800cc32:	400b      	ands	r3, r1
 800cc34:	4927      	ldr	r1, [pc, #156]	@ (800ccd4 <_strtod_l+0x59c>)
 800cc36:	428b      	cmp	r3, r1
 800cc38:	4682      	mov	sl, r0
 800cc3a:	d898      	bhi.n	800cb6e <_strtod_l+0x436>
 800cc3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cc40:	428b      	cmp	r3, r1
 800cc42:	bf86      	itte	hi
 800cc44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ccd8 <_strtod_l+0x5a0>
 800cc48:	f04f 3aff 	movhi.w	sl, #4294967295
 800cc4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cc50:	2300      	movs	r3, #0
 800cc52:	9308      	str	r3, [sp, #32]
 800cc54:	e07a      	b.n	800cd4c <_strtod_l+0x614>
 800cc56:	07e2      	lsls	r2, r4, #31
 800cc58:	d505      	bpl.n	800cc66 <_strtod_l+0x52e>
 800cc5a:	9b08      	ldr	r3, [sp, #32]
 800cc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc60:	f7f3 fd02 	bl	8000668 <__aeabi_dmul>
 800cc64:	2301      	movs	r3, #1
 800cc66:	9a08      	ldr	r2, [sp, #32]
 800cc68:	3208      	adds	r2, #8
 800cc6a:	3601      	adds	r6, #1
 800cc6c:	1064      	asrs	r4, r4, #1
 800cc6e:	9208      	str	r2, [sp, #32]
 800cc70:	e7cd      	b.n	800cc0e <_strtod_l+0x4d6>
 800cc72:	d0ed      	beq.n	800cc50 <_strtod_l+0x518>
 800cc74:	4264      	negs	r4, r4
 800cc76:	f014 020f 	ands.w	r2, r4, #15
 800cc7a:	d00a      	beq.n	800cc92 <_strtod_l+0x55a>
 800cc7c:	4b12      	ldr	r3, [pc, #72]	@ (800ccc8 <_strtod_l+0x590>)
 800cc7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc82:	4650      	mov	r0, sl
 800cc84:	4659      	mov	r1, fp
 800cc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8a:	f7f3 fe17 	bl	80008bc <__aeabi_ddiv>
 800cc8e:	4682      	mov	sl, r0
 800cc90:	468b      	mov	fp, r1
 800cc92:	1124      	asrs	r4, r4, #4
 800cc94:	d0dc      	beq.n	800cc50 <_strtod_l+0x518>
 800cc96:	2c1f      	cmp	r4, #31
 800cc98:	dd20      	ble.n	800ccdc <_strtod_l+0x5a4>
 800cc9a:	2400      	movs	r4, #0
 800cc9c:	46a0      	mov	r8, r4
 800cc9e:	940a      	str	r4, [sp, #40]	@ 0x28
 800cca0:	46a1      	mov	r9, r4
 800cca2:	9a05      	ldr	r2, [sp, #20]
 800cca4:	2322      	movs	r3, #34	@ 0x22
 800cca6:	f04f 0a00 	mov.w	sl, #0
 800ccaa:	f04f 0b00 	mov.w	fp, #0
 800ccae:	6013      	str	r3, [r2, #0]
 800ccb0:	e768      	b.n	800cb84 <_strtod_l+0x44c>
 800ccb2:	bf00      	nop
 800ccb4:	0800e98a 	.word	0x0800e98a
 800ccb8:	0800ec34 	.word	0x0800ec34
 800ccbc:	0800e982 	.word	0x0800e982
 800ccc0:	0800ea66 	.word	0x0800ea66
 800ccc4:	0800ea62 	.word	0x0800ea62
 800ccc8:	0800eb68 	.word	0x0800eb68
 800cccc:	0800eb40 	.word	0x0800eb40
 800ccd0:	7ff00000 	.word	0x7ff00000
 800ccd4:	7ca00000 	.word	0x7ca00000
 800ccd8:	7fefffff 	.word	0x7fefffff
 800ccdc:	f014 0310 	ands.w	r3, r4, #16
 800cce0:	bf18      	it	ne
 800cce2:	236a      	movne	r3, #106	@ 0x6a
 800cce4:	4ea9      	ldr	r6, [pc, #676]	@ (800cf8c <_strtod_l+0x854>)
 800cce6:	9308      	str	r3, [sp, #32]
 800cce8:	4650      	mov	r0, sl
 800ccea:	4659      	mov	r1, fp
 800ccec:	2300      	movs	r3, #0
 800ccee:	07e2      	lsls	r2, r4, #31
 800ccf0:	d504      	bpl.n	800ccfc <_strtod_l+0x5c4>
 800ccf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ccf6:	f7f3 fcb7 	bl	8000668 <__aeabi_dmul>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	1064      	asrs	r4, r4, #1
 800ccfe:	f106 0608 	add.w	r6, r6, #8
 800cd02:	d1f4      	bne.n	800ccee <_strtod_l+0x5b6>
 800cd04:	b10b      	cbz	r3, 800cd0a <_strtod_l+0x5d2>
 800cd06:	4682      	mov	sl, r0
 800cd08:	468b      	mov	fp, r1
 800cd0a:	9b08      	ldr	r3, [sp, #32]
 800cd0c:	b1b3      	cbz	r3, 800cd3c <_strtod_l+0x604>
 800cd0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cd12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	4659      	mov	r1, fp
 800cd1a:	dd0f      	ble.n	800cd3c <_strtod_l+0x604>
 800cd1c:	2b1f      	cmp	r3, #31
 800cd1e:	dd55      	ble.n	800cdcc <_strtod_l+0x694>
 800cd20:	2b34      	cmp	r3, #52	@ 0x34
 800cd22:	bfde      	ittt	le
 800cd24:	f04f 33ff 	movle.w	r3, #4294967295
 800cd28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cd2c:	4093      	lslle	r3, r2
 800cd2e:	f04f 0a00 	mov.w	sl, #0
 800cd32:	bfcc      	ite	gt
 800cd34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cd38:	ea03 0b01 	andle.w	fp, r3, r1
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	2300      	movs	r3, #0
 800cd40:	4650      	mov	r0, sl
 800cd42:	4659      	mov	r1, fp
 800cd44:	f7f3 fef8 	bl	8000b38 <__aeabi_dcmpeq>
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	d1a6      	bne.n	800cc9a <_strtod_l+0x562>
 800cd4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd4e:	9300      	str	r3, [sp, #0]
 800cd50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cd52:	9805      	ldr	r0, [sp, #20]
 800cd54:	462b      	mov	r3, r5
 800cd56:	463a      	mov	r2, r7
 800cd58:	f7ff f8c6 	bl	800bee8 <__s2b>
 800cd5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	f43f af05 	beq.w	800cb6e <_strtod_l+0x436>
 800cd64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd66:	2a00      	cmp	r2, #0
 800cd68:	eba9 0308 	sub.w	r3, r9, r8
 800cd6c:	bfa8      	it	ge
 800cd6e:	2300      	movge	r3, #0
 800cd70:	9312      	str	r3, [sp, #72]	@ 0x48
 800cd72:	2400      	movs	r4, #0
 800cd74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cd78:	9316      	str	r3, [sp, #88]	@ 0x58
 800cd7a:	46a0      	mov	r8, r4
 800cd7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd7e:	9805      	ldr	r0, [sp, #20]
 800cd80:	6859      	ldr	r1, [r3, #4]
 800cd82:	f7ff f809 	bl	800bd98 <_Balloc>
 800cd86:	4681      	mov	r9, r0
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	f43f aef4 	beq.w	800cb76 <_strtod_l+0x43e>
 800cd8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd90:	691a      	ldr	r2, [r3, #16]
 800cd92:	3202      	adds	r2, #2
 800cd94:	f103 010c 	add.w	r1, r3, #12
 800cd98:	0092      	lsls	r2, r2, #2
 800cd9a:	300c      	adds	r0, #12
 800cd9c:	f000 fd08 	bl	800d7b0 <memcpy>
 800cda0:	ec4b ab10 	vmov	d0, sl, fp
 800cda4:	9805      	ldr	r0, [sp, #20]
 800cda6:	aa1c      	add	r2, sp, #112	@ 0x70
 800cda8:	a91b      	add	r1, sp, #108	@ 0x6c
 800cdaa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cdae:	f7ff fbd7 	bl	800c560 <__d2b>
 800cdb2:	901a      	str	r0, [sp, #104]	@ 0x68
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	f43f aede 	beq.w	800cb76 <_strtod_l+0x43e>
 800cdba:	9805      	ldr	r0, [sp, #20]
 800cdbc:	2101      	movs	r1, #1
 800cdbe:	f7ff f929 	bl	800c014 <__i2b>
 800cdc2:	4680      	mov	r8, r0
 800cdc4:	b948      	cbnz	r0, 800cdda <_strtod_l+0x6a2>
 800cdc6:	f04f 0800 	mov.w	r8, #0
 800cdca:	e6d4      	b.n	800cb76 <_strtod_l+0x43e>
 800cdcc:	f04f 32ff 	mov.w	r2, #4294967295
 800cdd0:	fa02 f303 	lsl.w	r3, r2, r3
 800cdd4:	ea03 0a0a 	and.w	sl, r3, sl
 800cdd8:	e7b0      	b.n	800cd3c <_strtod_l+0x604>
 800cdda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cddc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cdde:	2d00      	cmp	r5, #0
 800cde0:	bfab      	itete	ge
 800cde2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cde4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cde6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cde8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cdea:	bfac      	ite	ge
 800cdec:	18ef      	addge	r7, r5, r3
 800cdee:	1b5e      	sublt	r6, r3, r5
 800cdf0:	9b08      	ldr	r3, [sp, #32]
 800cdf2:	1aed      	subs	r5, r5, r3
 800cdf4:	4415      	add	r5, r2
 800cdf6:	4b66      	ldr	r3, [pc, #408]	@ (800cf90 <_strtod_l+0x858>)
 800cdf8:	3d01      	subs	r5, #1
 800cdfa:	429d      	cmp	r5, r3
 800cdfc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ce00:	da50      	bge.n	800cea4 <_strtod_l+0x76c>
 800ce02:	1b5b      	subs	r3, r3, r5
 800ce04:	2b1f      	cmp	r3, #31
 800ce06:	eba2 0203 	sub.w	r2, r2, r3
 800ce0a:	f04f 0101 	mov.w	r1, #1
 800ce0e:	dc3d      	bgt.n	800ce8c <_strtod_l+0x754>
 800ce10:	fa01 f303 	lsl.w	r3, r1, r3
 800ce14:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ce16:	2300      	movs	r3, #0
 800ce18:	9310      	str	r3, [sp, #64]	@ 0x40
 800ce1a:	18bd      	adds	r5, r7, r2
 800ce1c:	9b08      	ldr	r3, [sp, #32]
 800ce1e:	42af      	cmp	r7, r5
 800ce20:	4416      	add	r6, r2
 800ce22:	441e      	add	r6, r3
 800ce24:	463b      	mov	r3, r7
 800ce26:	bfa8      	it	ge
 800ce28:	462b      	movge	r3, r5
 800ce2a:	42b3      	cmp	r3, r6
 800ce2c:	bfa8      	it	ge
 800ce2e:	4633      	movge	r3, r6
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	bfc2      	ittt	gt
 800ce34:	1aed      	subgt	r5, r5, r3
 800ce36:	1af6      	subgt	r6, r6, r3
 800ce38:	1aff      	subgt	r7, r7, r3
 800ce3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	dd16      	ble.n	800ce6e <_strtod_l+0x736>
 800ce40:	4641      	mov	r1, r8
 800ce42:	9805      	ldr	r0, [sp, #20]
 800ce44:	461a      	mov	r2, r3
 800ce46:	f7ff f9a5 	bl	800c194 <__pow5mult>
 800ce4a:	4680      	mov	r8, r0
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	d0ba      	beq.n	800cdc6 <_strtod_l+0x68e>
 800ce50:	4601      	mov	r1, r0
 800ce52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ce54:	9805      	ldr	r0, [sp, #20]
 800ce56:	f7ff f8f3 	bl	800c040 <__multiply>
 800ce5a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	f43f ae8a 	beq.w	800cb76 <_strtod_l+0x43e>
 800ce62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce64:	9805      	ldr	r0, [sp, #20]
 800ce66:	f7fe ffd7 	bl	800be18 <_Bfree>
 800ce6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce6c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce6e:	2d00      	cmp	r5, #0
 800ce70:	dc1d      	bgt.n	800ceae <_strtod_l+0x776>
 800ce72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	dd23      	ble.n	800cec0 <_strtod_l+0x788>
 800ce78:	4649      	mov	r1, r9
 800ce7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ce7c:	9805      	ldr	r0, [sp, #20]
 800ce7e:	f7ff f989 	bl	800c194 <__pow5mult>
 800ce82:	4681      	mov	r9, r0
 800ce84:	b9e0      	cbnz	r0, 800cec0 <_strtod_l+0x788>
 800ce86:	f04f 0900 	mov.w	r9, #0
 800ce8a:	e674      	b.n	800cb76 <_strtod_l+0x43e>
 800ce8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ce90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ce94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ce98:	35e2      	adds	r5, #226	@ 0xe2
 800ce9a:	fa01 f305 	lsl.w	r3, r1, r5
 800ce9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cea0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cea2:	e7ba      	b.n	800ce1a <_strtod_l+0x6e2>
 800cea4:	2300      	movs	r3, #0
 800cea6:	9310      	str	r3, [sp, #64]	@ 0x40
 800cea8:	2301      	movs	r3, #1
 800ceaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ceac:	e7b5      	b.n	800ce1a <_strtod_l+0x6e2>
 800ceae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ceb0:	9805      	ldr	r0, [sp, #20]
 800ceb2:	462a      	mov	r2, r5
 800ceb4:	f7ff f9c8 	bl	800c248 <__lshift>
 800ceb8:	901a      	str	r0, [sp, #104]	@ 0x68
 800ceba:	2800      	cmp	r0, #0
 800cebc:	d1d9      	bne.n	800ce72 <_strtod_l+0x73a>
 800cebe:	e65a      	b.n	800cb76 <_strtod_l+0x43e>
 800cec0:	2e00      	cmp	r6, #0
 800cec2:	dd07      	ble.n	800ced4 <_strtod_l+0x79c>
 800cec4:	4649      	mov	r1, r9
 800cec6:	9805      	ldr	r0, [sp, #20]
 800cec8:	4632      	mov	r2, r6
 800ceca:	f7ff f9bd 	bl	800c248 <__lshift>
 800cece:	4681      	mov	r9, r0
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d0d8      	beq.n	800ce86 <_strtod_l+0x74e>
 800ced4:	2f00      	cmp	r7, #0
 800ced6:	dd08      	ble.n	800ceea <_strtod_l+0x7b2>
 800ced8:	4641      	mov	r1, r8
 800ceda:	9805      	ldr	r0, [sp, #20]
 800cedc:	463a      	mov	r2, r7
 800cede:	f7ff f9b3 	bl	800c248 <__lshift>
 800cee2:	4680      	mov	r8, r0
 800cee4:	2800      	cmp	r0, #0
 800cee6:	f43f ae46 	beq.w	800cb76 <_strtod_l+0x43e>
 800ceea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ceec:	9805      	ldr	r0, [sp, #20]
 800ceee:	464a      	mov	r2, r9
 800cef0:	f7ff fa32 	bl	800c358 <__mdiff>
 800cef4:	4604      	mov	r4, r0
 800cef6:	2800      	cmp	r0, #0
 800cef8:	f43f ae3d 	beq.w	800cb76 <_strtod_l+0x43e>
 800cefc:	68c3      	ldr	r3, [r0, #12]
 800cefe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cf00:	2300      	movs	r3, #0
 800cf02:	60c3      	str	r3, [r0, #12]
 800cf04:	4641      	mov	r1, r8
 800cf06:	f7ff fa0b 	bl	800c320 <__mcmp>
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	da46      	bge.n	800cf9c <_strtod_l+0x864>
 800cf0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf10:	ea53 030a 	orrs.w	r3, r3, sl
 800cf14:	d16c      	bne.n	800cff0 <_strtod_l+0x8b8>
 800cf16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d168      	bne.n	800cff0 <_strtod_l+0x8b8>
 800cf1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf22:	0d1b      	lsrs	r3, r3, #20
 800cf24:	051b      	lsls	r3, r3, #20
 800cf26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cf2a:	d961      	bls.n	800cff0 <_strtod_l+0x8b8>
 800cf2c:	6963      	ldr	r3, [r4, #20]
 800cf2e:	b913      	cbnz	r3, 800cf36 <_strtod_l+0x7fe>
 800cf30:	6923      	ldr	r3, [r4, #16]
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	dd5c      	ble.n	800cff0 <_strtod_l+0x8b8>
 800cf36:	4621      	mov	r1, r4
 800cf38:	2201      	movs	r2, #1
 800cf3a:	9805      	ldr	r0, [sp, #20]
 800cf3c:	f7ff f984 	bl	800c248 <__lshift>
 800cf40:	4641      	mov	r1, r8
 800cf42:	4604      	mov	r4, r0
 800cf44:	f7ff f9ec 	bl	800c320 <__mcmp>
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	dd51      	ble.n	800cff0 <_strtod_l+0x8b8>
 800cf4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf50:	9a08      	ldr	r2, [sp, #32]
 800cf52:	0d1b      	lsrs	r3, r3, #20
 800cf54:	051b      	lsls	r3, r3, #20
 800cf56:	2a00      	cmp	r2, #0
 800cf58:	d06b      	beq.n	800d032 <_strtod_l+0x8fa>
 800cf5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cf5e:	d868      	bhi.n	800d032 <_strtod_l+0x8fa>
 800cf60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cf64:	f67f ae9d 	bls.w	800cca2 <_strtod_l+0x56a>
 800cf68:	4b0a      	ldr	r3, [pc, #40]	@ (800cf94 <_strtod_l+0x85c>)
 800cf6a:	4650      	mov	r0, sl
 800cf6c:	4659      	mov	r1, fp
 800cf6e:	2200      	movs	r2, #0
 800cf70:	f7f3 fb7a 	bl	8000668 <__aeabi_dmul>
 800cf74:	4b08      	ldr	r3, [pc, #32]	@ (800cf98 <_strtod_l+0x860>)
 800cf76:	400b      	ands	r3, r1
 800cf78:	4682      	mov	sl, r0
 800cf7a:	468b      	mov	fp, r1
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	f47f ae05 	bne.w	800cb8c <_strtod_l+0x454>
 800cf82:	9a05      	ldr	r2, [sp, #20]
 800cf84:	2322      	movs	r3, #34	@ 0x22
 800cf86:	6013      	str	r3, [r2, #0]
 800cf88:	e600      	b.n	800cb8c <_strtod_l+0x454>
 800cf8a:	bf00      	nop
 800cf8c:	0800ec60 	.word	0x0800ec60
 800cf90:	fffffc02 	.word	0xfffffc02
 800cf94:	39500000 	.word	0x39500000
 800cf98:	7ff00000 	.word	0x7ff00000
 800cf9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cfa0:	d165      	bne.n	800d06e <_strtod_l+0x936>
 800cfa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cfa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfa8:	b35a      	cbz	r2, 800d002 <_strtod_l+0x8ca>
 800cfaa:	4a9f      	ldr	r2, [pc, #636]	@ (800d228 <_strtod_l+0xaf0>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d12b      	bne.n	800d008 <_strtod_l+0x8d0>
 800cfb0:	9b08      	ldr	r3, [sp, #32]
 800cfb2:	4651      	mov	r1, sl
 800cfb4:	b303      	cbz	r3, 800cff8 <_strtod_l+0x8c0>
 800cfb6:	4b9d      	ldr	r3, [pc, #628]	@ (800d22c <_strtod_l+0xaf4>)
 800cfb8:	465a      	mov	r2, fp
 800cfba:	4013      	ands	r3, r2
 800cfbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cfc0:	f04f 32ff 	mov.w	r2, #4294967295
 800cfc4:	d81b      	bhi.n	800cffe <_strtod_l+0x8c6>
 800cfc6:	0d1b      	lsrs	r3, r3, #20
 800cfc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cfcc:	fa02 f303 	lsl.w	r3, r2, r3
 800cfd0:	4299      	cmp	r1, r3
 800cfd2:	d119      	bne.n	800d008 <_strtod_l+0x8d0>
 800cfd4:	4b96      	ldr	r3, [pc, #600]	@ (800d230 <_strtod_l+0xaf8>)
 800cfd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d102      	bne.n	800cfe2 <_strtod_l+0x8aa>
 800cfdc:	3101      	adds	r1, #1
 800cfde:	f43f adca 	beq.w	800cb76 <_strtod_l+0x43e>
 800cfe2:	4b92      	ldr	r3, [pc, #584]	@ (800d22c <_strtod_l+0xaf4>)
 800cfe4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfe6:	401a      	ands	r2, r3
 800cfe8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cfec:	f04f 0a00 	mov.w	sl, #0
 800cff0:	9b08      	ldr	r3, [sp, #32]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1b8      	bne.n	800cf68 <_strtod_l+0x830>
 800cff6:	e5c9      	b.n	800cb8c <_strtod_l+0x454>
 800cff8:	f04f 33ff 	mov.w	r3, #4294967295
 800cffc:	e7e8      	b.n	800cfd0 <_strtod_l+0x898>
 800cffe:	4613      	mov	r3, r2
 800d000:	e7e6      	b.n	800cfd0 <_strtod_l+0x898>
 800d002:	ea53 030a 	orrs.w	r3, r3, sl
 800d006:	d0a1      	beq.n	800cf4c <_strtod_l+0x814>
 800d008:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d00a:	b1db      	cbz	r3, 800d044 <_strtod_l+0x90c>
 800d00c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d00e:	4213      	tst	r3, r2
 800d010:	d0ee      	beq.n	800cff0 <_strtod_l+0x8b8>
 800d012:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d014:	9a08      	ldr	r2, [sp, #32]
 800d016:	4650      	mov	r0, sl
 800d018:	4659      	mov	r1, fp
 800d01a:	b1bb      	cbz	r3, 800d04c <_strtod_l+0x914>
 800d01c:	f7ff fb6e 	bl	800c6fc <sulp>
 800d020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d024:	ec53 2b10 	vmov	r2, r3, d0
 800d028:	f7f3 f968 	bl	80002fc <__adddf3>
 800d02c:	4682      	mov	sl, r0
 800d02e:	468b      	mov	fp, r1
 800d030:	e7de      	b.n	800cff0 <_strtod_l+0x8b8>
 800d032:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d036:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d03a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d03e:	f04f 3aff 	mov.w	sl, #4294967295
 800d042:	e7d5      	b.n	800cff0 <_strtod_l+0x8b8>
 800d044:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d046:	ea13 0f0a 	tst.w	r3, sl
 800d04a:	e7e1      	b.n	800d010 <_strtod_l+0x8d8>
 800d04c:	f7ff fb56 	bl	800c6fc <sulp>
 800d050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d054:	ec53 2b10 	vmov	r2, r3, d0
 800d058:	f7f3 f94e 	bl	80002f8 <__aeabi_dsub>
 800d05c:	2200      	movs	r2, #0
 800d05e:	2300      	movs	r3, #0
 800d060:	4682      	mov	sl, r0
 800d062:	468b      	mov	fp, r1
 800d064:	f7f3 fd68 	bl	8000b38 <__aeabi_dcmpeq>
 800d068:	2800      	cmp	r0, #0
 800d06a:	d0c1      	beq.n	800cff0 <_strtod_l+0x8b8>
 800d06c:	e619      	b.n	800cca2 <_strtod_l+0x56a>
 800d06e:	4641      	mov	r1, r8
 800d070:	4620      	mov	r0, r4
 800d072:	f7ff facd 	bl	800c610 <__ratio>
 800d076:	ec57 6b10 	vmov	r6, r7, d0
 800d07a:	2200      	movs	r2, #0
 800d07c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d080:	4630      	mov	r0, r6
 800d082:	4639      	mov	r1, r7
 800d084:	f7f3 fd6c 	bl	8000b60 <__aeabi_dcmple>
 800d088:	2800      	cmp	r0, #0
 800d08a:	d06f      	beq.n	800d16c <_strtod_l+0xa34>
 800d08c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d17a      	bne.n	800d188 <_strtod_l+0xa50>
 800d092:	f1ba 0f00 	cmp.w	sl, #0
 800d096:	d158      	bne.n	800d14a <_strtod_l+0xa12>
 800d098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d09a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d15a      	bne.n	800d158 <_strtod_l+0xa20>
 800d0a2:	4b64      	ldr	r3, [pc, #400]	@ (800d234 <_strtod_l+0xafc>)
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	4639      	mov	r1, r7
 800d0aa:	f7f3 fd4f 	bl	8000b4c <__aeabi_dcmplt>
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	d159      	bne.n	800d166 <_strtod_l+0xa2e>
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	4639      	mov	r1, r7
 800d0b6:	4b60      	ldr	r3, [pc, #384]	@ (800d238 <_strtod_l+0xb00>)
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	f7f3 fad5 	bl	8000668 <__aeabi_dmul>
 800d0be:	4606      	mov	r6, r0
 800d0c0:	460f      	mov	r7, r1
 800d0c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d0c6:	9606      	str	r6, [sp, #24]
 800d0c8:	9307      	str	r3, [sp, #28]
 800d0ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0ce:	4d57      	ldr	r5, [pc, #348]	@ (800d22c <_strtod_l+0xaf4>)
 800d0d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d0d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0d6:	401d      	ands	r5, r3
 800d0d8:	4b58      	ldr	r3, [pc, #352]	@ (800d23c <_strtod_l+0xb04>)
 800d0da:	429d      	cmp	r5, r3
 800d0dc:	f040 80b2 	bne.w	800d244 <_strtod_l+0xb0c>
 800d0e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d0e6:	ec4b ab10 	vmov	d0, sl, fp
 800d0ea:	f7ff f9c9 	bl	800c480 <__ulp>
 800d0ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0f2:	ec51 0b10 	vmov	r0, r1, d0
 800d0f6:	f7f3 fab7 	bl	8000668 <__aeabi_dmul>
 800d0fa:	4652      	mov	r2, sl
 800d0fc:	465b      	mov	r3, fp
 800d0fe:	f7f3 f8fd 	bl	80002fc <__adddf3>
 800d102:	460b      	mov	r3, r1
 800d104:	4949      	ldr	r1, [pc, #292]	@ (800d22c <_strtod_l+0xaf4>)
 800d106:	4a4e      	ldr	r2, [pc, #312]	@ (800d240 <_strtod_l+0xb08>)
 800d108:	4019      	ands	r1, r3
 800d10a:	4291      	cmp	r1, r2
 800d10c:	4682      	mov	sl, r0
 800d10e:	d942      	bls.n	800d196 <_strtod_l+0xa5e>
 800d110:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d112:	4b47      	ldr	r3, [pc, #284]	@ (800d230 <_strtod_l+0xaf8>)
 800d114:	429a      	cmp	r2, r3
 800d116:	d103      	bne.n	800d120 <_strtod_l+0x9e8>
 800d118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d11a:	3301      	adds	r3, #1
 800d11c:	f43f ad2b 	beq.w	800cb76 <_strtod_l+0x43e>
 800d120:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d230 <_strtod_l+0xaf8>
 800d124:	f04f 3aff 	mov.w	sl, #4294967295
 800d128:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d12a:	9805      	ldr	r0, [sp, #20]
 800d12c:	f7fe fe74 	bl	800be18 <_Bfree>
 800d130:	9805      	ldr	r0, [sp, #20]
 800d132:	4649      	mov	r1, r9
 800d134:	f7fe fe70 	bl	800be18 <_Bfree>
 800d138:	9805      	ldr	r0, [sp, #20]
 800d13a:	4641      	mov	r1, r8
 800d13c:	f7fe fe6c 	bl	800be18 <_Bfree>
 800d140:	9805      	ldr	r0, [sp, #20]
 800d142:	4621      	mov	r1, r4
 800d144:	f7fe fe68 	bl	800be18 <_Bfree>
 800d148:	e618      	b.n	800cd7c <_strtod_l+0x644>
 800d14a:	f1ba 0f01 	cmp.w	sl, #1
 800d14e:	d103      	bne.n	800d158 <_strtod_l+0xa20>
 800d150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d152:	2b00      	cmp	r3, #0
 800d154:	f43f ada5 	beq.w	800cca2 <_strtod_l+0x56a>
 800d158:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d208 <_strtod_l+0xad0>
 800d15c:	4f35      	ldr	r7, [pc, #212]	@ (800d234 <_strtod_l+0xafc>)
 800d15e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d162:	2600      	movs	r6, #0
 800d164:	e7b1      	b.n	800d0ca <_strtod_l+0x992>
 800d166:	4f34      	ldr	r7, [pc, #208]	@ (800d238 <_strtod_l+0xb00>)
 800d168:	2600      	movs	r6, #0
 800d16a:	e7aa      	b.n	800d0c2 <_strtod_l+0x98a>
 800d16c:	4b32      	ldr	r3, [pc, #200]	@ (800d238 <_strtod_l+0xb00>)
 800d16e:	4630      	mov	r0, r6
 800d170:	4639      	mov	r1, r7
 800d172:	2200      	movs	r2, #0
 800d174:	f7f3 fa78 	bl	8000668 <__aeabi_dmul>
 800d178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d17a:	4606      	mov	r6, r0
 800d17c:	460f      	mov	r7, r1
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d09f      	beq.n	800d0c2 <_strtod_l+0x98a>
 800d182:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d186:	e7a0      	b.n	800d0ca <_strtod_l+0x992>
 800d188:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d210 <_strtod_l+0xad8>
 800d18c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d190:	ec57 6b17 	vmov	r6, r7, d7
 800d194:	e799      	b.n	800d0ca <_strtod_l+0x992>
 800d196:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d19a:	9b08      	ldr	r3, [sp, #32]
 800d19c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1c1      	bne.n	800d128 <_strtod_l+0x9f0>
 800d1a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d1a8:	0d1b      	lsrs	r3, r3, #20
 800d1aa:	051b      	lsls	r3, r3, #20
 800d1ac:	429d      	cmp	r5, r3
 800d1ae:	d1bb      	bne.n	800d128 <_strtod_l+0x9f0>
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	4639      	mov	r1, r7
 800d1b4:	f7f3 fdb8 	bl	8000d28 <__aeabi_d2lz>
 800d1b8:	f7f3 fa28 	bl	800060c <__aeabi_l2d>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	460b      	mov	r3, r1
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	4639      	mov	r1, r7
 800d1c4:	f7f3 f898 	bl	80002f8 <__aeabi_dsub>
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d1d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1d6:	ea46 060a 	orr.w	r6, r6, sl
 800d1da:	431e      	orrs	r6, r3
 800d1dc:	d06f      	beq.n	800d2be <_strtod_l+0xb86>
 800d1de:	a30e      	add	r3, pc, #56	@ (adr r3, 800d218 <_strtod_l+0xae0>)
 800d1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e4:	f7f3 fcb2 	bl	8000b4c <__aeabi_dcmplt>
 800d1e8:	2800      	cmp	r0, #0
 800d1ea:	f47f accf 	bne.w	800cb8c <_strtod_l+0x454>
 800d1ee:	a30c      	add	r3, pc, #48	@ (adr r3, 800d220 <_strtod_l+0xae8>)
 800d1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1f8:	f7f3 fcc6 	bl	8000b88 <__aeabi_dcmpgt>
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	d093      	beq.n	800d128 <_strtod_l+0x9f0>
 800d200:	e4c4      	b.n	800cb8c <_strtod_l+0x454>
 800d202:	bf00      	nop
 800d204:	f3af 8000 	nop.w
 800d208:	00000000 	.word	0x00000000
 800d20c:	bff00000 	.word	0xbff00000
 800d210:	00000000 	.word	0x00000000
 800d214:	3ff00000 	.word	0x3ff00000
 800d218:	94a03595 	.word	0x94a03595
 800d21c:	3fdfffff 	.word	0x3fdfffff
 800d220:	35afe535 	.word	0x35afe535
 800d224:	3fe00000 	.word	0x3fe00000
 800d228:	000fffff 	.word	0x000fffff
 800d22c:	7ff00000 	.word	0x7ff00000
 800d230:	7fefffff 	.word	0x7fefffff
 800d234:	3ff00000 	.word	0x3ff00000
 800d238:	3fe00000 	.word	0x3fe00000
 800d23c:	7fe00000 	.word	0x7fe00000
 800d240:	7c9fffff 	.word	0x7c9fffff
 800d244:	9b08      	ldr	r3, [sp, #32]
 800d246:	b323      	cbz	r3, 800d292 <_strtod_l+0xb5a>
 800d248:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d24c:	d821      	bhi.n	800d292 <_strtod_l+0xb5a>
 800d24e:	a328      	add	r3, pc, #160	@ (adr r3, 800d2f0 <_strtod_l+0xbb8>)
 800d250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d254:	4630      	mov	r0, r6
 800d256:	4639      	mov	r1, r7
 800d258:	f7f3 fc82 	bl	8000b60 <__aeabi_dcmple>
 800d25c:	b1a0      	cbz	r0, 800d288 <_strtod_l+0xb50>
 800d25e:	4639      	mov	r1, r7
 800d260:	4630      	mov	r0, r6
 800d262:	f7f3 fcd9 	bl	8000c18 <__aeabi_d2uiz>
 800d266:	2801      	cmp	r0, #1
 800d268:	bf38      	it	cc
 800d26a:	2001      	movcc	r0, #1
 800d26c:	f7f3 f982 	bl	8000574 <__aeabi_ui2d>
 800d270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d272:	4606      	mov	r6, r0
 800d274:	460f      	mov	r7, r1
 800d276:	b9fb      	cbnz	r3, 800d2b8 <_strtod_l+0xb80>
 800d278:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d27c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d27e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d280:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d284:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d288:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d28a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d28e:	1b5b      	subs	r3, r3, r5
 800d290:	9311      	str	r3, [sp, #68]	@ 0x44
 800d292:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d296:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d29a:	f7ff f8f1 	bl	800c480 <__ulp>
 800d29e:	4650      	mov	r0, sl
 800d2a0:	ec53 2b10 	vmov	r2, r3, d0
 800d2a4:	4659      	mov	r1, fp
 800d2a6:	f7f3 f9df 	bl	8000668 <__aeabi_dmul>
 800d2aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d2ae:	f7f3 f825 	bl	80002fc <__adddf3>
 800d2b2:	4682      	mov	sl, r0
 800d2b4:	468b      	mov	fp, r1
 800d2b6:	e770      	b.n	800d19a <_strtod_l+0xa62>
 800d2b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d2bc:	e7e0      	b.n	800d280 <_strtod_l+0xb48>
 800d2be:	a30e      	add	r3, pc, #56	@ (adr r3, 800d2f8 <_strtod_l+0xbc0>)
 800d2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c4:	f7f3 fc42 	bl	8000b4c <__aeabi_dcmplt>
 800d2c8:	e798      	b.n	800d1fc <_strtod_l+0xac4>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d2d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2d2:	6013      	str	r3, [r2, #0]
 800d2d4:	f7ff ba6d 	b.w	800c7b2 <_strtod_l+0x7a>
 800d2d8:	2a65      	cmp	r2, #101	@ 0x65
 800d2da:	f43f ab66 	beq.w	800c9aa <_strtod_l+0x272>
 800d2de:	2a45      	cmp	r2, #69	@ 0x45
 800d2e0:	f43f ab63 	beq.w	800c9aa <_strtod_l+0x272>
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	f7ff bb9e 	b.w	800ca26 <_strtod_l+0x2ee>
 800d2ea:	bf00      	nop
 800d2ec:	f3af 8000 	nop.w
 800d2f0:	ffc00000 	.word	0xffc00000
 800d2f4:	41dfffff 	.word	0x41dfffff
 800d2f8:	94a03595 	.word	0x94a03595
 800d2fc:	3fcfffff 	.word	0x3fcfffff

0800d300 <_strtod_r>:
 800d300:	4b01      	ldr	r3, [pc, #4]	@ (800d308 <_strtod_r+0x8>)
 800d302:	f7ff ba19 	b.w	800c738 <_strtod_l>
 800d306:	bf00      	nop
 800d308:	20000068 	.word	0x20000068

0800d30c <__ssputs_r>:
 800d30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d310:	688e      	ldr	r6, [r1, #8]
 800d312:	461f      	mov	r7, r3
 800d314:	42be      	cmp	r6, r7
 800d316:	680b      	ldr	r3, [r1, #0]
 800d318:	4682      	mov	sl, r0
 800d31a:	460c      	mov	r4, r1
 800d31c:	4690      	mov	r8, r2
 800d31e:	d82d      	bhi.n	800d37c <__ssputs_r+0x70>
 800d320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d324:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d328:	d026      	beq.n	800d378 <__ssputs_r+0x6c>
 800d32a:	6965      	ldr	r5, [r4, #20]
 800d32c:	6909      	ldr	r1, [r1, #16]
 800d32e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d332:	eba3 0901 	sub.w	r9, r3, r1
 800d336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d33a:	1c7b      	adds	r3, r7, #1
 800d33c:	444b      	add	r3, r9
 800d33e:	106d      	asrs	r5, r5, #1
 800d340:	429d      	cmp	r5, r3
 800d342:	bf38      	it	cc
 800d344:	461d      	movcc	r5, r3
 800d346:	0553      	lsls	r3, r2, #21
 800d348:	d527      	bpl.n	800d39a <__ssputs_r+0x8e>
 800d34a:	4629      	mov	r1, r5
 800d34c:	f7fe fc98 	bl	800bc80 <_malloc_r>
 800d350:	4606      	mov	r6, r0
 800d352:	b360      	cbz	r0, 800d3ae <__ssputs_r+0xa2>
 800d354:	6921      	ldr	r1, [r4, #16]
 800d356:	464a      	mov	r2, r9
 800d358:	f000 fa2a 	bl	800d7b0 <memcpy>
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d366:	81a3      	strh	r3, [r4, #12]
 800d368:	6126      	str	r6, [r4, #16]
 800d36a:	6165      	str	r5, [r4, #20]
 800d36c:	444e      	add	r6, r9
 800d36e:	eba5 0509 	sub.w	r5, r5, r9
 800d372:	6026      	str	r6, [r4, #0]
 800d374:	60a5      	str	r5, [r4, #8]
 800d376:	463e      	mov	r6, r7
 800d378:	42be      	cmp	r6, r7
 800d37a:	d900      	bls.n	800d37e <__ssputs_r+0x72>
 800d37c:	463e      	mov	r6, r7
 800d37e:	6820      	ldr	r0, [r4, #0]
 800d380:	4632      	mov	r2, r6
 800d382:	4641      	mov	r1, r8
 800d384:	f000 f9d8 	bl	800d738 <memmove>
 800d388:	68a3      	ldr	r3, [r4, #8]
 800d38a:	1b9b      	subs	r3, r3, r6
 800d38c:	60a3      	str	r3, [r4, #8]
 800d38e:	6823      	ldr	r3, [r4, #0]
 800d390:	4433      	add	r3, r6
 800d392:	6023      	str	r3, [r4, #0]
 800d394:	2000      	movs	r0, #0
 800d396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d39a:	462a      	mov	r2, r5
 800d39c:	f000 fd85 	bl	800deaa <_realloc_r>
 800d3a0:	4606      	mov	r6, r0
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d1e0      	bne.n	800d368 <__ssputs_r+0x5c>
 800d3a6:	6921      	ldr	r1, [r4, #16]
 800d3a8:	4650      	mov	r0, sl
 800d3aa:	f7fe fbf5 	bl	800bb98 <_free_r>
 800d3ae:	230c      	movs	r3, #12
 800d3b0:	f8ca 3000 	str.w	r3, [sl]
 800d3b4:	89a3      	ldrh	r3, [r4, #12]
 800d3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3ba:	81a3      	strh	r3, [r4, #12]
 800d3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c0:	e7e9      	b.n	800d396 <__ssputs_r+0x8a>
	...

0800d3c4 <_svfiprintf_r>:
 800d3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c8:	4698      	mov	r8, r3
 800d3ca:	898b      	ldrh	r3, [r1, #12]
 800d3cc:	061b      	lsls	r3, r3, #24
 800d3ce:	b09d      	sub	sp, #116	@ 0x74
 800d3d0:	4607      	mov	r7, r0
 800d3d2:	460d      	mov	r5, r1
 800d3d4:	4614      	mov	r4, r2
 800d3d6:	d510      	bpl.n	800d3fa <_svfiprintf_r+0x36>
 800d3d8:	690b      	ldr	r3, [r1, #16]
 800d3da:	b973      	cbnz	r3, 800d3fa <_svfiprintf_r+0x36>
 800d3dc:	2140      	movs	r1, #64	@ 0x40
 800d3de:	f7fe fc4f 	bl	800bc80 <_malloc_r>
 800d3e2:	6028      	str	r0, [r5, #0]
 800d3e4:	6128      	str	r0, [r5, #16]
 800d3e6:	b930      	cbnz	r0, 800d3f6 <_svfiprintf_r+0x32>
 800d3e8:	230c      	movs	r3, #12
 800d3ea:	603b      	str	r3, [r7, #0]
 800d3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f0:	b01d      	add	sp, #116	@ 0x74
 800d3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3f6:	2340      	movs	r3, #64	@ 0x40
 800d3f8:	616b      	str	r3, [r5, #20]
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3fe:	2320      	movs	r3, #32
 800d400:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d404:	f8cd 800c 	str.w	r8, [sp, #12]
 800d408:	2330      	movs	r3, #48	@ 0x30
 800d40a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d5a8 <_svfiprintf_r+0x1e4>
 800d40e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d412:	f04f 0901 	mov.w	r9, #1
 800d416:	4623      	mov	r3, r4
 800d418:	469a      	mov	sl, r3
 800d41a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d41e:	b10a      	cbz	r2, 800d424 <_svfiprintf_r+0x60>
 800d420:	2a25      	cmp	r2, #37	@ 0x25
 800d422:	d1f9      	bne.n	800d418 <_svfiprintf_r+0x54>
 800d424:	ebba 0b04 	subs.w	fp, sl, r4
 800d428:	d00b      	beq.n	800d442 <_svfiprintf_r+0x7e>
 800d42a:	465b      	mov	r3, fp
 800d42c:	4622      	mov	r2, r4
 800d42e:	4629      	mov	r1, r5
 800d430:	4638      	mov	r0, r7
 800d432:	f7ff ff6b 	bl	800d30c <__ssputs_r>
 800d436:	3001      	adds	r0, #1
 800d438:	f000 80a7 	beq.w	800d58a <_svfiprintf_r+0x1c6>
 800d43c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d43e:	445a      	add	r2, fp
 800d440:	9209      	str	r2, [sp, #36]	@ 0x24
 800d442:	f89a 3000 	ldrb.w	r3, [sl]
 800d446:	2b00      	cmp	r3, #0
 800d448:	f000 809f 	beq.w	800d58a <_svfiprintf_r+0x1c6>
 800d44c:	2300      	movs	r3, #0
 800d44e:	f04f 32ff 	mov.w	r2, #4294967295
 800d452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d456:	f10a 0a01 	add.w	sl, sl, #1
 800d45a:	9304      	str	r3, [sp, #16]
 800d45c:	9307      	str	r3, [sp, #28]
 800d45e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d462:	931a      	str	r3, [sp, #104]	@ 0x68
 800d464:	4654      	mov	r4, sl
 800d466:	2205      	movs	r2, #5
 800d468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d46c:	484e      	ldr	r0, [pc, #312]	@ (800d5a8 <_svfiprintf_r+0x1e4>)
 800d46e:	f7f2 fee7 	bl	8000240 <memchr>
 800d472:	9a04      	ldr	r2, [sp, #16]
 800d474:	b9d8      	cbnz	r0, 800d4ae <_svfiprintf_r+0xea>
 800d476:	06d0      	lsls	r0, r2, #27
 800d478:	bf44      	itt	mi
 800d47a:	2320      	movmi	r3, #32
 800d47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d480:	0711      	lsls	r1, r2, #28
 800d482:	bf44      	itt	mi
 800d484:	232b      	movmi	r3, #43	@ 0x2b
 800d486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d48a:	f89a 3000 	ldrb.w	r3, [sl]
 800d48e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d490:	d015      	beq.n	800d4be <_svfiprintf_r+0xfa>
 800d492:	9a07      	ldr	r2, [sp, #28]
 800d494:	4654      	mov	r4, sl
 800d496:	2000      	movs	r0, #0
 800d498:	f04f 0c0a 	mov.w	ip, #10
 800d49c:	4621      	mov	r1, r4
 800d49e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4a2:	3b30      	subs	r3, #48	@ 0x30
 800d4a4:	2b09      	cmp	r3, #9
 800d4a6:	d94b      	bls.n	800d540 <_svfiprintf_r+0x17c>
 800d4a8:	b1b0      	cbz	r0, 800d4d8 <_svfiprintf_r+0x114>
 800d4aa:	9207      	str	r2, [sp, #28]
 800d4ac:	e014      	b.n	800d4d8 <_svfiprintf_r+0x114>
 800d4ae:	eba0 0308 	sub.w	r3, r0, r8
 800d4b2:	fa09 f303 	lsl.w	r3, r9, r3
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	9304      	str	r3, [sp, #16]
 800d4ba:	46a2      	mov	sl, r4
 800d4bc:	e7d2      	b.n	800d464 <_svfiprintf_r+0xa0>
 800d4be:	9b03      	ldr	r3, [sp, #12]
 800d4c0:	1d19      	adds	r1, r3, #4
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	9103      	str	r1, [sp, #12]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	bfbb      	ittet	lt
 800d4ca:	425b      	neglt	r3, r3
 800d4cc:	f042 0202 	orrlt.w	r2, r2, #2
 800d4d0:	9307      	strge	r3, [sp, #28]
 800d4d2:	9307      	strlt	r3, [sp, #28]
 800d4d4:	bfb8      	it	lt
 800d4d6:	9204      	strlt	r2, [sp, #16]
 800d4d8:	7823      	ldrb	r3, [r4, #0]
 800d4da:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4dc:	d10a      	bne.n	800d4f4 <_svfiprintf_r+0x130>
 800d4de:	7863      	ldrb	r3, [r4, #1]
 800d4e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4e2:	d132      	bne.n	800d54a <_svfiprintf_r+0x186>
 800d4e4:	9b03      	ldr	r3, [sp, #12]
 800d4e6:	1d1a      	adds	r2, r3, #4
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	9203      	str	r2, [sp, #12]
 800d4ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4f0:	3402      	adds	r4, #2
 800d4f2:	9305      	str	r3, [sp, #20]
 800d4f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d5b8 <_svfiprintf_r+0x1f4>
 800d4f8:	7821      	ldrb	r1, [r4, #0]
 800d4fa:	2203      	movs	r2, #3
 800d4fc:	4650      	mov	r0, sl
 800d4fe:	f7f2 fe9f 	bl	8000240 <memchr>
 800d502:	b138      	cbz	r0, 800d514 <_svfiprintf_r+0x150>
 800d504:	9b04      	ldr	r3, [sp, #16]
 800d506:	eba0 000a 	sub.w	r0, r0, sl
 800d50a:	2240      	movs	r2, #64	@ 0x40
 800d50c:	4082      	lsls	r2, r0
 800d50e:	4313      	orrs	r3, r2
 800d510:	3401      	adds	r4, #1
 800d512:	9304      	str	r3, [sp, #16]
 800d514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d518:	4824      	ldr	r0, [pc, #144]	@ (800d5ac <_svfiprintf_r+0x1e8>)
 800d51a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d51e:	2206      	movs	r2, #6
 800d520:	f7f2 fe8e 	bl	8000240 <memchr>
 800d524:	2800      	cmp	r0, #0
 800d526:	d036      	beq.n	800d596 <_svfiprintf_r+0x1d2>
 800d528:	4b21      	ldr	r3, [pc, #132]	@ (800d5b0 <_svfiprintf_r+0x1ec>)
 800d52a:	bb1b      	cbnz	r3, 800d574 <_svfiprintf_r+0x1b0>
 800d52c:	9b03      	ldr	r3, [sp, #12]
 800d52e:	3307      	adds	r3, #7
 800d530:	f023 0307 	bic.w	r3, r3, #7
 800d534:	3308      	adds	r3, #8
 800d536:	9303      	str	r3, [sp, #12]
 800d538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d53a:	4433      	add	r3, r6
 800d53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d53e:	e76a      	b.n	800d416 <_svfiprintf_r+0x52>
 800d540:	fb0c 3202 	mla	r2, ip, r2, r3
 800d544:	460c      	mov	r4, r1
 800d546:	2001      	movs	r0, #1
 800d548:	e7a8      	b.n	800d49c <_svfiprintf_r+0xd8>
 800d54a:	2300      	movs	r3, #0
 800d54c:	3401      	adds	r4, #1
 800d54e:	9305      	str	r3, [sp, #20]
 800d550:	4619      	mov	r1, r3
 800d552:	f04f 0c0a 	mov.w	ip, #10
 800d556:	4620      	mov	r0, r4
 800d558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d55c:	3a30      	subs	r2, #48	@ 0x30
 800d55e:	2a09      	cmp	r2, #9
 800d560:	d903      	bls.n	800d56a <_svfiprintf_r+0x1a6>
 800d562:	2b00      	cmp	r3, #0
 800d564:	d0c6      	beq.n	800d4f4 <_svfiprintf_r+0x130>
 800d566:	9105      	str	r1, [sp, #20]
 800d568:	e7c4      	b.n	800d4f4 <_svfiprintf_r+0x130>
 800d56a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d56e:	4604      	mov	r4, r0
 800d570:	2301      	movs	r3, #1
 800d572:	e7f0      	b.n	800d556 <_svfiprintf_r+0x192>
 800d574:	ab03      	add	r3, sp, #12
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	462a      	mov	r2, r5
 800d57a:	4b0e      	ldr	r3, [pc, #56]	@ (800d5b4 <_svfiprintf_r+0x1f0>)
 800d57c:	a904      	add	r1, sp, #16
 800d57e:	4638      	mov	r0, r7
 800d580:	f7fc fcca 	bl	8009f18 <_printf_float>
 800d584:	1c42      	adds	r2, r0, #1
 800d586:	4606      	mov	r6, r0
 800d588:	d1d6      	bne.n	800d538 <_svfiprintf_r+0x174>
 800d58a:	89ab      	ldrh	r3, [r5, #12]
 800d58c:	065b      	lsls	r3, r3, #25
 800d58e:	f53f af2d 	bmi.w	800d3ec <_svfiprintf_r+0x28>
 800d592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d594:	e72c      	b.n	800d3f0 <_svfiprintf_r+0x2c>
 800d596:	ab03      	add	r3, sp, #12
 800d598:	9300      	str	r3, [sp, #0]
 800d59a:	462a      	mov	r2, r5
 800d59c:	4b05      	ldr	r3, [pc, #20]	@ (800d5b4 <_svfiprintf_r+0x1f0>)
 800d59e:	a904      	add	r1, sp, #16
 800d5a0:	4638      	mov	r0, r7
 800d5a2:	f7fc ff51 	bl	800a448 <_printf_i>
 800d5a6:	e7ed      	b.n	800d584 <_svfiprintf_r+0x1c0>
 800d5a8:	0800ec88 	.word	0x0800ec88
 800d5ac:	0800ec92 	.word	0x0800ec92
 800d5b0:	08009f19 	.word	0x08009f19
 800d5b4:	0800d30d 	.word	0x0800d30d
 800d5b8:	0800ec8e 	.word	0x0800ec8e

0800d5bc <__sflush_r>:
 800d5bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c4:	0716      	lsls	r6, r2, #28
 800d5c6:	4605      	mov	r5, r0
 800d5c8:	460c      	mov	r4, r1
 800d5ca:	d454      	bmi.n	800d676 <__sflush_r+0xba>
 800d5cc:	684b      	ldr	r3, [r1, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	dc02      	bgt.n	800d5d8 <__sflush_r+0x1c>
 800d5d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	dd48      	ble.n	800d66a <__sflush_r+0xae>
 800d5d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5da:	2e00      	cmp	r6, #0
 800d5dc:	d045      	beq.n	800d66a <__sflush_r+0xae>
 800d5de:	2300      	movs	r3, #0
 800d5e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d5e4:	682f      	ldr	r7, [r5, #0]
 800d5e6:	6a21      	ldr	r1, [r4, #32]
 800d5e8:	602b      	str	r3, [r5, #0]
 800d5ea:	d030      	beq.n	800d64e <__sflush_r+0x92>
 800d5ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d5ee:	89a3      	ldrh	r3, [r4, #12]
 800d5f0:	0759      	lsls	r1, r3, #29
 800d5f2:	d505      	bpl.n	800d600 <__sflush_r+0x44>
 800d5f4:	6863      	ldr	r3, [r4, #4]
 800d5f6:	1ad2      	subs	r2, r2, r3
 800d5f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d5fa:	b10b      	cbz	r3, 800d600 <__sflush_r+0x44>
 800d5fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d5fe:	1ad2      	subs	r2, r2, r3
 800d600:	2300      	movs	r3, #0
 800d602:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d604:	6a21      	ldr	r1, [r4, #32]
 800d606:	4628      	mov	r0, r5
 800d608:	47b0      	blx	r6
 800d60a:	1c43      	adds	r3, r0, #1
 800d60c:	89a3      	ldrh	r3, [r4, #12]
 800d60e:	d106      	bne.n	800d61e <__sflush_r+0x62>
 800d610:	6829      	ldr	r1, [r5, #0]
 800d612:	291d      	cmp	r1, #29
 800d614:	d82b      	bhi.n	800d66e <__sflush_r+0xb2>
 800d616:	4a2a      	ldr	r2, [pc, #168]	@ (800d6c0 <__sflush_r+0x104>)
 800d618:	410a      	asrs	r2, r1
 800d61a:	07d6      	lsls	r6, r2, #31
 800d61c:	d427      	bmi.n	800d66e <__sflush_r+0xb2>
 800d61e:	2200      	movs	r2, #0
 800d620:	6062      	str	r2, [r4, #4]
 800d622:	04d9      	lsls	r1, r3, #19
 800d624:	6922      	ldr	r2, [r4, #16]
 800d626:	6022      	str	r2, [r4, #0]
 800d628:	d504      	bpl.n	800d634 <__sflush_r+0x78>
 800d62a:	1c42      	adds	r2, r0, #1
 800d62c:	d101      	bne.n	800d632 <__sflush_r+0x76>
 800d62e:	682b      	ldr	r3, [r5, #0]
 800d630:	b903      	cbnz	r3, 800d634 <__sflush_r+0x78>
 800d632:	6560      	str	r0, [r4, #84]	@ 0x54
 800d634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d636:	602f      	str	r7, [r5, #0]
 800d638:	b1b9      	cbz	r1, 800d66a <__sflush_r+0xae>
 800d63a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d63e:	4299      	cmp	r1, r3
 800d640:	d002      	beq.n	800d648 <__sflush_r+0x8c>
 800d642:	4628      	mov	r0, r5
 800d644:	f7fe faa8 	bl	800bb98 <_free_r>
 800d648:	2300      	movs	r3, #0
 800d64a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d64c:	e00d      	b.n	800d66a <__sflush_r+0xae>
 800d64e:	2301      	movs	r3, #1
 800d650:	4628      	mov	r0, r5
 800d652:	47b0      	blx	r6
 800d654:	4602      	mov	r2, r0
 800d656:	1c50      	adds	r0, r2, #1
 800d658:	d1c9      	bne.n	800d5ee <__sflush_r+0x32>
 800d65a:	682b      	ldr	r3, [r5, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d0c6      	beq.n	800d5ee <__sflush_r+0x32>
 800d660:	2b1d      	cmp	r3, #29
 800d662:	d001      	beq.n	800d668 <__sflush_r+0xac>
 800d664:	2b16      	cmp	r3, #22
 800d666:	d11e      	bne.n	800d6a6 <__sflush_r+0xea>
 800d668:	602f      	str	r7, [r5, #0]
 800d66a:	2000      	movs	r0, #0
 800d66c:	e022      	b.n	800d6b4 <__sflush_r+0xf8>
 800d66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d672:	b21b      	sxth	r3, r3
 800d674:	e01b      	b.n	800d6ae <__sflush_r+0xf2>
 800d676:	690f      	ldr	r7, [r1, #16]
 800d678:	2f00      	cmp	r7, #0
 800d67a:	d0f6      	beq.n	800d66a <__sflush_r+0xae>
 800d67c:	0793      	lsls	r3, r2, #30
 800d67e:	680e      	ldr	r6, [r1, #0]
 800d680:	bf08      	it	eq
 800d682:	694b      	ldreq	r3, [r1, #20]
 800d684:	600f      	str	r7, [r1, #0]
 800d686:	bf18      	it	ne
 800d688:	2300      	movne	r3, #0
 800d68a:	eba6 0807 	sub.w	r8, r6, r7
 800d68e:	608b      	str	r3, [r1, #8]
 800d690:	f1b8 0f00 	cmp.w	r8, #0
 800d694:	dde9      	ble.n	800d66a <__sflush_r+0xae>
 800d696:	6a21      	ldr	r1, [r4, #32]
 800d698:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d69a:	4643      	mov	r3, r8
 800d69c:	463a      	mov	r2, r7
 800d69e:	4628      	mov	r0, r5
 800d6a0:	47b0      	blx	r6
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	dc08      	bgt.n	800d6b8 <__sflush_r+0xfc>
 800d6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6ae:	81a3      	strh	r3, [r4, #12]
 800d6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b8:	4407      	add	r7, r0
 800d6ba:	eba8 0800 	sub.w	r8, r8, r0
 800d6be:	e7e7      	b.n	800d690 <__sflush_r+0xd4>
 800d6c0:	dfbffffe 	.word	0xdfbffffe

0800d6c4 <_fflush_r>:
 800d6c4:	b538      	push	{r3, r4, r5, lr}
 800d6c6:	690b      	ldr	r3, [r1, #16]
 800d6c8:	4605      	mov	r5, r0
 800d6ca:	460c      	mov	r4, r1
 800d6cc:	b913      	cbnz	r3, 800d6d4 <_fflush_r+0x10>
 800d6ce:	2500      	movs	r5, #0
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	bd38      	pop	{r3, r4, r5, pc}
 800d6d4:	b118      	cbz	r0, 800d6de <_fflush_r+0x1a>
 800d6d6:	6a03      	ldr	r3, [r0, #32]
 800d6d8:	b90b      	cbnz	r3, 800d6de <_fflush_r+0x1a>
 800d6da:	f7fd fa75 	bl	800abc8 <__sinit>
 800d6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d0f3      	beq.n	800d6ce <_fflush_r+0xa>
 800d6e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d6e8:	07d0      	lsls	r0, r2, #31
 800d6ea:	d404      	bmi.n	800d6f6 <_fflush_r+0x32>
 800d6ec:	0599      	lsls	r1, r3, #22
 800d6ee:	d402      	bmi.n	800d6f6 <_fflush_r+0x32>
 800d6f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6f2:	f7fd fbdc 	bl	800aeae <__retarget_lock_acquire_recursive>
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	4621      	mov	r1, r4
 800d6fa:	f7ff ff5f 	bl	800d5bc <__sflush_r>
 800d6fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d700:	07da      	lsls	r2, r3, #31
 800d702:	4605      	mov	r5, r0
 800d704:	d4e4      	bmi.n	800d6d0 <_fflush_r+0xc>
 800d706:	89a3      	ldrh	r3, [r4, #12]
 800d708:	059b      	lsls	r3, r3, #22
 800d70a:	d4e1      	bmi.n	800d6d0 <_fflush_r+0xc>
 800d70c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d70e:	f7fd fbcf 	bl	800aeb0 <__retarget_lock_release_recursive>
 800d712:	e7dd      	b.n	800d6d0 <_fflush_r+0xc>

0800d714 <fiprintf>:
 800d714:	b40e      	push	{r1, r2, r3}
 800d716:	b503      	push	{r0, r1, lr}
 800d718:	4601      	mov	r1, r0
 800d71a:	ab03      	add	r3, sp, #12
 800d71c:	4805      	ldr	r0, [pc, #20]	@ (800d734 <fiprintf+0x20>)
 800d71e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d722:	6800      	ldr	r0, [r0, #0]
 800d724:	9301      	str	r3, [sp, #4]
 800d726:	f000 fc25 	bl	800df74 <_vfiprintf_r>
 800d72a:	b002      	add	sp, #8
 800d72c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d730:	b003      	add	sp, #12
 800d732:	4770      	bx	lr
 800d734:	20000018 	.word	0x20000018

0800d738 <memmove>:
 800d738:	4288      	cmp	r0, r1
 800d73a:	b510      	push	{r4, lr}
 800d73c:	eb01 0402 	add.w	r4, r1, r2
 800d740:	d902      	bls.n	800d748 <memmove+0x10>
 800d742:	4284      	cmp	r4, r0
 800d744:	4623      	mov	r3, r4
 800d746:	d807      	bhi.n	800d758 <memmove+0x20>
 800d748:	1e43      	subs	r3, r0, #1
 800d74a:	42a1      	cmp	r1, r4
 800d74c:	d008      	beq.n	800d760 <memmove+0x28>
 800d74e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d752:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d756:	e7f8      	b.n	800d74a <memmove+0x12>
 800d758:	4402      	add	r2, r0
 800d75a:	4601      	mov	r1, r0
 800d75c:	428a      	cmp	r2, r1
 800d75e:	d100      	bne.n	800d762 <memmove+0x2a>
 800d760:	bd10      	pop	{r4, pc}
 800d762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d76a:	e7f7      	b.n	800d75c <memmove+0x24>

0800d76c <strncmp>:
 800d76c:	b510      	push	{r4, lr}
 800d76e:	b16a      	cbz	r2, 800d78c <strncmp+0x20>
 800d770:	3901      	subs	r1, #1
 800d772:	1884      	adds	r4, r0, r2
 800d774:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d778:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d103      	bne.n	800d788 <strncmp+0x1c>
 800d780:	42a0      	cmp	r0, r4
 800d782:	d001      	beq.n	800d788 <strncmp+0x1c>
 800d784:	2a00      	cmp	r2, #0
 800d786:	d1f5      	bne.n	800d774 <strncmp+0x8>
 800d788:	1ad0      	subs	r0, r2, r3
 800d78a:	bd10      	pop	{r4, pc}
 800d78c:	4610      	mov	r0, r2
 800d78e:	e7fc      	b.n	800d78a <strncmp+0x1e>

0800d790 <_sbrk_r>:
 800d790:	b538      	push	{r3, r4, r5, lr}
 800d792:	4d06      	ldr	r5, [pc, #24]	@ (800d7ac <_sbrk_r+0x1c>)
 800d794:	2300      	movs	r3, #0
 800d796:	4604      	mov	r4, r0
 800d798:	4608      	mov	r0, r1
 800d79a:	602b      	str	r3, [r5, #0]
 800d79c:	f7f5 f822 	bl	80027e4 <_sbrk>
 800d7a0:	1c43      	adds	r3, r0, #1
 800d7a2:	d102      	bne.n	800d7aa <_sbrk_r+0x1a>
 800d7a4:	682b      	ldr	r3, [r5, #0]
 800d7a6:	b103      	cbz	r3, 800d7aa <_sbrk_r+0x1a>
 800d7a8:	6023      	str	r3, [r4, #0]
 800d7aa:	bd38      	pop	{r3, r4, r5, pc}
 800d7ac:	200007ac 	.word	0x200007ac

0800d7b0 <memcpy>:
 800d7b0:	440a      	add	r2, r1
 800d7b2:	4291      	cmp	r1, r2
 800d7b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7b8:	d100      	bne.n	800d7bc <memcpy+0xc>
 800d7ba:	4770      	bx	lr
 800d7bc:	b510      	push	{r4, lr}
 800d7be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7c6:	4291      	cmp	r1, r2
 800d7c8:	d1f9      	bne.n	800d7be <memcpy+0xe>
 800d7ca:	bd10      	pop	{r4, pc}
 800d7cc:	0000      	movs	r0, r0
	...

0800d7d0 <nan>:
 800d7d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d7d8 <nan+0x8>
 800d7d4:	4770      	bx	lr
 800d7d6:	bf00      	nop
 800d7d8:	00000000 	.word	0x00000000
 800d7dc:	7ff80000 	.word	0x7ff80000

0800d7e0 <abort>:
 800d7e0:	b508      	push	{r3, lr}
 800d7e2:	2006      	movs	r0, #6
 800d7e4:	f000 fd9a 	bl	800e31c <raise>
 800d7e8:	2001      	movs	r0, #1
 800d7ea:	f7f4 ff83 	bl	80026f4 <_exit>

0800d7ee <_calloc_r>:
 800d7ee:	b570      	push	{r4, r5, r6, lr}
 800d7f0:	fba1 5402 	umull	r5, r4, r1, r2
 800d7f4:	b93c      	cbnz	r4, 800d806 <_calloc_r+0x18>
 800d7f6:	4629      	mov	r1, r5
 800d7f8:	f7fe fa42 	bl	800bc80 <_malloc_r>
 800d7fc:	4606      	mov	r6, r0
 800d7fe:	b928      	cbnz	r0, 800d80c <_calloc_r+0x1e>
 800d800:	2600      	movs	r6, #0
 800d802:	4630      	mov	r0, r6
 800d804:	bd70      	pop	{r4, r5, r6, pc}
 800d806:	220c      	movs	r2, #12
 800d808:	6002      	str	r2, [r0, #0]
 800d80a:	e7f9      	b.n	800d800 <_calloc_r+0x12>
 800d80c:	462a      	mov	r2, r5
 800d80e:	4621      	mov	r1, r4
 800d810:	f7fd fa73 	bl	800acfa <memset>
 800d814:	e7f5      	b.n	800d802 <_calloc_r+0x14>

0800d816 <rshift>:
 800d816:	6903      	ldr	r3, [r0, #16]
 800d818:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d81c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d820:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d824:	f100 0414 	add.w	r4, r0, #20
 800d828:	dd45      	ble.n	800d8b6 <rshift+0xa0>
 800d82a:	f011 011f 	ands.w	r1, r1, #31
 800d82e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d832:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d836:	d10c      	bne.n	800d852 <rshift+0x3c>
 800d838:	f100 0710 	add.w	r7, r0, #16
 800d83c:	4629      	mov	r1, r5
 800d83e:	42b1      	cmp	r1, r6
 800d840:	d334      	bcc.n	800d8ac <rshift+0x96>
 800d842:	1a9b      	subs	r3, r3, r2
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	1eea      	subs	r2, r5, #3
 800d848:	4296      	cmp	r6, r2
 800d84a:	bf38      	it	cc
 800d84c:	2300      	movcc	r3, #0
 800d84e:	4423      	add	r3, r4
 800d850:	e015      	b.n	800d87e <rshift+0x68>
 800d852:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d856:	f1c1 0820 	rsb	r8, r1, #32
 800d85a:	40cf      	lsrs	r7, r1
 800d85c:	f105 0e04 	add.w	lr, r5, #4
 800d860:	46a1      	mov	r9, r4
 800d862:	4576      	cmp	r6, lr
 800d864:	46f4      	mov	ip, lr
 800d866:	d815      	bhi.n	800d894 <rshift+0x7e>
 800d868:	1a9a      	subs	r2, r3, r2
 800d86a:	0092      	lsls	r2, r2, #2
 800d86c:	3a04      	subs	r2, #4
 800d86e:	3501      	adds	r5, #1
 800d870:	42ae      	cmp	r6, r5
 800d872:	bf38      	it	cc
 800d874:	2200      	movcc	r2, #0
 800d876:	18a3      	adds	r3, r4, r2
 800d878:	50a7      	str	r7, [r4, r2]
 800d87a:	b107      	cbz	r7, 800d87e <rshift+0x68>
 800d87c:	3304      	adds	r3, #4
 800d87e:	1b1a      	subs	r2, r3, r4
 800d880:	42a3      	cmp	r3, r4
 800d882:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d886:	bf08      	it	eq
 800d888:	2300      	moveq	r3, #0
 800d88a:	6102      	str	r2, [r0, #16]
 800d88c:	bf08      	it	eq
 800d88e:	6143      	streq	r3, [r0, #20]
 800d890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d894:	f8dc c000 	ldr.w	ip, [ip]
 800d898:	fa0c fc08 	lsl.w	ip, ip, r8
 800d89c:	ea4c 0707 	orr.w	r7, ip, r7
 800d8a0:	f849 7b04 	str.w	r7, [r9], #4
 800d8a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d8a8:	40cf      	lsrs	r7, r1
 800d8aa:	e7da      	b.n	800d862 <rshift+0x4c>
 800d8ac:	f851 cb04 	ldr.w	ip, [r1], #4
 800d8b0:	f847 cf04 	str.w	ip, [r7, #4]!
 800d8b4:	e7c3      	b.n	800d83e <rshift+0x28>
 800d8b6:	4623      	mov	r3, r4
 800d8b8:	e7e1      	b.n	800d87e <rshift+0x68>

0800d8ba <__hexdig_fun>:
 800d8ba:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d8be:	2b09      	cmp	r3, #9
 800d8c0:	d802      	bhi.n	800d8c8 <__hexdig_fun+0xe>
 800d8c2:	3820      	subs	r0, #32
 800d8c4:	b2c0      	uxtb	r0, r0
 800d8c6:	4770      	bx	lr
 800d8c8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d8cc:	2b05      	cmp	r3, #5
 800d8ce:	d801      	bhi.n	800d8d4 <__hexdig_fun+0x1a>
 800d8d0:	3847      	subs	r0, #71	@ 0x47
 800d8d2:	e7f7      	b.n	800d8c4 <__hexdig_fun+0xa>
 800d8d4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d8d8:	2b05      	cmp	r3, #5
 800d8da:	d801      	bhi.n	800d8e0 <__hexdig_fun+0x26>
 800d8dc:	3827      	subs	r0, #39	@ 0x27
 800d8de:	e7f1      	b.n	800d8c4 <__hexdig_fun+0xa>
 800d8e0:	2000      	movs	r0, #0
 800d8e2:	4770      	bx	lr

0800d8e4 <__gethex>:
 800d8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e8:	b085      	sub	sp, #20
 800d8ea:	468a      	mov	sl, r1
 800d8ec:	9302      	str	r3, [sp, #8]
 800d8ee:	680b      	ldr	r3, [r1, #0]
 800d8f0:	9001      	str	r0, [sp, #4]
 800d8f2:	4690      	mov	r8, r2
 800d8f4:	1c9c      	adds	r4, r3, #2
 800d8f6:	46a1      	mov	r9, r4
 800d8f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d8fc:	2830      	cmp	r0, #48	@ 0x30
 800d8fe:	d0fa      	beq.n	800d8f6 <__gethex+0x12>
 800d900:	eba9 0303 	sub.w	r3, r9, r3
 800d904:	f1a3 0b02 	sub.w	fp, r3, #2
 800d908:	f7ff ffd7 	bl	800d8ba <__hexdig_fun>
 800d90c:	4605      	mov	r5, r0
 800d90e:	2800      	cmp	r0, #0
 800d910:	d168      	bne.n	800d9e4 <__gethex+0x100>
 800d912:	49a0      	ldr	r1, [pc, #640]	@ (800db94 <__gethex+0x2b0>)
 800d914:	2201      	movs	r2, #1
 800d916:	4648      	mov	r0, r9
 800d918:	f7ff ff28 	bl	800d76c <strncmp>
 800d91c:	4607      	mov	r7, r0
 800d91e:	2800      	cmp	r0, #0
 800d920:	d167      	bne.n	800d9f2 <__gethex+0x10e>
 800d922:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d926:	4626      	mov	r6, r4
 800d928:	f7ff ffc7 	bl	800d8ba <__hexdig_fun>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	d062      	beq.n	800d9f6 <__gethex+0x112>
 800d930:	4623      	mov	r3, r4
 800d932:	7818      	ldrb	r0, [r3, #0]
 800d934:	2830      	cmp	r0, #48	@ 0x30
 800d936:	4699      	mov	r9, r3
 800d938:	f103 0301 	add.w	r3, r3, #1
 800d93c:	d0f9      	beq.n	800d932 <__gethex+0x4e>
 800d93e:	f7ff ffbc 	bl	800d8ba <__hexdig_fun>
 800d942:	fab0 f580 	clz	r5, r0
 800d946:	096d      	lsrs	r5, r5, #5
 800d948:	f04f 0b01 	mov.w	fp, #1
 800d94c:	464a      	mov	r2, r9
 800d94e:	4616      	mov	r6, r2
 800d950:	3201      	adds	r2, #1
 800d952:	7830      	ldrb	r0, [r6, #0]
 800d954:	f7ff ffb1 	bl	800d8ba <__hexdig_fun>
 800d958:	2800      	cmp	r0, #0
 800d95a:	d1f8      	bne.n	800d94e <__gethex+0x6a>
 800d95c:	498d      	ldr	r1, [pc, #564]	@ (800db94 <__gethex+0x2b0>)
 800d95e:	2201      	movs	r2, #1
 800d960:	4630      	mov	r0, r6
 800d962:	f7ff ff03 	bl	800d76c <strncmp>
 800d966:	2800      	cmp	r0, #0
 800d968:	d13f      	bne.n	800d9ea <__gethex+0x106>
 800d96a:	b944      	cbnz	r4, 800d97e <__gethex+0x9a>
 800d96c:	1c74      	adds	r4, r6, #1
 800d96e:	4622      	mov	r2, r4
 800d970:	4616      	mov	r6, r2
 800d972:	3201      	adds	r2, #1
 800d974:	7830      	ldrb	r0, [r6, #0]
 800d976:	f7ff ffa0 	bl	800d8ba <__hexdig_fun>
 800d97a:	2800      	cmp	r0, #0
 800d97c:	d1f8      	bne.n	800d970 <__gethex+0x8c>
 800d97e:	1ba4      	subs	r4, r4, r6
 800d980:	00a7      	lsls	r7, r4, #2
 800d982:	7833      	ldrb	r3, [r6, #0]
 800d984:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d988:	2b50      	cmp	r3, #80	@ 0x50
 800d98a:	d13e      	bne.n	800da0a <__gethex+0x126>
 800d98c:	7873      	ldrb	r3, [r6, #1]
 800d98e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d990:	d033      	beq.n	800d9fa <__gethex+0x116>
 800d992:	2b2d      	cmp	r3, #45	@ 0x2d
 800d994:	d034      	beq.n	800da00 <__gethex+0x11c>
 800d996:	1c71      	adds	r1, r6, #1
 800d998:	2400      	movs	r4, #0
 800d99a:	7808      	ldrb	r0, [r1, #0]
 800d99c:	f7ff ff8d 	bl	800d8ba <__hexdig_fun>
 800d9a0:	1e43      	subs	r3, r0, #1
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	2b18      	cmp	r3, #24
 800d9a6:	d830      	bhi.n	800da0a <__gethex+0x126>
 800d9a8:	f1a0 0210 	sub.w	r2, r0, #16
 800d9ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d9b0:	f7ff ff83 	bl	800d8ba <__hexdig_fun>
 800d9b4:	f100 3cff 	add.w	ip, r0, #4294967295
 800d9b8:	fa5f fc8c 	uxtb.w	ip, ip
 800d9bc:	f1bc 0f18 	cmp.w	ip, #24
 800d9c0:	f04f 030a 	mov.w	r3, #10
 800d9c4:	d91e      	bls.n	800da04 <__gethex+0x120>
 800d9c6:	b104      	cbz	r4, 800d9ca <__gethex+0xe6>
 800d9c8:	4252      	negs	r2, r2
 800d9ca:	4417      	add	r7, r2
 800d9cc:	f8ca 1000 	str.w	r1, [sl]
 800d9d0:	b1ed      	cbz	r5, 800da0e <__gethex+0x12a>
 800d9d2:	f1bb 0f00 	cmp.w	fp, #0
 800d9d6:	bf0c      	ite	eq
 800d9d8:	2506      	moveq	r5, #6
 800d9da:	2500      	movne	r5, #0
 800d9dc:	4628      	mov	r0, r5
 800d9de:	b005      	add	sp, #20
 800d9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9e4:	2500      	movs	r5, #0
 800d9e6:	462c      	mov	r4, r5
 800d9e8:	e7b0      	b.n	800d94c <__gethex+0x68>
 800d9ea:	2c00      	cmp	r4, #0
 800d9ec:	d1c7      	bne.n	800d97e <__gethex+0x9a>
 800d9ee:	4627      	mov	r7, r4
 800d9f0:	e7c7      	b.n	800d982 <__gethex+0x9e>
 800d9f2:	464e      	mov	r6, r9
 800d9f4:	462f      	mov	r7, r5
 800d9f6:	2501      	movs	r5, #1
 800d9f8:	e7c3      	b.n	800d982 <__gethex+0x9e>
 800d9fa:	2400      	movs	r4, #0
 800d9fc:	1cb1      	adds	r1, r6, #2
 800d9fe:	e7cc      	b.n	800d99a <__gethex+0xb6>
 800da00:	2401      	movs	r4, #1
 800da02:	e7fb      	b.n	800d9fc <__gethex+0x118>
 800da04:	fb03 0002 	mla	r0, r3, r2, r0
 800da08:	e7ce      	b.n	800d9a8 <__gethex+0xc4>
 800da0a:	4631      	mov	r1, r6
 800da0c:	e7de      	b.n	800d9cc <__gethex+0xe8>
 800da0e:	eba6 0309 	sub.w	r3, r6, r9
 800da12:	3b01      	subs	r3, #1
 800da14:	4629      	mov	r1, r5
 800da16:	2b07      	cmp	r3, #7
 800da18:	dc0a      	bgt.n	800da30 <__gethex+0x14c>
 800da1a:	9801      	ldr	r0, [sp, #4]
 800da1c:	f7fe f9bc 	bl	800bd98 <_Balloc>
 800da20:	4604      	mov	r4, r0
 800da22:	b940      	cbnz	r0, 800da36 <__gethex+0x152>
 800da24:	4b5c      	ldr	r3, [pc, #368]	@ (800db98 <__gethex+0x2b4>)
 800da26:	4602      	mov	r2, r0
 800da28:	21e4      	movs	r1, #228	@ 0xe4
 800da2a:	485c      	ldr	r0, [pc, #368]	@ (800db9c <__gethex+0x2b8>)
 800da2c:	f7fd fa48 	bl	800aec0 <__assert_func>
 800da30:	3101      	adds	r1, #1
 800da32:	105b      	asrs	r3, r3, #1
 800da34:	e7ef      	b.n	800da16 <__gethex+0x132>
 800da36:	f100 0a14 	add.w	sl, r0, #20
 800da3a:	2300      	movs	r3, #0
 800da3c:	4655      	mov	r5, sl
 800da3e:	469b      	mov	fp, r3
 800da40:	45b1      	cmp	r9, r6
 800da42:	d337      	bcc.n	800dab4 <__gethex+0x1d0>
 800da44:	f845 bb04 	str.w	fp, [r5], #4
 800da48:	eba5 050a 	sub.w	r5, r5, sl
 800da4c:	10ad      	asrs	r5, r5, #2
 800da4e:	6125      	str	r5, [r4, #16]
 800da50:	4658      	mov	r0, fp
 800da52:	f7fe fa93 	bl	800bf7c <__hi0bits>
 800da56:	016d      	lsls	r5, r5, #5
 800da58:	f8d8 6000 	ldr.w	r6, [r8]
 800da5c:	1a2d      	subs	r5, r5, r0
 800da5e:	42b5      	cmp	r5, r6
 800da60:	dd54      	ble.n	800db0c <__gethex+0x228>
 800da62:	1bad      	subs	r5, r5, r6
 800da64:	4629      	mov	r1, r5
 800da66:	4620      	mov	r0, r4
 800da68:	f7fe fe27 	bl	800c6ba <__any_on>
 800da6c:	4681      	mov	r9, r0
 800da6e:	b178      	cbz	r0, 800da90 <__gethex+0x1ac>
 800da70:	1e6b      	subs	r3, r5, #1
 800da72:	1159      	asrs	r1, r3, #5
 800da74:	f003 021f 	and.w	r2, r3, #31
 800da78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800da7c:	f04f 0901 	mov.w	r9, #1
 800da80:	fa09 f202 	lsl.w	r2, r9, r2
 800da84:	420a      	tst	r2, r1
 800da86:	d003      	beq.n	800da90 <__gethex+0x1ac>
 800da88:	454b      	cmp	r3, r9
 800da8a:	dc36      	bgt.n	800dafa <__gethex+0x216>
 800da8c:	f04f 0902 	mov.w	r9, #2
 800da90:	4629      	mov	r1, r5
 800da92:	4620      	mov	r0, r4
 800da94:	f7ff febf 	bl	800d816 <rshift>
 800da98:	442f      	add	r7, r5
 800da9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da9e:	42bb      	cmp	r3, r7
 800daa0:	da42      	bge.n	800db28 <__gethex+0x244>
 800daa2:	9801      	ldr	r0, [sp, #4]
 800daa4:	4621      	mov	r1, r4
 800daa6:	f7fe f9b7 	bl	800be18 <_Bfree>
 800daaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800daac:	2300      	movs	r3, #0
 800daae:	6013      	str	r3, [r2, #0]
 800dab0:	25a3      	movs	r5, #163	@ 0xa3
 800dab2:	e793      	b.n	800d9dc <__gethex+0xf8>
 800dab4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dab8:	2a2e      	cmp	r2, #46	@ 0x2e
 800daba:	d012      	beq.n	800dae2 <__gethex+0x1fe>
 800dabc:	2b20      	cmp	r3, #32
 800dabe:	d104      	bne.n	800daca <__gethex+0x1e6>
 800dac0:	f845 bb04 	str.w	fp, [r5], #4
 800dac4:	f04f 0b00 	mov.w	fp, #0
 800dac8:	465b      	mov	r3, fp
 800daca:	7830      	ldrb	r0, [r6, #0]
 800dacc:	9303      	str	r3, [sp, #12]
 800dace:	f7ff fef4 	bl	800d8ba <__hexdig_fun>
 800dad2:	9b03      	ldr	r3, [sp, #12]
 800dad4:	f000 000f 	and.w	r0, r0, #15
 800dad8:	4098      	lsls	r0, r3
 800dada:	ea4b 0b00 	orr.w	fp, fp, r0
 800dade:	3304      	adds	r3, #4
 800dae0:	e7ae      	b.n	800da40 <__gethex+0x15c>
 800dae2:	45b1      	cmp	r9, r6
 800dae4:	d8ea      	bhi.n	800dabc <__gethex+0x1d8>
 800dae6:	492b      	ldr	r1, [pc, #172]	@ (800db94 <__gethex+0x2b0>)
 800dae8:	9303      	str	r3, [sp, #12]
 800daea:	2201      	movs	r2, #1
 800daec:	4630      	mov	r0, r6
 800daee:	f7ff fe3d 	bl	800d76c <strncmp>
 800daf2:	9b03      	ldr	r3, [sp, #12]
 800daf4:	2800      	cmp	r0, #0
 800daf6:	d1e1      	bne.n	800dabc <__gethex+0x1d8>
 800daf8:	e7a2      	b.n	800da40 <__gethex+0x15c>
 800dafa:	1ea9      	subs	r1, r5, #2
 800dafc:	4620      	mov	r0, r4
 800dafe:	f7fe fddc 	bl	800c6ba <__any_on>
 800db02:	2800      	cmp	r0, #0
 800db04:	d0c2      	beq.n	800da8c <__gethex+0x1a8>
 800db06:	f04f 0903 	mov.w	r9, #3
 800db0a:	e7c1      	b.n	800da90 <__gethex+0x1ac>
 800db0c:	da09      	bge.n	800db22 <__gethex+0x23e>
 800db0e:	1b75      	subs	r5, r6, r5
 800db10:	4621      	mov	r1, r4
 800db12:	9801      	ldr	r0, [sp, #4]
 800db14:	462a      	mov	r2, r5
 800db16:	f7fe fb97 	bl	800c248 <__lshift>
 800db1a:	1b7f      	subs	r7, r7, r5
 800db1c:	4604      	mov	r4, r0
 800db1e:	f100 0a14 	add.w	sl, r0, #20
 800db22:	f04f 0900 	mov.w	r9, #0
 800db26:	e7b8      	b.n	800da9a <__gethex+0x1b6>
 800db28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800db2c:	42bd      	cmp	r5, r7
 800db2e:	dd6f      	ble.n	800dc10 <__gethex+0x32c>
 800db30:	1bed      	subs	r5, r5, r7
 800db32:	42ae      	cmp	r6, r5
 800db34:	dc34      	bgt.n	800dba0 <__gethex+0x2bc>
 800db36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db3a:	2b02      	cmp	r3, #2
 800db3c:	d022      	beq.n	800db84 <__gethex+0x2a0>
 800db3e:	2b03      	cmp	r3, #3
 800db40:	d024      	beq.n	800db8c <__gethex+0x2a8>
 800db42:	2b01      	cmp	r3, #1
 800db44:	d115      	bne.n	800db72 <__gethex+0x28e>
 800db46:	42ae      	cmp	r6, r5
 800db48:	d113      	bne.n	800db72 <__gethex+0x28e>
 800db4a:	2e01      	cmp	r6, #1
 800db4c:	d10b      	bne.n	800db66 <__gethex+0x282>
 800db4e:	9a02      	ldr	r2, [sp, #8]
 800db50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db54:	6013      	str	r3, [r2, #0]
 800db56:	2301      	movs	r3, #1
 800db58:	6123      	str	r3, [r4, #16]
 800db5a:	f8ca 3000 	str.w	r3, [sl]
 800db5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db60:	2562      	movs	r5, #98	@ 0x62
 800db62:	601c      	str	r4, [r3, #0]
 800db64:	e73a      	b.n	800d9dc <__gethex+0xf8>
 800db66:	1e71      	subs	r1, r6, #1
 800db68:	4620      	mov	r0, r4
 800db6a:	f7fe fda6 	bl	800c6ba <__any_on>
 800db6e:	2800      	cmp	r0, #0
 800db70:	d1ed      	bne.n	800db4e <__gethex+0x26a>
 800db72:	9801      	ldr	r0, [sp, #4]
 800db74:	4621      	mov	r1, r4
 800db76:	f7fe f94f 	bl	800be18 <_Bfree>
 800db7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db7c:	2300      	movs	r3, #0
 800db7e:	6013      	str	r3, [r2, #0]
 800db80:	2550      	movs	r5, #80	@ 0x50
 800db82:	e72b      	b.n	800d9dc <__gethex+0xf8>
 800db84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db86:	2b00      	cmp	r3, #0
 800db88:	d1f3      	bne.n	800db72 <__gethex+0x28e>
 800db8a:	e7e0      	b.n	800db4e <__gethex+0x26a>
 800db8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d1dd      	bne.n	800db4e <__gethex+0x26a>
 800db92:	e7ee      	b.n	800db72 <__gethex+0x28e>
 800db94:	0800ec30 	.word	0x0800ec30
 800db98:	0800eac8 	.word	0x0800eac8
 800db9c:	0800eca1 	.word	0x0800eca1
 800dba0:	1e6f      	subs	r7, r5, #1
 800dba2:	f1b9 0f00 	cmp.w	r9, #0
 800dba6:	d130      	bne.n	800dc0a <__gethex+0x326>
 800dba8:	b127      	cbz	r7, 800dbb4 <__gethex+0x2d0>
 800dbaa:	4639      	mov	r1, r7
 800dbac:	4620      	mov	r0, r4
 800dbae:	f7fe fd84 	bl	800c6ba <__any_on>
 800dbb2:	4681      	mov	r9, r0
 800dbb4:	117a      	asrs	r2, r7, #5
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dbbc:	f007 071f 	and.w	r7, r7, #31
 800dbc0:	40bb      	lsls	r3, r7
 800dbc2:	4213      	tst	r3, r2
 800dbc4:	4629      	mov	r1, r5
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	bf18      	it	ne
 800dbca:	f049 0902 	orrne.w	r9, r9, #2
 800dbce:	f7ff fe22 	bl	800d816 <rshift>
 800dbd2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dbd6:	1b76      	subs	r6, r6, r5
 800dbd8:	2502      	movs	r5, #2
 800dbda:	f1b9 0f00 	cmp.w	r9, #0
 800dbde:	d047      	beq.n	800dc70 <__gethex+0x38c>
 800dbe0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dbe4:	2b02      	cmp	r3, #2
 800dbe6:	d015      	beq.n	800dc14 <__gethex+0x330>
 800dbe8:	2b03      	cmp	r3, #3
 800dbea:	d017      	beq.n	800dc1c <__gethex+0x338>
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d109      	bne.n	800dc04 <__gethex+0x320>
 800dbf0:	f019 0f02 	tst.w	r9, #2
 800dbf4:	d006      	beq.n	800dc04 <__gethex+0x320>
 800dbf6:	f8da 3000 	ldr.w	r3, [sl]
 800dbfa:	ea49 0903 	orr.w	r9, r9, r3
 800dbfe:	f019 0f01 	tst.w	r9, #1
 800dc02:	d10e      	bne.n	800dc22 <__gethex+0x33e>
 800dc04:	f045 0510 	orr.w	r5, r5, #16
 800dc08:	e032      	b.n	800dc70 <__gethex+0x38c>
 800dc0a:	f04f 0901 	mov.w	r9, #1
 800dc0e:	e7d1      	b.n	800dbb4 <__gethex+0x2d0>
 800dc10:	2501      	movs	r5, #1
 800dc12:	e7e2      	b.n	800dbda <__gethex+0x2f6>
 800dc14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc16:	f1c3 0301 	rsb	r3, r3, #1
 800dc1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d0f0      	beq.n	800dc04 <__gethex+0x320>
 800dc22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dc26:	f104 0314 	add.w	r3, r4, #20
 800dc2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dc2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dc32:	f04f 0c00 	mov.w	ip, #0
 800dc36:	4618      	mov	r0, r3
 800dc38:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dc40:	d01b      	beq.n	800dc7a <__gethex+0x396>
 800dc42:	3201      	adds	r2, #1
 800dc44:	6002      	str	r2, [r0, #0]
 800dc46:	2d02      	cmp	r5, #2
 800dc48:	f104 0314 	add.w	r3, r4, #20
 800dc4c:	d13c      	bne.n	800dcc8 <__gethex+0x3e4>
 800dc4e:	f8d8 2000 	ldr.w	r2, [r8]
 800dc52:	3a01      	subs	r2, #1
 800dc54:	42b2      	cmp	r2, r6
 800dc56:	d109      	bne.n	800dc6c <__gethex+0x388>
 800dc58:	1171      	asrs	r1, r6, #5
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc60:	f006 061f 	and.w	r6, r6, #31
 800dc64:	fa02 f606 	lsl.w	r6, r2, r6
 800dc68:	421e      	tst	r6, r3
 800dc6a:	d13a      	bne.n	800dce2 <__gethex+0x3fe>
 800dc6c:	f045 0520 	orr.w	r5, r5, #32
 800dc70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc72:	601c      	str	r4, [r3, #0]
 800dc74:	9b02      	ldr	r3, [sp, #8]
 800dc76:	601f      	str	r7, [r3, #0]
 800dc78:	e6b0      	b.n	800d9dc <__gethex+0xf8>
 800dc7a:	4299      	cmp	r1, r3
 800dc7c:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc80:	d8d9      	bhi.n	800dc36 <__gethex+0x352>
 800dc82:	68a3      	ldr	r3, [r4, #8]
 800dc84:	459b      	cmp	fp, r3
 800dc86:	db17      	blt.n	800dcb8 <__gethex+0x3d4>
 800dc88:	6861      	ldr	r1, [r4, #4]
 800dc8a:	9801      	ldr	r0, [sp, #4]
 800dc8c:	3101      	adds	r1, #1
 800dc8e:	f7fe f883 	bl	800bd98 <_Balloc>
 800dc92:	4681      	mov	r9, r0
 800dc94:	b918      	cbnz	r0, 800dc9e <__gethex+0x3ba>
 800dc96:	4b1a      	ldr	r3, [pc, #104]	@ (800dd00 <__gethex+0x41c>)
 800dc98:	4602      	mov	r2, r0
 800dc9a:	2184      	movs	r1, #132	@ 0x84
 800dc9c:	e6c5      	b.n	800da2a <__gethex+0x146>
 800dc9e:	6922      	ldr	r2, [r4, #16]
 800dca0:	3202      	adds	r2, #2
 800dca2:	f104 010c 	add.w	r1, r4, #12
 800dca6:	0092      	lsls	r2, r2, #2
 800dca8:	300c      	adds	r0, #12
 800dcaa:	f7ff fd81 	bl	800d7b0 <memcpy>
 800dcae:	4621      	mov	r1, r4
 800dcb0:	9801      	ldr	r0, [sp, #4]
 800dcb2:	f7fe f8b1 	bl	800be18 <_Bfree>
 800dcb6:	464c      	mov	r4, r9
 800dcb8:	6923      	ldr	r3, [r4, #16]
 800dcba:	1c5a      	adds	r2, r3, #1
 800dcbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dcc0:	6122      	str	r2, [r4, #16]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	615a      	str	r2, [r3, #20]
 800dcc6:	e7be      	b.n	800dc46 <__gethex+0x362>
 800dcc8:	6922      	ldr	r2, [r4, #16]
 800dcca:	455a      	cmp	r2, fp
 800dccc:	dd0b      	ble.n	800dce6 <__gethex+0x402>
 800dcce:	2101      	movs	r1, #1
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	f7ff fda0 	bl	800d816 <rshift>
 800dcd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dcda:	3701      	adds	r7, #1
 800dcdc:	42bb      	cmp	r3, r7
 800dcde:	f6ff aee0 	blt.w	800daa2 <__gethex+0x1be>
 800dce2:	2501      	movs	r5, #1
 800dce4:	e7c2      	b.n	800dc6c <__gethex+0x388>
 800dce6:	f016 061f 	ands.w	r6, r6, #31
 800dcea:	d0fa      	beq.n	800dce2 <__gethex+0x3fe>
 800dcec:	4453      	add	r3, sl
 800dcee:	f1c6 0620 	rsb	r6, r6, #32
 800dcf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dcf6:	f7fe f941 	bl	800bf7c <__hi0bits>
 800dcfa:	42b0      	cmp	r0, r6
 800dcfc:	dbe7      	blt.n	800dcce <__gethex+0x3ea>
 800dcfe:	e7f0      	b.n	800dce2 <__gethex+0x3fe>
 800dd00:	0800eac8 	.word	0x0800eac8

0800dd04 <L_shift>:
 800dd04:	f1c2 0208 	rsb	r2, r2, #8
 800dd08:	0092      	lsls	r2, r2, #2
 800dd0a:	b570      	push	{r4, r5, r6, lr}
 800dd0c:	f1c2 0620 	rsb	r6, r2, #32
 800dd10:	6843      	ldr	r3, [r0, #4]
 800dd12:	6804      	ldr	r4, [r0, #0]
 800dd14:	fa03 f506 	lsl.w	r5, r3, r6
 800dd18:	432c      	orrs	r4, r5
 800dd1a:	40d3      	lsrs	r3, r2
 800dd1c:	6004      	str	r4, [r0, #0]
 800dd1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800dd22:	4288      	cmp	r0, r1
 800dd24:	d3f4      	bcc.n	800dd10 <L_shift+0xc>
 800dd26:	bd70      	pop	{r4, r5, r6, pc}

0800dd28 <__match>:
 800dd28:	b530      	push	{r4, r5, lr}
 800dd2a:	6803      	ldr	r3, [r0, #0]
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd32:	b914      	cbnz	r4, 800dd3a <__match+0x12>
 800dd34:	6003      	str	r3, [r0, #0]
 800dd36:	2001      	movs	r0, #1
 800dd38:	bd30      	pop	{r4, r5, pc}
 800dd3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dd42:	2d19      	cmp	r5, #25
 800dd44:	bf98      	it	ls
 800dd46:	3220      	addls	r2, #32
 800dd48:	42a2      	cmp	r2, r4
 800dd4a:	d0f0      	beq.n	800dd2e <__match+0x6>
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	e7f3      	b.n	800dd38 <__match+0x10>

0800dd50 <__hexnan>:
 800dd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd54:	680b      	ldr	r3, [r1, #0]
 800dd56:	6801      	ldr	r1, [r0, #0]
 800dd58:	115e      	asrs	r6, r3, #5
 800dd5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dd5e:	f013 031f 	ands.w	r3, r3, #31
 800dd62:	b087      	sub	sp, #28
 800dd64:	bf18      	it	ne
 800dd66:	3604      	addne	r6, #4
 800dd68:	2500      	movs	r5, #0
 800dd6a:	1f37      	subs	r7, r6, #4
 800dd6c:	4682      	mov	sl, r0
 800dd6e:	4690      	mov	r8, r2
 800dd70:	9301      	str	r3, [sp, #4]
 800dd72:	f846 5c04 	str.w	r5, [r6, #-4]
 800dd76:	46b9      	mov	r9, r7
 800dd78:	463c      	mov	r4, r7
 800dd7a:	9502      	str	r5, [sp, #8]
 800dd7c:	46ab      	mov	fp, r5
 800dd7e:	784a      	ldrb	r2, [r1, #1]
 800dd80:	1c4b      	adds	r3, r1, #1
 800dd82:	9303      	str	r3, [sp, #12]
 800dd84:	b342      	cbz	r2, 800ddd8 <__hexnan+0x88>
 800dd86:	4610      	mov	r0, r2
 800dd88:	9105      	str	r1, [sp, #20]
 800dd8a:	9204      	str	r2, [sp, #16]
 800dd8c:	f7ff fd95 	bl	800d8ba <__hexdig_fun>
 800dd90:	2800      	cmp	r0, #0
 800dd92:	d151      	bne.n	800de38 <__hexnan+0xe8>
 800dd94:	9a04      	ldr	r2, [sp, #16]
 800dd96:	9905      	ldr	r1, [sp, #20]
 800dd98:	2a20      	cmp	r2, #32
 800dd9a:	d818      	bhi.n	800ddce <__hexnan+0x7e>
 800dd9c:	9b02      	ldr	r3, [sp, #8]
 800dd9e:	459b      	cmp	fp, r3
 800dda0:	dd13      	ble.n	800ddca <__hexnan+0x7a>
 800dda2:	454c      	cmp	r4, r9
 800dda4:	d206      	bcs.n	800ddb4 <__hexnan+0x64>
 800dda6:	2d07      	cmp	r5, #7
 800dda8:	dc04      	bgt.n	800ddb4 <__hexnan+0x64>
 800ddaa:	462a      	mov	r2, r5
 800ddac:	4649      	mov	r1, r9
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f7ff ffa8 	bl	800dd04 <L_shift>
 800ddb4:	4544      	cmp	r4, r8
 800ddb6:	d952      	bls.n	800de5e <__hexnan+0x10e>
 800ddb8:	2300      	movs	r3, #0
 800ddba:	f1a4 0904 	sub.w	r9, r4, #4
 800ddbe:	f844 3c04 	str.w	r3, [r4, #-4]
 800ddc2:	f8cd b008 	str.w	fp, [sp, #8]
 800ddc6:	464c      	mov	r4, r9
 800ddc8:	461d      	mov	r5, r3
 800ddca:	9903      	ldr	r1, [sp, #12]
 800ddcc:	e7d7      	b.n	800dd7e <__hexnan+0x2e>
 800ddce:	2a29      	cmp	r2, #41	@ 0x29
 800ddd0:	d157      	bne.n	800de82 <__hexnan+0x132>
 800ddd2:	3102      	adds	r1, #2
 800ddd4:	f8ca 1000 	str.w	r1, [sl]
 800ddd8:	f1bb 0f00 	cmp.w	fp, #0
 800dddc:	d051      	beq.n	800de82 <__hexnan+0x132>
 800ddde:	454c      	cmp	r4, r9
 800dde0:	d206      	bcs.n	800ddf0 <__hexnan+0xa0>
 800dde2:	2d07      	cmp	r5, #7
 800dde4:	dc04      	bgt.n	800ddf0 <__hexnan+0xa0>
 800dde6:	462a      	mov	r2, r5
 800dde8:	4649      	mov	r1, r9
 800ddea:	4620      	mov	r0, r4
 800ddec:	f7ff ff8a 	bl	800dd04 <L_shift>
 800ddf0:	4544      	cmp	r4, r8
 800ddf2:	d936      	bls.n	800de62 <__hexnan+0x112>
 800ddf4:	f1a8 0204 	sub.w	r2, r8, #4
 800ddf8:	4623      	mov	r3, r4
 800ddfa:	f853 1b04 	ldr.w	r1, [r3], #4
 800ddfe:	f842 1f04 	str.w	r1, [r2, #4]!
 800de02:	429f      	cmp	r7, r3
 800de04:	d2f9      	bcs.n	800ddfa <__hexnan+0xaa>
 800de06:	1b3b      	subs	r3, r7, r4
 800de08:	f023 0303 	bic.w	r3, r3, #3
 800de0c:	3304      	adds	r3, #4
 800de0e:	3401      	adds	r4, #1
 800de10:	3e03      	subs	r6, #3
 800de12:	42b4      	cmp	r4, r6
 800de14:	bf88      	it	hi
 800de16:	2304      	movhi	r3, #4
 800de18:	4443      	add	r3, r8
 800de1a:	2200      	movs	r2, #0
 800de1c:	f843 2b04 	str.w	r2, [r3], #4
 800de20:	429f      	cmp	r7, r3
 800de22:	d2fb      	bcs.n	800de1c <__hexnan+0xcc>
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	b91b      	cbnz	r3, 800de30 <__hexnan+0xe0>
 800de28:	4547      	cmp	r7, r8
 800de2a:	d128      	bne.n	800de7e <__hexnan+0x12e>
 800de2c:	2301      	movs	r3, #1
 800de2e:	603b      	str	r3, [r7, #0]
 800de30:	2005      	movs	r0, #5
 800de32:	b007      	add	sp, #28
 800de34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de38:	3501      	adds	r5, #1
 800de3a:	2d08      	cmp	r5, #8
 800de3c:	f10b 0b01 	add.w	fp, fp, #1
 800de40:	dd06      	ble.n	800de50 <__hexnan+0x100>
 800de42:	4544      	cmp	r4, r8
 800de44:	d9c1      	bls.n	800ddca <__hexnan+0x7a>
 800de46:	2300      	movs	r3, #0
 800de48:	f844 3c04 	str.w	r3, [r4, #-4]
 800de4c:	2501      	movs	r5, #1
 800de4e:	3c04      	subs	r4, #4
 800de50:	6822      	ldr	r2, [r4, #0]
 800de52:	f000 000f 	and.w	r0, r0, #15
 800de56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800de5a:	6020      	str	r0, [r4, #0]
 800de5c:	e7b5      	b.n	800ddca <__hexnan+0x7a>
 800de5e:	2508      	movs	r5, #8
 800de60:	e7b3      	b.n	800ddca <__hexnan+0x7a>
 800de62:	9b01      	ldr	r3, [sp, #4]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d0dd      	beq.n	800de24 <__hexnan+0xd4>
 800de68:	f1c3 0320 	rsb	r3, r3, #32
 800de6c:	f04f 32ff 	mov.w	r2, #4294967295
 800de70:	40da      	lsrs	r2, r3
 800de72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800de76:	4013      	ands	r3, r2
 800de78:	f846 3c04 	str.w	r3, [r6, #-4]
 800de7c:	e7d2      	b.n	800de24 <__hexnan+0xd4>
 800de7e:	3f04      	subs	r7, #4
 800de80:	e7d0      	b.n	800de24 <__hexnan+0xd4>
 800de82:	2004      	movs	r0, #4
 800de84:	e7d5      	b.n	800de32 <__hexnan+0xe2>

0800de86 <__ascii_mbtowc>:
 800de86:	b082      	sub	sp, #8
 800de88:	b901      	cbnz	r1, 800de8c <__ascii_mbtowc+0x6>
 800de8a:	a901      	add	r1, sp, #4
 800de8c:	b142      	cbz	r2, 800dea0 <__ascii_mbtowc+0x1a>
 800de8e:	b14b      	cbz	r3, 800dea4 <__ascii_mbtowc+0x1e>
 800de90:	7813      	ldrb	r3, [r2, #0]
 800de92:	600b      	str	r3, [r1, #0]
 800de94:	7812      	ldrb	r2, [r2, #0]
 800de96:	1e10      	subs	r0, r2, #0
 800de98:	bf18      	it	ne
 800de9a:	2001      	movne	r0, #1
 800de9c:	b002      	add	sp, #8
 800de9e:	4770      	bx	lr
 800dea0:	4610      	mov	r0, r2
 800dea2:	e7fb      	b.n	800de9c <__ascii_mbtowc+0x16>
 800dea4:	f06f 0001 	mvn.w	r0, #1
 800dea8:	e7f8      	b.n	800de9c <__ascii_mbtowc+0x16>

0800deaa <_realloc_r>:
 800deaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deae:	4680      	mov	r8, r0
 800deb0:	4615      	mov	r5, r2
 800deb2:	460c      	mov	r4, r1
 800deb4:	b921      	cbnz	r1, 800dec0 <_realloc_r+0x16>
 800deb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800deba:	4611      	mov	r1, r2
 800debc:	f7fd bee0 	b.w	800bc80 <_malloc_r>
 800dec0:	b92a      	cbnz	r2, 800dece <_realloc_r+0x24>
 800dec2:	f7fd fe69 	bl	800bb98 <_free_r>
 800dec6:	2400      	movs	r4, #0
 800dec8:	4620      	mov	r0, r4
 800deca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dece:	f000 fa41 	bl	800e354 <_malloc_usable_size_r>
 800ded2:	4285      	cmp	r5, r0
 800ded4:	4606      	mov	r6, r0
 800ded6:	d802      	bhi.n	800dede <_realloc_r+0x34>
 800ded8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dedc:	d8f4      	bhi.n	800dec8 <_realloc_r+0x1e>
 800dede:	4629      	mov	r1, r5
 800dee0:	4640      	mov	r0, r8
 800dee2:	f7fd fecd 	bl	800bc80 <_malloc_r>
 800dee6:	4607      	mov	r7, r0
 800dee8:	2800      	cmp	r0, #0
 800deea:	d0ec      	beq.n	800dec6 <_realloc_r+0x1c>
 800deec:	42b5      	cmp	r5, r6
 800deee:	462a      	mov	r2, r5
 800def0:	4621      	mov	r1, r4
 800def2:	bf28      	it	cs
 800def4:	4632      	movcs	r2, r6
 800def6:	f7ff fc5b 	bl	800d7b0 <memcpy>
 800defa:	4621      	mov	r1, r4
 800defc:	4640      	mov	r0, r8
 800defe:	f7fd fe4b 	bl	800bb98 <_free_r>
 800df02:	463c      	mov	r4, r7
 800df04:	e7e0      	b.n	800dec8 <_realloc_r+0x1e>

0800df06 <__ascii_wctomb>:
 800df06:	4603      	mov	r3, r0
 800df08:	4608      	mov	r0, r1
 800df0a:	b141      	cbz	r1, 800df1e <__ascii_wctomb+0x18>
 800df0c:	2aff      	cmp	r2, #255	@ 0xff
 800df0e:	d904      	bls.n	800df1a <__ascii_wctomb+0x14>
 800df10:	228a      	movs	r2, #138	@ 0x8a
 800df12:	601a      	str	r2, [r3, #0]
 800df14:	f04f 30ff 	mov.w	r0, #4294967295
 800df18:	4770      	bx	lr
 800df1a:	700a      	strb	r2, [r1, #0]
 800df1c:	2001      	movs	r0, #1
 800df1e:	4770      	bx	lr

0800df20 <__sfputc_r>:
 800df20:	6893      	ldr	r3, [r2, #8]
 800df22:	3b01      	subs	r3, #1
 800df24:	2b00      	cmp	r3, #0
 800df26:	b410      	push	{r4}
 800df28:	6093      	str	r3, [r2, #8]
 800df2a:	da08      	bge.n	800df3e <__sfputc_r+0x1e>
 800df2c:	6994      	ldr	r4, [r2, #24]
 800df2e:	42a3      	cmp	r3, r4
 800df30:	db01      	blt.n	800df36 <__sfputc_r+0x16>
 800df32:	290a      	cmp	r1, #10
 800df34:	d103      	bne.n	800df3e <__sfputc_r+0x1e>
 800df36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df3a:	f000 b933 	b.w	800e1a4 <__swbuf_r>
 800df3e:	6813      	ldr	r3, [r2, #0]
 800df40:	1c58      	adds	r0, r3, #1
 800df42:	6010      	str	r0, [r2, #0]
 800df44:	7019      	strb	r1, [r3, #0]
 800df46:	4608      	mov	r0, r1
 800df48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df4c:	4770      	bx	lr

0800df4e <__sfputs_r>:
 800df4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df50:	4606      	mov	r6, r0
 800df52:	460f      	mov	r7, r1
 800df54:	4614      	mov	r4, r2
 800df56:	18d5      	adds	r5, r2, r3
 800df58:	42ac      	cmp	r4, r5
 800df5a:	d101      	bne.n	800df60 <__sfputs_r+0x12>
 800df5c:	2000      	movs	r0, #0
 800df5e:	e007      	b.n	800df70 <__sfputs_r+0x22>
 800df60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df64:	463a      	mov	r2, r7
 800df66:	4630      	mov	r0, r6
 800df68:	f7ff ffda 	bl	800df20 <__sfputc_r>
 800df6c:	1c43      	adds	r3, r0, #1
 800df6e:	d1f3      	bne.n	800df58 <__sfputs_r+0xa>
 800df70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df74 <_vfiprintf_r>:
 800df74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df78:	460d      	mov	r5, r1
 800df7a:	b09d      	sub	sp, #116	@ 0x74
 800df7c:	4614      	mov	r4, r2
 800df7e:	4698      	mov	r8, r3
 800df80:	4606      	mov	r6, r0
 800df82:	b118      	cbz	r0, 800df8c <_vfiprintf_r+0x18>
 800df84:	6a03      	ldr	r3, [r0, #32]
 800df86:	b90b      	cbnz	r3, 800df8c <_vfiprintf_r+0x18>
 800df88:	f7fc fe1e 	bl	800abc8 <__sinit>
 800df8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df8e:	07d9      	lsls	r1, r3, #31
 800df90:	d405      	bmi.n	800df9e <_vfiprintf_r+0x2a>
 800df92:	89ab      	ldrh	r3, [r5, #12]
 800df94:	059a      	lsls	r2, r3, #22
 800df96:	d402      	bmi.n	800df9e <_vfiprintf_r+0x2a>
 800df98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df9a:	f7fc ff88 	bl	800aeae <__retarget_lock_acquire_recursive>
 800df9e:	89ab      	ldrh	r3, [r5, #12]
 800dfa0:	071b      	lsls	r3, r3, #28
 800dfa2:	d501      	bpl.n	800dfa8 <_vfiprintf_r+0x34>
 800dfa4:	692b      	ldr	r3, [r5, #16]
 800dfa6:	b99b      	cbnz	r3, 800dfd0 <_vfiprintf_r+0x5c>
 800dfa8:	4629      	mov	r1, r5
 800dfaa:	4630      	mov	r0, r6
 800dfac:	f000 f938 	bl	800e220 <__swsetup_r>
 800dfb0:	b170      	cbz	r0, 800dfd0 <_vfiprintf_r+0x5c>
 800dfb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfb4:	07dc      	lsls	r4, r3, #31
 800dfb6:	d504      	bpl.n	800dfc2 <_vfiprintf_r+0x4e>
 800dfb8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfbc:	b01d      	add	sp, #116	@ 0x74
 800dfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc2:	89ab      	ldrh	r3, [r5, #12]
 800dfc4:	0598      	lsls	r0, r3, #22
 800dfc6:	d4f7      	bmi.n	800dfb8 <_vfiprintf_r+0x44>
 800dfc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfca:	f7fc ff71 	bl	800aeb0 <__retarget_lock_release_recursive>
 800dfce:	e7f3      	b.n	800dfb8 <_vfiprintf_r+0x44>
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfd4:	2320      	movs	r3, #32
 800dfd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dfda:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfde:	2330      	movs	r3, #48	@ 0x30
 800dfe0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e190 <_vfiprintf_r+0x21c>
 800dfe4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dfe8:	f04f 0901 	mov.w	r9, #1
 800dfec:	4623      	mov	r3, r4
 800dfee:	469a      	mov	sl, r3
 800dff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dff4:	b10a      	cbz	r2, 800dffa <_vfiprintf_r+0x86>
 800dff6:	2a25      	cmp	r2, #37	@ 0x25
 800dff8:	d1f9      	bne.n	800dfee <_vfiprintf_r+0x7a>
 800dffa:	ebba 0b04 	subs.w	fp, sl, r4
 800dffe:	d00b      	beq.n	800e018 <_vfiprintf_r+0xa4>
 800e000:	465b      	mov	r3, fp
 800e002:	4622      	mov	r2, r4
 800e004:	4629      	mov	r1, r5
 800e006:	4630      	mov	r0, r6
 800e008:	f7ff ffa1 	bl	800df4e <__sfputs_r>
 800e00c:	3001      	adds	r0, #1
 800e00e:	f000 80a7 	beq.w	800e160 <_vfiprintf_r+0x1ec>
 800e012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e014:	445a      	add	r2, fp
 800e016:	9209      	str	r2, [sp, #36]	@ 0x24
 800e018:	f89a 3000 	ldrb.w	r3, [sl]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	f000 809f 	beq.w	800e160 <_vfiprintf_r+0x1ec>
 800e022:	2300      	movs	r3, #0
 800e024:	f04f 32ff 	mov.w	r2, #4294967295
 800e028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e02c:	f10a 0a01 	add.w	sl, sl, #1
 800e030:	9304      	str	r3, [sp, #16]
 800e032:	9307      	str	r3, [sp, #28]
 800e034:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e038:	931a      	str	r3, [sp, #104]	@ 0x68
 800e03a:	4654      	mov	r4, sl
 800e03c:	2205      	movs	r2, #5
 800e03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e042:	4853      	ldr	r0, [pc, #332]	@ (800e190 <_vfiprintf_r+0x21c>)
 800e044:	f7f2 f8fc 	bl	8000240 <memchr>
 800e048:	9a04      	ldr	r2, [sp, #16]
 800e04a:	b9d8      	cbnz	r0, 800e084 <_vfiprintf_r+0x110>
 800e04c:	06d1      	lsls	r1, r2, #27
 800e04e:	bf44      	itt	mi
 800e050:	2320      	movmi	r3, #32
 800e052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e056:	0713      	lsls	r3, r2, #28
 800e058:	bf44      	itt	mi
 800e05a:	232b      	movmi	r3, #43	@ 0x2b
 800e05c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e060:	f89a 3000 	ldrb.w	r3, [sl]
 800e064:	2b2a      	cmp	r3, #42	@ 0x2a
 800e066:	d015      	beq.n	800e094 <_vfiprintf_r+0x120>
 800e068:	9a07      	ldr	r2, [sp, #28]
 800e06a:	4654      	mov	r4, sl
 800e06c:	2000      	movs	r0, #0
 800e06e:	f04f 0c0a 	mov.w	ip, #10
 800e072:	4621      	mov	r1, r4
 800e074:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e078:	3b30      	subs	r3, #48	@ 0x30
 800e07a:	2b09      	cmp	r3, #9
 800e07c:	d94b      	bls.n	800e116 <_vfiprintf_r+0x1a2>
 800e07e:	b1b0      	cbz	r0, 800e0ae <_vfiprintf_r+0x13a>
 800e080:	9207      	str	r2, [sp, #28]
 800e082:	e014      	b.n	800e0ae <_vfiprintf_r+0x13a>
 800e084:	eba0 0308 	sub.w	r3, r0, r8
 800e088:	fa09 f303 	lsl.w	r3, r9, r3
 800e08c:	4313      	orrs	r3, r2
 800e08e:	9304      	str	r3, [sp, #16]
 800e090:	46a2      	mov	sl, r4
 800e092:	e7d2      	b.n	800e03a <_vfiprintf_r+0xc6>
 800e094:	9b03      	ldr	r3, [sp, #12]
 800e096:	1d19      	adds	r1, r3, #4
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	9103      	str	r1, [sp, #12]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	bfbb      	ittet	lt
 800e0a0:	425b      	neglt	r3, r3
 800e0a2:	f042 0202 	orrlt.w	r2, r2, #2
 800e0a6:	9307      	strge	r3, [sp, #28]
 800e0a8:	9307      	strlt	r3, [sp, #28]
 800e0aa:	bfb8      	it	lt
 800e0ac:	9204      	strlt	r2, [sp, #16]
 800e0ae:	7823      	ldrb	r3, [r4, #0]
 800e0b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0b2:	d10a      	bne.n	800e0ca <_vfiprintf_r+0x156>
 800e0b4:	7863      	ldrb	r3, [r4, #1]
 800e0b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0b8:	d132      	bne.n	800e120 <_vfiprintf_r+0x1ac>
 800e0ba:	9b03      	ldr	r3, [sp, #12]
 800e0bc:	1d1a      	adds	r2, r3, #4
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	9203      	str	r2, [sp, #12]
 800e0c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0c6:	3402      	adds	r4, #2
 800e0c8:	9305      	str	r3, [sp, #20]
 800e0ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e1a0 <_vfiprintf_r+0x22c>
 800e0ce:	7821      	ldrb	r1, [r4, #0]
 800e0d0:	2203      	movs	r2, #3
 800e0d2:	4650      	mov	r0, sl
 800e0d4:	f7f2 f8b4 	bl	8000240 <memchr>
 800e0d8:	b138      	cbz	r0, 800e0ea <_vfiprintf_r+0x176>
 800e0da:	9b04      	ldr	r3, [sp, #16]
 800e0dc:	eba0 000a 	sub.w	r0, r0, sl
 800e0e0:	2240      	movs	r2, #64	@ 0x40
 800e0e2:	4082      	lsls	r2, r0
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	3401      	adds	r4, #1
 800e0e8:	9304      	str	r3, [sp, #16]
 800e0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0ee:	4829      	ldr	r0, [pc, #164]	@ (800e194 <_vfiprintf_r+0x220>)
 800e0f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e0f4:	2206      	movs	r2, #6
 800e0f6:	f7f2 f8a3 	bl	8000240 <memchr>
 800e0fa:	2800      	cmp	r0, #0
 800e0fc:	d03f      	beq.n	800e17e <_vfiprintf_r+0x20a>
 800e0fe:	4b26      	ldr	r3, [pc, #152]	@ (800e198 <_vfiprintf_r+0x224>)
 800e100:	bb1b      	cbnz	r3, 800e14a <_vfiprintf_r+0x1d6>
 800e102:	9b03      	ldr	r3, [sp, #12]
 800e104:	3307      	adds	r3, #7
 800e106:	f023 0307 	bic.w	r3, r3, #7
 800e10a:	3308      	adds	r3, #8
 800e10c:	9303      	str	r3, [sp, #12]
 800e10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e110:	443b      	add	r3, r7
 800e112:	9309      	str	r3, [sp, #36]	@ 0x24
 800e114:	e76a      	b.n	800dfec <_vfiprintf_r+0x78>
 800e116:	fb0c 3202 	mla	r2, ip, r2, r3
 800e11a:	460c      	mov	r4, r1
 800e11c:	2001      	movs	r0, #1
 800e11e:	e7a8      	b.n	800e072 <_vfiprintf_r+0xfe>
 800e120:	2300      	movs	r3, #0
 800e122:	3401      	adds	r4, #1
 800e124:	9305      	str	r3, [sp, #20]
 800e126:	4619      	mov	r1, r3
 800e128:	f04f 0c0a 	mov.w	ip, #10
 800e12c:	4620      	mov	r0, r4
 800e12e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e132:	3a30      	subs	r2, #48	@ 0x30
 800e134:	2a09      	cmp	r2, #9
 800e136:	d903      	bls.n	800e140 <_vfiprintf_r+0x1cc>
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d0c6      	beq.n	800e0ca <_vfiprintf_r+0x156>
 800e13c:	9105      	str	r1, [sp, #20]
 800e13e:	e7c4      	b.n	800e0ca <_vfiprintf_r+0x156>
 800e140:	fb0c 2101 	mla	r1, ip, r1, r2
 800e144:	4604      	mov	r4, r0
 800e146:	2301      	movs	r3, #1
 800e148:	e7f0      	b.n	800e12c <_vfiprintf_r+0x1b8>
 800e14a:	ab03      	add	r3, sp, #12
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	462a      	mov	r2, r5
 800e150:	4b12      	ldr	r3, [pc, #72]	@ (800e19c <_vfiprintf_r+0x228>)
 800e152:	a904      	add	r1, sp, #16
 800e154:	4630      	mov	r0, r6
 800e156:	f7fb fedf 	bl	8009f18 <_printf_float>
 800e15a:	4607      	mov	r7, r0
 800e15c:	1c78      	adds	r0, r7, #1
 800e15e:	d1d6      	bne.n	800e10e <_vfiprintf_r+0x19a>
 800e160:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e162:	07d9      	lsls	r1, r3, #31
 800e164:	d405      	bmi.n	800e172 <_vfiprintf_r+0x1fe>
 800e166:	89ab      	ldrh	r3, [r5, #12]
 800e168:	059a      	lsls	r2, r3, #22
 800e16a:	d402      	bmi.n	800e172 <_vfiprintf_r+0x1fe>
 800e16c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e16e:	f7fc fe9f 	bl	800aeb0 <__retarget_lock_release_recursive>
 800e172:	89ab      	ldrh	r3, [r5, #12]
 800e174:	065b      	lsls	r3, r3, #25
 800e176:	f53f af1f 	bmi.w	800dfb8 <_vfiprintf_r+0x44>
 800e17a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e17c:	e71e      	b.n	800dfbc <_vfiprintf_r+0x48>
 800e17e:	ab03      	add	r3, sp, #12
 800e180:	9300      	str	r3, [sp, #0]
 800e182:	462a      	mov	r2, r5
 800e184:	4b05      	ldr	r3, [pc, #20]	@ (800e19c <_vfiprintf_r+0x228>)
 800e186:	a904      	add	r1, sp, #16
 800e188:	4630      	mov	r0, r6
 800e18a:	f7fc f95d 	bl	800a448 <_printf_i>
 800e18e:	e7e4      	b.n	800e15a <_vfiprintf_r+0x1e6>
 800e190:	0800ec88 	.word	0x0800ec88
 800e194:	0800ec92 	.word	0x0800ec92
 800e198:	08009f19 	.word	0x08009f19
 800e19c:	0800df4f 	.word	0x0800df4f
 800e1a0:	0800ec8e 	.word	0x0800ec8e

0800e1a4 <__swbuf_r>:
 800e1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1a6:	460e      	mov	r6, r1
 800e1a8:	4614      	mov	r4, r2
 800e1aa:	4605      	mov	r5, r0
 800e1ac:	b118      	cbz	r0, 800e1b6 <__swbuf_r+0x12>
 800e1ae:	6a03      	ldr	r3, [r0, #32]
 800e1b0:	b90b      	cbnz	r3, 800e1b6 <__swbuf_r+0x12>
 800e1b2:	f7fc fd09 	bl	800abc8 <__sinit>
 800e1b6:	69a3      	ldr	r3, [r4, #24]
 800e1b8:	60a3      	str	r3, [r4, #8]
 800e1ba:	89a3      	ldrh	r3, [r4, #12]
 800e1bc:	071a      	lsls	r2, r3, #28
 800e1be:	d501      	bpl.n	800e1c4 <__swbuf_r+0x20>
 800e1c0:	6923      	ldr	r3, [r4, #16]
 800e1c2:	b943      	cbnz	r3, 800e1d6 <__swbuf_r+0x32>
 800e1c4:	4621      	mov	r1, r4
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	f000 f82a 	bl	800e220 <__swsetup_r>
 800e1cc:	b118      	cbz	r0, 800e1d6 <__swbuf_r+0x32>
 800e1ce:	f04f 37ff 	mov.w	r7, #4294967295
 800e1d2:	4638      	mov	r0, r7
 800e1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1d6:	6823      	ldr	r3, [r4, #0]
 800e1d8:	6922      	ldr	r2, [r4, #16]
 800e1da:	1a98      	subs	r0, r3, r2
 800e1dc:	6963      	ldr	r3, [r4, #20]
 800e1de:	b2f6      	uxtb	r6, r6
 800e1e0:	4283      	cmp	r3, r0
 800e1e2:	4637      	mov	r7, r6
 800e1e4:	dc05      	bgt.n	800e1f2 <__swbuf_r+0x4e>
 800e1e6:	4621      	mov	r1, r4
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	f7ff fa6b 	bl	800d6c4 <_fflush_r>
 800e1ee:	2800      	cmp	r0, #0
 800e1f0:	d1ed      	bne.n	800e1ce <__swbuf_r+0x2a>
 800e1f2:	68a3      	ldr	r3, [r4, #8]
 800e1f4:	3b01      	subs	r3, #1
 800e1f6:	60a3      	str	r3, [r4, #8]
 800e1f8:	6823      	ldr	r3, [r4, #0]
 800e1fa:	1c5a      	adds	r2, r3, #1
 800e1fc:	6022      	str	r2, [r4, #0]
 800e1fe:	701e      	strb	r6, [r3, #0]
 800e200:	6962      	ldr	r2, [r4, #20]
 800e202:	1c43      	adds	r3, r0, #1
 800e204:	429a      	cmp	r2, r3
 800e206:	d004      	beq.n	800e212 <__swbuf_r+0x6e>
 800e208:	89a3      	ldrh	r3, [r4, #12]
 800e20a:	07db      	lsls	r3, r3, #31
 800e20c:	d5e1      	bpl.n	800e1d2 <__swbuf_r+0x2e>
 800e20e:	2e0a      	cmp	r6, #10
 800e210:	d1df      	bne.n	800e1d2 <__swbuf_r+0x2e>
 800e212:	4621      	mov	r1, r4
 800e214:	4628      	mov	r0, r5
 800e216:	f7ff fa55 	bl	800d6c4 <_fflush_r>
 800e21a:	2800      	cmp	r0, #0
 800e21c:	d0d9      	beq.n	800e1d2 <__swbuf_r+0x2e>
 800e21e:	e7d6      	b.n	800e1ce <__swbuf_r+0x2a>

0800e220 <__swsetup_r>:
 800e220:	b538      	push	{r3, r4, r5, lr}
 800e222:	4b29      	ldr	r3, [pc, #164]	@ (800e2c8 <__swsetup_r+0xa8>)
 800e224:	4605      	mov	r5, r0
 800e226:	6818      	ldr	r0, [r3, #0]
 800e228:	460c      	mov	r4, r1
 800e22a:	b118      	cbz	r0, 800e234 <__swsetup_r+0x14>
 800e22c:	6a03      	ldr	r3, [r0, #32]
 800e22e:	b90b      	cbnz	r3, 800e234 <__swsetup_r+0x14>
 800e230:	f7fc fcca 	bl	800abc8 <__sinit>
 800e234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e238:	0719      	lsls	r1, r3, #28
 800e23a:	d422      	bmi.n	800e282 <__swsetup_r+0x62>
 800e23c:	06da      	lsls	r2, r3, #27
 800e23e:	d407      	bmi.n	800e250 <__swsetup_r+0x30>
 800e240:	2209      	movs	r2, #9
 800e242:	602a      	str	r2, [r5, #0]
 800e244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e248:	81a3      	strh	r3, [r4, #12]
 800e24a:	f04f 30ff 	mov.w	r0, #4294967295
 800e24e:	e033      	b.n	800e2b8 <__swsetup_r+0x98>
 800e250:	0758      	lsls	r0, r3, #29
 800e252:	d512      	bpl.n	800e27a <__swsetup_r+0x5a>
 800e254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e256:	b141      	cbz	r1, 800e26a <__swsetup_r+0x4a>
 800e258:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e25c:	4299      	cmp	r1, r3
 800e25e:	d002      	beq.n	800e266 <__swsetup_r+0x46>
 800e260:	4628      	mov	r0, r5
 800e262:	f7fd fc99 	bl	800bb98 <_free_r>
 800e266:	2300      	movs	r3, #0
 800e268:	6363      	str	r3, [r4, #52]	@ 0x34
 800e26a:	89a3      	ldrh	r3, [r4, #12]
 800e26c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e270:	81a3      	strh	r3, [r4, #12]
 800e272:	2300      	movs	r3, #0
 800e274:	6063      	str	r3, [r4, #4]
 800e276:	6923      	ldr	r3, [r4, #16]
 800e278:	6023      	str	r3, [r4, #0]
 800e27a:	89a3      	ldrh	r3, [r4, #12]
 800e27c:	f043 0308 	orr.w	r3, r3, #8
 800e280:	81a3      	strh	r3, [r4, #12]
 800e282:	6923      	ldr	r3, [r4, #16]
 800e284:	b94b      	cbnz	r3, 800e29a <__swsetup_r+0x7a>
 800e286:	89a3      	ldrh	r3, [r4, #12]
 800e288:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e28c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e290:	d003      	beq.n	800e29a <__swsetup_r+0x7a>
 800e292:	4621      	mov	r1, r4
 800e294:	4628      	mov	r0, r5
 800e296:	f000 f88b 	bl	800e3b0 <__smakebuf_r>
 800e29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e29e:	f013 0201 	ands.w	r2, r3, #1
 800e2a2:	d00a      	beq.n	800e2ba <__swsetup_r+0x9a>
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	60a2      	str	r2, [r4, #8]
 800e2a8:	6962      	ldr	r2, [r4, #20]
 800e2aa:	4252      	negs	r2, r2
 800e2ac:	61a2      	str	r2, [r4, #24]
 800e2ae:	6922      	ldr	r2, [r4, #16]
 800e2b0:	b942      	cbnz	r2, 800e2c4 <__swsetup_r+0xa4>
 800e2b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e2b6:	d1c5      	bne.n	800e244 <__swsetup_r+0x24>
 800e2b8:	bd38      	pop	{r3, r4, r5, pc}
 800e2ba:	0799      	lsls	r1, r3, #30
 800e2bc:	bf58      	it	pl
 800e2be:	6962      	ldrpl	r2, [r4, #20]
 800e2c0:	60a2      	str	r2, [r4, #8]
 800e2c2:	e7f4      	b.n	800e2ae <__swsetup_r+0x8e>
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	e7f7      	b.n	800e2b8 <__swsetup_r+0x98>
 800e2c8:	20000018 	.word	0x20000018

0800e2cc <_raise_r>:
 800e2cc:	291f      	cmp	r1, #31
 800e2ce:	b538      	push	{r3, r4, r5, lr}
 800e2d0:	4605      	mov	r5, r0
 800e2d2:	460c      	mov	r4, r1
 800e2d4:	d904      	bls.n	800e2e0 <_raise_r+0x14>
 800e2d6:	2316      	movs	r3, #22
 800e2d8:	6003      	str	r3, [r0, #0]
 800e2da:	f04f 30ff 	mov.w	r0, #4294967295
 800e2de:	bd38      	pop	{r3, r4, r5, pc}
 800e2e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e2e2:	b112      	cbz	r2, 800e2ea <_raise_r+0x1e>
 800e2e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2e8:	b94b      	cbnz	r3, 800e2fe <_raise_r+0x32>
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	f000 f830 	bl	800e350 <_getpid_r>
 800e2f0:	4622      	mov	r2, r4
 800e2f2:	4601      	mov	r1, r0
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2fa:	f000 b817 	b.w	800e32c <_kill_r>
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d00a      	beq.n	800e318 <_raise_r+0x4c>
 800e302:	1c59      	adds	r1, r3, #1
 800e304:	d103      	bne.n	800e30e <_raise_r+0x42>
 800e306:	2316      	movs	r3, #22
 800e308:	6003      	str	r3, [r0, #0]
 800e30a:	2001      	movs	r0, #1
 800e30c:	e7e7      	b.n	800e2de <_raise_r+0x12>
 800e30e:	2100      	movs	r1, #0
 800e310:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e314:	4620      	mov	r0, r4
 800e316:	4798      	blx	r3
 800e318:	2000      	movs	r0, #0
 800e31a:	e7e0      	b.n	800e2de <_raise_r+0x12>

0800e31c <raise>:
 800e31c:	4b02      	ldr	r3, [pc, #8]	@ (800e328 <raise+0xc>)
 800e31e:	4601      	mov	r1, r0
 800e320:	6818      	ldr	r0, [r3, #0]
 800e322:	f7ff bfd3 	b.w	800e2cc <_raise_r>
 800e326:	bf00      	nop
 800e328:	20000018 	.word	0x20000018

0800e32c <_kill_r>:
 800e32c:	b538      	push	{r3, r4, r5, lr}
 800e32e:	4d07      	ldr	r5, [pc, #28]	@ (800e34c <_kill_r+0x20>)
 800e330:	2300      	movs	r3, #0
 800e332:	4604      	mov	r4, r0
 800e334:	4608      	mov	r0, r1
 800e336:	4611      	mov	r1, r2
 800e338:	602b      	str	r3, [r5, #0]
 800e33a:	f7f4 f9cb 	bl	80026d4 <_kill>
 800e33e:	1c43      	adds	r3, r0, #1
 800e340:	d102      	bne.n	800e348 <_kill_r+0x1c>
 800e342:	682b      	ldr	r3, [r5, #0]
 800e344:	b103      	cbz	r3, 800e348 <_kill_r+0x1c>
 800e346:	6023      	str	r3, [r4, #0]
 800e348:	bd38      	pop	{r3, r4, r5, pc}
 800e34a:	bf00      	nop
 800e34c:	200007ac 	.word	0x200007ac

0800e350 <_getpid_r>:
 800e350:	f7f4 b9b8 	b.w	80026c4 <_getpid>

0800e354 <_malloc_usable_size_r>:
 800e354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e358:	1f18      	subs	r0, r3, #4
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	bfbc      	itt	lt
 800e35e:	580b      	ldrlt	r3, [r1, r0]
 800e360:	18c0      	addlt	r0, r0, r3
 800e362:	4770      	bx	lr

0800e364 <__swhatbuf_r>:
 800e364:	b570      	push	{r4, r5, r6, lr}
 800e366:	460c      	mov	r4, r1
 800e368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e36c:	2900      	cmp	r1, #0
 800e36e:	b096      	sub	sp, #88	@ 0x58
 800e370:	4615      	mov	r5, r2
 800e372:	461e      	mov	r6, r3
 800e374:	da0d      	bge.n	800e392 <__swhatbuf_r+0x2e>
 800e376:	89a3      	ldrh	r3, [r4, #12]
 800e378:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e37c:	f04f 0100 	mov.w	r1, #0
 800e380:	bf14      	ite	ne
 800e382:	2340      	movne	r3, #64	@ 0x40
 800e384:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e388:	2000      	movs	r0, #0
 800e38a:	6031      	str	r1, [r6, #0]
 800e38c:	602b      	str	r3, [r5, #0]
 800e38e:	b016      	add	sp, #88	@ 0x58
 800e390:	bd70      	pop	{r4, r5, r6, pc}
 800e392:	466a      	mov	r2, sp
 800e394:	f000 f848 	bl	800e428 <_fstat_r>
 800e398:	2800      	cmp	r0, #0
 800e39a:	dbec      	blt.n	800e376 <__swhatbuf_r+0x12>
 800e39c:	9901      	ldr	r1, [sp, #4]
 800e39e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e3a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e3a6:	4259      	negs	r1, r3
 800e3a8:	4159      	adcs	r1, r3
 800e3aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3ae:	e7eb      	b.n	800e388 <__swhatbuf_r+0x24>

0800e3b0 <__smakebuf_r>:
 800e3b0:	898b      	ldrh	r3, [r1, #12]
 800e3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3b4:	079d      	lsls	r5, r3, #30
 800e3b6:	4606      	mov	r6, r0
 800e3b8:	460c      	mov	r4, r1
 800e3ba:	d507      	bpl.n	800e3cc <__smakebuf_r+0x1c>
 800e3bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e3c0:	6023      	str	r3, [r4, #0]
 800e3c2:	6123      	str	r3, [r4, #16]
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	6163      	str	r3, [r4, #20]
 800e3c8:	b003      	add	sp, #12
 800e3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3cc:	ab01      	add	r3, sp, #4
 800e3ce:	466a      	mov	r2, sp
 800e3d0:	f7ff ffc8 	bl	800e364 <__swhatbuf_r>
 800e3d4:	9f00      	ldr	r7, [sp, #0]
 800e3d6:	4605      	mov	r5, r0
 800e3d8:	4639      	mov	r1, r7
 800e3da:	4630      	mov	r0, r6
 800e3dc:	f7fd fc50 	bl	800bc80 <_malloc_r>
 800e3e0:	b948      	cbnz	r0, 800e3f6 <__smakebuf_r+0x46>
 800e3e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3e6:	059a      	lsls	r2, r3, #22
 800e3e8:	d4ee      	bmi.n	800e3c8 <__smakebuf_r+0x18>
 800e3ea:	f023 0303 	bic.w	r3, r3, #3
 800e3ee:	f043 0302 	orr.w	r3, r3, #2
 800e3f2:	81a3      	strh	r3, [r4, #12]
 800e3f4:	e7e2      	b.n	800e3bc <__smakebuf_r+0xc>
 800e3f6:	89a3      	ldrh	r3, [r4, #12]
 800e3f8:	6020      	str	r0, [r4, #0]
 800e3fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3fe:	81a3      	strh	r3, [r4, #12]
 800e400:	9b01      	ldr	r3, [sp, #4]
 800e402:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e406:	b15b      	cbz	r3, 800e420 <__smakebuf_r+0x70>
 800e408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e40c:	4630      	mov	r0, r6
 800e40e:	f000 f81d 	bl	800e44c <_isatty_r>
 800e412:	b128      	cbz	r0, 800e420 <__smakebuf_r+0x70>
 800e414:	89a3      	ldrh	r3, [r4, #12]
 800e416:	f023 0303 	bic.w	r3, r3, #3
 800e41a:	f043 0301 	orr.w	r3, r3, #1
 800e41e:	81a3      	strh	r3, [r4, #12]
 800e420:	89a3      	ldrh	r3, [r4, #12]
 800e422:	431d      	orrs	r5, r3
 800e424:	81a5      	strh	r5, [r4, #12]
 800e426:	e7cf      	b.n	800e3c8 <__smakebuf_r+0x18>

0800e428 <_fstat_r>:
 800e428:	b538      	push	{r3, r4, r5, lr}
 800e42a:	4d07      	ldr	r5, [pc, #28]	@ (800e448 <_fstat_r+0x20>)
 800e42c:	2300      	movs	r3, #0
 800e42e:	4604      	mov	r4, r0
 800e430:	4608      	mov	r0, r1
 800e432:	4611      	mov	r1, r2
 800e434:	602b      	str	r3, [r5, #0]
 800e436:	f7f4 f9ad 	bl	8002794 <_fstat>
 800e43a:	1c43      	adds	r3, r0, #1
 800e43c:	d102      	bne.n	800e444 <_fstat_r+0x1c>
 800e43e:	682b      	ldr	r3, [r5, #0]
 800e440:	b103      	cbz	r3, 800e444 <_fstat_r+0x1c>
 800e442:	6023      	str	r3, [r4, #0]
 800e444:	bd38      	pop	{r3, r4, r5, pc}
 800e446:	bf00      	nop
 800e448:	200007ac 	.word	0x200007ac

0800e44c <_isatty_r>:
 800e44c:	b538      	push	{r3, r4, r5, lr}
 800e44e:	4d06      	ldr	r5, [pc, #24]	@ (800e468 <_isatty_r+0x1c>)
 800e450:	2300      	movs	r3, #0
 800e452:	4604      	mov	r4, r0
 800e454:	4608      	mov	r0, r1
 800e456:	602b      	str	r3, [r5, #0]
 800e458:	f7f4 f9ac 	bl	80027b4 <_isatty>
 800e45c:	1c43      	adds	r3, r0, #1
 800e45e:	d102      	bne.n	800e466 <_isatty_r+0x1a>
 800e460:	682b      	ldr	r3, [r5, #0]
 800e462:	b103      	cbz	r3, 800e466 <_isatty_r+0x1a>
 800e464:	6023      	str	r3, [r4, #0]
 800e466:	bd38      	pop	{r3, r4, r5, pc}
 800e468:	200007ac 	.word	0x200007ac

0800e46c <_init>:
 800e46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e46e:	bf00      	nop
 800e470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e472:	bc08      	pop	{r3}
 800e474:	469e      	mov	lr, r3
 800e476:	4770      	bx	lr

0800e478 <_fini>:
 800e478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e47a:	bf00      	nop
 800e47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e47e:	bc08      	pop	{r3}
 800e480:	469e      	mov	lr, r3
 800e482:	4770      	bx	lr
