
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aa8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08008c88  08008c88  00009c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f70  08008f70  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008f70  08008f70  00009f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f78  08008f78  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f78  08008f78  00009f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f7c  08008f7c  00009f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008f80  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000068  08008fe8  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08008fe8  0000a500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d8a  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f1b  00000000  00000000  00022e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  00025d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a8  00000000  00000000  000272a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000295bb  00000000  00000000  00028350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018aff  00000000  00000000  0005190b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114559  00000000  00000000  0006a40a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017e963  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006824  00000000  00000000  0017e9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c5  00000000  00000000  001851cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008c70 	.word	0x08008c70

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08008c70 	.word	0x08008c70

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b09e      	sub	sp, #120	@ 0x78
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	673b      	str	r3, [r7, #112]	@ 0x70
	char*		token;
	int 		newCmdReady = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f001 f8d4 	bl	800178a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f8ff 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fbb5 	bl	8000d54 <MX_GPIO_Init>
  MX_ADC2_Init();
 80005ea:	f000 f9bd 	bl	8000968 <MX_ADC2_Init>
  MX_ADC1_Init();
 80005ee:	f000 f943 	bl	8000878 <MX_ADC1_Init>
  MX_TIM1_Init();
 80005f2:	f000 fa1f 	bl	8000a34 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005f6:	f000 fac9 	bl	8000b8c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 fb13 	bl	8000c24 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005fe:	f000 fb5d 	bl	8000cbc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2224      	movs	r2, #36	@ 0x24
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f007 fa84 	bl	8007b16 <memset>
  memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 800060e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000612:	2240      	movs	r2, #64	@ 0x40
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f007 fa7d 	bl	8007b16 <memset>
  memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
 800061c:	4b64      	ldr	r3, [pc, #400]	@ (80007b0 <main+0x1e0>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
  memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000622:	2240      	movs	r2, #64	@ 0x40
 8000624:	2100      	movs	r1, #0
 8000626:	4863      	ldr	r0, [pc, #396]	@ (80007b4 <main+0x1e4>)
 8000628:	f007 fa75 	bl	8007b16 <memset>

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800062c:	2201      	movs	r2, #1
 800062e:	4960      	ldr	r1, [pc, #384]	@ (80007b0 <main+0x1e0>)
 8000630:	4861      	ldr	r0, [pc, #388]	@ (80007b8 <main+0x1e8>)
 8000632:	f005 f929 	bl	8005888 <HAL_UART_Receive_IT>
  HAL_Delay(10);
 8000636:	200a      	movs	r0, #10
 8000638:	f001 f8de 	bl	80017f8 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	2266      	movs	r2, #102	@ 0x66
 8000642:	495e      	ldr	r1, [pc, #376]	@ (80007bc <main+0x1ec>)
 8000644:	485c      	ldr	r0, [pc, #368]	@ (80007b8 <main+0x1e8>)
 8000646:	f005 f889 	bl	800575c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	2218      	movs	r2, #24
 8000650:	495b      	ldr	r1, [pc, #364]	@ (80007c0 <main+0x1f0>)
 8000652:	4859      	ldr	r0, [pc, #356]	@ (80007b8 <main+0x1e8>)
 8000654:	f005 f882 	bl	800575c <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // uartRxReceived is set to 1 when a new character is received on uart 1
	  	  	  if(uartRxReceived){
 8000658:	4b5a      	ldr	r3, [pc, #360]	@ (80007c4 <main+0x1f4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d058      	beq.n	8000712 <main+0x142>
	  	  		  switch(uartRxBuffer[0]){
 8000660:	4b53      	ldr	r3, [pc, #332]	@ (80007b0 <main+0x1e0>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b0d      	cmp	r3, #13
 8000666:	d002      	beq.n	800066e <main+0x9e>
 8000668:	2b7f      	cmp	r3, #127	@ 0x7f
 800066a:	d02f      	beq.n	80006cc <main+0xfc>
 800066c:	e03e      	b.n	80006ec <main+0x11c>
	  	  		  // Nouvelle ligne, instruction à traiter
	  	  		  case ASCII_CR:
	  	  			  HAL_UART_Transmit(&huart2, newLine, sizeof(newLine), HAL_MAX_DELAY);
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	2203      	movs	r2, #3
 8000674:	4954      	ldr	r1, [pc, #336]	@ (80007c8 <main+0x1f8>)
 8000676:	4850      	ldr	r0, [pc, #320]	@ (80007b8 <main+0x1e8>)
 8000678:	f005 f870 	bl	800575c <HAL_UART_Transmit>
	  	  			  cmdBuffer[idx_cmd] = '\0';
 800067c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000680:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000682:	4413      	add	r3, r2
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
	  	  			  argc = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	673b      	str	r3, [r7, #112]	@ 0x70
	  	  			  token = strtok(cmdBuffer, " ");
 800068c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000690:	494e      	ldr	r1, [pc, #312]	@ (80007cc <main+0x1fc>)
 8000692:	4618      	mov	r0, r3
 8000694:	f007 fa48 	bl	8007b28 <strtok>
 8000698:	4603      	mov	r3, r0
 800069a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  	  			  while(token!=NULL){
 800069c:	e00e      	b.n	80006bc <main+0xec>
	  	  				  argv[argc++] = token;
 800069e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	673a      	str	r2, [r7, #112]	@ 0x70
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	3378      	adds	r3, #120	@ 0x78
 80006a8:	443b      	add	r3, r7
 80006aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80006ac:	f843 2c74 	str.w	r2, [r3, #-116]
	  	  				  token = strtok(NULL, " ");
 80006b0:	4946      	ldr	r1, [pc, #280]	@ (80007cc <main+0x1fc>)
 80006b2:	2000      	movs	r0, #0
 80006b4:	f007 fa38 	bl	8007b28 <strtok>
 80006b8:	4603      	mov	r3, r0
 80006ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  	  			  while(token!=NULL){
 80006bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d1ed      	bne.n	800069e <main+0xce>
	  	  			  }

	  	  			  idx_cmd = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	677b      	str	r3, [r7, #116]	@ 0x74
	  	  			  newCmdReady = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	66bb      	str	r3, [r7, #104]	@ 0x68
	  	  			  break;
 80006ca:	e01f      	b.n	800070c <main+0x13c>
	  	  		  // Suppression du dernier caractère
	  	  		  case ASCII_DEL:
	  	  			  cmdBuffer[idx_cmd--] = '\0';
 80006cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80006ce:	1e5a      	subs	r2, r3, #1
 80006d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80006d2:	3378      	adds	r3, #120	@ 0x78
 80006d4:	443b      	add	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	f803 2c50 	strb.w	r2, [r3, #-80]
	  	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	2201      	movs	r2, #1
 80006e2:	4933      	ldr	r1, [pc, #204]	@ (80007b0 <main+0x1e0>)
 80006e4:	4834      	ldr	r0, [pc, #208]	@ (80007b8 <main+0x1e8>)
 80006e6:	f005 f839 	bl	800575c <HAL_UART_Transmit>
	  	  			  break;
 80006ea:	e00f      	b.n	800070c <main+0x13c>
	  	  	      // Nouveau caractère
	  	  		  default:
	  	  			  cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80006ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	677a      	str	r2, [r7, #116]	@ 0x74
 80006f2:	4a2f      	ldr	r2, [pc, #188]	@ (80007b0 <main+0x1e0>)
 80006f4:	7812      	ldrb	r2, [r2, #0]
 80006f6:	3378      	adds	r3, #120	@ 0x78
 80006f8:	443b      	add	r3, r7
 80006fa:	f803 2c50 	strb.w	r2, [r3, #-80]
	  	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	2201      	movs	r2, #1
 8000704:	492a      	ldr	r1, [pc, #168]	@ (80007b0 <main+0x1e0>)
 8000706:	482c      	ldr	r0, [pc, #176]	@ (80007b8 <main+0x1e8>)
 8000708:	f005 f828 	bl	800575c <HAL_UART_Transmit>
	  	  		  }
	  	  		  uartRxReceived = 0;
 800070c:	4b2d      	ldr	r3, [pc, #180]	@ (80007c4 <main+0x1f4>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
	  	  	  }

	  	  	  if(newCmdReady){
 8000712:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000714:	2b00      	cmp	r3, #0
 8000716:	d09f      	beq.n	8000658 <main+0x88>
	  	  		  if(strcmp(argv[0],"set")==0){
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	492d      	ldr	r1, [pc, #180]	@ (80007d0 <main+0x200>)
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fd7f 	bl	8000220 <strcmp>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d121      	bne.n	800076c <main+0x19c>
	  	  			  if(strcmp(argv[1],"PA5")==0){
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	492a      	ldr	r1, [pc, #168]	@ (80007d4 <main+0x204>)
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fd77 	bl	8000220 <strcmp>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d111      	bne.n	800075c <main+0x18c>
	  	  				  //HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
	  	  				  sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4618      	mov	r0, r3
 800073c:	f007 f83e 	bl	80077bc <atoi>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	4924      	ldr	r1, [pc, #144]	@ (80007d8 <main+0x208>)
 8000746:	481b      	ldr	r0, [pc, #108]	@ (80007b4 <main+0x1e4>)
 8000748:	f007 f982 	bl	8007a50 <siprintf>
	  	  				  HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 800074c:	f04f 33ff 	mov.w	r3, #4294967295
 8000750:	2220      	movs	r2, #32
 8000752:	4918      	ldr	r1, [pc, #96]	@ (80007b4 <main+0x1e4>)
 8000754:	4818      	ldr	r0, [pc, #96]	@ (80007b8 <main+0x1e8>)
 8000756:	f005 f801 	bl	800575c <HAL_UART_Transmit>
 800075a:	e01e      	b.n	800079a <main+0x1ca>
	  	  			  }
	  	  			  else{
	  	  				  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800075c:	f04f 33ff 	mov.w	r3, #4294967295
 8000760:	2214      	movs	r2, #20
 8000762:	491e      	ldr	r1, [pc, #120]	@ (80007dc <main+0x20c>)
 8000764:	4814      	ldr	r0, [pc, #80]	@ (80007b8 <main+0x1e8>)
 8000766:	f004 fff9 	bl	800575c <HAL_UART_Transmit>
 800076a:	e016      	b.n	800079a <main+0x1ca>
	  	  			  }
	  	  		  }
	  	  		  else if(strcmp(argv[0],"get")==0)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	491c      	ldr	r1, [pc, #112]	@ (80007e0 <main+0x210>)
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fd55 	bl	8000220 <strcmp>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d107      	bne.n	800078c <main+0x1bc>
	  	  		  {
	  	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
 8000780:	2214      	movs	r2, #20
 8000782:	4916      	ldr	r1, [pc, #88]	@ (80007dc <main+0x20c>)
 8000784:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <main+0x1e8>)
 8000786:	f004 ffe9 	bl	800575c <HAL_UART_Transmit>
 800078a:	e006      	b.n	800079a <main+0x1ca>
	  	  		  }
	  	  		  else{
	  	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
 8000790:	2214      	movs	r2, #20
 8000792:	4912      	ldr	r1, [pc, #72]	@ (80007dc <main+0x20c>)
 8000794:	4808      	ldr	r0, [pc, #32]	@ (80007b8 <main+0x1e8>)
 8000796:	f004 ffe1 	bl	800575c <HAL_UART_Transmit>
	  	  		  }
	  	  			  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	2218      	movs	r2, #24
 80007a0:	4907      	ldr	r1, [pc, #28]	@ (80007c0 <main+0x1f0>)
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <main+0x1e8>)
 80007a4:	f004 ffda 	bl	800575c <HAL_UART_Transmit>
	  	  			  newCmdReady = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	66bb      	str	r3, [r7, #104]	@ 0x68
	  	  	  if(uartRxReceived){
 80007ac:	e754      	b.n	8000658 <main+0x88>
 80007ae:	bf00      	nop
 80007b0:	20000318 	.word	0x20000318
 80007b4:	2000031c 	.word	0x2000031c
 80007b8:	200001f4 	.word	0x200001f4
 80007bc:	08008ccc 	.word	0x08008ccc
 80007c0:	08008cb4 	.word	0x08008cb4
 80007c4:	20000314 	.word	0x20000314
 80007c8:	08008d34 	.word	0x08008d34
 80007cc:	08008c88 	.word	0x08008c88
 80007d0:	08008c8c 	.word	0x08008c8c
 80007d4:	08008c90 	.word	0x08008c90
 80007d8:	08008c94 	.word	0x08008c94
 80007dc:	08008d38 	.word	0x08008d38
 80007e0:	08008cb0 	.word	0x08008cb0

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b094      	sub	sp, #80	@ 0x50
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0318 	add.w	r3, r7, #24
 80007ee:	2238      	movs	r2, #56	@ 0x38
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f007 f98f 	bl	8007b16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000806:	2000      	movs	r0, #0
 8000808:	f002 fc80 	bl	800310c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000810:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000814:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	2303      	movs	r3, #3
 800081c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800081e:	2306      	movs	r3, #6
 8000820:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000822:	2355      	movs	r3, #85	@ 0x55
 8000824:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000826:	2302      	movs	r3, #2
 8000828:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	f107 0318 	add.w	r3, r7, #24
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fd1c 	bl	8003274 <HAL_RCC_OscConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000842:	f000 fb29 	bl	8000e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2303      	movs	r3, #3
 800084c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2104      	movs	r1, #4
 800085e:	4618      	mov	r0, r3
 8000860:	f003 f820 	bl	80038a4 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800086a:	f000 fb15 	bl	8000e98 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3750      	adds	r7, #80	@ 0x50
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	@ 0x30
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800087e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2220      	movs	r2, #32
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f007 f940 	bl	8007b16 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000896:	4b32      	ldr	r3, [pc, #200]	@ (8000960 <MX_ADC1_Init+0xe8>)
 8000898:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800089c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800089e:	4b30      	ldr	r3, [pc, #192]	@ (8000960 <MX_ADC1_Init+0xe8>)
 80008a0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000960 <MX_ADC1_Init+0xe8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000960 <MX_ADC1_Init+0xe8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80008b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <MX_ADC1_Init+0xe8>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b8:	4b29      	ldr	r3, [pc, #164]	@ (8000960 <MX_ADC1_Init+0xe8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008be:	4b28      	ldr	r3, [pc, #160]	@ (8000960 <MX_ADC1_Init+0xe8>)
 80008c0:	2204      	movs	r2, #4
 80008c2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008c4:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <MX_ADC1_Init+0xe8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ca:	4b25      	ldr	r3, [pc, #148]	@ (8000960 <MX_ADC1_Init+0xe8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80008d0:	4b23      	ldr	r3, [pc, #140]	@ (8000960 <MX_ADC1_Init+0xe8>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d6:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <MX_ADC1_Init+0xe8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008de:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <MX_ADC1_Init+0xe8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <MX_ADC1_Init+0xe8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_ADC1_Init+0xe8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <MX_ADC1_Init+0xe8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_ADC1_Init+0xe8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000900:	4817      	ldr	r0, [pc, #92]	@ (8000960 <MX_ADC1_Init+0xe8>)
 8000902:	f001 f975 	bl	8001bf0 <HAL_ADC_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800090c:	f000 fac4 	bl	8000e98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000914:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000918:	4619      	mov	r1, r3
 800091a:	4811      	ldr	r0, [pc, #68]	@ (8000960 <MX_ADC1_Init+0xe8>)
 800091c:	f001 ff90 	bl	8002840 <HAL_ADCEx_MultiModeConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000926:	f000 fab7 	bl	8000e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <MX_ADC1_Init+0xec>)
 800092c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800092e:	2306      	movs	r3, #6
 8000930:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000936:	237f      	movs	r3, #127	@ 0x7f
 8000938:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800093a:	2304      	movs	r3, #4
 800093c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	@ (8000960 <MX_ADC1_Init+0xe8>)
 8000948:	f001 fb14 	bl	8001f74 <HAL_ADC_ConfigChannel>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000952:	f000 faa1 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	3730      	adds	r7, #48	@ 0x30
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000084 	.word	0x20000084
 8000964:	21800100 	.word	0x21800100

08000968 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800096e:	463b      	mov	r3, r7
 8000970:	2220      	movs	r2, #32
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f007 f8ce 	bl	8007b16 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800097a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 800097c:	4a2b      	ldr	r2, [pc, #172]	@ (8000a2c <MX_ADC2_Init+0xc4>)
 800097e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000980:	4b29      	ldr	r3, [pc, #164]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 8000982:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000986:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000988:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800098e:	4b26      	ldr	r3, [pc, #152]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000994:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800099a:	4b23      	ldr	r3, [pc, #140]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a0:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 80009a2:	2204      	movs	r2, #4
 80009a4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009a6:	4b20      	ldr	r3, [pc, #128]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c6:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80009cc:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80009da:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009e2:	4811      	ldr	r0, [pc, #68]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 80009e4:	f001 f904 	bl	8001bf0 <HAL_ADC_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80009ee:	f000 fa53 	bl	8000e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80009f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <MX_ADC2_Init+0xc8>)
 80009f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f6:	2306      	movs	r3, #6
 80009f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009fe:	237f      	movs	r3, #127	@ 0x7f
 8000a00:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a02:	2304      	movs	r3, #4
 8000a04:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	@ (8000a28 <MX_ADC2_Init+0xc0>)
 8000a10:	f001 fab0 	bl	8001f74 <HAL_ADC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000a1a:	f000 fa3d 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3720      	adds	r7, #32
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200000f0 	.word	0x200000f0
 8000a2c:	50000100 	.word	0x50000100
 8000a30:	19200040 	.word	0x19200040

08000a34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b098      	sub	sp, #96	@ 0x60
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
 8000a56:	615a      	str	r2, [r3, #20]
 8000a58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2234      	movs	r2, #52	@ 0x34
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f007 f858 	bl	8007b16 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a66:	4b47      	ldr	r3, [pc, #284]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000a68:	4a47      	ldr	r2, [pc, #284]	@ (8000b88 <MX_TIM1_Init+0x154>)
 8000a6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a6c:	4b45      	ldr	r3, [pc, #276]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b44      	ldr	r3, [pc, #272]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a78:	4b42      	ldr	r3, [pc, #264]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000a7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a80:	4b40      	ldr	r3, [pc, #256]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a86:	4b3f      	ldr	r3, [pc, #252]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a92:	483c      	ldr	r0, [pc, #240]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000a94:	f003 fc7c 	bl	8004390 <HAL_TIM_PWM_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a9e:	f000 f9fb 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4833      	ldr	r0, [pc, #204]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000ab6:	f004 fc73 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ac0:	f000 f9ea 	bl	8000e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac4:	2360      	movs	r3, #96	@ 0x60
 8000ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000acc:	2300      	movs	r3, #0
 8000ace:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4826      	ldr	r0, [pc, #152]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000aea:	f003 fe27 	bl	800473c <HAL_TIM_PWM_ConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000af4:	f000 f9d0 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000af8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000afc:	2204      	movs	r2, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4820      	ldr	r0, [pc, #128]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000b02:	f003 fe1b 	bl	800473c <HAL_TIM_PWM_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000b0c:	f000 f9c4 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b14:	2208      	movs	r2, #8
 8000b16:	4619      	mov	r1, r3
 8000b18:	481a      	ldr	r0, [pc, #104]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000b1a:	f003 fe0f 	bl	800473c <HAL_TIM_PWM_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000b24:	f000 f9b8 	bl	8000e98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	4619      	mov	r1, r3
 8000b64:	4807      	ldr	r0, [pc, #28]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000b66:	f004 fcb1 	bl	80054cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000b70:	f000 f992 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b74:	4803      	ldr	r0, [pc, #12]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000b76:	f000 fb35 	bl	80011e4 <HAL_TIM_MspPostInit>

}
 8000b7a:	bf00      	nop
 8000b7c:	3760      	adds	r7, #96	@ 0x60
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000015c 	.word	0x2000015c
 8000b88:	40012c00 	.word	0x40012c00

08000b8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <MX_TIM3_Init+0x90>)
 8000bac:	4a1c      	ldr	r2, [pc, #112]	@ (8000c20 <MX_TIM3_Init+0x94>)
 8000bae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <MX_TIM3_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <MX_TIM3_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <MX_TIM3_Init+0x90>)
 8000bbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <MX_TIM3_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <MX_TIM3_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <MX_TIM3_Init+0x90>)
 8000be8:	f004 fb2a 	bl	8005240 <HAL_TIMEx_HallSensor_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000bf2:	f000 f951 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000bf6:	2350      	movs	r3, #80	@ 0x50
 8000bf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <MX_TIM3_Init+0x90>)
 8000c04:	f004 fbcc 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000c0e:	f000 f943 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	3720      	adds	r7, #32
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200001a8 	.word	0x200001a8
 8000c20:	40000400 	.word	0x40000400

08000c24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c28:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c2a:	4a23      	ldr	r2, [pc, #140]	@ (8000cb8 <MX_USART2_UART_Init+0x94>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2e:	4b21      	ldr	r3, [pc, #132]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c66:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c6c:	4811      	ldr	r0, [pc, #68]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c6e:	f004 fd25 	bl	80056bc <HAL_UART_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c78:	f000 f90e 	bl	8000e98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c80:	f006 fcd1 	bl	8007626 <HAL_UARTEx_SetTxFifoThreshold>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c8a:	f000 f905 	bl	8000e98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4808      	ldr	r0, [pc, #32]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c92:	f006 fd06 	bl	80076a2 <HAL_UARTEx_SetRxFifoThreshold>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c9c:	f000 f8fc 	bl	8000e98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000ca2:	f006 fc87 	bl	80075b4 <HAL_UARTEx_DisableFifoMode>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000cac:	f000 f8f4 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200001f4 	.word	0x200001f4
 8000cb8:	40004400 	.word	0x40004400

08000cbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cc2:	4a23      	ldr	r2, [pc, #140]	@ (8000d50 <MX_USART3_UART_Init+0x94>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d04:	4811      	ldr	r0, [pc, #68]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d06:	f004 fcd9 	bl	80056bc <HAL_UART_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d10:	f000 f8c2 	bl	8000e98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d18:	f006 fc85 	bl	8007626 <HAL_UARTEx_SetTxFifoThreshold>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d22:	f000 f8b9 	bl	8000e98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4808      	ldr	r0, [pc, #32]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d2a:	f006 fcba 	bl	80076a2 <HAL_UARTEx_SetRxFifoThreshold>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d34:	f000 f8b0 	bl	8000e98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d3a:	f006 fc3b 	bl	80075b4 <HAL_UARTEx_DisableFifoMode>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d44:	f000 f8a8 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000284 	.word	0x20000284
 8000d50:	40004800 	.word	0x40004800

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e68 <MX_GPIO_Init+0x114>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e68 <MX_GPIO_Init+0x114>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d76:	4b3c      	ldr	r3, [pc, #240]	@ (8000e68 <MX_GPIO_Init+0x114>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d82:	4b39      	ldr	r3, [pc, #228]	@ (8000e68 <MX_GPIO_Init+0x114>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	4a38      	ldr	r2, [pc, #224]	@ (8000e68 <MX_GPIO_Init+0x114>)
 8000d88:	f043 0320 	orr.w	r3, r3, #32
 8000d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8e:	4b36      	ldr	r3, [pc, #216]	@ (8000e68 <MX_GPIO_Init+0x114>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	f003 0320 	and.w	r3, r3, #32
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b33      	ldr	r3, [pc, #204]	@ (8000e68 <MX_GPIO_Init+0x114>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	4a32      	ldr	r2, [pc, #200]	@ (8000e68 <MX_GPIO_Init+0x114>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da6:	4b30      	ldr	r3, [pc, #192]	@ (8000e68 <MX_GPIO_Init+0x114>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e68 <MX_GPIO_Init+0x114>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	4a2c      	ldr	r2, [pc, #176]	@ (8000e68 <MX_GPIO_Init+0x114>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000e68 <MX_GPIO_Init+0x114>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dca:	4b27      	ldr	r3, [pc, #156]	@ (8000e68 <MX_GPIO_Init+0x114>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	4a26      	ldr	r2, [pc, #152]	@ (8000e68 <MX_GPIO_Init+0x114>)
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd6:	4b24      	ldr	r3, [pc, #144]	@ (8000e68 <MX_GPIO_Init+0x114>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2120      	movs	r1, #32
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dea:	f002 f953 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2104      	movs	r1, #4
 8000df2:	481e      	ldr	r0, [pc, #120]	@ (8000e6c <MX_GPIO_Init+0x118>)
 8000df4:	f002 f94e 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000df8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4818      	ldr	r0, [pc, #96]	@ (8000e70 <MX_GPIO_Init+0x11c>)
 8000e10:	f001 ffbe 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000e14:	2320      	movs	r3, #32
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2e:	f001 ffaf 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_SafetyUC_Pin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000e32:	2304      	movs	r3, #4
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4808      	ldr	r0, [pc, #32]	@ (8000e6c <MX_GPIO_Init+0x118>)
 8000e4a:	f001 ffa1 	bl	8002d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	2028      	movs	r0, #40	@ 0x28
 8000e54:	f001 feb4 	bl	8002bc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e58:	2028      	movs	r0, #40	@ 0x28
 8000e5a:	f001 fecb 	bl	8002bf4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	@ 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000c00 	.word	0x48000c00
 8000e70:	48000800 	.word	0x48000800

08000e74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d101      	bne.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e86:	f000 fc99 	bl	80017bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40001000 	.word	0x40001000

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <Error_Handler+0x8>

08000ea4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec6:	4a08      	ldr	r2, [pc, #32]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000eda:	f002 f9bb 	bl	8003254 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000

08000eec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0a4      	sub	sp, #144	@ 0x90
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f08:	2254      	movs	r2, #84	@ 0x54
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f006 fe02 	bl	8007b16 <memset>
  if(hadc->Instance==ADC1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f1a:	d174      	bne.n	8001006 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f22:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 ff07 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f38:	f7ff ffae 	bl	8000e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f3c:	4b63      	ldr	r3, [pc, #396]	@ (80010cc <HAL_ADC_MspInit+0x1e0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	4a62      	ldr	r2, [pc, #392]	@ (80010cc <HAL_ADC_MspInit+0x1e0>)
 8000f44:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f46:	4b61      	ldr	r3, [pc, #388]	@ (80010cc <HAL_ADC_MspInit+0x1e0>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d10b      	bne.n	8000f66 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f4e:	4b60      	ldr	r3, [pc, #384]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a5f      	ldr	r2, [pc, #380]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8000f54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b5a      	ldr	r3, [pc, #360]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	4a59      	ldr	r2, [pc, #356]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f72:	4b57      	ldr	r3, [pc, #348]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	623b      	str	r3, [r7, #32]
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b54      	ldr	r3, [pc, #336]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	4a53      	ldr	r2, [pc, #332]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8a:	4b51      	ldr	r3, [pc, #324]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
 8000f94:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b4e      	ldr	r3, [pc, #312]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	4a4d      	ldr	r2, [pc, #308]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	61bb      	str	r3, [r7, #24]
 8000fac:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4843      	ldr	r0, [pc, #268]	@ (80010d4 <HAL_ADC_MspInit+0x1e8>)
 8000fc6:	f001 fee3 	bl	8002d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe4:	f001 fed4 	bl	8002d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fec:	2303      	movs	r3, #3
 8000fee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4836      	ldr	r0, [pc, #216]	@ (80010d8 <HAL_ADC_MspInit+0x1ec>)
 8001000:	f001 fec6 	bl	8002d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001004:	e05e      	b.n	80010c4 <HAL_ADC_MspInit+0x1d8>
  else if(hadc->Instance==ADC2)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a34      	ldr	r2, [pc, #208]	@ (80010dc <HAL_ADC_MspInit+0x1f0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d159      	bne.n	80010c4 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001010:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001016:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800101a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001020:	4618      	mov	r0, r3
 8001022:	f002 fe8d 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 800102c:	f7ff ff34 	bl	8000e98 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001030:	4b26      	ldr	r3, [pc, #152]	@ (80010cc <HAL_ADC_MspInit+0x1e0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	4a25      	ldr	r2, [pc, #148]	@ (80010cc <HAL_ADC_MspInit+0x1e0>)
 8001038:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800103a:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <HAL_ADC_MspInit+0x1e0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d10b      	bne.n	800105a <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001042:	4b23      	ldr	r3, [pc, #140]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	4a22      	ldr	r2, [pc, #136]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8001048:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800104c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104e:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	4a1c      	ldr	r2, [pc, #112]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001066:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	4a16      	ldr	r2, [pc, #88]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107e:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <HAL_ADC_MspInit+0x1e4>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800108a:	230b      	movs	r3, #11
 800108c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108e:	2303      	movs	r3, #3
 8001090:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800109e:	4619      	mov	r1, r3
 80010a0:	480c      	ldr	r0, [pc, #48]	@ (80010d4 <HAL_ADC_MspInit+0x1e8>)
 80010a2:	f001 fe75 	bl	8002d90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80010a6:	2301      	movs	r3, #1
 80010a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010aa:	2303      	movs	r3, #3
 80010ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c0:	f001 fe66 	bl	8002d90 <HAL_GPIO_Init>
}
 80010c4:	bf00      	nop
 80010c6:	3790      	adds	r7, #144	@ 0x90
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2000035c 	.word	0x2000035c
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000800 	.word	0x48000800
 80010d8:	48000400 	.word	0x48000400
 80010dc:	50000100 	.word	0x50000100

080010e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <HAL_TIM_PWM_MspInit+0x38>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d10b      	bne.n	800110a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010f2:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <HAL_TIM_PWM_MspInit+0x3c>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f6:	4a09      	ldr	r2, [pc, #36]	@ (800111c <HAL_TIM_PWM_MspInit+0x3c>)
 80010f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80010fe:	4b07      	ldr	r3, [pc, #28]	@ (800111c <HAL_TIM_PWM_MspInit+0x3c>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001102:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40012c00 	.word	0x40012c00
 800111c:	40021000 	.word	0x40021000

08001120 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	@ 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM3)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a26      	ldr	r2, [pc, #152]	@ (80011d8 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d145      	bne.n	80011ce <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001142:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001146:	4a25      	ldr	r2, [pc, #148]	@ (80011dc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6593      	str	r3, [r2, #88]	@ 0x58
 800114e:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b20      	ldr	r3, [pc, #128]	@ (80011dc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	4a1f      	ldr	r2, [pc, #124]	@ (80011dc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001166:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	4a19      	ldr	r2, [pc, #100]	@ (80011dc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117e:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800118a:	2350      	movs	r3, #80	@ 0x50
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800119a:	2302      	movs	r3, #2
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a8:	f001 fdf2 	bl	8002d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011be:	2302      	movs	r3, #2
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80011ca:	f001 fde1 	bl	8002d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	@ 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40000400 	.word	0x40000400
 80011dc:	40021000 	.word	0x40021000
 80011e0:	48000800 	.word	0x48000800

080011e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a29      	ldr	r2, [pc, #164]	@ (80012a8 <HAL_TIM_MspPostInit+0xc4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d14b      	bne.n	800129e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b29      	ldr	r3, [pc, #164]	@ (80012ac <HAL_TIM_MspPostInit+0xc8>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	4a28      	ldr	r2, [pc, #160]	@ (80012ac <HAL_TIM_MspPostInit+0xc8>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001212:	4b26      	ldr	r3, [pc, #152]	@ (80012ac <HAL_TIM_MspPostInit+0xc8>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <HAL_TIM_MspPostInit+0xc8>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a22      	ldr	r2, [pc, #136]	@ (80012ac <HAL_TIM_MspPostInit+0xc8>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <HAL_TIM_MspPostInit+0xc8>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001236:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001248:	2306      	movs	r3, #6
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4817      	ldr	r0, [pc, #92]	@ (80012b0 <HAL_TIM_MspPostInit+0xcc>)
 8001254:	f001 fd9c 	bl	8002d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001258:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800126a:	2304      	movs	r3, #4
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	480e      	ldr	r0, [pc, #56]	@ (80012b0 <HAL_TIM_MspPostInit+0xcc>)
 8001276:	f001 fd8b 	bl	8002d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 800127a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800127e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800128c:	2306      	movs	r3, #6
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129a:	f001 fd79 	bl	8002d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	@ 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40012c00 	.word	0x40012c00
 80012ac:	40021000 	.word	0x40021000
 80012b0:	48000400 	.word	0x48000400

080012b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0a0      	sub	sp, #128	@ 0x80
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012cc:	f107 0318 	add.w	r3, r7, #24
 80012d0:	2254      	movs	r2, #84	@ 0x54
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f006 fc1e 	bl	8007b16 <memset>
  if(huart->Instance==USART2)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a45      	ldr	r2, [pc, #276]	@ (80013f4 <HAL_UART_MspInit+0x140>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d13f      	bne.n	8001364 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ec:	f107 0318 	add.w	r3, r7, #24
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 fd25 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012fc:	f7ff fdcc 	bl	8000e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001300:	4b3d      	ldr	r3, [pc, #244]	@ (80013f8 <HAL_UART_MspInit+0x144>)
 8001302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001304:	4a3c      	ldr	r2, [pc, #240]	@ (80013f8 <HAL_UART_MspInit+0x144>)
 8001306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800130a:	6593      	str	r3, [r2, #88]	@ 0x58
 800130c:	4b3a      	ldr	r3, [pc, #232]	@ (80013f8 <HAL_UART_MspInit+0x144>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b37      	ldr	r3, [pc, #220]	@ (80013f8 <HAL_UART_MspInit+0x144>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131c:	4a36      	ldr	r2, [pc, #216]	@ (80013f8 <HAL_UART_MspInit+0x144>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001324:	4b34      	ldr	r3, [pc, #208]	@ (80013f8 <HAL_UART_MspInit+0x144>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001330:	230c      	movs	r3, #12
 8001332:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001340:	2307      	movs	r3, #7
 8001342:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001348:	4619      	mov	r1, r3
 800134a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800134e:	f001 fd1f 	bl	8002d90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2026      	movs	r0, #38	@ 0x26
 8001358:	f001 fc32 	bl	8002bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800135c:	2026      	movs	r0, #38	@ 0x26
 800135e:	f001 fc49 	bl	8002bf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001362:	e043      	b.n	80013ec <HAL_UART_MspInit+0x138>
  else if(huart->Instance==USART3)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a24      	ldr	r2, [pc, #144]	@ (80013fc <HAL_UART_MspInit+0x148>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d13e      	bne.n	80013ec <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800136e:	2304      	movs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001376:	f107 0318 	add.w	r3, r7, #24
 800137a:	4618      	mov	r0, r3
 800137c:	f002 fce0 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001386:	f7ff fd87 	bl	8000e98 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800138a:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <HAL_UART_MspInit+0x144>)
 800138c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800138e:	4a1a      	ldr	r2, [pc, #104]	@ (80013f8 <HAL_UART_MspInit+0x144>)
 8001390:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001394:	6593      	str	r3, [r2, #88]	@ 0x58
 8001396:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <HAL_UART_MspInit+0x144>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <HAL_UART_MspInit+0x144>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	4a14      	ldr	r2, [pc, #80]	@ (80013f8 <HAL_UART_MspInit+0x144>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ae:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <HAL_UART_MspInit+0x144>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013cc:	2307      	movs	r3, #7
 80013ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013d4:	4619      	mov	r1, r3
 80013d6:	480a      	ldr	r0, [pc, #40]	@ (8001400 <HAL_UART_MspInit+0x14c>)
 80013d8:	f001 fcda 	bl	8002d90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	2027      	movs	r0, #39	@ 0x27
 80013e2:	f001 fbed 	bl	8002bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013e6:	2027      	movs	r0, #39	@ 0x27
 80013e8:	f001 fc04 	bl	8002bf4 <HAL_NVIC_EnableIRQ>
}
 80013ec:	bf00      	nop
 80013ee:	3780      	adds	r7, #128	@ 0x80
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40004400 	.word	0x40004400
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40004800 	.word	0x40004800
 8001400:	48000800 	.word	0x48000800

08001404 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	@ 0x30
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001414:	4b2c      	ldr	r3, [pc, #176]	@ (80014c8 <HAL_InitTick+0xc4>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001418:	4a2b      	ldr	r2, [pc, #172]	@ (80014c8 <HAL_InitTick+0xc4>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001420:	4b29      	ldr	r3, [pc, #164]	@ (80014c8 <HAL_InitTick+0xc4>)
 8001422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800142c:	f107 020c 	add.w	r2, r7, #12
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fc0a 	bl	8003c50 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800143c:	f002 fbdc 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 8001440:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001444:	4a21      	ldr	r2, [pc, #132]	@ (80014cc <HAL_InitTick+0xc8>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0c9b      	lsrs	r3, r3, #18
 800144c:	3b01      	subs	r3, #1
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001450:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <HAL_InitTick+0xcc>)
 8001452:	4a20      	ldr	r2, [pc, #128]	@ (80014d4 <HAL_InitTick+0xd0>)
 8001454:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001456:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <HAL_InitTick+0xcc>)
 8001458:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800145c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800145e:	4a1c      	ldr	r2, [pc, #112]	@ (80014d0 <HAL_InitTick+0xcc>)
 8001460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001462:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001464:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <HAL_InitTick+0xcc>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <HAL_InitTick+0xcc>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001470:	4817      	ldr	r0, [pc, #92]	@ (80014d0 <HAL_InitTick+0xcc>)
 8001472:	f002 feb3 	bl	80041dc <HAL_TIM_Base_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800147c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001480:	2b00      	cmp	r3, #0
 8001482:	d11b      	bne.n	80014bc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001484:	4812      	ldr	r0, [pc, #72]	@ (80014d0 <HAL_InitTick+0xcc>)
 8001486:	f002 ff0b 	bl	80042a0 <HAL_TIM_Base_Start_IT>
 800148a:	4603      	mov	r3, r0
 800148c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001490:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001494:	2b00      	cmp	r3, #0
 8001496:	d111      	bne.n	80014bc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001498:	2036      	movs	r0, #54	@ 0x36
 800149a:	f001 fbab 	bl	8002bf4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d808      	bhi.n	80014b6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	2036      	movs	r0, #54	@ 0x36
 80014aa:	f001 fb89 	bl	8002bc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ae:	4a0a      	ldr	r2, [pc, #40]	@ (80014d8 <HAL_InitTick+0xd4>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e002      	b.n	80014bc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80014bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3730      	adds	r7, #48	@ 0x30
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	431bde83 	.word	0x431bde83
 80014d0:	20000360 	.word	0x20000360
 80014d4:	40001000 	.word	0x40001000
 80014d8:	20000004 	.word	0x20000004

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <NMI_Handler+0x4>

080014e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <MemManage_Handler+0x4>

080014f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <UsageFault_Handler+0x4>

08001504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <USART2_IRQHandler+0x10>)
 8001542:	f004 f9f7 	bl	8005934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200001f4 	.word	0x200001f4

08001550 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <USART3_IRQHandler+0x10>)
 8001556:	f004 f9ed 	bl	8005934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000284 	.word	0x20000284

08001564 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001568:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800156c:	f001 fdaa 	bl	80030c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001578:	4802      	ldr	r0, [pc, #8]	@ (8001584 <TIM6_DAC_IRQHandler+0x10>)
 800157a:	f002 ff60 	bl	800443e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000360 	.word	0x20000360

08001588 <_getpid>:
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
 800158c:	2301      	movs	r3, #1
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_kill>:
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	f006 fb63 	bl	8007c6c <__errno>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2216      	movs	r2, #22
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_exit>:
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ffe7 	bl	8001598 <_kill>
 80015ca:	bf00      	nop
 80015cc:	e7fd      	b.n	80015ca <_exit+0x12>

080015ce <_read>:
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e00a      	b.n	80015f6 <_read+0x28>
 80015e0:	f3af 8000 	nop.w
 80015e4:	4601      	mov	r1, r0
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	60ba      	str	r2, [r7, #8]
 80015ec:	b2ca      	uxtb	r2, r1
 80015ee:	701a      	strb	r2, [r3, #0]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	3301      	adds	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	dbf0      	blt.n	80015e0 <_read+0x12>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <_write>:
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	e009      	b.n	800162e <_write+0x26>
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	60ba      	str	r2, [r7, #8]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f3af 8000 	nop.w
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3301      	adds	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	429a      	cmp	r2, r3
 8001634:	dbf1      	blt.n	800161a <_write+0x12>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_close>:
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_fstat>:
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	2300      	movs	r3, #0
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_isatty>:
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	2301      	movs	r3, #1
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_lseek>:
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	2300      	movs	r3, #0
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_sbrk>:
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	4a14      	ldr	r2, [pc, #80]	@ (8001704 <_sbrk+0x5c>)
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <_sbrk+0x60>)
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <_sbrk+0x22>
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <_sbrk+0x64>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <_sbrk+0x68>)
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d207      	bcs.n	80016e8 <_sbrk+0x40>
 80016d8:	f006 fac8 	bl	8007c6c <__errno>
 80016dc:	4603      	mov	r3, r0
 80016de:	220c      	movs	r2, #12
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	e009      	b.n	80016fc <_sbrk+0x54>
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b07      	ldr	r3, [pc, #28]	@ (800170c <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	4a05      	ldr	r2, [pc, #20]	@ (800170c <_sbrk+0x64>)
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20020000 	.word	0x20020000
 8001708:	00000400 	.word	0x00000400
 800170c:	200003ac 	.word	0x200003ac
 8001710:	20000500 	.word	0x20000500

08001714 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001718:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <SystemInit+0x20>)
 800171a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800171e:	4a05      	ldr	r2, [pc, #20]	@ (8001734 <SystemInit+0x20>)
 8001720:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001724:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <Reset_Handler>:
 8001738:	480d      	ldr	r0, [pc, #52]	@ (8001770 <LoopForever+0x2>)
 800173a:	4685      	mov	sp, r0
 800173c:	480d      	ldr	r0, [pc, #52]	@ (8001774 <LoopForever+0x6>)
 800173e:	490e      	ldr	r1, [pc, #56]	@ (8001778 <LoopForever+0xa>)
 8001740:	4a0e      	ldr	r2, [pc, #56]	@ (800177c <LoopForever+0xe>)
 8001742:	2300      	movs	r3, #0
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:
 8001746:	58d4      	ldr	r4, [r2, r3]
 8001748:	50c4      	str	r4, [r0, r3]
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:
 800174c:	18c4      	adds	r4, r0, r3
 800174e:	428c      	cmp	r4, r1
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
 8001752:	4a0b      	ldr	r2, [pc, #44]	@ (8001780 <LoopForever+0x12>)
 8001754:	4c0b      	ldr	r4, [pc, #44]	@ (8001784 <LoopForever+0x16>)
 8001756:	2300      	movs	r3, #0
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:
 800175e:	42a2      	cmp	r2, r4
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>
 8001762:	f7ff ffd7 	bl	8001714 <SystemInit>
 8001766:	f006 fa87 	bl	8007c78 <__libc_init_array>
 800176a:	f7fe ff31 	bl	80005d0 <main>

0800176e <LoopForever>:
 800176e:	e7fe      	b.n	800176e <LoopForever>
 8001770:	20020000 	.word	0x20020000
 8001774:	20000000 	.word	0x20000000
 8001778:	20000068 	.word	0x20000068
 800177c:	08008f80 	.word	0x08008f80
 8001780:	20000068 	.word	0x20000068
 8001784:	20000500 	.word	0x20000500

08001788 <ADC1_2_IRQHandler>:
 8001788:	e7fe      	b.n	8001788 <ADC1_2_IRQHandler>

0800178a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001794:	2003      	movs	r0, #3
 8001796:	f001 fa08 	bl	8002baa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800179a:	200f      	movs	r0, #15
 800179c:	f7ff fe32 	bl	8001404 <HAL_InitTick>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	e001      	b.n	80017b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ac:	f7ff fb7a 	bl	8000ea4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017b0:	79fb      	ldrb	r3, [r7, #7]

}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <HAL_IncTick+0x1c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_IncTick+0x20>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a03      	ldr	r2, [pc, #12]	@ (80017d8 <HAL_IncTick+0x1c>)
 80017cc:	6013      	str	r3, [r2, #0]
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	200003b0 	.word	0x200003b0
 80017dc:	20000008 	.word	0x20000008

080017e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b03      	ldr	r3, [pc, #12]	@ (80017f4 <HAL_GetTick+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	200003b0 	.word	0x200003b0

080017f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001800:	f7ff ffee 	bl	80017e0 <HAL_GetTick>
 8001804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001810:	d004      	beq.n	800181c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001812:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <HAL_Delay+0x40>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4413      	add	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800181c:	bf00      	nop
 800181e:	f7ff ffdf 	bl	80017e0 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	429a      	cmp	r2, r3
 800182c:	d8f7      	bhi.n	800181e <HAL_Delay+0x26>
  {
  }
}
 800182e:	bf00      	nop
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000008 	.word	0x20000008

0800183c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	609a      	str	r2, [r3, #8]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	609a      	str	r2, [r3, #8]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3360      	adds	r3, #96	@ 0x60
 80018b6:	461a      	mov	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <LL_ADC_SetOffset+0x44>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	4313      	orrs	r3, r2
 80018d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018dc:	bf00      	nop
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	03fff000 	.word	0x03fff000

080018ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3360      	adds	r3, #96	@ 0x60
 80018fa:	461a      	mov	r2, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3360      	adds	r3, #96	@ 0x60
 8001928:	461a      	mov	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	431a      	orrs	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001942:	bf00      	nop
 8001944:	371c      	adds	r7, #28
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800194e:	b480      	push	{r7}
 8001950:	b087      	sub	sp, #28
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3360      	adds	r3, #96	@ 0x60
 800195e:	461a      	mov	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	431a      	orrs	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001978:	bf00      	nop
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3360      	adds	r3, #96	@ 0x60
 8001994:	461a      	mov	r2, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	431a      	orrs	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80019ae:	bf00      	nop
 80019b0:	371c      	adds	r7, #28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	615a      	str	r2, [r3, #20]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3330      	adds	r3, #48	@ 0x30
 80019f0:	461a      	mov	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	4413      	add	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	f003 031f 	and.w	r3, r3, #31
 8001a0a:	211f      	movs	r1, #31
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	401a      	ands	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	0e9b      	lsrs	r3, r3, #26
 8001a18:	f003 011f 	and.w	r1, r3, #31
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	431a      	orrs	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a2c:	bf00      	nop
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3314      	adds	r3, #20
 8001a48:	461a      	mov	r2, r3
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	0e5b      	lsrs	r3, r3, #25
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	4413      	add	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	0d1b      	lsrs	r3, r3, #20
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	2107      	movs	r1, #7
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	0d1b      	lsrs	r3, r3, #20
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a82:	bf00      	nop
 8001a84:	371c      	adds	r7, #28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001adc <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d10a      	bne.n	8001aba <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	401a      	ands	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	407f0000 	.word	0x407f0000

08001ae0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001af0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6093      	str	r3, [r2, #8]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b18:	d101      	bne.n	8001b1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b40:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b68:	d101      	bne.n	8001b6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <LL_ADC_IsEnabled+0x18>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <LL_ADC_IsEnabled+0x1a>
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d101      	bne.n	8001bba <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d101      	bne.n	8001be0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b089      	sub	sp, #36	@ 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e1af      	b.n	8001f6a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff f967 	bl	8000eec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff67 	bl	8001b04 <LL_ADC_IsDeepPowerDownEnabled>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff4d 	bl	8001ae0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff82 	bl	8001b54 <LL_ADC_IsInternalRegulatorEnabled>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d115      	bne.n	8001c82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff66 	bl	8001b2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c60:	4b9f      	ldr	r3, [pc, #636]	@ (8001ee0 <HAL_ADC_Init+0x2f0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	4a9f      	ldr	r2, [pc, #636]	@ (8001ee4 <HAL_ADC_Init+0x2f4>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	3301      	adds	r3, #1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c74:	e002      	b.n	8001c7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f9      	bne.n	8001c76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff64 	bl	8001b54 <LL_ADC_IsInternalRegulatorEnabled>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10d      	bne.n	8001cae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c96:	f043 0210 	orr.w	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca2:	f043 0201 	orr.w	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ff75 	bl	8001ba2 <LL_ADC_REG_IsConversionOngoing>
 8001cb8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f040 8148 	bne.w	8001f58 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 8144 	bne.w	8001f58 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001cd8:	f043 0202 	orr.w	r2, r3, #2
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff49 	bl	8001b7c <LL_ADC_IsEnabled>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d141      	bne.n	8001d74 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cf8:	d004      	beq.n	8001d04 <HAL_ADC_Init+0x114>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a7a      	ldr	r2, [pc, #488]	@ (8001ee8 <HAL_ADC_Init+0x2f8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d10f      	bne.n	8001d24 <HAL_ADC_Init+0x134>
 8001d04:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001d08:	f7ff ff38 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	4876      	ldr	r0, [pc, #472]	@ (8001ee8 <HAL_ADC_Init+0x2f8>)
 8001d10:	f7ff ff34 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4323      	orrs	r3, r4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf0c      	ite	eq
 8001d1c:	2301      	moveq	r3, #1
 8001d1e:	2300      	movne	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	e012      	b.n	8001d4a <HAL_ADC_Init+0x15a>
 8001d24:	4871      	ldr	r0, [pc, #452]	@ (8001eec <HAL_ADC_Init+0x2fc>)
 8001d26:	f7ff ff29 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	4870      	ldr	r0, [pc, #448]	@ (8001ef0 <HAL_ADC_Init+0x300>)
 8001d2e:	f7ff ff25 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d32:	4603      	mov	r3, r0
 8001d34:	431c      	orrs	r4, r3
 8001d36:	486f      	ldr	r0, [pc, #444]	@ (8001ef4 <HAL_ADC_Init+0x304>)
 8001d38:	f7ff ff20 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4323      	orrs	r3, r4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d012      	beq.n	8001d74 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d56:	d004      	beq.n	8001d62 <HAL_ADC_Init+0x172>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a62      	ldr	r2, [pc, #392]	@ (8001ee8 <HAL_ADC_Init+0x2f8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_Init+0x176>
 8001d62:	4a65      	ldr	r2, [pc, #404]	@ (8001ef8 <HAL_ADC_Init+0x308>)
 8001d64:	e000      	b.n	8001d68 <HAL_ADC_Init+0x178>
 8001d66:	4a65      	ldr	r2, [pc, #404]	@ (8001efc <HAL_ADC_Init+0x30c>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f7ff fd64 	bl	800183c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7f5b      	ldrb	r3, [r3, #29]
 8001d78:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d7e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d84:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d8a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d92:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d106      	bne.n	8001db0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da6:	3b01      	subs	r3, #1
 8001da8:	045b      	lsls	r3, r3, #17
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d009      	beq.n	8001dcc <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	4b4b      	ldr	r3, [pc, #300]	@ (8001f00 <HAL_ADC_Init+0x310>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	69b9      	ldr	r1, [r7, #24]
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fed1 	bl	8001ba2 <LL_ADC_REG_IsConversionOngoing>
 8001e00:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fede 	bl	8001bc8 <LL_ADC_INJ_IsConversionOngoing>
 8001e0c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d17f      	bne.n	8001f14 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d17c      	bne.n	8001f14 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e1e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e26:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e36:	f023 0302 	bic.w	r3, r3, #2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	69b9      	ldr	r1, [r7, #24]
 8001e40:	430b      	orrs	r3, r1
 8001e42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d017      	beq.n	8001e7c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001e5a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e64:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6911      	ldr	r1, [r2, #16]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	430b      	orrs	r3, r1
 8001e76:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001e7a:	e013      	b.n	8001ea4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001e8a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ea0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d12a      	bne.n	8001f04 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001eb8:	f023 0304 	bic.w	r3, r3, #4
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ec4:	4311      	orrs	r1, r2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001eca:	4311      	orrs	r1, r2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	611a      	str	r2, [r3, #16]
 8001ede:	e019      	b.n	8001f14 <HAL_ADC_Init+0x324>
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	053e2d63 	.word	0x053e2d63
 8001ee8:	50000100 	.word	0x50000100
 8001eec:	50000400 	.word	0x50000400
 8001ef0:	50000500 	.word	0x50000500
 8001ef4:	50000600 	.word	0x50000600
 8001ef8:	50000300 	.word	0x50000300
 8001efc:	50000700 	.word	0x50000700
 8001f00:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0201 	bic.w	r2, r2, #1
 8001f12:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d10c      	bne.n	8001f36 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f023 010f 	bic.w	r1, r3, #15
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	1e5a      	subs	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f34:	e007      	b.n	8001f46 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 020f 	bic.w	r2, r2, #15
 8001f44:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f56:	e007      	b.n	8001f68 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5c:	f043 0210 	orr.w	r2, r3, #16
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f68:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	@ 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd90      	pop	{r4, r7, pc}
 8001f72:	bf00      	nop

08001f74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0b6      	sub	sp, #216	@ 0xd8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d102      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x24>
 8001f92:	2302      	movs	r3, #2
 8001f94:	f000 bc13 	b.w	80027be <HAL_ADC_ConfigChannel+0x84a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fdfc 	bl	8001ba2 <LL_ADC_REG_IsConversionOngoing>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f040 83f3 	bne.w	8002798 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	6859      	ldr	r1, [r3, #4]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f7ff fd0e 	bl	80019e0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fdea 	bl	8001ba2 <LL_ADC_REG_IsConversionOngoing>
 8001fce:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fdf6 	bl	8001bc8 <LL_ADC_INJ_IsConversionOngoing>
 8001fdc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fe0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f040 81d9 	bne.w	800239c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f040 81d4 	bne.w	800239c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ffc:	d10f      	bne.n	800201e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2200      	movs	r2, #0
 8002008:	4619      	mov	r1, r3
 800200a:	f7ff fd15 	bl	8001a38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fccf 	bl	80019ba <LL_ADC_SetSamplingTimeCommonConfig>
 800201c:	e00e      	b.n	800203c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6819      	ldr	r1, [r3, #0]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	461a      	mov	r2, r3
 800202c:	f7ff fd04 	bl	8001a38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fcbf 	bl	80019ba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	08db      	lsrs	r3, r3, #3
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b04      	cmp	r3, #4
 800205c:	d022      	beq.n	80020a4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6919      	ldr	r1, [r3, #16]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800206e:	f7ff fc19 	bl	80018a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6919      	ldr	r1, [r3, #16]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	461a      	mov	r2, r3
 8002080:	f7ff fc65 	bl	800194e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6919      	ldr	r1, [r3, #16]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	7f1b      	ldrb	r3, [r3, #28]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d102      	bne.n	800209a <HAL_ADC_ConfigChannel+0x126>
 8002094:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002098:	e000      	b.n	800209c <HAL_ADC_ConfigChannel+0x128>
 800209a:	2300      	movs	r3, #0
 800209c:	461a      	mov	r2, r3
 800209e:	f7ff fc71 	bl	8001984 <LL_ADC_SetOffsetSaturation>
 80020a2:	e17b      	b.n	800239c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fc1e 	bl	80018ec <LL_ADC_GetOffsetChannel>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10a      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x15c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fc13 	bl	80018ec <LL_ADC_GetOffsetChannel>
 80020c6:	4603      	mov	r3, r0
 80020c8:	0e9b      	lsrs	r3, r3, #26
 80020ca:	f003 021f 	and.w	r2, r3, #31
 80020ce:	e01e      	b.n	800210e <HAL_ADC_ConfigChannel+0x19a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fc08 	bl	80018ec <LL_ADC_GetOffsetChannel>
 80020dc:	4603      	mov	r3, r0
 80020de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80020f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80020fe:	2320      	movs	r3, #32
 8002100:	e004      	b.n	800210c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002102:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002116:	2b00      	cmp	r3, #0
 8002118:	d105      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x1b2>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	0e9b      	lsrs	r3, r3, #26
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	e018      	b.n	8002158 <HAL_ADC_ConfigChannel+0x1e4>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800213a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800213e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002142:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800214a:	2320      	movs	r3, #32
 800214c:	e004      	b.n	8002158 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800214e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002158:	429a      	cmp	r2, r3
 800215a:	d106      	bne.n	800216a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fbd7 	bl	8001918 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2101      	movs	r1, #1
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fbbb 	bl	80018ec <LL_ADC_GetOffsetChannel>
 8002176:	4603      	mov	r3, r0
 8002178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10a      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x222>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2101      	movs	r1, #1
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fbb0 	bl	80018ec <LL_ADC_GetOffsetChannel>
 800218c:	4603      	mov	r3, r0
 800218e:	0e9b      	lsrs	r3, r3, #26
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	e01e      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x260>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2101      	movs	r1, #1
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fba5 	bl	80018ec <LL_ADC_GetOffsetChannel>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80021b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80021bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80021c4:	2320      	movs	r3, #32
 80021c6:	e004      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80021c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021cc:	fab3 f383 	clz	r3, r3
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d105      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x278>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	0e9b      	lsrs	r3, r3, #26
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	e018      	b.n	800221e <HAL_ADC_ConfigChannel+0x2aa>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002200:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002204:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002208:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002210:	2320      	movs	r3, #32
 8002212:	e004      	b.n	800221e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002214:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002218:	fab3 f383 	clz	r3, r3
 800221c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800221e:	429a      	cmp	r2, r3
 8002220:	d106      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2200      	movs	r2, #0
 8002228:	2101      	movs	r1, #1
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fb74 	bl	8001918 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2102      	movs	r1, #2
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fb58 	bl	80018ec <LL_ADC_GetOffsetChannel>
 800223c:	4603      	mov	r3, r0
 800223e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10a      	bne.n	800225c <HAL_ADC_ConfigChannel+0x2e8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2102      	movs	r1, #2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fb4d 	bl	80018ec <LL_ADC_GetOffsetChannel>
 8002252:	4603      	mov	r3, r0
 8002254:	0e9b      	lsrs	r3, r3, #26
 8002256:	f003 021f 	and.w	r2, r3, #31
 800225a:	e01e      	b.n	800229a <HAL_ADC_ConfigChannel+0x326>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2102      	movs	r1, #2
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fb42 	bl	80018ec <LL_ADC_GetOffsetChannel>
 8002268:	4603      	mov	r3, r0
 800226a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800227a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800227e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002282:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800228a:	2320      	movs	r3, #32
 800228c:	e004      	b.n	8002298 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800228e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x33e>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	0e9b      	lsrs	r3, r3, #26
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	e016      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x36c>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80022c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80022ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80022d2:	2320      	movs	r3, #32
 80022d4:	e004      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80022d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d106      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2200      	movs	r2, #0
 80022ea:	2102      	movs	r1, #2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fb13 	bl	8001918 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2103      	movs	r1, #3
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff faf7 	bl	80018ec <LL_ADC_GetOffsetChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <HAL_ADC_ConfigChannel+0x3aa>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2103      	movs	r1, #3
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff faec 	bl	80018ec <LL_ADC_GetOffsetChannel>
 8002314:	4603      	mov	r3, r0
 8002316:	0e9b      	lsrs	r3, r3, #26
 8002318:	f003 021f 	and.w	r2, r3, #31
 800231c:	e017      	b.n	800234e <HAL_ADC_ConfigChannel+0x3da>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2103      	movs	r1, #3
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fae1 	bl	80018ec <LL_ADC_GetOffsetChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002336:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002338:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800233a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002340:	2320      	movs	r3, #32
 8002342:	e003      	b.n	800234c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002344:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x3f2>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0e9b      	lsrs	r3, r3, #26
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	e011      	b.n	800238a <HAL_ADC_ConfigChannel+0x416>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002376:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002378:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800237e:	2320      	movs	r3, #32
 8002380:	e003      	b.n	800238a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002382:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800238a:	429a      	cmp	r2, r3
 800238c:	d106      	bne.n	800239c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2200      	movs	r2, #0
 8002394:	2103      	movs	r1, #3
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fabe 	bl	8001918 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fbeb 	bl	8001b7c <LL_ADC_IsEnabled>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 813d 	bne.w	8002628 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6819      	ldr	r1, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	461a      	mov	r2, r3
 80023bc:	f7ff fb68 	bl	8001a90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4aa2      	ldr	r2, [pc, #648]	@ (8002650 <HAL_ADC_ConfigChannel+0x6dc>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	f040 812e 	bne.w	8002628 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10b      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x480>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0e9b      	lsrs	r3, r3, #26
 80023e2:	3301      	adds	r3, #1
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	2b09      	cmp	r3, #9
 80023ea:	bf94      	ite	ls
 80023ec:	2301      	movls	r3, #1
 80023ee:	2300      	movhi	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	e019      	b.n	8002428 <HAL_ADC_ConfigChannel+0x4b4>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002402:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002404:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002406:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800240c:	2320      	movs	r3, #32
 800240e:	e003      	b.n	8002418 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002410:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	3301      	adds	r3, #1
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	2b09      	cmp	r3, #9
 8002420:	bf94      	ite	ls
 8002422:	2301      	movls	r3, #1
 8002424:	2300      	movhi	r3, #0
 8002426:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002428:	2b00      	cmp	r3, #0
 800242a:	d079      	beq.n	8002520 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002434:	2b00      	cmp	r3, #0
 8002436:	d107      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x4d4>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	0e9b      	lsrs	r3, r3, #26
 800243e:	3301      	adds	r3, #1
 8002440:	069b      	lsls	r3, r3, #26
 8002442:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002446:	e015      	b.n	8002474 <HAL_ADC_ConfigChannel+0x500>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002458:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800245a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002460:	2320      	movs	r3, #32
 8002462:	e003      	b.n	800246c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	3301      	adds	r3, #1
 800246e:	069b      	lsls	r3, r3, #26
 8002470:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x520>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e9b      	lsrs	r3, r3, #26
 8002486:	3301      	adds	r3, #1
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	2101      	movs	r1, #1
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	e017      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x550>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800249c:	fa93 f3a3 	rbit	r3, r3
 80024a0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80024a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80024a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80024ac:	2320      	movs	r3, #32
 80024ae:	e003      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80024b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	3301      	adds	r3, #1
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	2101      	movs	r1, #1
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	ea42 0103 	orr.w	r1, r2, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x576>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	3301      	adds	r3, #1
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	051b      	lsls	r3, r3, #20
 80024e8:	e018      	b.n	800251c <HAL_ADC_ConfigChannel+0x5a8>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80024f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80024fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002502:	2320      	movs	r3, #32
 8002504:	e003      	b.n	800250e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	3301      	adds	r3, #1
 8002510:	f003 021f 	and.w	r2, r3, #31
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800251c:	430b      	orrs	r3, r1
 800251e:	e07e      	b.n	800261e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002528:	2b00      	cmp	r3, #0
 800252a:	d107      	bne.n	800253c <HAL_ADC_ConfigChannel+0x5c8>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	3301      	adds	r3, #1
 8002534:	069b      	lsls	r3, r3, #26
 8002536:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800253a:	e015      	b.n	8002568 <HAL_ADC_ConfigChannel+0x5f4>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800254a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800254e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002554:	2320      	movs	r3, #32
 8002556:	e003      	b.n	8002560 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	3301      	adds	r3, #1
 8002562:	069b      	lsls	r3, r3, #26
 8002564:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x614>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0e9b      	lsrs	r3, r3, #26
 800257a:	3301      	adds	r3, #1
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	2101      	movs	r1, #1
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	e017      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x644>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	61fb      	str	r3, [r7, #28]
  return result;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80025a0:	2320      	movs	r3, #32
 80025a2:	e003      	b.n	80025ac <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	3301      	adds	r3, #1
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2101      	movs	r1, #1
 80025b4:	fa01 f303 	lsl.w	r3, r1, r3
 80025b8:	ea42 0103 	orr.w	r1, r2, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10d      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x670>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	0e9b      	lsrs	r3, r3, #26
 80025ce:	3301      	adds	r3, #1
 80025d0:	f003 021f 	and.w	r2, r3, #31
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	3b1e      	subs	r3, #30
 80025dc:	051b      	lsls	r3, r3, #20
 80025de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025e2:	e01b      	b.n	800261c <HAL_ADC_ConfigChannel+0x6a8>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	fa93 f3a3 	rbit	r3, r3
 80025f0:	613b      	str	r3, [r7, #16]
  return result;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80025fc:	2320      	movs	r3, #32
 80025fe:	e003      	b.n	8002608 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	3301      	adds	r3, #1
 800260a:	f003 021f 	and.w	r2, r3, #31
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	3b1e      	subs	r3, #30
 8002616:	051b      	lsls	r3, r3, #20
 8002618:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800261c:	430b      	orrs	r3, r1
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	6892      	ldr	r2, [r2, #8]
 8002622:	4619      	mov	r1, r3
 8002624:	f7ff fa08 	bl	8001a38 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <HAL_ADC_ConfigChannel+0x6e0>)
 800262e:	4013      	ands	r3, r2
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80be 	beq.w	80027b2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800263e:	d004      	beq.n	800264a <HAL_ADC_ConfigChannel+0x6d6>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a04      	ldr	r2, [pc, #16]	@ (8002658 <HAL_ADC_ConfigChannel+0x6e4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d10a      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x6ec>
 800264a:	4b04      	ldr	r3, [pc, #16]	@ (800265c <HAL_ADC_ConfigChannel+0x6e8>)
 800264c:	e009      	b.n	8002662 <HAL_ADC_ConfigChannel+0x6ee>
 800264e:	bf00      	nop
 8002650:	407f0000 	.word	0x407f0000
 8002654:	80080000 	.word	0x80080000
 8002658:	50000100 	.word	0x50000100
 800265c:	50000300 	.word	0x50000300
 8002660:	4b59      	ldr	r3, [pc, #356]	@ (80027c8 <HAL_ADC_ConfigChannel+0x854>)
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff f910 	bl	8001888 <LL_ADC_GetCommonPathInternalCh>
 8002668:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a56      	ldr	r2, [pc, #344]	@ (80027cc <HAL_ADC_ConfigChannel+0x858>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d004      	beq.n	8002680 <HAL_ADC_ConfigChannel+0x70c>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a55      	ldr	r2, [pc, #340]	@ (80027d0 <HAL_ADC_ConfigChannel+0x85c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d13a      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002680:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002684:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d134      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002694:	d005      	beq.n	80026a2 <HAL_ADC_ConfigChannel+0x72e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a4e      	ldr	r2, [pc, #312]	@ (80027d4 <HAL_ADC_ConfigChannel+0x860>)
 800269c:	4293      	cmp	r3, r2
 800269e:	f040 8085 	bne.w	80027ac <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026aa:	d004      	beq.n	80026b6 <HAL_ADC_ConfigChannel+0x742>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a49      	ldr	r2, [pc, #292]	@ (80027d8 <HAL_ADC_ConfigChannel+0x864>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x746>
 80026b6:	4a49      	ldr	r2, [pc, #292]	@ (80027dc <HAL_ADC_ConfigChannel+0x868>)
 80026b8:	e000      	b.n	80026bc <HAL_ADC_ConfigChannel+0x748>
 80026ba:	4a43      	ldr	r2, [pc, #268]	@ (80027c8 <HAL_ADC_ConfigChannel+0x854>)
 80026bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026c4:	4619      	mov	r1, r3
 80026c6:	4610      	mov	r0, r2
 80026c8:	f7ff f8cb 	bl	8001862 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026cc:	4b44      	ldr	r3, [pc, #272]	@ (80027e0 <HAL_ADC_ConfigChannel+0x86c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	4a44      	ldr	r2, [pc, #272]	@ (80027e4 <HAL_ADC_ConfigChannel+0x870>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	099b      	lsrs	r3, r3, #6
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026e6:	e002      	b.n	80026ee <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f9      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026f4:	e05a      	b.n	80027ac <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a3b      	ldr	r2, [pc, #236]	@ (80027e8 <HAL_ADC_ConfigChannel+0x874>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d125      	bne.n	800274c <HAL_ADC_ConfigChannel+0x7d8>
 8002700:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002704:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d11f      	bne.n	800274c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a31      	ldr	r2, [pc, #196]	@ (80027d8 <HAL_ADC_ConfigChannel+0x864>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d104      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x7ac>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a34      	ldr	r2, [pc, #208]	@ (80027ec <HAL_ADC_ConfigChannel+0x878>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d047      	beq.n	80027b0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002728:	d004      	beq.n	8002734 <HAL_ADC_ConfigChannel+0x7c0>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a2a      	ldr	r2, [pc, #168]	@ (80027d8 <HAL_ADC_ConfigChannel+0x864>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x7c4>
 8002734:	4a29      	ldr	r2, [pc, #164]	@ (80027dc <HAL_ADC_ConfigChannel+0x868>)
 8002736:	e000      	b.n	800273a <HAL_ADC_ConfigChannel+0x7c6>
 8002738:	4a23      	ldr	r2, [pc, #140]	@ (80027c8 <HAL_ADC_ConfigChannel+0x854>)
 800273a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800273e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002742:	4619      	mov	r1, r3
 8002744:	4610      	mov	r0, r2
 8002746:	f7ff f88c 	bl	8001862 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800274a:	e031      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a27      	ldr	r2, [pc, #156]	@ (80027f0 <HAL_ADC_ConfigChannel+0x87c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d12d      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800275a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d127      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1c      	ldr	r2, [pc, #112]	@ (80027d8 <HAL_ADC_ConfigChannel+0x864>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d022      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002774:	d004      	beq.n	8002780 <HAL_ADC_ConfigChannel+0x80c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a17      	ldr	r2, [pc, #92]	@ (80027d8 <HAL_ADC_ConfigChannel+0x864>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d101      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x810>
 8002780:	4a16      	ldr	r2, [pc, #88]	@ (80027dc <HAL_ADC_ConfigChannel+0x868>)
 8002782:	e000      	b.n	8002786 <HAL_ADC_ConfigChannel+0x812>
 8002784:	4a10      	ldr	r2, [pc, #64]	@ (80027c8 <HAL_ADC_ConfigChannel+0x854>)
 8002786:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800278a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800278e:	4619      	mov	r1, r3
 8002790:	4610      	mov	r0, r2
 8002792:	f7ff f866 	bl	8001862 <LL_ADC_SetCommonPathInternalCh>
 8002796:	e00c      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80027aa:	e002      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ac:	bf00      	nop
 80027ae:	e000      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80027ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80027be:	4618      	mov	r0, r3
 80027c0:	37d8      	adds	r7, #216	@ 0xd8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	50000700 	.word	0x50000700
 80027cc:	c3210000 	.word	0xc3210000
 80027d0:	90c00010 	.word	0x90c00010
 80027d4:	50000600 	.word	0x50000600
 80027d8:	50000100 	.word	0x50000100
 80027dc:	50000300 	.word	0x50000300
 80027e0:	20000000 	.word	0x20000000
 80027e4:	053e2d63 	.word	0x053e2d63
 80027e8:	c7520000 	.word	0xc7520000
 80027ec:	50000500 	.word	0x50000500
 80027f0:	cb840000 	.word	0xcb840000

080027f4 <LL_ADC_IsEnabled>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <LL_ADC_IsEnabled+0x18>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <LL_ADC_IsEnabled+0x1a>
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_ADC_REG_IsConversionOngoing>:
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b04      	cmp	r3, #4
 800282c:	d101      	bne.n	8002832 <LL_ADC_REG_IsConversionOngoing+0x18>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b0a1      	sub	sp, #132	@ 0x84
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800285a:	2302      	movs	r3, #2
 800285c:	e0e7      	b.n	8002a2e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002866:	2300      	movs	r3, #0
 8002868:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800286a:	2300      	movs	r3, #0
 800286c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002876:	d102      	bne.n	800287e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002878:	4b6f      	ldr	r3, [pc, #444]	@ (8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	e009      	b.n	8002892 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a6e      	ldr	r2, [pc, #440]	@ (8002a3c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d102      	bne.n	800288e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002888:	4b6d      	ldr	r3, [pc, #436]	@ (8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	e001      	b.n	8002892 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10b      	bne.n	80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289c:	f043 0220 	orr.w	r2, r3, #32
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0be      	b.n	8002a2e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ffb1 	bl	800281a <LL_ADC_REG_IsConversionOngoing>
 80028b8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ffab 	bl	800281a <LL_ADC_REG_IsConversionOngoing>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f040 80a0 	bne.w	8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80028cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 809c 	bne.w	8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028dc:	d004      	beq.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a55      	ldr	r2, [pc, #340]	@ (8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80028e8:	4b56      	ldr	r3, [pc, #344]	@ (8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80028ea:	e000      	b.n	80028ee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80028ec:	4b56      	ldr	r3, [pc, #344]	@ (8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80028ee:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d04b      	beq.n	8002990 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800290a:	035b      	lsls	r3, r3, #13
 800290c:	430b      	orrs	r3, r1
 800290e:	431a      	orrs	r2, r3
 8002910:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002912:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800291c:	d004      	beq.n	8002928 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a45      	ldr	r2, [pc, #276]	@ (8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d10f      	bne.n	8002948 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002928:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800292c:	f7ff ff62 	bl	80027f4 <LL_ADC_IsEnabled>
 8002930:	4604      	mov	r4, r0
 8002932:	4841      	ldr	r0, [pc, #260]	@ (8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002934:	f7ff ff5e 	bl	80027f4 <LL_ADC_IsEnabled>
 8002938:	4603      	mov	r3, r0
 800293a:	4323      	orrs	r3, r4
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	e012      	b.n	800296e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002948:	483c      	ldr	r0, [pc, #240]	@ (8002a3c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800294a:	f7ff ff53 	bl	80027f4 <LL_ADC_IsEnabled>
 800294e:	4604      	mov	r4, r0
 8002950:	483b      	ldr	r0, [pc, #236]	@ (8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002952:	f7ff ff4f 	bl	80027f4 <LL_ADC_IsEnabled>
 8002956:	4603      	mov	r3, r0
 8002958:	431c      	orrs	r4, r3
 800295a:	483c      	ldr	r0, [pc, #240]	@ (8002a4c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800295c:	f7ff ff4a 	bl	80027f4 <LL_ADC_IsEnabled>
 8002960:	4603      	mov	r3, r0
 8002962:	4323      	orrs	r3, r4
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d056      	beq.n	8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002972:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800297a:	f023 030f 	bic.w	r3, r3, #15
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	6811      	ldr	r1, [r2, #0]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	6892      	ldr	r2, [r2, #8]
 8002986:	430a      	orrs	r2, r1
 8002988:	431a      	orrs	r2, r3
 800298a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800298c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800298e:	e047      	b.n	8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002990:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002998:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800299a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029a4:	d004      	beq.n	80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a23      	ldr	r2, [pc, #140]	@ (8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d10f      	bne.n	80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80029b0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80029b4:	f7ff ff1e 	bl	80027f4 <LL_ADC_IsEnabled>
 80029b8:	4604      	mov	r4, r0
 80029ba:	481f      	ldr	r0, [pc, #124]	@ (8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029bc:	f7ff ff1a 	bl	80027f4 <LL_ADC_IsEnabled>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4323      	orrs	r3, r4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e012      	b.n	80029f6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80029d0:	481a      	ldr	r0, [pc, #104]	@ (8002a3c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029d2:	f7ff ff0f 	bl	80027f4 <LL_ADC_IsEnabled>
 80029d6:	4604      	mov	r4, r0
 80029d8:	4819      	ldr	r0, [pc, #100]	@ (8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029da:	f7ff ff0b 	bl	80027f4 <LL_ADC_IsEnabled>
 80029de:	4603      	mov	r3, r0
 80029e0:	431c      	orrs	r4, r3
 80029e2:	481a      	ldr	r0, [pc, #104]	@ (8002a4c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029e4:	f7ff ff06 	bl	80027f4 <LL_ADC_IsEnabled>
 80029e8:	4603      	mov	r3, r0
 80029ea:	4323      	orrs	r3, r4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d012      	beq.n	8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a02:	f023 030f 	bic.w	r3, r3, #15
 8002a06:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a08:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a0a:	e009      	b.n	8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002a1e:	e000      	b.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a2a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3784      	adds	r7, #132	@ 0x84
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd90      	pop	{r4, r7, pc}
 8002a36:	bf00      	nop
 8002a38:	50000100 	.word	0x50000100
 8002a3c:	50000400 	.word	0x50000400
 8002a40:	50000500 	.word	0x50000500
 8002a44:	50000300 	.word	0x50000300
 8002a48:	50000700 	.word	0x50000700
 8002a4c:	50000600 	.word	0x50000600

08002a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a60:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <__NVIC_SetPriorityGrouping+0x44>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a82:	4a04      	ldr	r2, [pc, #16]	@ (8002a94 <__NVIC_SetPriorityGrouping+0x44>)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	60d3      	str	r3, [r2, #12]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a9c:	4b04      	ldr	r3, [pc, #16]	@ (8002ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	f003 0307 	and.w	r3, r3, #7
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	db0b      	blt.n	8002ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	f003 021f 	and.w	r2, r3, #31
 8002acc:	4907      	ldr	r1, [pc, #28]	@ (8002aec <__NVIC_EnableIRQ+0x38>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000e100 	.word	0xe000e100

08002af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	6039      	str	r1, [r7, #0]
 8002afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	db0a      	blt.n	8002b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	490c      	ldr	r1, [pc, #48]	@ (8002b3c <__NVIC_SetPriority+0x4c>)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	0112      	lsls	r2, r2, #4
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	440b      	add	r3, r1
 8002b14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b18:	e00a      	b.n	8002b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	4908      	ldr	r1, [pc, #32]	@ (8002b40 <__NVIC_SetPriority+0x50>)
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	3b04      	subs	r3, #4
 8002b28:	0112      	lsls	r2, r2, #4
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	761a      	strb	r2, [r3, #24]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000e100 	.word	0xe000e100
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b089      	sub	sp, #36	@ 0x24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f1c3 0307 	rsb	r3, r3, #7
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	bf28      	it	cs
 8002b62:	2304      	movcs	r3, #4
 8002b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	2b06      	cmp	r3, #6
 8002b6c:	d902      	bls.n	8002b74 <NVIC_EncodePriority+0x30>
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3b03      	subs	r3, #3
 8002b72:	e000      	b.n	8002b76 <NVIC_EncodePriority+0x32>
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43da      	mvns	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	401a      	ands	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	43d9      	mvns	r1, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	4313      	orrs	r3, r2
         );
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3724      	adds	r7, #36	@ 0x24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff ff4c 	bl	8002a50 <__NVIC_SetPriorityGrouping>
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bce:	f7ff ff63 	bl	8002a98 <__NVIC_GetPriorityGrouping>
 8002bd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	6978      	ldr	r0, [r7, #20]
 8002bda:	f7ff ffb3 	bl	8002b44 <NVIC_EncodePriority>
 8002bde:	4602      	mov	r2, r0
 8002be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff82 	bl	8002af0 <__NVIC_SetPriority>
}
 8002bec:	bf00      	nop
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ff56 	bl	8002ab4 <__NVIC_EnableIRQ>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d005      	beq.n	8002c34 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
 8002c32:	e037      	b.n	8002ca4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 020e 	bic.w	r2, r2, #14
 8002c42:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c52:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c68:	f003 021f 	and.w	r2, r3, #31
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f202 	lsl.w	r2, r1, r2
 8002c76:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c80:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00c      	beq.n	8002ca4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c98:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ca2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d00d      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2204      	movs	r2, #4
 8002cde:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	e047      	b.n	8002d86 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 020e 	bic.w	r2, r2, #14
 8002d04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0201 	bic.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	f003 021f 	and.w	r2, r3, #31
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	2101      	movs	r1, #1
 8002d34:	fa01 f202 	lsl.w	r2, r1, r2
 8002d38:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d42:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00c      	beq.n	8002d66 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d64:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	4798      	blx	r3
    }
  }
  return status;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d9e:	e15a      	b.n	8003056 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	2101      	movs	r1, #1
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 814c 	beq.w	8003050 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d005      	beq.n	8002dd0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d130      	bne.n	8002e32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e06:	2201      	movs	r2, #1
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	f003 0201 	and.w	r2, r3, #1
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d017      	beq.n	8002e6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	2203      	movs	r2, #3
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4013      	ands	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d123      	bne.n	8002ec2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	08da      	lsrs	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3208      	adds	r2, #8
 8002e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	220f      	movs	r2, #15
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	08da      	lsrs	r2, r3, #3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3208      	adds	r2, #8
 8002ebc:	6939      	ldr	r1, [r7, #16]
 8002ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	2203      	movs	r2, #3
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 0203 	and.w	r2, r3, #3
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 80a6 	beq.w	8003050 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f04:	4b5b      	ldr	r3, [pc, #364]	@ (8003074 <HAL_GPIO_Init+0x2e4>)
 8002f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f08:	4a5a      	ldr	r2, [pc, #360]	@ (8003074 <HAL_GPIO_Init+0x2e4>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f10:	4b58      	ldr	r3, [pc, #352]	@ (8003074 <HAL_GPIO_Init+0x2e4>)
 8002f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f1c:	4a56      	ldr	r2, [pc, #344]	@ (8003078 <HAL_GPIO_Init+0x2e8>)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	089b      	lsrs	r3, r3, #2
 8002f22:	3302      	adds	r3, #2
 8002f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	220f      	movs	r2, #15
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f46:	d01f      	beq.n	8002f88 <HAL_GPIO_Init+0x1f8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a4c      	ldr	r2, [pc, #304]	@ (800307c <HAL_GPIO_Init+0x2ec>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d019      	beq.n	8002f84 <HAL_GPIO_Init+0x1f4>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a4b      	ldr	r2, [pc, #300]	@ (8003080 <HAL_GPIO_Init+0x2f0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d013      	beq.n	8002f80 <HAL_GPIO_Init+0x1f0>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a4a      	ldr	r2, [pc, #296]	@ (8003084 <HAL_GPIO_Init+0x2f4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00d      	beq.n	8002f7c <HAL_GPIO_Init+0x1ec>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a49      	ldr	r2, [pc, #292]	@ (8003088 <HAL_GPIO_Init+0x2f8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d007      	beq.n	8002f78 <HAL_GPIO_Init+0x1e8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a48      	ldr	r2, [pc, #288]	@ (800308c <HAL_GPIO_Init+0x2fc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d101      	bne.n	8002f74 <HAL_GPIO_Init+0x1e4>
 8002f70:	2305      	movs	r3, #5
 8002f72:	e00a      	b.n	8002f8a <HAL_GPIO_Init+0x1fa>
 8002f74:	2306      	movs	r3, #6
 8002f76:	e008      	b.n	8002f8a <HAL_GPIO_Init+0x1fa>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	e006      	b.n	8002f8a <HAL_GPIO_Init+0x1fa>
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e004      	b.n	8002f8a <HAL_GPIO_Init+0x1fa>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e002      	b.n	8002f8a <HAL_GPIO_Init+0x1fa>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <HAL_GPIO_Init+0x1fa>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	f002 0203 	and.w	r2, r2, #3
 8002f90:	0092      	lsls	r2, r2, #2
 8002f92:	4093      	lsls	r3, r2
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f9a:	4937      	ldr	r1, [pc, #220]	@ (8003078 <HAL_GPIO_Init+0x2e8>)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fa8:	4b39      	ldr	r3, [pc, #228]	@ (8003090 <HAL_GPIO_Init+0x300>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fcc:	4a30      	ldr	r2, [pc, #192]	@ (8003090 <HAL_GPIO_Init+0x300>)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003090 <HAL_GPIO_Init+0x300>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ff6:	4a26      	ldr	r2, [pc, #152]	@ (8003090 <HAL_GPIO_Init+0x300>)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002ffc:	4b24      	ldr	r3, [pc, #144]	@ (8003090 <HAL_GPIO_Init+0x300>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	43db      	mvns	r3, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003020:	4a1b      	ldr	r2, [pc, #108]	@ (8003090 <HAL_GPIO_Init+0x300>)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003026:	4b1a      	ldr	r3, [pc, #104]	@ (8003090 <HAL_GPIO_Init+0x300>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	43db      	mvns	r3, r3
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800304a:	4a11      	ldr	r2, [pc, #68]	@ (8003090 <HAL_GPIO_Init+0x300>)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	3301      	adds	r3, #1
 8003054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	f47f ae9d 	bne.w	8002da0 <HAL_GPIO_Init+0x10>
  }
}
 8003066:	bf00      	nop
 8003068:	bf00      	nop
 800306a:	371c      	adds	r7, #28
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40021000 	.word	0x40021000
 8003078:	40010000 	.word	0x40010000
 800307c:	48000400 	.word	0x48000400
 8003080:	48000800 	.word	0x48000800
 8003084:	48000c00 	.word	0x48000c00
 8003088:	48001000 	.word	0x48001000
 800308c:	48001400 	.word	0x48001400
 8003090:	40010400 	.word	0x40010400

08003094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	807b      	strh	r3, [r7, #2]
 80030a0:	4613      	mov	r3, r2
 80030a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030a4:	787b      	ldrb	r3, [r7, #1]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030aa:	887a      	ldrh	r2, [r7, #2]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030b0:	e002      	b.n	80030b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030ce:	4b08      	ldr	r3, [pc, #32]	@ (80030f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d006      	beq.n	80030e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030da:	4a05      	ldr	r2, [pc, #20]	@ (80030f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030e0:	88fb      	ldrh	r3, [r7, #6]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f806 	bl	80030f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40010400 	.word	0x40010400

080030f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d141      	bne.n	800319e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800311a:	4b4b      	ldr	r3, [pc, #300]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003126:	d131      	bne.n	800318c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003128:	4b47      	ldr	r3, [pc, #284]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800312e:	4a46      	ldr	r2, [pc, #280]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003134:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003138:	4b43      	ldr	r3, [pc, #268]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003140:	4a41      	ldr	r2, [pc, #260]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003142:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003146:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003148:	4b40      	ldr	r3, [pc, #256]	@ (800324c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2232      	movs	r2, #50	@ 0x32
 800314e:	fb02 f303 	mul.w	r3, r2, r3
 8003152:	4a3f      	ldr	r2, [pc, #252]	@ (8003250 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	0c9b      	lsrs	r3, r3, #18
 800315a:	3301      	adds	r3, #1
 800315c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800315e:	e002      	b.n	8003166 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3b01      	subs	r3, #1
 8003164:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003166:	4b38      	ldr	r3, [pc, #224]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003172:	d102      	bne.n	800317a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f2      	bne.n	8003160 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800317a:	4b33      	ldr	r3, [pc, #204]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003186:	d158      	bne.n	800323a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e057      	b.n	800323c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800318c:	4b2e      	ldr	r3, [pc, #184]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003192:	4a2d      	ldr	r2, [pc, #180]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003198:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800319c:	e04d      	b.n	800323a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031a4:	d141      	bne.n	800322a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031a6:	4b28      	ldr	r3, [pc, #160]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031b2:	d131      	bne.n	8003218 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031b4:	4b24      	ldr	r3, [pc, #144]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031ba:	4a23      	ldr	r2, [pc, #140]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031c4:	4b20      	ldr	r3, [pc, #128]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031d4:	4b1d      	ldr	r3, [pc, #116]	@ (800324c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2232      	movs	r2, #50	@ 0x32
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	4a1c      	ldr	r2, [pc, #112]	@ (8003250 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	0c9b      	lsrs	r3, r3, #18
 80031e6:	3301      	adds	r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031ea:	e002      	b.n	80031f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031f2:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fe:	d102      	bne.n	8003206 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f2      	bne.n	80031ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003206:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800320e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003212:	d112      	bne.n	800323a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e011      	b.n	800323c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003218:	4b0b      	ldr	r3, [pc, #44]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800321e:	4a0a      	ldr	r2, [pc, #40]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003224:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003228:	e007      	b.n	800323a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800322a:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003232:	4a05      	ldr	r2, [pc, #20]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003234:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003238:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	40007000 	.word	0x40007000
 800324c:	20000000 	.word	0x20000000
 8003250:	431bde83 	.word	0x431bde83

08003254 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800325e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003262:	6093      	str	r3, [r2, #8]
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40007000 	.word	0x40007000

08003274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e306      	b.n	8003894 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d075      	beq.n	800337e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003292:	4b97      	ldr	r3, [pc, #604]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800329c:	4b94      	ldr	r3, [pc, #592]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	2b0c      	cmp	r3, #12
 80032aa:	d102      	bne.n	80032b2 <HAL_RCC_OscConfig+0x3e>
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d002      	beq.n	80032b8 <HAL_RCC_OscConfig+0x44>
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d10b      	bne.n	80032d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b8:	4b8d      	ldr	r3, [pc, #564]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d05b      	beq.n	800337c <HAL_RCC_OscConfig+0x108>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d157      	bne.n	800337c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e2e1      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d8:	d106      	bne.n	80032e8 <HAL_RCC_OscConfig+0x74>
 80032da:	4b85      	ldr	r3, [pc, #532]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a84      	ldr	r2, [pc, #528]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e01d      	b.n	8003324 <HAL_RCC_OscConfig+0xb0>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0x98>
 80032f2:	4b7f      	ldr	r3, [pc, #508]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a7e      	ldr	r2, [pc, #504]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 80032f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	4b7c      	ldr	r3, [pc, #496]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a7b      	ldr	r2, [pc, #492]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 8003304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e00b      	b.n	8003324 <HAL_RCC_OscConfig+0xb0>
 800330c:	4b78      	ldr	r3, [pc, #480]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a77      	ldr	r2, [pc, #476]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 8003312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b75      	ldr	r3, [pc, #468]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a74      	ldr	r2, [pc, #464]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 800331e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d013      	beq.n	8003354 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe fa58 	bl	80017e0 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003334:	f7fe fa54 	bl	80017e0 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	@ 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e2a6      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003346:	4b6a      	ldr	r3, [pc, #424]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0xc0>
 8003352:	e014      	b.n	800337e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe fa44 	bl	80017e0 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe fa40 	bl	80017e0 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	@ 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e292      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800336e:	4b60      	ldr	r3, [pc, #384]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0xe8>
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d075      	beq.n	8003476 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800338a:	4b59      	ldr	r3, [pc, #356]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003394:	4b56      	ldr	r3, [pc, #344]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2b0c      	cmp	r3, #12
 80033a2:	d102      	bne.n	80033aa <HAL_RCC_OscConfig+0x136>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d002      	beq.n	80033b0 <HAL_RCC_OscConfig+0x13c>
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d11f      	bne.n	80033f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033b0:	4b4f      	ldr	r3, [pc, #316]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_RCC_OscConfig+0x154>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e265      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c8:	4b49      	ldr	r3, [pc, #292]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	4946      	ldr	r1, [pc, #280]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033dc:	4b45      	ldr	r3, [pc, #276]	@ (80034f4 <HAL_RCC_OscConfig+0x280>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fe f80f 	bl	8001404 <HAL_InitTick>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d043      	beq.n	8003474 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e251      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d023      	beq.n	8003440 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f8:	4b3d      	ldr	r3, [pc, #244]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a3c      	ldr	r2, [pc, #240]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 80033fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe f9ec 	bl	80017e0 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340c:	f7fe f9e8 	bl	80017e0 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e23a      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800341e:	4b34      	ldr	r3, [pc, #208]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342a:	4b31      	ldr	r3, [pc, #196]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	061b      	lsls	r3, r3, #24
 8003438:	492d      	ldr	r1, [pc, #180]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
 800343e:	e01a      	b.n	8003476 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003440:	4b2b      	ldr	r3, [pc, #172]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a2a      	ldr	r2, [pc, #168]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 8003446:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800344a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fe f9c8 	bl	80017e0 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003454:	f7fe f9c4 	bl	80017e0 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e216      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003466:	4b22      	ldr	r3, [pc, #136]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x1e0>
 8003472:	e000      	b.n	8003476 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003474:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d041      	beq.n	8003506 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d01c      	beq.n	80034c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348a:	4b19      	ldr	r3, [pc, #100]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 800348c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003490:	4a17      	ldr	r2, [pc, #92]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7fe f9a1 	bl	80017e0 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a2:	f7fe f99d 	bl	80017e0 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e1ef      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034b4:	4b0e      	ldr	r3, [pc, #56]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 80034b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0ef      	beq.n	80034a2 <HAL_RCC_OscConfig+0x22e>
 80034c2:	e020      	b.n	8003506 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c4:	4b0a      	ldr	r3, [pc, #40]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 80034c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ca:	4a09      	ldr	r2, [pc, #36]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d4:	f7fe f984 	bl	80017e0 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034da:	e00d      	b.n	80034f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034dc:	f7fe f980 	bl	80017e0 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d906      	bls.n	80034f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e1d2      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034f8:	4b8c      	ldr	r3, [pc, #560]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 80034fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1ea      	bne.n	80034dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80a6 	beq.w	8003660 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003514:	2300      	movs	r3, #0
 8003516:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003518:	4b84      	ldr	r3, [pc, #528]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 800351a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_RCC_OscConfig+0x2b4>
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x2b6>
 8003528:	2300      	movs	r3, #0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00d      	beq.n	800354a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	4b7f      	ldr	r3, [pc, #508]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 8003530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003532:	4a7e      	ldr	r2, [pc, #504]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 8003534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003538:	6593      	str	r3, [r2, #88]	@ 0x58
 800353a:	4b7c      	ldr	r3, [pc, #496]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 800353c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003546:	2301      	movs	r3, #1
 8003548:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800354a:	4b79      	ldr	r3, [pc, #484]	@ (8003730 <HAL_RCC_OscConfig+0x4bc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d118      	bne.n	8003588 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003556:	4b76      	ldr	r3, [pc, #472]	@ (8003730 <HAL_RCC_OscConfig+0x4bc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a75      	ldr	r2, [pc, #468]	@ (8003730 <HAL_RCC_OscConfig+0x4bc>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003562:	f7fe f93d 	bl	80017e0 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356a:	f7fe f939 	bl	80017e0 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e18b      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800357c:	4b6c      	ldr	r3, [pc, #432]	@ (8003730 <HAL_RCC_OscConfig+0x4bc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d108      	bne.n	80035a2 <HAL_RCC_OscConfig+0x32e>
 8003590:	4b66      	ldr	r3, [pc, #408]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003596:	4a65      	ldr	r2, [pc, #404]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035a0:	e024      	b.n	80035ec <HAL_RCC_OscConfig+0x378>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b05      	cmp	r3, #5
 80035a8:	d110      	bne.n	80035cc <HAL_RCC_OscConfig+0x358>
 80035aa:	4b60      	ldr	r3, [pc, #384]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b0:	4a5e      	ldr	r2, [pc, #376]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 80035b2:	f043 0304 	orr.w	r3, r3, #4
 80035b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035ba:	4b5c      	ldr	r3, [pc, #368]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c0:	4a5a      	ldr	r2, [pc, #360]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035ca:	e00f      	b.n	80035ec <HAL_RCC_OscConfig+0x378>
 80035cc:	4b57      	ldr	r3, [pc, #348]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d2:	4a56      	ldr	r2, [pc, #344]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035dc:	4b53      	ldr	r3, [pc, #332]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e2:	4a52      	ldr	r2, [pc, #328]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 80035e4:	f023 0304 	bic.w	r3, r3, #4
 80035e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d016      	beq.n	8003622 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f4:	f7fe f8f4 	bl	80017e0 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fc:	f7fe f8f0 	bl	80017e0 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e140      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003612:	4b46      	ldr	r3, [pc, #280]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0ed      	beq.n	80035fc <HAL_RCC_OscConfig+0x388>
 8003620:	e015      	b.n	800364e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003622:	f7fe f8dd 	bl	80017e0 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003628:	e00a      	b.n	8003640 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362a:	f7fe f8d9 	bl	80017e0 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003638:	4293      	cmp	r3, r2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e129      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003640:	4b3a      	ldr	r3, [pc, #232]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1ed      	bne.n	800362a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800364e:	7ffb      	ldrb	r3, [r7, #31]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d105      	bne.n	8003660 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003654:	4b35      	ldr	r3, [pc, #212]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 8003656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003658:	4a34      	ldr	r2, [pc, #208]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 800365a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800365e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d03c      	beq.n	80036e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01c      	beq.n	80036ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003674:	4b2d      	ldr	r3, [pc, #180]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 8003676:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800367a:	4a2c      	ldr	r2, [pc, #176]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003684:	f7fe f8ac 	bl	80017e0 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800368c:	f7fe f8a8 	bl	80017e0 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e0fa      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800369e:	4b23      	ldr	r3, [pc, #140]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 80036a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0ef      	beq.n	800368c <HAL_RCC_OscConfig+0x418>
 80036ac:	e01b      	b.n	80036e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036ae:	4b1f      	ldr	r3, [pc, #124]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 80036b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036b4:	4a1d      	ldr	r2, [pc, #116]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 80036b6:	f023 0301 	bic.w	r3, r3, #1
 80036ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036be:	f7fe f88f 	bl	80017e0 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036c6:	f7fe f88b 	bl	80017e0 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e0dd      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036d8:	4b14      	ldr	r3, [pc, #80]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 80036da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1ef      	bne.n	80036c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80d1 	beq.w	8003892 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036f0:	4b0e      	ldr	r3, [pc, #56]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	f000 808b 	beq.w	8003814 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d15e      	bne.n	80037c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	4b09      	ldr	r3, [pc, #36]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a08      	ldr	r2, [pc, #32]	@ (800372c <HAL_RCC_OscConfig+0x4b8>)
 800370c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fe f865 	bl	80017e0 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003718:	e00c      	b.n	8003734 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371a:	f7fe f861 	bl	80017e0 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d905      	bls.n	8003734 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e0b3      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
 800372c:	40021000 	.word	0x40021000
 8003730:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003734:	4b59      	ldr	r3, [pc, #356]	@ (800389c <HAL_RCC_OscConfig+0x628>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ec      	bne.n	800371a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003740:	4b56      	ldr	r3, [pc, #344]	@ (800389c <HAL_RCC_OscConfig+0x628>)
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	4b56      	ldr	r3, [pc, #344]	@ (80038a0 <HAL_RCC_OscConfig+0x62c>)
 8003746:	4013      	ands	r3, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6a11      	ldr	r1, [r2, #32]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003750:	3a01      	subs	r2, #1
 8003752:	0112      	lsls	r2, r2, #4
 8003754:	4311      	orrs	r1, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800375a:	0212      	lsls	r2, r2, #8
 800375c:	4311      	orrs	r1, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003762:	0852      	lsrs	r2, r2, #1
 8003764:	3a01      	subs	r2, #1
 8003766:	0552      	lsls	r2, r2, #21
 8003768:	4311      	orrs	r1, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800376e:	0852      	lsrs	r2, r2, #1
 8003770:	3a01      	subs	r2, #1
 8003772:	0652      	lsls	r2, r2, #25
 8003774:	4311      	orrs	r1, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800377a:	06d2      	lsls	r2, r2, #27
 800377c:	430a      	orrs	r2, r1
 800377e:	4947      	ldr	r1, [pc, #284]	@ (800389c <HAL_RCC_OscConfig+0x628>)
 8003780:	4313      	orrs	r3, r2
 8003782:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003784:	4b45      	ldr	r3, [pc, #276]	@ (800389c <HAL_RCC_OscConfig+0x628>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a44      	ldr	r2, [pc, #272]	@ (800389c <HAL_RCC_OscConfig+0x628>)
 800378a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800378e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003790:	4b42      	ldr	r3, [pc, #264]	@ (800389c <HAL_RCC_OscConfig+0x628>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a41      	ldr	r2, [pc, #260]	@ (800389c <HAL_RCC_OscConfig+0x628>)
 8003796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800379a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fe f820 	bl	80017e0 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fe f81c 	bl	80017e0 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e06e      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b6:	4b39      	ldr	r3, [pc, #228]	@ (800389c <HAL_RCC_OscConfig+0x628>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0x530>
 80037c2:	e066      	b.n	8003892 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c4:	4b35      	ldr	r3, [pc, #212]	@ (800389c <HAL_RCC_OscConfig+0x628>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a34      	ldr	r2, [pc, #208]	@ (800389c <HAL_RCC_OscConfig+0x628>)
 80037ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037ce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037d0:	4b32      	ldr	r3, [pc, #200]	@ (800389c <HAL_RCC_OscConfig+0x628>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4a31      	ldr	r2, [pc, #196]	@ (800389c <HAL_RCC_OscConfig+0x628>)
 80037d6:	f023 0303 	bic.w	r3, r3, #3
 80037da:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80037dc:	4b2f      	ldr	r3, [pc, #188]	@ (800389c <HAL_RCC_OscConfig+0x628>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4a2e      	ldr	r2, [pc, #184]	@ (800389c <HAL_RCC_OscConfig+0x628>)
 80037e2:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80037e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fd fff8 	bl	80017e0 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f4:	f7fd fff4 	bl	80017e0 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e046      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003806:	4b25      	ldr	r3, [pc, #148]	@ (800389c <HAL_RCC_OscConfig+0x628>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x580>
 8003812:	e03e      	b.n	8003892 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e039      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003820:	4b1e      	ldr	r3, [pc, #120]	@ (800389c <HAL_RCC_OscConfig+0x628>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f003 0203 	and.w	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	429a      	cmp	r2, r3
 8003832:	d12c      	bne.n	800388e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	3b01      	subs	r3, #1
 8003840:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d123      	bne.n	800388e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003850:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d11b      	bne.n	800388e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d113      	bne.n	800388e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	3b01      	subs	r3, #1
 8003874:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d109      	bne.n	800388e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	3b01      	subs	r3, #1
 8003888:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d001      	beq.n	8003892 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3720      	adds	r7, #32
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000
 80038a0:	019f800c 	.word	0x019f800c

080038a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e11e      	b.n	8003afa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038bc:	4b91      	ldr	r3, [pc, #580]	@ (8003b04 <HAL_RCC_ClockConfig+0x260>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d910      	bls.n	80038ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4b8e      	ldr	r3, [pc, #568]	@ (8003b04 <HAL_RCC_ClockConfig+0x260>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 020f 	bic.w	r2, r3, #15
 80038d2:	498c      	ldr	r1, [pc, #560]	@ (8003b04 <HAL_RCC_ClockConfig+0x260>)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038da:	4b8a      	ldr	r3, [pc, #552]	@ (8003b04 <HAL_RCC_ClockConfig+0x260>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e106      	b.n	8003afa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d073      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d129      	bne.n	8003954 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003900:	4b81      	ldr	r3, [pc, #516]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0f4      	b.n	8003afa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003910:	f000 f9d0 	bl	8003cb4 <RCC_GetSysClockFreqFromPLLSource>
 8003914:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4a7c      	ldr	r2, [pc, #496]	@ (8003b0c <HAL_RCC_ClockConfig+0x268>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d93f      	bls.n	800399e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800391e:	4b7a      	ldr	r3, [pc, #488]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d009      	beq.n	800393e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003932:	2b00      	cmp	r3, #0
 8003934:	d033      	beq.n	800399e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800393a:	2b00      	cmp	r3, #0
 800393c:	d12f      	bne.n	800399e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800393e:	4b72      	ldr	r3, [pc, #456]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003946:	4a70      	ldr	r2, [pc, #448]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 8003948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800394c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800394e:	2380      	movs	r3, #128	@ 0x80
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	e024      	b.n	800399e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d107      	bne.n	800396c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800395c:	4b6a      	ldr	r3, [pc, #424]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d109      	bne.n	800397c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0c6      	b.n	8003afa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800396c:	4b66      	ldr	r3, [pc, #408]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0be      	b.n	8003afa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800397c:	f000 f8ce 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8003980:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4a61      	ldr	r2, [pc, #388]	@ (8003b0c <HAL_RCC_ClockConfig+0x268>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d909      	bls.n	800399e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800398a:	4b5f      	ldr	r3, [pc, #380]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003992:	4a5d      	ldr	r2, [pc, #372]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 8003994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003998:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800399a:	2380      	movs	r3, #128	@ 0x80
 800399c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800399e:	4b5a      	ldr	r3, [pc, #360]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 0203 	bic.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4957      	ldr	r1, [pc, #348]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b0:	f7fd ff16 	bl	80017e0 <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b8:	f7fd ff12 	bl	80017e0 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e095      	b.n	8003afa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 020c 	and.w	r2, r3, #12
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	429a      	cmp	r2, r3
 80039de:	d1eb      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d023      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f8:	4b43      	ldr	r3, [pc, #268]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4a42      	ldr	r2, [pc, #264]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 80039fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a10:	4b3d      	ldr	r3, [pc, #244]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a18:	4a3b      	ldr	r2, [pc, #236]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 8003a1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a20:	4b39      	ldr	r3, [pc, #228]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4936      	ldr	r1, [pc, #216]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2b80      	cmp	r3, #128	@ 0x80
 8003a38:	d105      	bne.n	8003a46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a3a:	4b33      	ldr	r3, [pc, #204]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	4a32      	ldr	r2, [pc, #200]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 8003a40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a46:	4b2f      	ldr	r3, [pc, #188]	@ (8003b04 <HAL_RCC_ClockConfig+0x260>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d21d      	bcs.n	8003a90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a54:	4b2b      	ldr	r3, [pc, #172]	@ (8003b04 <HAL_RCC_ClockConfig+0x260>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f023 020f 	bic.w	r2, r3, #15
 8003a5c:	4929      	ldr	r1, [pc, #164]	@ (8003b04 <HAL_RCC_ClockConfig+0x260>)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a64:	f7fd febc 	bl	80017e0 <HAL_GetTick>
 8003a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a6c:	f7fd feb8 	bl	80017e0 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e03b      	b.n	8003afa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	4b20      	ldr	r3, [pc, #128]	@ (8003b04 <HAL_RCC_ClockConfig+0x260>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d1ed      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4917      	ldr	r1, [pc, #92]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d009      	beq.n	8003ace <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aba:	4b13      	ldr	r3, [pc, #76]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	490f      	ldr	r1, [pc, #60]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ace:	f000 f825 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b08 <HAL_RCC_ClockConfig+0x264>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	490c      	ldr	r1, [pc, #48]	@ (8003b10 <HAL_RCC_ClockConfig+0x26c>)
 8003ae0:	5ccb      	ldrb	r3, [r1, r3]
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aea:	4a0a      	ldr	r2, [pc, #40]	@ (8003b14 <HAL_RCC_ClockConfig+0x270>)
 8003aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003aee:	4b0a      	ldr	r3, [pc, #40]	@ (8003b18 <HAL_RCC_ClockConfig+0x274>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd fc86 	bl	8001404 <HAL_InitTick>
 8003af8:	4603      	mov	r3, r0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40022000 	.word	0x40022000
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	04c4b400 	.word	0x04c4b400
 8003b10:	08008d4c 	.word	0x08008d4c
 8003b14:	20000000 	.word	0x20000000
 8003b18:	20000004 	.word	0x20000004

08003b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b22:	4b2c      	ldr	r3, [pc, #176]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d102      	bne.n	8003b34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	e047      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b34:	4b27      	ldr	r3, [pc, #156]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 030c 	and.w	r3, r3, #12
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d102      	bne.n	8003b46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b40:	4b26      	ldr	r3, [pc, #152]	@ (8003bdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	e03e      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b46:	4b23      	ldr	r3, [pc, #140]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b0c      	cmp	r3, #12
 8003b50:	d136      	bne.n	8003bc0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b52:	4b20      	ldr	r3, [pc, #128]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	3301      	adds	r3, #1
 8003b68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d10c      	bne.n	8003b8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b70:	4a1a      	ldr	r2, [pc, #104]	@ (8003bdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	4a16      	ldr	r2, [pc, #88]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b7a:	68d2      	ldr	r2, [r2, #12]
 8003b7c:	0a12      	lsrs	r2, r2, #8
 8003b7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b82:	fb02 f303 	mul.w	r3, r2, r3
 8003b86:	617b      	str	r3, [r7, #20]
      break;
 8003b88:	e00c      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b8a:	4a13      	ldr	r2, [pc, #76]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b92:	4a10      	ldr	r2, [pc, #64]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b94:	68d2      	ldr	r2, [r2, #12]
 8003b96:	0a12      	lsrs	r2, r2, #8
 8003b98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ba0:	617b      	str	r3, [r7, #20]
      break;
 8003ba2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	0e5b      	lsrs	r3, r3, #25
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	e001      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bc4:	693b      	ldr	r3, [r7, #16]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	00f42400 	.word	0x00f42400
 8003bdc:	016e3600 	.word	0x016e3600

08003be0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be4:	4b03      	ldr	r3, [pc, #12]	@ (8003bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20000000 	.word	0x20000000

08003bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bfc:	f7ff fff0 	bl	8003be0 <HAL_RCC_GetHCLKFreq>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b06      	ldr	r3, [pc, #24]	@ (8003c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4904      	ldr	r1, [pc, #16]	@ (8003c20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c0e:	5ccb      	ldrb	r3, [r1, r3]
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	08008d5c 	.word	0x08008d5c

08003c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c28:	f7ff ffda 	bl	8003be0 <HAL_RCC_GetHCLKFreq>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	0adb      	lsrs	r3, r3, #11
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	4904      	ldr	r1, [pc, #16]	@ (8003c4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c3a:	5ccb      	ldrb	r3, [r1, r3]
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	08008d5c 	.word	0x08008d5c

08003c50 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	220f      	movs	r2, #15
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c60:	4b12      	ldr	r3, [pc, #72]	@ (8003cac <HAL_RCC_GetClockConfig+0x5c>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 0203 	and.w	r2, r3, #3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cac <HAL_RCC_GetClockConfig+0x5c>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c78:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <HAL_RCC_GetClockConfig+0x5c>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c84:	4b09      	ldr	r3, [pc, #36]	@ (8003cac <HAL_RCC_GetClockConfig+0x5c>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	08db      	lsrs	r3, r3, #3
 8003c8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003c92:	4b07      	ldr	r3, [pc, #28]	@ (8003cb0 <HAL_RCC_GetClockConfig+0x60>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 020f 	and.w	r2, r3, #15
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	601a      	str	r2, [r3, #0]
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40022000 	.word	0x40022000

08003cb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cba:	4b1e      	ldr	r3, [pc, #120]	@ (8003d34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	3301      	adds	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d10c      	bne.n	8003cf2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cd8:	4a17      	ldr	r2, [pc, #92]	@ (8003d38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce0:	4a14      	ldr	r2, [pc, #80]	@ (8003d34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ce2:	68d2      	ldr	r2, [r2, #12]
 8003ce4:	0a12      	lsrs	r2, r2, #8
 8003ce6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cea:	fb02 f303 	mul.w	r3, r2, r3
 8003cee:	617b      	str	r3, [r7, #20]
    break;
 8003cf0:	e00c      	b.n	8003d0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cf2:	4a12      	ldr	r2, [pc, #72]	@ (8003d3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8003d34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cfc:	68d2      	ldr	r2, [r2, #12]
 8003cfe:	0a12      	lsrs	r2, r2, #8
 8003d00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d04:	fb02 f303 	mul.w	r3, r2, r3
 8003d08:	617b      	str	r3, [r7, #20]
    break;
 8003d0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d0c:	4b09      	ldr	r3, [pc, #36]	@ (8003d34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	0e5b      	lsrs	r3, r3, #25
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	3301      	adds	r3, #1
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d26:	687b      	ldr	r3, [r7, #4]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	40021000 	.word	0x40021000
 8003d38:	016e3600 	.word	0x016e3600
 8003d3c:	00f42400 	.word	0x00f42400

08003d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d48:	2300      	movs	r3, #0
 8003d4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8098 	beq.w	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d62:	4b43      	ldr	r3, [pc, #268]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10d      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d6e:	4b40      	ldr	r3, [pc, #256]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d72:	4a3f      	ldr	r2, [pc, #252]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d86:	2301      	movs	r3, #1
 8003d88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a39      	ldr	r2, [pc, #228]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d96:	f7fd fd23 	bl	80017e0 <HAL_GetTick>
 8003d9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d9c:	e009      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9e:	f7fd fd1f 	bl	80017e0 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d902      	bls.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	74fb      	strb	r3, [r7, #19]
        break;
 8003db0:	e005      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003db2:	4b30      	ldr	r3, [pc, #192]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0ef      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003dbe:	7cfb      	ldrb	r3, [r7, #19]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d159      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01e      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d019      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003de0:	4b23      	ldr	r3, [pc, #140]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dec:	4b20      	ldr	r3, [pc, #128]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e02:	4a1b      	ldr	r2, [pc, #108]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e0c:	4a18      	ldr	r2, [pc, #96]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d016      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fd fcdf 	bl	80017e0 <HAL_GetTick>
 8003e22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e24:	e00b      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e26:	f7fd fcdb 	bl	80017e0 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d902      	bls.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	74fb      	strb	r3, [r7, #19]
            break;
 8003e3c:	e006      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ec      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e4c:	7cfb      	ldrb	r3, [r7, #19]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10b      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e52:	4b07      	ldr	r3, [pc, #28]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e60:	4903      	ldr	r1, [pc, #12]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e68:	e008      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e6a:	7cfb      	ldrb	r3, [r7, #19]
 8003e6c:	74bb      	strb	r3, [r7, #18]
 8003e6e:	e005      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e78:	7cfb      	ldrb	r3, [r7, #19]
 8003e7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e7c:	7c7b      	ldrb	r3, [r7, #17]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d105      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e82:	4ba7      	ldr	r3, [pc, #668]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e86:	4aa6      	ldr	r2, [pc, #664]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e8c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e9a:	4ba1      	ldr	r3, [pc, #644]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea0:	f023 0203 	bic.w	r2, r3, #3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	499d      	ldr	r1, [pc, #628]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ebc:	4b98      	ldr	r3, [pc, #608]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec2:	f023 020c 	bic.w	r2, r3, #12
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	4995      	ldr	r1, [pc, #596]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ede:	4b90      	ldr	r3, [pc, #576]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	498c      	ldr	r1, [pc, #560]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f00:	4b87      	ldr	r3, [pc, #540]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	4984      	ldr	r1, [pc, #528]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f22:	4b7f      	ldr	r3, [pc, #508]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	497b      	ldr	r1, [pc, #492]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f44:	4b76      	ldr	r3, [pc, #472]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	4973      	ldr	r1, [pc, #460]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f66:	4b6e      	ldr	r3, [pc, #440]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	496a      	ldr	r1, [pc, #424]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f88:	4b65      	ldr	r3, [pc, #404]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	4962      	ldr	r1, [pc, #392]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003faa:	4b5d      	ldr	r3, [pc, #372]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	4959      	ldr	r1, [pc, #356]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fcc:	4b54      	ldr	r3, [pc, #336]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fd2:	f023 0203 	bic.w	r2, r3, #3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fda:	4951      	ldr	r1, [pc, #324]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fee:	4b4c      	ldr	r3, [pc, #304]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffc:	4948      	ldr	r1, [pc, #288]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400c:	2b00      	cmp	r3, #0
 800400e:	d015      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004010:	4b43      	ldr	r3, [pc, #268]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004016:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401e:	4940      	ldr	r1, [pc, #256]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800402e:	d105      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004030:	4b3b      	ldr	r3, [pc, #236]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4a3a      	ldr	r2, [pc, #232]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800403a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004044:	2b00      	cmp	r3, #0
 8004046:	d015      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004048:	4b35      	ldr	r3, [pc, #212]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004056:	4932      	ldr	r1, [pc, #200]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004062:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004066:	d105      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004068:	4b2d      	ldr	r3, [pc, #180]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a2c      	ldr	r2, [pc, #176]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004072:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d015      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004080:	4b27      	ldr	r3, [pc, #156]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004086:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408e:	4924      	ldr	r1, [pc, #144]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800409e:	d105      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d015      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040b8:	4b19      	ldr	r3, [pc, #100]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c6:	4916      	ldr	r1, [pc, #88]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040d6:	d105      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d8:	4b11      	ldr	r3, [pc, #68]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4a10      	ldr	r2, [pc, #64]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d019      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	4908      	ldr	r1, [pc, #32]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800410e:	d109      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004110:	4b03      	ldr	r3, [pc, #12]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4a02      	ldr	r2, [pc, #8]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800411a:	60d3      	str	r3, [r2, #12]
 800411c:	e002      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d015      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004130:	4b29      	ldr	r3, [pc, #164]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004136:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	4926      	ldr	r1, [pc, #152]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800414e:	d105      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004150:	4b21      	ldr	r3, [pc, #132]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4a20      	ldr	r2, [pc, #128]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800415a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d015      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004168:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004176:	4918      	ldr	r1, [pc, #96]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004186:	d105      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004188:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4a12      	ldr	r2, [pc, #72]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800418e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004192:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d015      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80041a0:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ae:	490a      	ldr	r1, [pc, #40]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041be:	d105      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041c0:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4a04      	ldr	r2, [pc, #16]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80041cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000

080041dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e049      	b.n	8004282 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f841 	bl	800428a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	4619      	mov	r1, r3
 800421a:	4610      	mov	r0, r2
 800421c:	f000 fbca 	bl	80049b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d001      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e054      	b.n	8004362 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a26      	ldr	r2, [pc, #152]	@ (8004370 <HAL_TIM_Base_Start_IT+0xd0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d022      	beq.n	8004320 <HAL_TIM_Base_Start_IT+0x80>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042e2:	d01d      	beq.n	8004320 <HAL_TIM_Base_Start_IT+0x80>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a22      	ldr	r2, [pc, #136]	@ (8004374 <HAL_TIM_Base_Start_IT+0xd4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d018      	beq.n	8004320 <HAL_TIM_Base_Start_IT+0x80>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a21      	ldr	r2, [pc, #132]	@ (8004378 <HAL_TIM_Base_Start_IT+0xd8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d013      	beq.n	8004320 <HAL_TIM_Base_Start_IT+0x80>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1f      	ldr	r2, [pc, #124]	@ (800437c <HAL_TIM_Base_Start_IT+0xdc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00e      	beq.n	8004320 <HAL_TIM_Base_Start_IT+0x80>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1e      	ldr	r2, [pc, #120]	@ (8004380 <HAL_TIM_Base_Start_IT+0xe0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d009      	beq.n	8004320 <HAL_TIM_Base_Start_IT+0x80>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1c      	ldr	r2, [pc, #112]	@ (8004384 <HAL_TIM_Base_Start_IT+0xe4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <HAL_TIM_Base_Start_IT+0x80>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1b      	ldr	r2, [pc, #108]	@ (8004388 <HAL_TIM_Base_Start_IT+0xe8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d115      	bne.n	800434c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	4b19      	ldr	r3, [pc, #100]	@ (800438c <HAL_TIM_Base_Start_IT+0xec>)
 8004328:	4013      	ands	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b06      	cmp	r3, #6
 8004330:	d015      	beq.n	800435e <HAL_TIM_Base_Start_IT+0xbe>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004338:	d011      	beq.n	800435e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434a:	e008      	b.n	800435e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e000      	b.n	8004360 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800
 800437c:	40000c00 	.word	0x40000c00
 8004380:	40013400 	.word	0x40013400
 8004384:	40014000 	.word	0x40014000
 8004388:	40015000 	.word	0x40015000
 800438c:	00010007 	.word	0x00010007

08004390 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e049      	b.n	8004436 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fc fe92 	bl	80010e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3304      	adds	r3, #4
 80043cc:	4619      	mov	r1, r3
 80043ce:	4610      	mov	r0, r2
 80043d0:	f000 faf0 	bl	80049b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b082      	sub	sp, #8
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b02      	cmp	r3, #2
 8004452:	d122      	bne.n	800449a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b02      	cmp	r3, #2
 8004460:	d11b      	bne.n	800449a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f06f 0202 	mvn.w	r2, #2
 800446a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fa79 	bl	8004978 <HAL_TIM_IC_CaptureCallback>
 8004486:	e005      	b.n	8004494 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fa6b 	bl	8004964 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fa7c 	bl	800498c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d122      	bne.n	80044ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d11b      	bne.n	80044ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f06f 0204 	mvn.w	r2, #4
 80044be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fa4f 	bl	8004978 <HAL_TIM_IC_CaptureCallback>
 80044da:	e005      	b.n	80044e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fa41 	bl	8004964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fa52 	bl	800498c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d122      	bne.n	8004542 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b08      	cmp	r3, #8
 8004508:	d11b      	bne.n	8004542 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f06f 0208 	mvn.w	r2, #8
 8004512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2204      	movs	r2, #4
 8004518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fa25 	bl	8004978 <HAL_TIM_IC_CaptureCallback>
 800452e:	e005      	b.n	800453c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fa17 	bl	8004964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa28 	bl	800498c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f003 0310 	and.w	r3, r3, #16
 800454c:	2b10      	cmp	r3, #16
 800454e:	d122      	bne.n	8004596 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f003 0310 	and.w	r3, r3, #16
 800455a:	2b10      	cmp	r3, #16
 800455c:	d11b      	bne.n	8004596 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f06f 0210 	mvn.w	r2, #16
 8004566:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2208      	movs	r2, #8
 800456c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f9fb 	bl	8004978 <HAL_TIM_IC_CaptureCallback>
 8004582:	e005      	b.n	8004590 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f9ed 	bl	8004964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f9fe 	bl	800498c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d10e      	bne.n	80045c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d107      	bne.n	80045c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f06f 0201 	mvn.w	r2, #1
 80045ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fc fc59 	bl	8000e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045cc:	2b80      	cmp	r3, #128	@ 0x80
 80045ce:	d10e      	bne.n	80045ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045da:	2b80      	cmp	r3, #128	@ 0x80
 80045dc:	d107      	bne.n	80045ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f001 f82b 	bl	8005644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045fc:	d10e      	bne.n	800461c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004608:	2b80      	cmp	r3, #128	@ 0x80
 800460a:	d107      	bne.n	800461c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f001 f81e 	bl	8005658 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004626:	2b40      	cmp	r3, #64	@ 0x40
 8004628:	d10e      	bne.n	8004648 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004634:	2b40      	cmp	r3, #64	@ 0x40
 8004636:	d107      	bne.n	8004648 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f9ac 	bl	80049a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b20      	cmp	r3, #32
 8004654:	d10e      	bne.n	8004674 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b20      	cmp	r3, #32
 8004662:	d107      	bne.n	8004674 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0220 	mvn.w	r2, #32
 800466c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 ffde 	bl	8005630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800467e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004682:	d10f      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800468e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004692:	d107      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800469c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 ffe4 	bl	800566c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046b2:	d10f      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046c2:	d107      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80046cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 ffd6 	bl	8005680 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046e2:	d10f      	bne.n	8004704 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046f2:	d107      	bne.n	8004704 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80046fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 ffc8 	bl	8005694 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800470e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004712:	d10f      	bne.n	8004734 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800471e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004722:	d107      	bne.n	8004734 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800472c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 ffba 	bl	80056a8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004734:	bf00      	nop
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004756:	2302      	movs	r3, #2
 8004758:	e0ff      	b.n	800495a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b14      	cmp	r3, #20
 8004766:	f200 80f0 	bhi.w	800494a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800476a:	a201      	add	r2, pc, #4	@ (adr r2, 8004770 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800476c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004770:	080047c5 	.word	0x080047c5
 8004774:	0800494b 	.word	0x0800494b
 8004778:	0800494b 	.word	0x0800494b
 800477c:	0800494b 	.word	0x0800494b
 8004780:	08004805 	.word	0x08004805
 8004784:	0800494b 	.word	0x0800494b
 8004788:	0800494b 	.word	0x0800494b
 800478c:	0800494b 	.word	0x0800494b
 8004790:	08004847 	.word	0x08004847
 8004794:	0800494b 	.word	0x0800494b
 8004798:	0800494b 	.word	0x0800494b
 800479c:	0800494b 	.word	0x0800494b
 80047a0:	08004887 	.word	0x08004887
 80047a4:	0800494b 	.word	0x0800494b
 80047a8:	0800494b 	.word	0x0800494b
 80047ac:	0800494b 	.word	0x0800494b
 80047b0:	080048c9 	.word	0x080048c9
 80047b4:	0800494b 	.word	0x0800494b
 80047b8:	0800494b 	.word	0x0800494b
 80047bc:	0800494b 	.word	0x0800494b
 80047c0:	08004909 	.word	0x08004909
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f99a 	bl	8004b04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0208 	orr.w	r2, r2, #8
 80047de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0204 	bic.w	r2, r2, #4
 80047ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6999      	ldr	r1, [r3, #24]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	619a      	str	r2, [r3, #24]
      break;
 8004802:	e0a5      	b.n	8004950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fa14 	bl	8004c38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800481e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800482e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6999      	ldr	r1, [r3, #24]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	021a      	lsls	r2, r3, #8
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	619a      	str	r2, [r3, #24]
      break;
 8004844:	e084      	b.n	8004950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fa87 	bl	8004d60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0208 	orr.w	r2, r2, #8
 8004860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0204 	bic.w	r2, r2, #4
 8004870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69d9      	ldr	r1, [r3, #28]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	61da      	str	r2, [r3, #28]
      break;
 8004884:	e064      	b.n	8004950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	4618      	mov	r0, r3
 800488e:	f000 faf9 	bl	8004e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69d9      	ldr	r1, [r3, #28]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	021a      	lsls	r2, r3, #8
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	61da      	str	r2, [r3, #28]
      break;
 80048c6:	e043      	b.n	8004950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fb6c 	bl	8004fac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0208 	orr.w	r2, r2, #8
 80048e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0204 	bic.w	r2, r2, #4
 80048f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004906:	e023      	b.n	8004950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68b9      	ldr	r1, [r7, #8]
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fbb6 	bl	8005080 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004922:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004932:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	021a      	lsls	r2, r3, #8
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004948:	e002      	b.n	8004950 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
      break;
 800494e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004958:	7dfb      	ldrb	r3, [r7, #23]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop

08004964 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a46      	ldr	r2, [pc, #280]	@ (8004ae0 <TIM_Base_SetConfig+0x12c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d017      	beq.n	80049fc <TIM_Base_SetConfig+0x48>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d2:	d013      	beq.n	80049fc <TIM_Base_SetConfig+0x48>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a43      	ldr	r2, [pc, #268]	@ (8004ae4 <TIM_Base_SetConfig+0x130>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00f      	beq.n	80049fc <TIM_Base_SetConfig+0x48>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a42      	ldr	r2, [pc, #264]	@ (8004ae8 <TIM_Base_SetConfig+0x134>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d00b      	beq.n	80049fc <TIM_Base_SetConfig+0x48>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a41      	ldr	r2, [pc, #260]	@ (8004aec <TIM_Base_SetConfig+0x138>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d007      	beq.n	80049fc <TIM_Base_SetConfig+0x48>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a40      	ldr	r2, [pc, #256]	@ (8004af0 <TIM_Base_SetConfig+0x13c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d003      	beq.n	80049fc <TIM_Base_SetConfig+0x48>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a3f      	ldr	r2, [pc, #252]	@ (8004af4 <TIM_Base_SetConfig+0x140>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d108      	bne.n	8004a0e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a33      	ldr	r2, [pc, #204]	@ (8004ae0 <TIM_Base_SetConfig+0x12c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d023      	beq.n	8004a5e <TIM_Base_SetConfig+0xaa>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a1c:	d01f      	beq.n	8004a5e <TIM_Base_SetConfig+0xaa>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a30      	ldr	r2, [pc, #192]	@ (8004ae4 <TIM_Base_SetConfig+0x130>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d01b      	beq.n	8004a5e <TIM_Base_SetConfig+0xaa>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a2f      	ldr	r2, [pc, #188]	@ (8004ae8 <TIM_Base_SetConfig+0x134>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d017      	beq.n	8004a5e <TIM_Base_SetConfig+0xaa>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a2e      	ldr	r2, [pc, #184]	@ (8004aec <TIM_Base_SetConfig+0x138>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d013      	beq.n	8004a5e <TIM_Base_SetConfig+0xaa>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a2d      	ldr	r2, [pc, #180]	@ (8004af0 <TIM_Base_SetConfig+0x13c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00f      	beq.n	8004a5e <TIM_Base_SetConfig+0xaa>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a2d      	ldr	r2, [pc, #180]	@ (8004af8 <TIM_Base_SetConfig+0x144>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00b      	beq.n	8004a5e <TIM_Base_SetConfig+0xaa>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a2c      	ldr	r2, [pc, #176]	@ (8004afc <TIM_Base_SetConfig+0x148>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d007      	beq.n	8004a5e <TIM_Base_SetConfig+0xaa>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a2b      	ldr	r2, [pc, #172]	@ (8004b00 <TIM_Base_SetConfig+0x14c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d003      	beq.n	8004a5e <TIM_Base_SetConfig+0xaa>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a26      	ldr	r2, [pc, #152]	@ (8004af4 <TIM_Base_SetConfig+0x140>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d108      	bne.n	8004a70 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a12      	ldr	r2, [pc, #72]	@ (8004ae0 <TIM_Base_SetConfig+0x12c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d013      	beq.n	8004ac4 <TIM_Base_SetConfig+0x110>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a14      	ldr	r2, [pc, #80]	@ (8004af0 <TIM_Base_SetConfig+0x13c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00f      	beq.n	8004ac4 <TIM_Base_SetConfig+0x110>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a14      	ldr	r2, [pc, #80]	@ (8004af8 <TIM_Base_SetConfig+0x144>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00b      	beq.n	8004ac4 <TIM_Base_SetConfig+0x110>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a13      	ldr	r2, [pc, #76]	@ (8004afc <TIM_Base_SetConfig+0x148>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d007      	beq.n	8004ac4 <TIM_Base_SetConfig+0x110>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a12      	ldr	r2, [pc, #72]	@ (8004b00 <TIM_Base_SetConfig+0x14c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_Base_SetConfig+0x110>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a0d      	ldr	r2, [pc, #52]	@ (8004af4 <TIM_Base_SetConfig+0x140>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d103      	bne.n	8004acc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	615a      	str	r2, [r3, #20]
}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40012c00 	.word	0x40012c00
 8004ae4:	40000400 	.word	0x40000400
 8004ae8:	40000800 	.word	0x40000800
 8004aec:	40000c00 	.word	0x40000c00
 8004af0:	40013400 	.word	0x40013400
 8004af4:	40015000 	.word	0x40015000
 8004af8:	40014000 	.word	0x40014000
 8004afc:	40014400 	.word	0x40014400
 8004b00:	40014800 	.word	0x40014800

08004b04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f023 0201 	bic.w	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0303 	bic.w	r3, r3, #3
 8004b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f023 0302 	bic.w	r3, r3, #2
 8004b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a30      	ldr	r2, [pc, #192]	@ (8004c20 <TIM_OC1_SetConfig+0x11c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d013      	beq.n	8004b8c <TIM_OC1_SetConfig+0x88>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a2f      	ldr	r2, [pc, #188]	@ (8004c24 <TIM_OC1_SetConfig+0x120>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00f      	beq.n	8004b8c <TIM_OC1_SetConfig+0x88>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a2e      	ldr	r2, [pc, #184]	@ (8004c28 <TIM_OC1_SetConfig+0x124>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00b      	beq.n	8004b8c <TIM_OC1_SetConfig+0x88>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a2d      	ldr	r2, [pc, #180]	@ (8004c2c <TIM_OC1_SetConfig+0x128>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d007      	beq.n	8004b8c <TIM_OC1_SetConfig+0x88>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004c30 <TIM_OC1_SetConfig+0x12c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d003      	beq.n	8004b8c <TIM_OC1_SetConfig+0x88>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a2b      	ldr	r2, [pc, #172]	@ (8004c34 <TIM_OC1_SetConfig+0x130>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d10c      	bne.n	8004ba6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f023 0308 	bic.w	r3, r3, #8
 8004b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f023 0304 	bic.w	r3, r3, #4
 8004ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c20 <TIM_OC1_SetConfig+0x11c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d013      	beq.n	8004bd6 <TIM_OC1_SetConfig+0xd2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c24 <TIM_OC1_SetConfig+0x120>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00f      	beq.n	8004bd6 <TIM_OC1_SetConfig+0xd2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c28 <TIM_OC1_SetConfig+0x124>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00b      	beq.n	8004bd6 <TIM_OC1_SetConfig+0xd2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8004c2c <TIM_OC1_SetConfig+0x128>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d007      	beq.n	8004bd6 <TIM_OC1_SetConfig+0xd2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a19      	ldr	r2, [pc, #100]	@ (8004c30 <TIM_OC1_SetConfig+0x12c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d003      	beq.n	8004bd6 <TIM_OC1_SetConfig+0xd2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a18      	ldr	r2, [pc, #96]	@ (8004c34 <TIM_OC1_SetConfig+0x130>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d111      	bne.n	8004bfa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	621a      	str	r2, [r3, #32]
}
 8004c14:	bf00      	nop
 8004c16:	371c      	adds	r7, #28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	40012c00 	.word	0x40012c00
 8004c24:	40013400 	.word	0x40013400
 8004c28:	40014000 	.word	0x40014000
 8004c2c:	40014400 	.word	0x40014400
 8004c30:	40014800 	.word	0x40014800
 8004c34:	40015000 	.word	0x40015000

08004c38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f023 0210 	bic.w	r2, r3, #16
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	021b      	lsls	r3, r3, #8
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f023 0320 	bic.w	r3, r3, #32
 8004c86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a2c      	ldr	r2, [pc, #176]	@ (8004d48 <TIM_OC2_SetConfig+0x110>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d007      	beq.n	8004cac <TIM_OC2_SetConfig+0x74>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a2b      	ldr	r2, [pc, #172]	@ (8004d4c <TIM_OC2_SetConfig+0x114>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d003      	beq.n	8004cac <TIM_OC2_SetConfig+0x74>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8004d50 <TIM_OC2_SetConfig+0x118>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d10d      	bne.n	8004cc8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a1f      	ldr	r2, [pc, #124]	@ (8004d48 <TIM_OC2_SetConfig+0x110>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d013      	beq.n	8004cf8 <TIM_OC2_SetConfig+0xc0>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d4c <TIM_OC2_SetConfig+0x114>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00f      	beq.n	8004cf8 <TIM_OC2_SetConfig+0xc0>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a1e      	ldr	r2, [pc, #120]	@ (8004d54 <TIM_OC2_SetConfig+0x11c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00b      	beq.n	8004cf8 <TIM_OC2_SetConfig+0xc0>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d58 <TIM_OC2_SetConfig+0x120>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d007      	beq.n	8004cf8 <TIM_OC2_SetConfig+0xc0>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a1c      	ldr	r2, [pc, #112]	@ (8004d5c <TIM_OC2_SetConfig+0x124>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d003      	beq.n	8004cf8 <TIM_OC2_SetConfig+0xc0>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a17      	ldr	r2, [pc, #92]	@ (8004d50 <TIM_OC2_SetConfig+0x118>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d113      	bne.n	8004d20 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40012c00 	.word	0x40012c00
 8004d4c:	40013400 	.word	0x40013400
 8004d50:	40015000 	.word	0x40015000
 8004d54:	40014000 	.word	0x40014000
 8004d58:	40014400 	.word	0x40014400
 8004d5c:	40014800 	.word	0x40014800

08004d60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0303 	bic.w	r3, r3, #3
 8004d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8004e6c <TIM_OC3_SetConfig+0x10c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d007      	beq.n	8004dd2 <TIM_OC3_SetConfig+0x72>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8004e70 <TIM_OC3_SetConfig+0x110>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d003      	beq.n	8004dd2 <TIM_OC3_SetConfig+0x72>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a29      	ldr	r2, [pc, #164]	@ (8004e74 <TIM_OC3_SetConfig+0x114>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d10d      	bne.n	8004dee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	021b      	lsls	r3, r3, #8
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a1e      	ldr	r2, [pc, #120]	@ (8004e6c <TIM_OC3_SetConfig+0x10c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <TIM_OC3_SetConfig+0xbe>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e70 <TIM_OC3_SetConfig+0x110>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00f      	beq.n	8004e1e <TIM_OC3_SetConfig+0xbe>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a1d      	ldr	r2, [pc, #116]	@ (8004e78 <TIM_OC3_SetConfig+0x118>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00b      	beq.n	8004e1e <TIM_OC3_SetConfig+0xbe>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a1c      	ldr	r2, [pc, #112]	@ (8004e7c <TIM_OC3_SetConfig+0x11c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d007      	beq.n	8004e1e <TIM_OC3_SetConfig+0xbe>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a1b      	ldr	r2, [pc, #108]	@ (8004e80 <TIM_OC3_SetConfig+0x120>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d003      	beq.n	8004e1e <TIM_OC3_SetConfig+0xbe>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a16      	ldr	r2, [pc, #88]	@ (8004e74 <TIM_OC3_SetConfig+0x114>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d113      	bne.n	8004e46 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	621a      	str	r2, [r3, #32]
}
 8004e60:	bf00      	nop
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	40012c00 	.word	0x40012c00
 8004e70:	40013400 	.word	0x40013400
 8004e74:	40015000 	.word	0x40015000
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800

08004e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ed2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	031b      	lsls	r3, r3, #12
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8004f94 <TIM_OC4_SetConfig+0x110>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d007      	beq.n	8004ef8 <TIM_OC4_SetConfig+0x74>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a2b      	ldr	r2, [pc, #172]	@ (8004f98 <TIM_OC4_SetConfig+0x114>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d003      	beq.n	8004ef8 <TIM_OC4_SetConfig+0x74>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8004f9c <TIM_OC4_SetConfig+0x118>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d10d      	bne.n	8004f14 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	031b      	lsls	r3, r3, #12
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a1f      	ldr	r2, [pc, #124]	@ (8004f94 <TIM_OC4_SetConfig+0x110>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d013      	beq.n	8004f44 <TIM_OC4_SetConfig+0xc0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f98 <TIM_OC4_SetConfig+0x114>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00f      	beq.n	8004f44 <TIM_OC4_SetConfig+0xc0>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa0 <TIM_OC4_SetConfig+0x11c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00b      	beq.n	8004f44 <TIM_OC4_SetConfig+0xc0>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa4 <TIM_OC4_SetConfig+0x120>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d007      	beq.n	8004f44 <TIM_OC4_SetConfig+0xc0>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa8 <TIM_OC4_SetConfig+0x124>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d003      	beq.n	8004f44 <TIM_OC4_SetConfig+0xc0>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a17      	ldr	r2, [pc, #92]	@ (8004f9c <TIM_OC4_SetConfig+0x118>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d113      	bne.n	8004f6c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f4a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f52:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	019b      	lsls	r3, r3, #6
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	019b      	lsls	r3, r3, #6
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	621a      	str	r2, [r3, #32]
}
 8004f86:	bf00      	nop
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40012c00 	.word	0x40012c00
 8004f98:	40013400 	.word	0x40013400
 8004f9c:	40015000 	.word	0x40015000
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800

08004fac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ff0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	041b      	lsls	r3, r3, #16
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a19      	ldr	r2, [pc, #100]	@ (8005068 <TIM_OC5_SetConfig+0xbc>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d013      	beq.n	800502e <TIM_OC5_SetConfig+0x82>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a18      	ldr	r2, [pc, #96]	@ (800506c <TIM_OC5_SetConfig+0xc0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00f      	beq.n	800502e <TIM_OC5_SetConfig+0x82>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a17      	ldr	r2, [pc, #92]	@ (8005070 <TIM_OC5_SetConfig+0xc4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00b      	beq.n	800502e <TIM_OC5_SetConfig+0x82>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a16      	ldr	r2, [pc, #88]	@ (8005074 <TIM_OC5_SetConfig+0xc8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d007      	beq.n	800502e <TIM_OC5_SetConfig+0x82>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a15      	ldr	r2, [pc, #84]	@ (8005078 <TIM_OC5_SetConfig+0xcc>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d003      	beq.n	800502e <TIM_OC5_SetConfig+0x82>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a14      	ldr	r2, [pc, #80]	@ (800507c <TIM_OC5_SetConfig+0xd0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d109      	bne.n	8005042 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005034:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	621a      	str	r2, [r3, #32]
}
 800505c:	bf00      	nop
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	40012c00 	.word	0x40012c00
 800506c:	40013400 	.word	0x40013400
 8005070:	40014000 	.word	0x40014000
 8005074:	40014400 	.word	0x40014400
 8005078:	40014800 	.word	0x40014800
 800507c:	40015000 	.word	0x40015000

08005080 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	021b      	lsls	r3, r3, #8
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	051b      	lsls	r3, r3, #20
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005140 <TIM_OC6_SetConfig+0xc0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d013      	beq.n	8005104 <TIM_OC6_SetConfig+0x84>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a19      	ldr	r2, [pc, #100]	@ (8005144 <TIM_OC6_SetConfig+0xc4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00f      	beq.n	8005104 <TIM_OC6_SetConfig+0x84>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a18      	ldr	r2, [pc, #96]	@ (8005148 <TIM_OC6_SetConfig+0xc8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00b      	beq.n	8005104 <TIM_OC6_SetConfig+0x84>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a17      	ldr	r2, [pc, #92]	@ (800514c <TIM_OC6_SetConfig+0xcc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d007      	beq.n	8005104 <TIM_OC6_SetConfig+0x84>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a16      	ldr	r2, [pc, #88]	@ (8005150 <TIM_OC6_SetConfig+0xd0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_OC6_SetConfig+0x84>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a15      	ldr	r2, [pc, #84]	@ (8005154 <TIM_OC6_SetConfig+0xd4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d109      	bne.n	8005118 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800510a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	029b      	lsls	r3, r3, #10
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	621a      	str	r2, [r3, #32]
}
 8005132:	bf00      	nop
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40012c00 	.word	0x40012c00
 8005144:	40013400 	.word	0x40013400
 8005148:	40014000 	.word	0x40014000
 800514c:	40014400 	.word	0x40014400
 8005150:	40014800 	.word	0x40014800
 8005154:	40015000 	.word	0x40015000

08005158 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f023 0201 	bic.w	r2, r3, #1
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4a28      	ldr	r2, [pc, #160]	@ (8005224 <TIM_TI1_SetConfig+0xcc>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d01b      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800518c:	d017      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a25      	ldr	r2, [pc, #148]	@ (8005228 <TIM_TI1_SetConfig+0xd0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4a24      	ldr	r2, [pc, #144]	@ (800522c <TIM_TI1_SetConfig+0xd4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00f      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a23      	ldr	r2, [pc, #140]	@ (8005230 <TIM_TI1_SetConfig+0xd8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00b      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4a22      	ldr	r2, [pc, #136]	@ (8005234 <TIM_TI1_SetConfig+0xdc>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d007      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4a21      	ldr	r2, [pc, #132]	@ (8005238 <TIM_TI1_SetConfig+0xe0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d003      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4a20      	ldr	r2, [pc, #128]	@ (800523c <TIM_TI1_SetConfig+0xe4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d101      	bne.n	80051c2 <TIM_TI1_SetConfig+0x6a>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <TIM_TI1_SetConfig+0x6c>
 80051c2:	2300      	movs	r3, #0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0303 	bic.w	r3, r3, #3
 80051ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	e003      	b.n	80051e2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f023 030a 	bic.w	r3, r3, #10
 80051fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f003 030a 	and.w	r3, r3, #10
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40000c00 	.word	0x40000c00
 8005234:	40013400 	.word	0x40013400
 8005238:	40014000 	.word	0x40014000
 800523c:	40015000 	.word	0x40015000

08005240 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	@ 0x28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e0a0      	b.n	8005396 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7fb ff59 	bl	8001120 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2202      	movs	r2, #2
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3304      	adds	r3, #4
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f7ff fb97 	bl	80049b4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	6819      	ldr	r1, [r3, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2203      	movs	r2, #3
 8005294:	f7ff ff60 	bl	8005158 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 020c 	bic.w	r2, r2, #12
 80052a6:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6999      	ldr	r1, [r3, #24]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80052c8:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80052d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052dc:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052ec:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052fc:	f023 0307 	bic.w	r3, r3, #7
 8005300:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f042 0204 	orr.w	r2, r2, #4
 8005310:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005316:	2300      	movs	r3, #0
 8005318:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800531a:	2370      	movs	r3, #112	@ 0x70
 800531c:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800531e:	2300      	movs	r3, #0
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005322:	2300      	movs	r3, #0
 8005324:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005326:	2300      	movs	r3, #0
 8005328:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f107 020c 	add.w	r2, r7, #12
 8005338:	4611      	mov	r1, r2
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff fc7c 	bl	8004c38 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6812      	ldr	r2, [r2, #0]
 800534a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800534e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005352:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8005362:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3728      	adds	r7, #40	@ 0x28
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e074      	b.n	80054a2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a34      	ldr	r2, [pc, #208]	@ (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d009      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a33      	ldr	r2, [pc, #204]	@ (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d004      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a31      	ldr	r2, [pc, #196]	@ (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d108      	bne.n	8005408 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80053fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800540e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a21      	ldr	r2, [pc, #132]	@ (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d022      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005438:	d01d      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1f      	ldr	r2, [pc, #124]	@ (80054bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d018      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1d      	ldr	r2, [pc, #116]	@ (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d013      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1c      	ldr	r2, [pc, #112]	@ (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00e      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a15      	ldr	r2, [pc, #84]	@ (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d009      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a18      	ldr	r2, [pc, #96]	@ (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d004      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a11      	ldr	r2, [pc, #68]	@ (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d10c      	bne.n	8005490 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800547c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	4313      	orrs	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40013400 	.word	0x40013400
 80054b8:	40015000 	.word	0x40015000
 80054bc:	40000400 	.word	0x40000400
 80054c0:	40000800 	.word	0x40000800
 80054c4:	40000c00 	.word	0x40000c00
 80054c8:	40014000 	.word	0x40014000

080054cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e096      	b.n	8005616 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a2f      	ldr	r2, [pc, #188]	@ (8005624 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d009      	beq.n	8005580 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2d      	ldr	r2, [pc, #180]	@ (8005628 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a2c      	ldr	r2, [pc, #176]	@ (800562c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d106      	bne.n	800558e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a24      	ldr	r2, [pc, #144]	@ (8005624 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d009      	beq.n	80055ac <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a22      	ldr	r2, [pc, #136]	@ (8005628 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d004      	beq.n	80055ac <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a21      	ldr	r2, [pc, #132]	@ (800562c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d12b      	bne.n	8005604 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b6:	051b      	lsls	r3, r3, #20
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a11      	ldr	r2, [pc, #68]	@ (8005624 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d009      	beq.n	80055f6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a10      	ldr	r2, [pc, #64]	@ (8005628 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d004      	beq.n	80055f6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a0e      	ldr	r2, [pc, #56]	@ (800562c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d106      	bne.n	8005604 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40012c00 	.word	0x40012c00
 8005628:	40013400 	.word	0x40013400
 800562c:	40015000 	.word	0x40015000

08005630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e042      	b.n	8005754 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d106      	bne.n	80056e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7fb fde7 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2224      	movs	r2, #36	@ 0x24
 80056ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0201 	bic.w	r2, r2, #1
 80056fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fc5a 	bl	8005fb8 <UART_SetConfig>
 8005704:	4603      	mov	r3, r0
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e022      	b.n	8005754 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 ff4a 	bl	80065b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800572a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800573a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 ffd1 	bl	80066f4 <UART_CheckIdleState>
 8005752:	4603      	mov	r3, r0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08a      	sub	sp, #40	@ 0x28
 8005760:	af02      	add	r7, sp, #8
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	4613      	mov	r3, r2
 800576a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005772:	2b20      	cmp	r3, #32
 8005774:	f040 8083 	bne.w	800587e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_UART_Transmit+0x28>
 800577e:	88fb      	ldrh	r3, [r7, #6]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e07b      	b.n	8005880 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_UART_Transmit+0x3a>
 8005792:	2302      	movs	r3, #2
 8005794:	e074      	b.n	8005880 <HAL_UART_Transmit+0x124>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2221      	movs	r2, #33	@ 0x21
 80057aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057ae:	f7fc f817 	bl	80017e0 <HAL_GetTick>
 80057b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	88fa      	ldrh	r2, [r7, #6]
 80057b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	88fa      	ldrh	r2, [r7, #6]
 80057c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057cc:	d108      	bne.n	80057e0 <HAL_UART_Transmit+0x84>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d104      	bne.n	80057e0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	61bb      	str	r3, [r7, #24]
 80057de:	e003      	b.n	80057e8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 80057f0:	e02c      	b.n	800584c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2200      	movs	r2, #0
 80057fa:	2180      	movs	r1, #128	@ 0x80
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 ffc4 	bl	800678a <UART_WaitOnFlagUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e039      	b.n	8005880 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10b      	bne.n	800582a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005820:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	3302      	adds	r3, #2
 8005826:	61bb      	str	r3, [r7, #24]
 8005828:	e007      	b.n	800583a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	781a      	ldrb	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	3301      	adds	r3, #1
 8005838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005840:	b29b      	uxth	r3, r3
 8005842:	3b01      	subs	r3, #1
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1cc      	bne.n	80057f2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2200      	movs	r2, #0
 8005860:	2140      	movs	r1, #64	@ 0x40
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 ff91 	bl	800678a <UART_WaitOnFlagUntilTimeout>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e006      	b.n	8005880 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	e000      	b.n	8005880 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800587e:	2302      	movs	r3, #2
  }
}
 8005880:	4618      	mov	r0, r3
 8005882:	3720      	adds	r7, #32
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	@ 0x28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	4613      	mov	r3, r2
 8005894:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589c:	2b20      	cmp	r3, #32
 800589e:	d142      	bne.n	8005926 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_UART_Receive_IT+0x24>
 80058a6:	88fb      	ldrh	r3, [r7, #6]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e03b      	b.n	8005928 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <HAL_UART_Receive_IT+0x36>
 80058ba:	2302      	movs	r3, #2
 80058bc:	e034      	b.n	8005928 <HAL_UART_Receive_IT+0xa0>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a17      	ldr	r2, [pc, #92]	@ (8005930 <HAL_UART_Receive_IT+0xa8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01f      	beq.n	8005916 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d018      	beq.n	8005916 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	613b      	str	r3, [r7, #16]
   return(result);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	623b      	str	r3, [r7, #32]
 8005904:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	69f9      	ldr	r1, [r7, #28]
 8005908:	6a3a      	ldr	r2, [r7, #32]
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e6      	bne.n	80058e4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	461a      	mov	r2, r3
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 fffd 	bl	800691c <UART_Start_Receive_IT>
 8005922:	4603      	mov	r3, r0
 8005924:	e000      	b.n	8005928 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005926:	2302      	movs	r3, #2
  }
}
 8005928:	4618      	mov	r0, r3
 800592a:	3728      	adds	r7, #40	@ 0x28
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	40008000 	.word	0x40008000

08005934 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b0ba      	sub	sp, #232	@ 0xe8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800595a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800595e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005962:	4013      	ands	r3, r2
 8005964:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005968:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d11b      	bne.n	80059a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d015      	beq.n	80059a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800597c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d105      	bne.n	8005994 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800598c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d009      	beq.n	80059a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 82d6 	beq.w	8005f4a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	4798      	blx	r3
      }
      return;
 80059a6:	e2d0      	b.n	8005f4a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80059a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 811f 	beq.w	8005bf0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80059b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80059b6:	4b8b      	ldr	r3, [pc, #556]	@ (8005be4 <HAL_UART_IRQHandler+0x2b0>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80059be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80059c2:	4b89      	ldr	r3, [pc, #548]	@ (8005be8 <HAL_UART_IRQHandler+0x2b4>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 8112 	beq.w	8005bf0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d011      	beq.n	80059fc <HAL_UART_IRQHandler+0xc8>
 80059d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00b      	beq.n	80059fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2201      	movs	r2, #1
 80059ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059f2:	f043 0201 	orr.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d011      	beq.n	8005a2c <HAL_UART_IRQHandler+0xf8>
 8005a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00b      	beq.n	8005a2c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a22:	f043 0204 	orr.w	r2, r3, #4
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d011      	beq.n	8005a5c <HAL_UART_IRQHandler+0x128>
 8005a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00b      	beq.n	8005a5c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2204      	movs	r2, #4
 8005a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a52:	f043 0202 	orr.w	r2, r3, #2
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d017      	beq.n	8005a98 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d105      	bne.n	8005a80 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005a74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005a78:	4b5a      	ldr	r3, [pc, #360]	@ (8005be4 <HAL_UART_IRQHandler+0x2b0>)
 8005a7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00b      	beq.n	8005a98 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2208      	movs	r2, #8
 8005a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a8e:	f043 0208 	orr.w	r2, r3, #8
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d012      	beq.n	8005aca <HAL_UART_IRQHandler+0x196>
 8005aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aa8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00c      	beq.n	8005aca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ab8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ac0:	f043 0220 	orr.w	r2, r3, #32
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 823c 	beq.w	8005f4e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d013      	beq.n	8005b0a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d105      	bne.n	8005afa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d007      	beq.n	8005b0a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b1e:	2b40      	cmp	r3, #64	@ 0x40
 8005b20:	d005      	beq.n	8005b2e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b26:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d04f      	beq.n	8005bce <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f001 f81e 	bl	8006b70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b3e:	2b40      	cmp	r3, #64	@ 0x40
 8005b40:	d141      	bne.n	8005bc6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3308      	adds	r3, #8
 8005b48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b50:	e853 3f00 	ldrex	r3, [r3]
 8005b54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3308      	adds	r3, #8
 8005b6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1d9      	bne.n	8005b42 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d013      	beq.n	8005bbe <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b9a:	4a14      	ldr	r2, [pc, #80]	@ (8005bec <HAL_UART_IRQHandler+0x2b8>)
 8005b9c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fd f88d 	bl	8002cc2 <HAL_DMA_Abort_IT>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d017      	beq.n	8005bde <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bbc:	e00f      	b.n	8005bde <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f9e4 	bl	8005f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc4:	e00b      	b.n	8005bde <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f9e0 	bl	8005f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bcc:	e007      	b.n	8005bde <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f9dc 	bl	8005f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8005bdc:	e1b7      	b.n	8005f4e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bde:	bf00      	nop
    return;
 8005be0:	e1b5      	b.n	8005f4e <HAL_UART_IRQHandler+0x61a>
 8005be2:	bf00      	nop
 8005be4:	10000001 	.word	0x10000001
 8005be8:	04000120 	.word	0x04000120
 8005bec:	08006c3d 	.word	0x08006c3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	f040 814a 	bne.w	8005e8e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bfe:	f003 0310 	and.w	r3, r3, #16
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 8143 	beq.w	8005e8e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c0c:	f003 0310 	and.w	r3, r3, #16
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 813c 	beq.w	8005e8e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2210      	movs	r2, #16
 8005c1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c28:	2b40      	cmp	r3, #64	@ 0x40
 8005c2a:	f040 80b5 	bne.w	8005d98 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 8187 	beq.w	8005f52 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	f080 817f 	bcs.w	8005f52 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f040 8086 	bne.w	8005d7c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
 8005c96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c9e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ca6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005caa:	e841 2300 	strex	r3, r2, [r1]
 8005cae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1da      	bne.n	8005c70 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005cca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ccc:	f023 0301 	bic.w	r3, r3, #1
 8005cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3308      	adds	r3, #8
 8005cda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005cde:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ce2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ce6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005cf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e1      	bne.n	8005cba <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3308      	adds	r3, #8
 8005d16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e3      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d4c:	f023 0310 	bic.w	r3, r3, #16
 8005d50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e4      	bne.n	8005d3c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fc ff4a 	bl	8002c10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f905 	bl	8005fa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d96:	e0dc      	b.n	8005f52 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 80ce 	beq.w	8005f56 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005dba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 80c9 	beq.w	8005f56 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	461a      	mov	r2, r3
 8005de2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005de6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005de8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e4      	bne.n	8005dc4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3308      	adds	r3, #8
 8005e00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	623b      	str	r3, [r7, #32]
   return(result);
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e10:	f023 0301 	bic.w	r3, r3, #1
 8005e14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e22:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e2a:	e841 2300 	strex	r3, r2, [r1]
 8005e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1e1      	bne.n	8005dfa <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0310 	bic.w	r3, r3, #16
 8005e5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e6c:	61fb      	str	r3, [r7, #28]
 8005e6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	69b9      	ldr	r1, [r7, #24]
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	617b      	str	r3, [r7, #20]
   return(result);
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e4      	bne.n	8005e4a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f88a 	bl	8005fa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e8c:	e063      	b.n	8005f56 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00e      	beq.n	8005eb8 <HAL_UART_IRQHandler+0x584>
 8005e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d008      	beq.n	8005eb8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005eae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 fb61 	bl	8007578 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005eb6:	e051      	b.n	8005f5c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d014      	beq.n	8005eee <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d105      	bne.n	8005edc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ed4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d008      	beq.n	8005eee <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d03a      	beq.n	8005f5a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	4798      	blx	r3
    }
    return;
 8005eec:	e035      	b.n	8005f5a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <HAL_UART_IRQHandler+0x5da>
 8005efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 feae 	bl	8006c68 <UART_EndTransmit_IT>
    return;
 8005f0c:	e026      	b.n	8005f5c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d009      	beq.n	8005f2e <HAL_UART_IRQHandler+0x5fa>
 8005f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f1e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 fb3a 	bl	80075a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f2c:	e016      	b.n	8005f5c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d010      	beq.n	8005f5c <HAL_UART_IRQHandler+0x628>
 8005f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	da0c      	bge.n	8005f5c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f001 fb22 	bl	800758c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f48:	e008      	b.n	8005f5c <HAL_UART_IRQHandler+0x628>
      return;
 8005f4a:	bf00      	nop
 8005f4c:	e006      	b.n	8005f5c <HAL_UART_IRQHandler+0x628>
    return;
 8005f4e:	bf00      	nop
 8005f50:	e004      	b.n	8005f5c <HAL_UART_IRQHandler+0x628>
      return;
 8005f52:	bf00      	nop
 8005f54:	e002      	b.n	8005f5c <HAL_UART_IRQHandler+0x628>
      return;
 8005f56:	bf00      	nop
 8005f58:	e000      	b.n	8005f5c <HAL_UART_IRQHandler+0x628>
    return;
 8005f5a:	bf00      	nop
  }
}
 8005f5c:	37e8      	adds	r7, #232	@ 0xe8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop

08005f64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fbc:	b08c      	sub	sp, #48	@ 0x30
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4baa      	ldr	r3, [pc, #680]	@ (8006290 <UART_SetConfig+0x2d8>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	6812      	ldr	r2, [r2, #0]
 8005fee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a9f      	ldr	r2, [pc, #636]	@ (8006294 <UART_SetConfig+0x2dc>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d004      	beq.n	8006024 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006020:	4313      	orrs	r3, r2
 8006022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800602e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	6812      	ldr	r2, [r2, #0]
 8006036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006038:	430b      	orrs	r3, r1
 800603a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006042:	f023 010f 	bic.w	r1, r3, #15
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a90      	ldr	r2, [pc, #576]	@ (8006298 <UART_SetConfig+0x2e0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d125      	bne.n	80060a8 <UART_SetConfig+0xf0>
 800605c:	4b8f      	ldr	r3, [pc, #572]	@ (800629c <UART_SetConfig+0x2e4>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	2b03      	cmp	r3, #3
 8006068:	d81a      	bhi.n	80060a0 <UART_SetConfig+0xe8>
 800606a:	a201      	add	r2, pc, #4	@ (adr r2, 8006070 <UART_SetConfig+0xb8>)
 800606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006070:	08006081 	.word	0x08006081
 8006074:	08006091 	.word	0x08006091
 8006078:	08006089 	.word	0x08006089
 800607c:	08006099 	.word	0x08006099
 8006080:	2301      	movs	r3, #1
 8006082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006086:	e116      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006088:	2302      	movs	r3, #2
 800608a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800608e:	e112      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006090:	2304      	movs	r3, #4
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006096:	e10e      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006098:	2308      	movs	r3, #8
 800609a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800609e:	e10a      	b.n	80062b6 <UART_SetConfig+0x2fe>
 80060a0:	2310      	movs	r3, #16
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060a6:	e106      	b.n	80062b6 <UART_SetConfig+0x2fe>
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a7c      	ldr	r2, [pc, #496]	@ (80062a0 <UART_SetConfig+0x2e8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d138      	bne.n	8006124 <UART_SetConfig+0x16c>
 80060b2:	4b7a      	ldr	r3, [pc, #488]	@ (800629c <UART_SetConfig+0x2e4>)
 80060b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b8:	f003 030c 	and.w	r3, r3, #12
 80060bc:	2b0c      	cmp	r3, #12
 80060be:	d82d      	bhi.n	800611c <UART_SetConfig+0x164>
 80060c0:	a201      	add	r2, pc, #4	@ (adr r2, 80060c8 <UART_SetConfig+0x110>)
 80060c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c6:	bf00      	nop
 80060c8:	080060fd 	.word	0x080060fd
 80060cc:	0800611d 	.word	0x0800611d
 80060d0:	0800611d 	.word	0x0800611d
 80060d4:	0800611d 	.word	0x0800611d
 80060d8:	0800610d 	.word	0x0800610d
 80060dc:	0800611d 	.word	0x0800611d
 80060e0:	0800611d 	.word	0x0800611d
 80060e4:	0800611d 	.word	0x0800611d
 80060e8:	08006105 	.word	0x08006105
 80060ec:	0800611d 	.word	0x0800611d
 80060f0:	0800611d 	.word	0x0800611d
 80060f4:	0800611d 	.word	0x0800611d
 80060f8:	08006115 	.word	0x08006115
 80060fc:	2300      	movs	r3, #0
 80060fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006102:	e0d8      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006104:	2302      	movs	r3, #2
 8006106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800610a:	e0d4      	b.n	80062b6 <UART_SetConfig+0x2fe>
 800610c:	2304      	movs	r3, #4
 800610e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006112:	e0d0      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006114:	2308      	movs	r3, #8
 8006116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800611a:	e0cc      	b.n	80062b6 <UART_SetConfig+0x2fe>
 800611c:	2310      	movs	r3, #16
 800611e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006122:	e0c8      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a5e      	ldr	r2, [pc, #376]	@ (80062a4 <UART_SetConfig+0x2ec>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d125      	bne.n	800617a <UART_SetConfig+0x1c2>
 800612e:	4b5b      	ldr	r3, [pc, #364]	@ (800629c <UART_SetConfig+0x2e4>)
 8006130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006134:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006138:	2b30      	cmp	r3, #48	@ 0x30
 800613a:	d016      	beq.n	800616a <UART_SetConfig+0x1b2>
 800613c:	2b30      	cmp	r3, #48	@ 0x30
 800613e:	d818      	bhi.n	8006172 <UART_SetConfig+0x1ba>
 8006140:	2b20      	cmp	r3, #32
 8006142:	d00a      	beq.n	800615a <UART_SetConfig+0x1a2>
 8006144:	2b20      	cmp	r3, #32
 8006146:	d814      	bhi.n	8006172 <UART_SetConfig+0x1ba>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d002      	beq.n	8006152 <UART_SetConfig+0x19a>
 800614c:	2b10      	cmp	r3, #16
 800614e:	d008      	beq.n	8006162 <UART_SetConfig+0x1aa>
 8006150:	e00f      	b.n	8006172 <UART_SetConfig+0x1ba>
 8006152:	2300      	movs	r3, #0
 8006154:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006158:	e0ad      	b.n	80062b6 <UART_SetConfig+0x2fe>
 800615a:	2302      	movs	r3, #2
 800615c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006160:	e0a9      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006162:	2304      	movs	r3, #4
 8006164:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006168:	e0a5      	b.n	80062b6 <UART_SetConfig+0x2fe>
 800616a:	2308      	movs	r3, #8
 800616c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006170:	e0a1      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006172:	2310      	movs	r3, #16
 8006174:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006178:	e09d      	b.n	80062b6 <UART_SetConfig+0x2fe>
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a4a      	ldr	r2, [pc, #296]	@ (80062a8 <UART_SetConfig+0x2f0>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d125      	bne.n	80061d0 <UART_SetConfig+0x218>
 8006184:	4b45      	ldr	r3, [pc, #276]	@ (800629c <UART_SetConfig+0x2e4>)
 8006186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800618a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800618e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006190:	d016      	beq.n	80061c0 <UART_SetConfig+0x208>
 8006192:	2bc0      	cmp	r3, #192	@ 0xc0
 8006194:	d818      	bhi.n	80061c8 <UART_SetConfig+0x210>
 8006196:	2b80      	cmp	r3, #128	@ 0x80
 8006198:	d00a      	beq.n	80061b0 <UART_SetConfig+0x1f8>
 800619a:	2b80      	cmp	r3, #128	@ 0x80
 800619c:	d814      	bhi.n	80061c8 <UART_SetConfig+0x210>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <UART_SetConfig+0x1f0>
 80061a2:	2b40      	cmp	r3, #64	@ 0x40
 80061a4:	d008      	beq.n	80061b8 <UART_SetConfig+0x200>
 80061a6:	e00f      	b.n	80061c8 <UART_SetConfig+0x210>
 80061a8:	2300      	movs	r3, #0
 80061aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ae:	e082      	b.n	80062b6 <UART_SetConfig+0x2fe>
 80061b0:	2302      	movs	r3, #2
 80061b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b6:	e07e      	b.n	80062b6 <UART_SetConfig+0x2fe>
 80061b8:	2304      	movs	r3, #4
 80061ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061be:	e07a      	b.n	80062b6 <UART_SetConfig+0x2fe>
 80061c0:	2308      	movs	r3, #8
 80061c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061c6:	e076      	b.n	80062b6 <UART_SetConfig+0x2fe>
 80061c8:	2310      	movs	r3, #16
 80061ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ce:	e072      	b.n	80062b6 <UART_SetConfig+0x2fe>
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a35      	ldr	r2, [pc, #212]	@ (80062ac <UART_SetConfig+0x2f4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d12a      	bne.n	8006230 <UART_SetConfig+0x278>
 80061da:	4b30      	ldr	r3, [pc, #192]	@ (800629c <UART_SetConfig+0x2e4>)
 80061dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061e8:	d01a      	beq.n	8006220 <UART_SetConfig+0x268>
 80061ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061ee:	d81b      	bhi.n	8006228 <UART_SetConfig+0x270>
 80061f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061f4:	d00c      	beq.n	8006210 <UART_SetConfig+0x258>
 80061f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061fa:	d815      	bhi.n	8006228 <UART_SetConfig+0x270>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <UART_SetConfig+0x250>
 8006200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006204:	d008      	beq.n	8006218 <UART_SetConfig+0x260>
 8006206:	e00f      	b.n	8006228 <UART_SetConfig+0x270>
 8006208:	2300      	movs	r3, #0
 800620a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800620e:	e052      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006210:	2302      	movs	r3, #2
 8006212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006216:	e04e      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006218:	2304      	movs	r3, #4
 800621a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800621e:	e04a      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006220:	2308      	movs	r3, #8
 8006222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006226:	e046      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006228:	2310      	movs	r3, #16
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800622e:	e042      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a17      	ldr	r2, [pc, #92]	@ (8006294 <UART_SetConfig+0x2dc>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d13a      	bne.n	80062b0 <UART_SetConfig+0x2f8>
 800623a:	4b18      	ldr	r3, [pc, #96]	@ (800629c <UART_SetConfig+0x2e4>)
 800623c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006240:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006244:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006248:	d01a      	beq.n	8006280 <UART_SetConfig+0x2c8>
 800624a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800624e:	d81b      	bhi.n	8006288 <UART_SetConfig+0x2d0>
 8006250:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006254:	d00c      	beq.n	8006270 <UART_SetConfig+0x2b8>
 8006256:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800625a:	d815      	bhi.n	8006288 <UART_SetConfig+0x2d0>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <UART_SetConfig+0x2b0>
 8006260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006264:	d008      	beq.n	8006278 <UART_SetConfig+0x2c0>
 8006266:	e00f      	b.n	8006288 <UART_SetConfig+0x2d0>
 8006268:	2300      	movs	r3, #0
 800626a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800626e:	e022      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006270:	2302      	movs	r3, #2
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006276:	e01e      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006278:	2304      	movs	r3, #4
 800627a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800627e:	e01a      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006280:	2308      	movs	r3, #8
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006286:	e016      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006288:	2310      	movs	r3, #16
 800628a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800628e:	e012      	b.n	80062b6 <UART_SetConfig+0x2fe>
 8006290:	cfff69f3 	.word	0xcfff69f3
 8006294:	40008000 	.word	0x40008000
 8006298:	40013800 	.word	0x40013800
 800629c:	40021000 	.word	0x40021000
 80062a0:	40004400 	.word	0x40004400
 80062a4:	40004800 	.word	0x40004800
 80062a8:	40004c00 	.word	0x40004c00
 80062ac:	40005000 	.word	0x40005000
 80062b0:	2310      	movs	r3, #16
 80062b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4aae      	ldr	r2, [pc, #696]	@ (8006574 <UART_SetConfig+0x5bc>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	f040 8097 	bne.w	80063f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	d823      	bhi.n	8006312 <UART_SetConfig+0x35a>
 80062ca:	a201      	add	r2, pc, #4	@ (adr r2, 80062d0 <UART_SetConfig+0x318>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	080062f5 	.word	0x080062f5
 80062d4:	08006313 	.word	0x08006313
 80062d8:	080062fd 	.word	0x080062fd
 80062dc:	08006313 	.word	0x08006313
 80062e0:	08006303 	.word	0x08006303
 80062e4:	08006313 	.word	0x08006313
 80062e8:	08006313 	.word	0x08006313
 80062ec:	08006313 	.word	0x08006313
 80062f0:	0800630b 	.word	0x0800630b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f4:	f7fd fc80 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 80062f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062fa:	e010      	b.n	800631e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062fc:	4b9e      	ldr	r3, [pc, #632]	@ (8006578 <UART_SetConfig+0x5c0>)
 80062fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006300:	e00d      	b.n	800631e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006302:	f7fd fc0b 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8006306:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006308:	e009      	b.n	800631e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800630a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800630e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006310:	e005      	b.n	800631e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800631c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 8130 	beq.w	8006586 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632a:	4a94      	ldr	r2, [pc, #592]	@ (800657c <UART_SetConfig+0x5c4>)
 800632c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006330:	461a      	mov	r2, r3
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	fbb3 f3f2 	udiv	r3, r3, r2
 8006338:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	4413      	add	r3, r2
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	429a      	cmp	r2, r3
 8006348:	d305      	bcc.n	8006356 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	429a      	cmp	r2, r3
 8006354:	d903      	bls.n	800635e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800635c:	e113      	b.n	8006586 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	2200      	movs	r2, #0
 8006362:	60bb      	str	r3, [r7, #8]
 8006364:	60fa      	str	r2, [r7, #12]
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636a:	4a84      	ldr	r2, [pc, #528]	@ (800657c <UART_SetConfig+0x5c4>)
 800636c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006370:	b29b      	uxth	r3, r3
 8006372:	2200      	movs	r2, #0
 8006374:	603b      	str	r3, [r7, #0]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800637c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006380:	f7f9 ffae 	bl	80002e0 <__aeabi_uldivmod>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4610      	mov	r0, r2
 800638a:	4619      	mov	r1, r3
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	020b      	lsls	r3, r1, #8
 8006396:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800639a:	0202      	lsls	r2, r0, #8
 800639c:	6979      	ldr	r1, [r7, #20]
 800639e:	6849      	ldr	r1, [r1, #4]
 80063a0:	0849      	lsrs	r1, r1, #1
 80063a2:	2000      	movs	r0, #0
 80063a4:	460c      	mov	r4, r1
 80063a6:	4605      	mov	r5, r0
 80063a8:	eb12 0804 	adds.w	r8, r2, r4
 80063ac:	eb43 0905 	adc.w	r9, r3, r5
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	469a      	mov	sl, r3
 80063b8:	4693      	mov	fp, r2
 80063ba:	4652      	mov	r2, sl
 80063bc:	465b      	mov	r3, fp
 80063be:	4640      	mov	r0, r8
 80063c0:	4649      	mov	r1, r9
 80063c2:	f7f9 ff8d 	bl	80002e0 <__aeabi_uldivmod>
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	4613      	mov	r3, r2
 80063cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063d4:	d308      	bcc.n	80063e8 <UART_SetConfig+0x430>
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063dc:	d204      	bcs.n	80063e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6a3a      	ldr	r2, [r7, #32]
 80063e4:	60da      	str	r2, [r3, #12]
 80063e6:	e0ce      	b.n	8006586 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80063ee:	e0ca      	b.n	8006586 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063f8:	d166      	bne.n	80064c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80063fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063fe:	2b08      	cmp	r3, #8
 8006400:	d827      	bhi.n	8006452 <UART_SetConfig+0x49a>
 8006402:	a201      	add	r2, pc, #4	@ (adr r2, 8006408 <UART_SetConfig+0x450>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	0800642d 	.word	0x0800642d
 800640c:	08006435 	.word	0x08006435
 8006410:	0800643d 	.word	0x0800643d
 8006414:	08006453 	.word	0x08006453
 8006418:	08006443 	.word	0x08006443
 800641c:	08006453 	.word	0x08006453
 8006420:	08006453 	.word	0x08006453
 8006424:	08006453 	.word	0x08006453
 8006428:	0800644b 	.word	0x0800644b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800642c:	f7fd fbe4 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 8006430:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006432:	e014      	b.n	800645e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006434:	f7fd fbf6 	bl	8003c24 <HAL_RCC_GetPCLK2Freq>
 8006438:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800643a:	e010      	b.n	800645e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800643c:	4b4e      	ldr	r3, [pc, #312]	@ (8006578 <UART_SetConfig+0x5c0>)
 800643e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006440:	e00d      	b.n	800645e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006442:	f7fd fb6b 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8006446:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006448:	e009      	b.n	800645e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800644a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800644e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006450:	e005      	b.n	800645e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800645c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8090 	beq.w	8006586 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646a:	4a44      	ldr	r2, [pc, #272]	@ (800657c <UART_SetConfig+0x5c4>)
 800646c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006470:	461a      	mov	r2, r3
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	fbb3 f3f2 	udiv	r3, r3, r2
 8006478:	005a      	lsls	r2, r3, #1
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	441a      	add	r2, r3
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	fbb2 f3f3 	udiv	r3, r2, r3
 800648a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	2b0f      	cmp	r3, #15
 8006490:	d916      	bls.n	80064c0 <UART_SetConfig+0x508>
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006498:	d212      	bcs.n	80064c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	b29b      	uxth	r3, r3
 800649e:	f023 030f 	bic.w	r3, r3, #15
 80064a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	085b      	lsrs	r3, r3, #1
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	8bfb      	ldrh	r3, [r7, #30]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	8bfa      	ldrh	r2, [r7, #30]
 80064bc:	60da      	str	r2, [r3, #12]
 80064be:	e062      	b.n	8006586 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064c6:	e05e      	b.n	8006586 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d828      	bhi.n	8006522 <UART_SetConfig+0x56a>
 80064d0:	a201      	add	r2, pc, #4	@ (adr r2, 80064d8 <UART_SetConfig+0x520>)
 80064d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d6:	bf00      	nop
 80064d8:	080064fd 	.word	0x080064fd
 80064dc:	08006505 	.word	0x08006505
 80064e0:	0800650d 	.word	0x0800650d
 80064e4:	08006523 	.word	0x08006523
 80064e8:	08006513 	.word	0x08006513
 80064ec:	08006523 	.word	0x08006523
 80064f0:	08006523 	.word	0x08006523
 80064f4:	08006523 	.word	0x08006523
 80064f8:	0800651b 	.word	0x0800651b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064fc:	f7fd fb7c 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 8006500:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006502:	e014      	b.n	800652e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006504:	f7fd fb8e 	bl	8003c24 <HAL_RCC_GetPCLK2Freq>
 8006508:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800650a:	e010      	b.n	800652e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800650c:	4b1a      	ldr	r3, [pc, #104]	@ (8006578 <UART_SetConfig+0x5c0>)
 800650e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006510:	e00d      	b.n	800652e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006512:	f7fd fb03 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8006516:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006518:	e009      	b.n	800652e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800651a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800651e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006520:	e005      	b.n	800652e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800652c:	bf00      	nop
    }

    if (pclk != 0U)
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	d028      	beq.n	8006586 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006538:	4a10      	ldr	r2, [pc, #64]	@ (800657c <UART_SetConfig+0x5c4>)
 800653a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800653e:	461a      	mov	r2, r3
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	fbb3 f2f2 	udiv	r2, r3, r2
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	085b      	lsrs	r3, r3, #1
 800654c:	441a      	add	r2, r3
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	fbb2 f3f3 	udiv	r3, r2, r3
 8006556:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	2b0f      	cmp	r3, #15
 800655c:	d910      	bls.n	8006580 <UART_SetConfig+0x5c8>
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006564:	d20c      	bcs.n	8006580 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	b29a      	uxth	r2, r3
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	60da      	str	r2, [r3, #12]
 8006570:	e009      	b.n	8006586 <UART_SetConfig+0x5ce>
 8006572:	bf00      	nop
 8006574:	40008000 	.word	0x40008000
 8006578:	00f42400 	.word	0x00f42400
 800657c:	08008d64 	.word	0x08008d64
      }
      else
      {
        ret = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2201      	movs	r2, #1
 800658a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2201      	movs	r2, #1
 8006592:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2200      	movs	r2, #0
 800659a:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2200      	movs	r2, #0
 80065a0:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 80065a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3730      	adds	r7, #48	@ 0x30
 80065aa:	46bd      	mov	sp, r7
 80065ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080065b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01a      	beq.n	80066c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066ae:	d10a      	bne.n	80066c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]
  }
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006704:	f7fb f86c 	bl	80017e0 <HAL_GetTick>
 8006708:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b08      	cmp	r3, #8
 8006716:	d10e      	bne.n	8006736 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006718:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f82f 	bl	800678a <UART_WaitOnFlagUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e025      	b.n	8006782 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b04      	cmp	r3, #4
 8006742:	d10e      	bne.n	8006762 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006744:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f819 	bl	800678a <UART_WaitOnFlagUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e00f      	b.n	8006782 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2220      	movs	r2, #32
 800676e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b09c      	sub	sp, #112	@ 0x70
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	603b      	str	r3, [r7, #0]
 8006796:	4613      	mov	r3, r2
 8006798:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679a:	e0a9      	b.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a2:	f000 80a5 	beq.w	80068f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a6:	f7fb f81b 	bl	80017e0 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d302      	bcc.n	80067bc <UART_WaitOnFlagUntilTimeout+0x32>
 80067b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d140      	bne.n	800683e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80067ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067cc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80067d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067dc:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80067e0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80067e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e6      	bne.n	80067bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3308      	adds	r3, #8
 80067f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006800:	f023 0301 	bic.w	r3, r3, #1
 8006804:	663b      	str	r3, [r7, #96]	@ 0x60
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3308      	adds	r3, #8
 800680c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800680e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006810:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800681c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e5      	bne.n	80067ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2220      	movs	r2, #32
 8006826:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e069      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	d051      	beq.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006856:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800685a:	d149      	bne.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006864:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800687a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006884:	637b      	str	r3, [r7, #52]	@ 0x34
 8006886:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800688a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e6      	bne.n	8006866 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3308      	adds	r3, #8
 800689e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	613b      	str	r3, [r7, #16]
   return(result);
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f023 0301 	bic.w	r3, r3, #1
 80068ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3308      	adds	r3, #8
 80068b6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80068b8:	623a      	str	r2, [r7, #32]
 80068ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	69f9      	ldr	r1, [r7, #28]
 80068be:	6a3a      	ldr	r2, [r7, #32]
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e5      	bne.n	8006898 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e010      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69da      	ldr	r2, [r3, #28]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4013      	ands	r3, r2
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	bf0c      	ite	eq
 8006900:	2301      	moveq	r3, #1
 8006902:	2300      	movne	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	429a      	cmp	r2, r3
 800690c:	f43f af46 	beq.w	800679c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3770      	adds	r7, #112	@ 0x70
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800691c:	b480      	push	{r7}
 800691e:	b0a3      	sub	sp, #140	@ 0x8c
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	4613      	mov	r3, r2
 8006928:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	88fa      	ldrh	r2, [r7, #6]
 8006934:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	88fa      	ldrh	r2, [r7, #6]
 800693c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800694e:	d10e      	bne.n	800696e <UART_Start_Receive_IT+0x52>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d105      	bne.n	8006964 <UART_Start_Receive_IT+0x48>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800695e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006962:	e02d      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	22ff      	movs	r2, #255	@ 0xff
 8006968:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800696c:	e028      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10d      	bne.n	8006992 <UART_Start_Receive_IT+0x76>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d104      	bne.n	8006988 <UART_Start_Receive_IT+0x6c>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	22ff      	movs	r2, #255	@ 0xff
 8006982:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006986:	e01b      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	227f      	movs	r2, #127	@ 0x7f
 800698c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006990:	e016      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800699a:	d10d      	bne.n	80069b8 <UART_Start_Receive_IT+0x9c>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d104      	bne.n	80069ae <UART_Start_Receive_IT+0x92>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	227f      	movs	r2, #127	@ 0x7f
 80069a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069ac:	e008      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	223f      	movs	r2, #63	@ 0x3f
 80069b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069b6:	e003      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2222      	movs	r2, #34	@ 0x22
 80069cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3308      	adds	r3, #8
 80069d6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80069e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069e2:	f043 0301 	orr.w	r3, r3, #1
 80069e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3308      	adds	r3, #8
 80069f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80069f4:	673a      	str	r2, [r7, #112]	@ 0x70
 80069f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80069fa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80069fc:	e841 2300 	strex	r3, r2, [r1]
 8006a00:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006a02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1e3      	bne.n	80069d0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a10:	d153      	bne.n	8006aba <UART_Start_Receive_IT+0x19e>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a18:	88fa      	ldrh	r2, [r7, #6]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d34d      	bcc.n	8006aba <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a26:	d107      	bne.n	8006a38 <UART_Start_Receive_IT+0x11c>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d103      	bne.n	8006a38 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4a4b      	ldr	r2, [pc, #300]	@ (8006b60 <UART_Start_Receive_IT+0x244>)
 8006a34:	671a      	str	r2, [r3, #112]	@ 0x70
 8006a36:	e002      	b.n	8006a3e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4a4a      	ldr	r2, [pc, #296]	@ (8006b64 <UART_Start_Receive_IT+0x248>)
 8006a3c:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d01a      	beq.n	8006a84 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a72:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006a76:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e4      	bne.n	8006a4e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006aa4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006aa6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006aaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e5      	bne.n	8006a84 <UART_Start_Receive_IT+0x168>
 8006ab8:	e04a      	b.n	8006b50 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ac2:	d107      	bne.n	8006ad4 <UART_Start_Receive_IT+0x1b8>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d103      	bne.n	8006ad4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4a26      	ldr	r2, [pc, #152]	@ (8006b68 <UART_Start_Receive_IT+0x24c>)
 8006ad0:	671a      	str	r2, [r3, #112]	@ 0x70
 8006ad2:	e002      	b.n	8006ada <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4a25      	ldr	r2, [pc, #148]	@ (8006b6c <UART_Start_Receive_IT+0x250>)
 8006ad8:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d019      	beq.n	8006b1e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af2:	e853 3f00 	ldrex	r3, [r3]
 8006af6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006afe:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b0a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b10:	e841 2300 	strex	r3, r2, [r1]
 8006b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e6      	bne.n	8006aea <UART_Start_Receive_IT+0x1ce>
 8006b1c:	e018      	b.n	8006b50 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f043 0320 	orr.w	r3, r3, #32
 8006b32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b3c:	623b      	str	r3, [r7, #32]
 8006b3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	69f9      	ldr	r1, [r7, #28]
 8006b42:	6a3a      	ldr	r2, [r7, #32]
 8006b44:	e841 2300 	strex	r3, r2, [r1]
 8006b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e6      	bne.n	8006b1e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	378c      	adds	r7, #140	@ 0x8c
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	08007279 	.word	0x08007279
 8006b64:	08006f81 	.word	0x08006f81
 8006b68:	08006e1f 	.word	0x08006e1f
 8006b6c:	08006cbf 	.word	0x08006cbf

08006b70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b095      	sub	sp, #84	@ 0x54
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b96:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e6      	bne.n	8006b78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3308      	adds	r3, #8
 8006bb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bc0:	f023 0301 	bic.w	r3, r3, #1
 8006bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3308      	adds	r3, #8
 8006bcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e3      	bne.n	8006baa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d118      	bne.n	8006c1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f023 0310 	bic.w	r3, r3, #16
 8006bfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	6979      	ldr	r1, [r7, #20]
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	613b      	str	r3, [r7, #16]
   return(result);
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e6      	bne.n	8006bea <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8006c30:	bf00      	nop
 8006c32:	3754      	adds	r7, #84	@ 0x54
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f7ff f996 	bl	8005f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c60:	bf00      	nop
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c84:	61fb      	str	r3, [r7, #28]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	61bb      	str	r3, [r7, #24]
 8006c90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	6979      	ldr	r1, [r7, #20]
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	e841 2300 	strex	r3, r2, [r1]
 8006c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e6      	bne.n	8006c70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7ff f957 	bl	8005f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cb6:	bf00      	nop
 8006cb8:	3720      	adds	r7, #32
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b096      	sub	sp, #88	@ 0x58
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006ccc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd6:	2b22      	cmp	r3, #34	@ 0x22
 8006cd8:	f040 8095 	bne.w	8006e06 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ce6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8006cea:	b2d9      	uxtb	r1, r3
 8006cec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf6:	400a      	ands	r2, r1
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d178      	bne.n	8006e16 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d38:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d42:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d44:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e6      	bne.n	8006d24 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	623b      	str	r3, [r7, #32]
   return(result);
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3308      	adds	r3, #8
 8006d74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d76:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e5      	bne.n	8006d56 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d12e      	bne.n	8006dfe <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	e853 3f00 	ldrex	r3, [r3]
 8006db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f023 0310 	bic.w	r3, r3, #16
 8006dba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dc4:	61fb      	str	r3, [r7, #28]
 8006dc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	69b9      	ldr	r1, [r7, #24]
 8006dca:	69fa      	ldr	r2, [r7, #28]
 8006dcc:	e841 2300 	strex	r3, r2, [r1]
 8006dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e6      	bne.n	8006da6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	f003 0310 	and.w	r3, r3, #16
 8006de2:	2b10      	cmp	r3, #16
 8006de4:	d103      	bne.n	8006dee <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2210      	movs	r2, #16
 8006dec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff f8d2 	bl	8005fa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006dfc:	e00b      	b.n	8006e16 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7ff f8ba 	bl	8005f78 <HAL_UART_RxCpltCallback>
}
 8006e04:	e007      	b.n	8006e16 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	699a      	ldr	r2, [r3, #24]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0208 	orr.w	r2, r2, #8
 8006e14:	619a      	str	r2, [r3, #24]
}
 8006e16:	bf00      	nop
 8006e18:	3758      	adds	r7, #88	@ 0x58
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b096      	sub	sp, #88	@ 0x58
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006e2c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e36:	2b22      	cmp	r3, #34	@ 0x22
 8006e38:	f040 8095 	bne.w	8006f66 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e42:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e4a:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e4c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8006e50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006e54:	4013      	ands	r3, r2
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e5a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e60:	1c9a      	adds	r2, r3, #2
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d178      	bne.n	8006f76 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ea2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ea4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ea8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006eaa:	e841 2300 	strex	r3, r2, [r1]
 8006eae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1e6      	bne.n	8006e84 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3308      	adds	r3, #8
 8006ebc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	e853 3f00 	ldrex	r3, [r3]
 8006ec4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	f023 0301 	bic.w	r3, r3, #1
 8006ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3308      	adds	r3, #8
 8006ed4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006edc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e5      	bne.n	8006eb6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2220      	movs	r2, #32
 8006eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d12e      	bne.n	8006f5e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f023 0310 	bic.w	r3, r3, #16
 8006f1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	461a      	mov	r2, r3
 8006f22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	6979      	ldr	r1, [r7, #20]
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	e841 2300 	strex	r3, r2, [r1]
 8006f30:	613b      	str	r3, [r7, #16]
   return(result);
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e6      	bne.n	8006f06 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	f003 0310 	and.w	r3, r3, #16
 8006f42:	2b10      	cmp	r3, #16
 8006f44:	d103      	bne.n	8006f4e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2210      	movs	r2, #16
 8006f4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff f822 	bl	8005fa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f5c:	e00b      	b.n	8006f76 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff f80a 	bl	8005f78 <HAL_UART_RxCpltCallback>
}
 8006f64:	e007      	b.n	8006f76 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	699a      	ldr	r2, [r3, #24]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f042 0208 	orr.w	r2, r2, #8
 8006f74:	619a      	str	r2, [r3, #24]
}
 8006f76:	bf00      	nop
 8006f78:	3758      	adds	r7, #88	@ 0x58
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b0a6      	sub	sp, #152	@ 0x98
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006f8e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb6:	2b22      	cmp	r3, #34	@ 0x22
 8006fb8:	f040 814f 	bne.w	800725a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006fc2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006fc6:	e0f6      	b.n	80071b6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fce:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006fd2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006fd6:	b2d9      	uxtb	r1, r3
 8006fd8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe2:	400a      	ands	r2, r1
 8006fe4:	b2d2      	uxtb	r2, r2
 8006fe6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800700e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007012:	f003 0307 	and.w	r3, r3, #7
 8007016:	2b00      	cmp	r3, #0
 8007018:	d053      	beq.n	80070c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800701a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	d011      	beq.n	800704a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007026:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800702a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00b      	beq.n	800704a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2201      	movs	r2, #1
 8007038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007040:	f043 0201 	orr.w	r2, r3, #1
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800704a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d011      	beq.n	800707a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007056:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00b      	beq.n	800707a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2202      	movs	r2, #2
 8007068:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007070:	f043 0204 	orr.w	r2, r3, #4
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800707a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800707e:	f003 0304 	and.w	r3, r3, #4
 8007082:	2b00      	cmp	r3, #0
 8007084:	d011      	beq.n	80070aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007086:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00b      	beq.n	80070aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2204      	movs	r2, #4
 8007098:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070a0:	f043 0202 	orr.w	r2, r3, #2
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d006      	beq.n	80070c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7fe ff69 	bl	8005f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d173      	bne.n	80071b6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80070dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80070f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070f2:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80070f6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80070fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e4      	bne.n	80070ce <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3308      	adds	r3, #8
 800710a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800711a:	f023 0301 	bic.w	r3, r3, #1
 800711e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007128:	657a      	str	r2, [r7, #84]	@ 0x54
 800712a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800712e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e3      	bne.n	8007104 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800714e:	2b01      	cmp	r3, #1
 8007150:	d12e      	bne.n	80071b0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007160:	e853 3f00 	ldrex	r3, [r3]
 8007164:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007168:	f023 0310 	bic.w	r3, r3, #16
 800716c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007176:	643b      	str	r3, [r7, #64]	@ 0x40
 8007178:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800717c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e6      	bne.n	8007158 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	f003 0310 	and.w	r3, r3, #16
 8007194:	2b10      	cmp	r3, #16
 8007196:	d103      	bne.n	80071a0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2210      	movs	r2, #16
 800719e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7fe fef9 	bl	8005fa0 <HAL_UARTEx_RxEventCallback>
 80071ae:	e002      	b.n	80071b6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7fe fee1 	bl	8005f78 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d006      	beq.n	80071cc <UART_RxISR_8BIT_FIFOEN+0x24c>
 80071be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f47f aefe 	bne.w	8006fc8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80071d6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d045      	beq.n	800726a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80071e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d23e      	bcs.n	800726a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3308      	adds	r3, #8
 80071f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007202:	673b      	str	r3, [r7, #112]	@ 0x70
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3308      	adds	r3, #8
 800720a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800720c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800720e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e5      	bne.n	80071ec <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a14      	ldr	r2, [pc, #80]	@ (8007274 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007224:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	60bb      	str	r3, [r7, #8]
   return(result);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f043 0320 	orr.w	r3, r3, #32
 800723a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	461a      	mov	r2, r3
 8007242:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007244:	61bb      	str	r3, [r7, #24]
 8007246:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007248:	6979      	ldr	r1, [r7, #20]
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	e841 2300 	strex	r3, r2, [r1]
 8007250:	613b      	str	r3, [r7, #16]
   return(result);
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1e6      	bne.n	8007226 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007258:	e007      	b.n	800726a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	699a      	ldr	r2, [r3, #24]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f042 0208 	orr.w	r2, r2, #8
 8007268:	619a      	str	r2, [r3, #24]
}
 800726a:	bf00      	nop
 800726c:	3798      	adds	r7, #152	@ 0x98
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	08006cbf 	.word	0x08006cbf

08007278 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b0a8      	sub	sp, #160	@ 0xa0
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007286:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	69db      	ldr	r3, [r3, #28]
 8007290:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ae:	2b22      	cmp	r3, #34	@ 0x22
 80072b0:	f040 8153 	bne.w	800755a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80072ba:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072be:	e0fa      	b.n	80074b6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80072d2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 80072d6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 80072da:	4013      	ands	r3, r2
 80072dc:	b29a      	uxth	r2, r3
 80072de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072e8:	1c9a      	adds	r2, r3, #2
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	3b01      	subs	r3, #1
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800730a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	2b00      	cmp	r3, #0
 8007314:	d053      	beq.n	80073be <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007316:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	2b00      	cmp	r3, #0
 8007320:	d011      	beq.n	8007346 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007322:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00b      	beq.n	8007346 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2201      	movs	r2, #1
 8007334:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800733c:	f043 0201 	orr.w	r2, r3, #1
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007346:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d011      	beq.n	8007376 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007352:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00b      	beq.n	8007376 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2202      	movs	r2, #2
 8007364:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800736c:	f043 0204 	orr.w	r2, r3, #4
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007376:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b00      	cmp	r3, #0
 8007380:	d011      	beq.n	80073a6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007382:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00b      	beq.n	80073a6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2204      	movs	r2, #4
 8007394:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800739c:	f043 0202 	orr.w	r2, r3, #2
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d006      	beq.n	80073be <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7fe fdeb 	bl	8005f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d175      	bne.n	80074b6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073d2:	e853 3f00 	ldrex	r3, [r3]
 80073d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80073d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073ee:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80073f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80073fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e4      	bne.n	80073ca <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3308      	adds	r3, #8
 8007406:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007410:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007412:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007416:	f023 0301 	bic.w	r3, r3, #1
 800741a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3308      	adds	r3, #8
 8007424:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007428:	65ba      	str	r2, [r7, #88]	@ 0x58
 800742a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800742e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e1      	bne.n	8007400 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2220      	movs	r2, #32
 8007440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800744e:	2b01      	cmp	r3, #1
 8007450:	d12e      	bne.n	80074b0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007468:	f023 0310 	bic.w	r3, r3, #16
 800746c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007476:	647b      	str	r3, [r7, #68]	@ 0x44
 8007478:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800747c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e6      	bne.n	8007458 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	f003 0310 	and.w	r3, r3, #16
 8007494:	2b10      	cmp	r3, #16
 8007496:	d103      	bne.n	80074a0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2210      	movs	r2, #16
 800749e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7fe fd79 	bl	8005fa0 <HAL_UARTEx_RxEventCallback>
 80074ae:	e002      	b.n	80074b6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7fe fd61 	bl	8005f78 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d006      	beq.n	80074cc <UART_RxISR_16BIT_FIFOEN+0x254>
 80074be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f47f aefa 	bne.w	80072c0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074d2:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80074d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d045      	beq.n	800756a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80074e4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d23e      	bcs.n	800756a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3308      	adds	r3, #8
 80074f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	e853 3f00 	ldrex	r3, [r3]
 80074fa:	623b      	str	r3, [r7, #32]
   return(result);
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007502:	677b      	str	r3, [r7, #116]	@ 0x74
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3308      	adds	r3, #8
 800750a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800750c:	633a      	str	r2, [r7, #48]	@ 0x30
 800750e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007510:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007514:	e841 2300 	strex	r3, r2, [r1]
 8007518:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800751a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1e5      	bne.n	80074ec <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a14      	ldr	r2, [pc, #80]	@ (8007574 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007524:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	60fb      	str	r3, [r7, #12]
   return(result);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f043 0320 	orr.w	r3, r3, #32
 800753a:	673b      	str	r3, [r7, #112]	@ 0x70
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	461a      	mov	r2, r3
 8007542:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007544:	61fb      	str	r3, [r7, #28]
 8007546:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007548:	69b9      	ldr	r1, [r7, #24]
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	e841 2300 	strex	r3, r2, [r1]
 8007550:	617b      	str	r3, [r7, #20]
   return(result);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e6      	bne.n	8007526 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007558:	e007      	b.n	800756a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	699a      	ldr	r2, [r3, #24]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f042 0208 	orr.w	r2, r2, #8
 8007568:	619a      	str	r2, [r3, #24]
}
 800756a:	bf00      	nop
 800756c:	37a0      	adds	r7, #160	@ 0xa0
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	08006e1f 	.word	0x08006e1f

08007578 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d101      	bne.n	80075ca <HAL_UARTEx_DisableFifoMode+0x16>
 80075c6:	2302      	movs	r3, #2
 80075c8:	e027      	b.n	800761a <HAL_UARTEx_DisableFifoMode+0x66>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2224      	movs	r2, #36	@ 0x24
 80075d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f022 0201 	bic.w	r2, r2, #1
 80075f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80075f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2220      	movs	r2, #32
 800760c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007636:	2b01      	cmp	r3, #1
 8007638:	d101      	bne.n	800763e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800763a:	2302      	movs	r3, #2
 800763c:	e02d      	b.n	800769a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2224      	movs	r2, #36	@ 0x24
 800764a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 0201 	bic.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f850 	bl	8007720 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2220      	movs	r2, #32
 800768c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d101      	bne.n	80076ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076b6:	2302      	movs	r3, #2
 80076b8:	e02d      	b.n	8007716 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2224      	movs	r2, #36	@ 0x24
 80076c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 0201 	bic.w	r2, r2, #1
 80076e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f812 	bl	8007720 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800772c:	2b00      	cmp	r3, #0
 800772e:	d108      	bne.n	8007742 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007740:	e031      	b.n	80077a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007742:	2308      	movs	r3, #8
 8007744:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007746:	2308      	movs	r3, #8
 8007748:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	0e5b      	lsrs	r3, r3, #25
 8007752:	b2db      	uxtb	r3, r3
 8007754:	f003 0307 	and.w	r3, r3, #7
 8007758:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	0f5b      	lsrs	r3, r3, #29
 8007762:	b2db      	uxtb	r3, r3
 8007764:	f003 0307 	and.w	r3, r3, #7
 8007768:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800776a:	7bbb      	ldrb	r3, [r7, #14]
 800776c:	7b3a      	ldrb	r2, [r7, #12]
 800776e:	4911      	ldr	r1, [pc, #68]	@ (80077b4 <UARTEx_SetNbDataToProcess+0x94>)
 8007770:	5c8a      	ldrb	r2, [r1, r2]
 8007772:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007776:	7b3a      	ldrb	r2, [r7, #12]
 8007778:	490f      	ldr	r1, [pc, #60]	@ (80077b8 <UARTEx_SetNbDataToProcess+0x98>)
 800777a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800777c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007780:	b29a      	uxth	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	7b7a      	ldrb	r2, [r7, #13]
 800778c:	4909      	ldr	r1, [pc, #36]	@ (80077b4 <UARTEx_SetNbDataToProcess+0x94>)
 800778e:	5c8a      	ldrb	r2, [r1, r2]
 8007790:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007794:	7b7a      	ldrb	r2, [r7, #13]
 8007796:	4908      	ldr	r1, [pc, #32]	@ (80077b8 <UARTEx_SetNbDataToProcess+0x98>)
 8007798:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800779a:	fb93 f3f2 	sdiv	r3, r3, r2
 800779e:	b29a      	uxth	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80077a6:	bf00      	nop
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	08008d7c 	.word	0x08008d7c
 80077b8:	08008d84 	.word	0x08008d84

080077bc <atoi>:
 80077bc:	220a      	movs	r2, #10
 80077be:	2100      	movs	r1, #0
 80077c0:	f000 b87a 	b.w	80078b8 <strtol>

080077c4 <_strtol_l.constprop.0>:
 80077c4:	2b24      	cmp	r3, #36	@ 0x24
 80077c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077ca:	4686      	mov	lr, r0
 80077cc:	4690      	mov	r8, r2
 80077ce:	d801      	bhi.n	80077d4 <_strtol_l.constprop.0+0x10>
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d106      	bne.n	80077e2 <_strtol_l.constprop.0+0x1e>
 80077d4:	f000 fa4a 	bl	8007c6c <__errno>
 80077d8:	2316      	movs	r3, #22
 80077da:	6003      	str	r3, [r0, #0]
 80077dc:	2000      	movs	r0, #0
 80077de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e2:	4834      	ldr	r0, [pc, #208]	@ (80078b4 <_strtol_l.constprop.0+0xf0>)
 80077e4:	460d      	mov	r5, r1
 80077e6:	462a      	mov	r2, r5
 80077e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077ec:	5d06      	ldrb	r6, [r0, r4]
 80077ee:	f016 0608 	ands.w	r6, r6, #8
 80077f2:	d1f8      	bne.n	80077e6 <_strtol_l.constprop.0+0x22>
 80077f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80077f6:	d12d      	bne.n	8007854 <_strtol_l.constprop.0+0x90>
 80077f8:	782c      	ldrb	r4, [r5, #0]
 80077fa:	2601      	movs	r6, #1
 80077fc:	1c95      	adds	r5, r2, #2
 80077fe:	f033 0210 	bics.w	r2, r3, #16
 8007802:	d109      	bne.n	8007818 <_strtol_l.constprop.0+0x54>
 8007804:	2c30      	cmp	r4, #48	@ 0x30
 8007806:	d12a      	bne.n	800785e <_strtol_l.constprop.0+0x9a>
 8007808:	782a      	ldrb	r2, [r5, #0]
 800780a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800780e:	2a58      	cmp	r2, #88	@ 0x58
 8007810:	d125      	bne.n	800785e <_strtol_l.constprop.0+0x9a>
 8007812:	786c      	ldrb	r4, [r5, #1]
 8007814:	2310      	movs	r3, #16
 8007816:	3502      	adds	r5, #2
 8007818:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800781c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007820:	2200      	movs	r2, #0
 8007822:	fbbc f9f3 	udiv	r9, ip, r3
 8007826:	4610      	mov	r0, r2
 8007828:	fb03 ca19 	mls	sl, r3, r9, ip
 800782c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007830:	2f09      	cmp	r7, #9
 8007832:	d81b      	bhi.n	800786c <_strtol_l.constprop.0+0xa8>
 8007834:	463c      	mov	r4, r7
 8007836:	42a3      	cmp	r3, r4
 8007838:	dd27      	ble.n	800788a <_strtol_l.constprop.0+0xc6>
 800783a:	1c57      	adds	r7, r2, #1
 800783c:	d007      	beq.n	800784e <_strtol_l.constprop.0+0x8a>
 800783e:	4581      	cmp	r9, r0
 8007840:	d320      	bcc.n	8007884 <_strtol_l.constprop.0+0xc0>
 8007842:	d101      	bne.n	8007848 <_strtol_l.constprop.0+0x84>
 8007844:	45a2      	cmp	sl, r4
 8007846:	db1d      	blt.n	8007884 <_strtol_l.constprop.0+0xc0>
 8007848:	fb00 4003 	mla	r0, r0, r3, r4
 800784c:	2201      	movs	r2, #1
 800784e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007852:	e7eb      	b.n	800782c <_strtol_l.constprop.0+0x68>
 8007854:	2c2b      	cmp	r4, #43	@ 0x2b
 8007856:	bf04      	itt	eq
 8007858:	782c      	ldrbeq	r4, [r5, #0]
 800785a:	1c95      	addeq	r5, r2, #2
 800785c:	e7cf      	b.n	80077fe <_strtol_l.constprop.0+0x3a>
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1da      	bne.n	8007818 <_strtol_l.constprop.0+0x54>
 8007862:	2c30      	cmp	r4, #48	@ 0x30
 8007864:	bf0c      	ite	eq
 8007866:	2308      	moveq	r3, #8
 8007868:	230a      	movne	r3, #10
 800786a:	e7d5      	b.n	8007818 <_strtol_l.constprop.0+0x54>
 800786c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007870:	2f19      	cmp	r7, #25
 8007872:	d801      	bhi.n	8007878 <_strtol_l.constprop.0+0xb4>
 8007874:	3c37      	subs	r4, #55	@ 0x37
 8007876:	e7de      	b.n	8007836 <_strtol_l.constprop.0+0x72>
 8007878:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800787c:	2f19      	cmp	r7, #25
 800787e:	d804      	bhi.n	800788a <_strtol_l.constprop.0+0xc6>
 8007880:	3c57      	subs	r4, #87	@ 0x57
 8007882:	e7d8      	b.n	8007836 <_strtol_l.constprop.0+0x72>
 8007884:	f04f 32ff 	mov.w	r2, #4294967295
 8007888:	e7e1      	b.n	800784e <_strtol_l.constprop.0+0x8a>
 800788a:	1c53      	adds	r3, r2, #1
 800788c:	d108      	bne.n	80078a0 <_strtol_l.constprop.0+0xdc>
 800788e:	2322      	movs	r3, #34	@ 0x22
 8007890:	f8ce 3000 	str.w	r3, [lr]
 8007894:	4660      	mov	r0, ip
 8007896:	f1b8 0f00 	cmp.w	r8, #0
 800789a:	d0a0      	beq.n	80077de <_strtol_l.constprop.0+0x1a>
 800789c:	1e69      	subs	r1, r5, #1
 800789e:	e006      	b.n	80078ae <_strtol_l.constprop.0+0xea>
 80078a0:	b106      	cbz	r6, 80078a4 <_strtol_l.constprop.0+0xe0>
 80078a2:	4240      	negs	r0, r0
 80078a4:	f1b8 0f00 	cmp.w	r8, #0
 80078a8:	d099      	beq.n	80077de <_strtol_l.constprop.0+0x1a>
 80078aa:	2a00      	cmp	r2, #0
 80078ac:	d1f6      	bne.n	800789c <_strtol_l.constprop.0+0xd8>
 80078ae:	f8c8 1000 	str.w	r1, [r8]
 80078b2:	e794      	b.n	80077de <_strtol_l.constprop.0+0x1a>
 80078b4:	08008d8d 	.word	0x08008d8d

080078b8 <strtol>:
 80078b8:	4613      	mov	r3, r2
 80078ba:	460a      	mov	r2, r1
 80078bc:	4601      	mov	r1, r0
 80078be:	4802      	ldr	r0, [pc, #8]	@ (80078c8 <strtol+0x10>)
 80078c0:	6800      	ldr	r0, [r0, #0]
 80078c2:	f7ff bf7f 	b.w	80077c4 <_strtol_l.constprop.0>
 80078c6:	bf00      	nop
 80078c8:	20000018 	.word	0x20000018

080078cc <std>:
 80078cc:	2300      	movs	r3, #0
 80078ce:	b510      	push	{r4, lr}
 80078d0:	4604      	mov	r4, r0
 80078d2:	e9c0 3300 	strd	r3, r3, [r0]
 80078d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078da:	6083      	str	r3, [r0, #8]
 80078dc:	8181      	strh	r1, [r0, #12]
 80078de:	6643      	str	r3, [r0, #100]	@ 0x64
 80078e0:	81c2      	strh	r2, [r0, #14]
 80078e2:	6183      	str	r3, [r0, #24]
 80078e4:	4619      	mov	r1, r3
 80078e6:	2208      	movs	r2, #8
 80078e8:	305c      	adds	r0, #92	@ 0x5c
 80078ea:	f000 f914 	bl	8007b16 <memset>
 80078ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007924 <std+0x58>)
 80078f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80078f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007928 <std+0x5c>)
 80078f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80078f6:	4b0d      	ldr	r3, [pc, #52]	@ (800792c <std+0x60>)
 80078f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80078fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007930 <std+0x64>)
 80078fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80078fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007934 <std+0x68>)
 8007900:	6224      	str	r4, [r4, #32]
 8007902:	429c      	cmp	r4, r3
 8007904:	d006      	beq.n	8007914 <std+0x48>
 8007906:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800790a:	4294      	cmp	r4, r2
 800790c:	d002      	beq.n	8007914 <std+0x48>
 800790e:	33d0      	adds	r3, #208	@ 0xd0
 8007910:	429c      	cmp	r4, r3
 8007912:	d105      	bne.n	8007920 <std+0x54>
 8007914:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800791c:	f000 b9d0 	b.w	8007cc0 <__retarget_lock_init_recursive>
 8007920:	bd10      	pop	{r4, pc}
 8007922:	bf00      	nop
 8007924:	08007a91 	.word	0x08007a91
 8007928:	08007ab3 	.word	0x08007ab3
 800792c:	08007aeb 	.word	0x08007aeb
 8007930:	08007b0f 	.word	0x08007b0f
 8007934:	200003b4 	.word	0x200003b4

08007938 <stdio_exit_handler>:
 8007938:	4a02      	ldr	r2, [pc, #8]	@ (8007944 <stdio_exit_handler+0xc>)
 800793a:	4903      	ldr	r1, [pc, #12]	@ (8007948 <stdio_exit_handler+0x10>)
 800793c:	4803      	ldr	r0, [pc, #12]	@ (800794c <stdio_exit_handler+0x14>)
 800793e:	f000 b869 	b.w	8007a14 <_fwalk_sglue>
 8007942:	bf00      	nop
 8007944:	2000000c 	.word	0x2000000c
 8007948:	080085d9 	.word	0x080085d9
 800794c:	2000001c 	.word	0x2000001c

08007950 <cleanup_stdio>:
 8007950:	6841      	ldr	r1, [r0, #4]
 8007952:	4b0c      	ldr	r3, [pc, #48]	@ (8007984 <cleanup_stdio+0x34>)
 8007954:	4299      	cmp	r1, r3
 8007956:	b510      	push	{r4, lr}
 8007958:	4604      	mov	r4, r0
 800795a:	d001      	beq.n	8007960 <cleanup_stdio+0x10>
 800795c:	f000 fe3c 	bl	80085d8 <_fflush_r>
 8007960:	68a1      	ldr	r1, [r4, #8]
 8007962:	4b09      	ldr	r3, [pc, #36]	@ (8007988 <cleanup_stdio+0x38>)
 8007964:	4299      	cmp	r1, r3
 8007966:	d002      	beq.n	800796e <cleanup_stdio+0x1e>
 8007968:	4620      	mov	r0, r4
 800796a:	f000 fe35 	bl	80085d8 <_fflush_r>
 800796e:	68e1      	ldr	r1, [r4, #12]
 8007970:	4b06      	ldr	r3, [pc, #24]	@ (800798c <cleanup_stdio+0x3c>)
 8007972:	4299      	cmp	r1, r3
 8007974:	d004      	beq.n	8007980 <cleanup_stdio+0x30>
 8007976:	4620      	mov	r0, r4
 8007978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800797c:	f000 be2c 	b.w	80085d8 <_fflush_r>
 8007980:	bd10      	pop	{r4, pc}
 8007982:	bf00      	nop
 8007984:	200003b4 	.word	0x200003b4
 8007988:	2000041c 	.word	0x2000041c
 800798c:	20000484 	.word	0x20000484

08007990 <global_stdio_init.part.0>:
 8007990:	b510      	push	{r4, lr}
 8007992:	4b0b      	ldr	r3, [pc, #44]	@ (80079c0 <global_stdio_init.part.0+0x30>)
 8007994:	4c0b      	ldr	r4, [pc, #44]	@ (80079c4 <global_stdio_init.part.0+0x34>)
 8007996:	4a0c      	ldr	r2, [pc, #48]	@ (80079c8 <global_stdio_init.part.0+0x38>)
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	4620      	mov	r0, r4
 800799c:	2200      	movs	r2, #0
 800799e:	2104      	movs	r1, #4
 80079a0:	f7ff ff94 	bl	80078cc <std>
 80079a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079a8:	2201      	movs	r2, #1
 80079aa:	2109      	movs	r1, #9
 80079ac:	f7ff ff8e 	bl	80078cc <std>
 80079b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079b4:	2202      	movs	r2, #2
 80079b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079ba:	2112      	movs	r1, #18
 80079bc:	f7ff bf86 	b.w	80078cc <std>
 80079c0:	200004ec 	.word	0x200004ec
 80079c4:	200003b4 	.word	0x200003b4
 80079c8:	08007939 	.word	0x08007939

080079cc <__sfp_lock_acquire>:
 80079cc:	4801      	ldr	r0, [pc, #4]	@ (80079d4 <__sfp_lock_acquire+0x8>)
 80079ce:	f000 b978 	b.w	8007cc2 <__retarget_lock_acquire_recursive>
 80079d2:	bf00      	nop
 80079d4:	200004f5 	.word	0x200004f5

080079d8 <__sfp_lock_release>:
 80079d8:	4801      	ldr	r0, [pc, #4]	@ (80079e0 <__sfp_lock_release+0x8>)
 80079da:	f000 b973 	b.w	8007cc4 <__retarget_lock_release_recursive>
 80079de:	bf00      	nop
 80079e0:	200004f5 	.word	0x200004f5

080079e4 <__sinit>:
 80079e4:	b510      	push	{r4, lr}
 80079e6:	4604      	mov	r4, r0
 80079e8:	f7ff fff0 	bl	80079cc <__sfp_lock_acquire>
 80079ec:	6a23      	ldr	r3, [r4, #32]
 80079ee:	b11b      	cbz	r3, 80079f8 <__sinit+0x14>
 80079f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079f4:	f7ff bff0 	b.w	80079d8 <__sfp_lock_release>
 80079f8:	4b04      	ldr	r3, [pc, #16]	@ (8007a0c <__sinit+0x28>)
 80079fa:	6223      	str	r3, [r4, #32]
 80079fc:	4b04      	ldr	r3, [pc, #16]	@ (8007a10 <__sinit+0x2c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1f5      	bne.n	80079f0 <__sinit+0xc>
 8007a04:	f7ff ffc4 	bl	8007990 <global_stdio_init.part.0>
 8007a08:	e7f2      	b.n	80079f0 <__sinit+0xc>
 8007a0a:	bf00      	nop
 8007a0c:	08007951 	.word	0x08007951
 8007a10:	200004ec 	.word	0x200004ec

08007a14 <_fwalk_sglue>:
 8007a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a18:	4607      	mov	r7, r0
 8007a1a:	4688      	mov	r8, r1
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	2600      	movs	r6, #0
 8007a20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a24:	f1b9 0901 	subs.w	r9, r9, #1
 8007a28:	d505      	bpl.n	8007a36 <_fwalk_sglue+0x22>
 8007a2a:	6824      	ldr	r4, [r4, #0]
 8007a2c:	2c00      	cmp	r4, #0
 8007a2e:	d1f7      	bne.n	8007a20 <_fwalk_sglue+0xc>
 8007a30:	4630      	mov	r0, r6
 8007a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a36:	89ab      	ldrh	r3, [r5, #12]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d907      	bls.n	8007a4c <_fwalk_sglue+0x38>
 8007a3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a40:	3301      	adds	r3, #1
 8007a42:	d003      	beq.n	8007a4c <_fwalk_sglue+0x38>
 8007a44:	4629      	mov	r1, r5
 8007a46:	4638      	mov	r0, r7
 8007a48:	47c0      	blx	r8
 8007a4a:	4306      	orrs	r6, r0
 8007a4c:	3568      	adds	r5, #104	@ 0x68
 8007a4e:	e7e9      	b.n	8007a24 <_fwalk_sglue+0x10>

08007a50 <siprintf>:
 8007a50:	b40e      	push	{r1, r2, r3}
 8007a52:	b500      	push	{lr}
 8007a54:	b09c      	sub	sp, #112	@ 0x70
 8007a56:	ab1d      	add	r3, sp, #116	@ 0x74
 8007a58:	9002      	str	r0, [sp, #8]
 8007a5a:	9006      	str	r0, [sp, #24]
 8007a5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a60:	4809      	ldr	r0, [pc, #36]	@ (8007a88 <siprintf+0x38>)
 8007a62:	9107      	str	r1, [sp, #28]
 8007a64:	9104      	str	r1, [sp, #16]
 8007a66:	4909      	ldr	r1, [pc, #36]	@ (8007a8c <siprintf+0x3c>)
 8007a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a6c:	9105      	str	r1, [sp, #20]
 8007a6e:	6800      	ldr	r0, [r0, #0]
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	a902      	add	r1, sp, #8
 8007a74:	f000 faa2 	bl	8007fbc <_svfiprintf_r>
 8007a78:	9b02      	ldr	r3, [sp, #8]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	701a      	strb	r2, [r3, #0]
 8007a7e:	b01c      	add	sp, #112	@ 0x70
 8007a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a84:	b003      	add	sp, #12
 8007a86:	4770      	bx	lr
 8007a88:	20000018 	.word	0x20000018
 8007a8c:	ffff0208 	.word	0xffff0208

08007a90 <__sread>:
 8007a90:	b510      	push	{r4, lr}
 8007a92:	460c      	mov	r4, r1
 8007a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a98:	f000 f8c4 	bl	8007c24 <_read_r>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	bfab      	itete	ge
 8007aa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8007aa4:	181b      	addge	r3, r3, r0
 8007aa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007aaa:	bfac      	ite	ge
 8007aac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007aae:	81a3      	strhlt	r3, [r4, #12]
 8007ab0:	bd10      	pop	{r4, pc}

08007ab2 <__swrite>:
 8007ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab6:	461f      	mov	r7, r3
 8007ab8:	898b      	ldrh	r3, [r1, #12]
 8007aba:	05db      	lsls	r3, r3, #23
 8007abc:	4605      	mov	r5, r0
 8007abe:	460c      	mov	r4, r1
 8007ac0:	4616      	mov	r6, r2
 8007ac2:	d505      	bpl.n	8007ad0 <__swrite+0x1e>
 8007ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac8:	2302      	movs	r3, #2
 8007aca:	2200      	movs	r2, #0
 8007acc:	f000 f898 	bl	8007c00 <_lseek_r>
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ada:	81a3      	strh	r3, [r4, #12]
 8007adc:	4632      	mov	r2, r6
 8007ade:	463b      	mov	r3, r7
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae6:	f000 b8af 	b.w	8007c48 <_write_r>

08007aea <__sseek>:
 8007aea:	b510      	push	{r4, lr}
 8007aec:	460c      	mov	r4, r1
 8007aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af2:	f000 f885 	bl	8007c00 <_lseek_r>
 8007af6:	1c43      	adds	r3, r0, #1
 8007af8:	89a3      	ldrh	r3, [r4, #12]
 8007afa:	bf15      	itete	ne
 8007afc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007afe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b06:	81a3      	strheq	r3, [r4, #12]
 8007b08:	bf18      	it	ne
 8007b0a:	81a3      	strhne	r3, [r4, #12]
 8007b0c:	bd10      	pop	{r4, pc}

08007b0e <__sclose>:
 8007b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b12:	f000 b865 	b.w	8007be0 <_close_r>

08007b16 <memset>:
 8007b16:	4402      	add	r2, r0
 8007b18:	4603      	mov	r3, r0
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d100      	bne.n	8007b20 <memset+0xa>
 8007b1e:	4770      	bx	lr
 8007b20:	f803 1b01 	strb.w	r1, [r3], #1
 8007b24:	e7f9      	b.n	8007b1a <memset+0x4>
	...

08007b28 <strtok>:
 8007b28:	4b16      	ldr	r3, [pc, #88]	@ (8007b84 <strtok+0x5c>)
 8007b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2e:	681f      	ldr	r7, [r3, #0]
 8007b30:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007b32:	4605      	mov	r5, r0
 8007b34:	460e      	mov	r6, r1
 8007b36:	b9ec      	cbnz	r4, 8007b74 <strtok+0x4c>
 8007b38:	2050      	movs	r0, #80	@ 0x50
 8007b3a:	f000 f92d 	bl	8007d98 <malloc>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	6478      	str	r0, [r7, #68]	@ 0x44
 8007b42:	b920      	cbnz	r0, 8007b4e <strtok+0x26>
 8007b44:	4b10      	ldr	r3, [pc, #64]	@ (8007b88 <strtok+0x60>)
 8007b46:	4811      	ldr	r0, [pc, #68]	@ (8007b8c <strtok+0x64>)
 8007b48:	215b      	movs	r1, #91	@ 0x5b
 8007b4a:	f000 f8bd 	bl	8007cc8 <__assert_func>
 8007b4e:	e9c0 4400 	strd	r4, r4, [r0]
 8007b52:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007b56:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007b5a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007b5e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007b62:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007b66:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007b6a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007b6e:	6184      	str	r4, [r0, #24]
 8007b70:	7704      	strb	r4, [r0, #28]
 8007b72:	6244      	str	r4, [r0, #36]	@ 0x24
 8007b74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b76:	4631      	mov	r1, r6
 8007b78:	4628      	mov	r0, r5
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b80:	f000 b806 	b.w	8007b90 <__strtok_r>
 8007b84:	20000018 	.word	0x20000018
 8007b88:	08008e8d 	.word	0x08008e8d
 8007b8c:	08008ea4 	.word	0x08008ea4

08007b90 <__strtok_r>:
 8007b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b92:	4604      	mov	r4, r0
 8007b94:	b908      	cbnz	r0, 8007b9a <__strtok_r+0xa>
 8007b96:	6814      	ldr	r4, [r2, #0]
 8007b98:	b144      	cbz	r4, 8007bac <__strtok_r+0x1c>
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007ba0:	460f      	mov	r7, r1
 8007ba2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007ba6:	b91e      	cbnz	r6, 8007bb0 <__strtok_r+0x20>
 8007ba8:	b965      	cbnz	r5, 8007bc4 <__strtok_r+0x34>
 8007baa:	6015      	str	r5, [r2, #0]
 8007bac:	2000      	movs	r0, #0
 8007bae:	e005      	b.n	8007bbc <__strtok_r+0x2c>
 8007bb0:	42b5      	cmp	r5, r6
 8007bb2:	d1f6      	bne.n	8007ba2 <__strtok_r+0x12>
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1f0      	bne.n	8007b9a <__strtok_r+0xa>
 8007bb8:	6014      	str	r4, [r2, #0]
 8007bba:	7003      	strb	r3, [r0, #0]
 8007bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bbe:	461c      	mov	r4, r3
 8007bc0:	e00c      	b.n	8007bdc <__strtok_r+0x4c>
 8007bc2:	b915      	cbnz	r5, 8007bca <__strtok_r+0x3a>
 8007bc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007bc8:	460e      	mov	r6, r1
 8007bca:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007bce:	42ab      	cmp	r3, r5
 8007bd0:	d1f7      	bne.n	8007bc2 <__strtok_r+0x32>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0f3      	beq.n	8007bbe <__strtok_r+0x2e>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007bdc:	6014      	str	r4, [r2, #0]
 8007bde:	e7ed      	b.n	8007bbc <__strtok_r+0x2c>

08007be0 <_close_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4d06      	ldr	r5, [pc, #24]	@ (8007bfc <_close_r+0x1c>)
 8007be4:	2300      	movs	r3, #0
 8007be6:	4604      	mov	r4, r0
 8007be8:	4608      	mov	r0, r1
 8007bea:	602b      	str	r3, [r5, #0]
 8007bec:	f7f9 fd28 	bl	8001640 <_close>
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	d102      	bne.n	8007bfa <_close_r+0x1a>
 8007bf4:	682b      	ldr	r3, [r5, #0]
 8007bf6:	b103      	cbz	r3, 8007bfa <_close_r+0x1a>
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	bd38      	pop	{r3, r4, r5, pc}
 8007bfc:	200004f0 	.word	0x200004f0

08007c00 <_lseek_r>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	4d07      	ldr	r5, [pc, #28]	@ (8007c20 <_lseek_r+0x20>)
 8007c04:	4604      	mov	r4, r0
 8007c06:	4608      	mov	r0, r1
 8007c08:	4611      	mov	r1, r2
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	602a      	str	r2, [r5, #0]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f7f9 fd3d 	bl	800168e <_lseek>
 8007c14:	1c43      	adds	r3, r0, #1
 8007c16:	d102      	bne.n	8007c1e <_lseek_r+0x1e>
 8007c18:	682b      	ldr	r3, [r5, #0]
 8007c1a:	b103      	cbz	r3, 8007c1e <_lseek_r+0x1e>
 8007c1c:	6023      	str	r3, [r4, #0]
 8007c1e:	bd38      	pop	{r3, r4, r5, pc}
 8007c20:	200004f0 	.word	0x200004f0

08007c24 <_read_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4d07      	ldr	r5, [pc, #28]	@ (8007c44 <_read_r+0x20>)
 8007c28:	4604      	mov	r4, r0
 8007c2a:	4608      	mov	r0, r1
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	2200      	movs	r2, #0
 8007c30:	602a      	str	r2, [r5, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	f7f9 fccb 	bl	80015ce <_read>
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d102      	bne.n	8007c42 <_read_r+0x1e>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	b103      	cbz	r3, 8007c42 <_read_r+0x1e>
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
 8007c44:	200004f0 	.word	0x200004f0

08007c48 <_write_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	4d07      	ldr	r5, [pc, #28]	@ (8007c68 <_write_r+0x20>)
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	4608      	mov	r0, r1
 8007c50:	4611      	mov	r1, r2
 8007c52:	2200      	movs	r2, #0
 8007c54:	602a      	str	r2, [r5, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	f7f9 fcd6 	bl	8001608 <_write>
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	d102      	bne.n	8007c66 <_write_r+0x1e>
 8007c60:	682b      	ldr	r3, [r5, #0]
 8007c62:	b103      	cbz	r3, 8007c66 <_write_r+0x1e>
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
 8007c68:	200004f0 	.word	0x200004f0

08007c6c <__errno>:
 8007c6c:	4b01      	ldr	r3, [pc, #4]	@ (8007c74 <__errno+0x8>)
 8007c6e:	6818      	ldr	r0, [r3, #0]
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	20000018 	.word	0x20000018

08007c78 <__libc_init_array>:
 8007c78:	b570      	push	{r4, r5, r6, lr}
 8007c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8007cb0 <__libc_init_array+0x38>)
 8007c7c:	4c0d      	ldr	r4, [pc, #52]	@ (8007cb4 <__libc_init_array+0x3c>)
 8007c7e:	1b64      	subs	r4, r4, r5
 8007c80:	10a4      	asrs	r4, r4, #2
 8007c82:	2600      	movs	r6, #0
 8007c84:	42a6      	cmp	r6, r4
 8007c86:	d109      	bne.n	8007c9c <__libc_init_array+0x24>
 8007c88:	4d0b      	ldr	r5, [pc, #44]	@ (8007cb8 <__libc_init_array+0x40>)
 8007c8a:	4c0c      	ldr	r4, [pc, #48]	@ (8007cbc <__libc_init_array+0x44>)
 8007c8c:	f000 fff0 	bl	8008c70 <_init>
 8007c90:	1b64      	subs	r4, r4, r5
 8007c92:	10a4      	asrs	r4, r4, #2
 8007c94:	2600      	movs	r6, #0
 8007c96:	42a6      	cmp	r6, r4
 8007c98:	d105      	bne.n	8007ca6 <__libc_init_array+0x2e>
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
 8007c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ca0:	4798      	blx	r3
 8007ca2:	3601      	adds	r6, #1
 8007ca4:	e7ee      	b.n	8007c84 <__libc_init_array+0xc>
 8007ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007caa:	4798      	blx	r3
 8007cac:	3601      	adds	r6, #1
 8007cae:	e7f2      	b.n	8007c96 <__libc_init_array+0x1e>
 8007cb0:	08008f78 	.word	0x08008f78
 8007cb4:	08008f78 	.word	0x08008f78
 8007cb8:	08008f78 	.word	0x08008f78
 8007cbc:	08008f7c 	.word	0x08008f7c

08007cc0 <__retarget_lock_init_recursive>:
 8007cc0:	4770      	bx	lr

08007cc2 <__retarget_lock_acquire_recursive>:
 8007cc2:	4770      	bx	lr

08007cc4 <__retarget_lock_release_recursive>:
 8007cc4:	4770      	bx	lr
	...

08007cc8 <__assert_func>:
 8007cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cca:	4614      	mov	r4, r2
 8007ccc:	461a      	mov	r2, r3
 8007cce:	4b09      	ldr	r3, [pc, #36]	@ (8007cf4 <__assert_func+0x2c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	68d8      	ldr	r0, [r3, #12]
 8007cd6:	b954      	cbnz	r4, 8007cee <__assert_func+0x26>
 8007cd8:	4b07      	ldr	r3, [pc, #28]	@ (8007cf8 <__assert_func+0x30>)
 8007cda:	461c      	mov	r4, r3
 8007cdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ce0:	9100      	str	r1, [sp, #0]
 8007ce2:	462b      	mov	r3, r5
 8007ce4:	4905      	ldr	r1, [pc, #20]	@ (8007cfc <__assert_func+0x34>)
 8007ce6:	f000 fc9f 	bl	8008628 <fiprintf>
 8007cea:	f000 fce7 	bl	80086bc <abort>
 8007cee:	4b04      	ldr	r3, [pc, #16]	@ (8007d00 <__assert_func+0x38>)
 8007cf0:	e7f4      	b.n	8007cdc <__assert_func+0x14>
 8007cf2:	bf00      	nop
 8007cf4:	20000018 	.word	0x20000018
 8007cf8:	08008f39 	.word	0x08008f39
 8007cfc:	08008f0b 	.word	0x08008f0b
 8007d00:	08008efe 	.word	0x08008efe

08007d04 <_free_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	4605      	mov	r5, r0
 8007d08:	2900      	cmp	r1, #0
 8007d0a:	d041      	beq.n	8007d90 <_free_r+0x8c>
 8007d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d10:	1f0c      	subs	r4, r1, #4
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	bfb8      	it	lt
 8007d16:	18e4      	addlt	r4, r4, r3
 8007d18:	f000 f8e8 	bl	8007eec <__malloc_lock>
 8007d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007d94 <_free_r+0x90>)
 8007d1e:	6813      	ldr	r3, [r2, #0]
 8007d20:	b933      	cbnz	r3, 8007d30 <_free_r+0x2c>
 8007d22:	6063      	str	r3, [r4, #4]
 8007d24:	6014      	str	r4, [r2, #0]
 8007d26:	4628      	mov	r0, r5
 8007d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d2c:	f000 b8e4 	b.w	8007ef8 <__malloc_unlock>
 8007d30:	42a3      	cmp	r3, r4
 8007d32:	d908      	bls.n	8007d46 <_free_r+0x42>
 8007d34:	6820      	ldr	r0, [r4, #0]
 8007d36:	1821      	adds	r1, r4, r0
 8007d38:	428b      	cmp	r3, r1
 8007d3a:	bf01      	itttt	eq
 8007d3c:	6819      	ldreq	r1, [r3, #0]
 8007d3e:	685b      	ldreq	r3, [r3, #4]
 8007d40:	1809      	addeq	r1, r1, r0
 8007d42:	6021      	streq	r1, [r4, #0]
 8007d44:	e7ed      	b.n	8007d22 <_free_r+0x1e>
 8007d46:	461a      	mov	r2, r3
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	b10b      	cbz	r3, 8007d50 <_free_r+0x4c>
 8007d4c:	42a3      	cmp	r3, r4
 8007d4e:	d9fa      	bls.n	8007d46 <_free_r+0x42>
 8007d50:	6811      	ldr	r1, [r2, #0]
 8007d52:	1850      	adds	r0, r2, r1
 8007d54:	42a0      	cmp	r0, r4
 8007d56:	d10b      	bne.n	8007d70 <_free_r+0x6c>
 8007d58:	6820      	ldr	r0, [r4, #0]
 8007d5a:	4401      	add	r1, r0
 8007d5c:	1850      	adds	r0, r2, r1
 8007d5e:	4283      	cmp	r3, r0
 8007d60:	6011      	str	r1, [r2, #0]
 8007d62:	d1e0      	bne.n	8007d26 <_free_r+0x22>
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	6053      	str	r3, [r2, #4]
 8007d6a:	4408      	add	r0, r1
 8007d6c:	6010      	str	r0, [r2, #0]
 8007d6e:	e7da      	b.n	8007d26 <_free_r+0x22>
 8007d70:	d902      	bls.n	8007d78 <_free_r+0x74>
 8007d72:	230c      	movs	r3, #12
 8007d74:	602b      	str	r3, [r5, #0]
 8007d76:	e7d6      	b.n	8007d26 <_free_r+0x22>
 8007d78:	6820      	ldr	r0, [r4, #0]
 8007d7a:	1821      	adds	r1, r4, r0
 8007d7c:	428b      	cmp	r3, r1
 8007d7e:	bf04      	itt	eq
 8007d80:	6819      	ldreq	r1, [r3, #0]
 8007d82:	685b      	ldreq	r3, [r3, #4]
 8007d84:	6063      	str	r3, [r4, #4]
 8007d86:	bf04      	itt	eq
 8007d88:	1809      	addeq	r1, r1, r0
 8007d8a:	6021      	streq	r1, [r4, #0]
 8007d8c:	6054      	str	r4, [r2, #4]
 8007d8e:	e7ca      	b.n	8007d26 <_free_r+0x22>
 8007d90:	bd38      	pop	{r3, r4, r5, pc}
 8007d92:	bf00      	nop
 8007d94:	200004fc 	.word	0x200004fc

08007d98 <malloc>:
 8007d98:	4b02      	ldr	r3, [pc, #8]	@ (8007da4 <malloc+0xc>)
 8007d9a:	4601      	mov	r1, r0
 8007d9c:	6818      	ldr	r0, [r3, #0]
 8007d9e:	f000 b825 	b.w	8007dec <_malloc_r>
 8007da2:	bf00      	nop
 8007da4:	20000018 	.word	0x20000018

08007da8 <sbrk_aligned>:
 8007da8:	b570      	push	{r4, r5, r6, lr}
 8007daa:	4e0f      	ldr	r6, [pc, #60]	@ (8007de8 <sbrk_aligned+0x40>)
 8007dac:	460c      	mov	r4, r1
 8007dae:	6831      	ldr	r1, [r6, #0]
 8007db0:	4605      	mov	r5, r0
 8007db2:	b911      	cbnz	r1, 8007dba <sbrk_aligned+0x12>
 8007db4:	f000 fc64 	bl	8008680 <_sbrk_r>
 8007db8:	6030      	str	r0, [r6, #0]
 8007dba:	4621      	mov	r1, r4
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f000 fc5f 	bl	8008680 <_sbrk_r>
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	d103      	bne.n	8007dce <sbrk_aligned+0x26>
 8007dc6:	f04f 34ff 	mov.w	r4, #4294967295
 8007dca:	4620      	mov	r0, r4
 8007dcc:	bd70      	pop	{r4, r5, r6, pc}
 8007dce:	1cc4      	adds	r4, r0, #3
 8007dd0:	f024 0403 	bic.w	r4, r4, #3
 8007dd4:	42a0      	cmp	r0, r4
 8007dd6:	d0f8      	beq.n	8007dca <sbrk_aligned+0x22>
 8007dd8:	1a21      	subs	r1, r4, r0
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f000 fc50 	bl	8008680 <_sbrk_r>
 8007de0:	3001      	adds	r0, #1
 8007de2:	d1f2      	bne.n	8007dca <sbrk_aligned+0x22>
 8007de4:	e7ef      	b.n	8007dc6 <sbrk_aligned+0x1e>
 8007de6:	bf00      	nop
 8007de8:	200004f8 	.word	0x200004f8

08007dec <_malloc_r>:
 8007dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df0:	1ccd      	adds	r5, r1, #3
 8007df2:	f025 0503 	bic.w	r5, r5, #3
 8007df6:	3508      	adds	r5, #8
 8007df8:	2d0c      	cmp	r5, #12
 8007dfa:	bf38      	it	cc
 8007dfc:	250c      	movcc	r5, #12
 8007dfe:	2d00      	cmp	r5, #0
 8007e00:	4606      	mov	r6, r0
 8007e02:	db01      	blt.n	8007e08 <_malloc_r+0x1c>
 8007e04:	42a9      	cmp	r1, r5
 8007e06:	d904      	bls.n	8007e12 <_malloc_r+0x26>
 8007e08:	230c      	movs	r3, #12
 8007e0a:	6033      	str	r3, [r6, #0]
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ee8 <_malloc_r+0xfc>
 8007e16:	f000 f869 	bl	8007eec <__malloc_lock>
 8007e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e1e:	461c      	mov	r4, r3
 8007e20:	bb44      	cbnz	r4, 8007e74 <_malloc_r+0x88>
 8007e22:	4629      	mov	r1, r5
 8007e24:	4630      	mov	r0, r6
 8007e26:	f7ff ffbf 	bl	8007da8 <sbrk_aligned>
 8007e2a:	1c43      	adds	r3, r0, #1
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	d158      	bne.n	8007ee2 <_malloc_r+0xf6>
 8007e30:	f8d8 4000 	ldr.w	r4, [r8]
 8007e34:	4627      	mov	r7, r4
 8007e36:	2f00      	cmp	r7, #0
 8007e38:	d143      	bne.n	8007ec2 <_malloc_r+0xd6>
 8007e3a:	2c00      	cmp	r4, #0
 8007e3c:	d04b      	beq.n	8007ed6 <_malloc_r+0xea>
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	4639      	mov	r1, r7
 8007e42:	4630      	mov	r0, r6
 8007e44:	eb04 0903 	add.w	r9, r4, r3
 8007e48:	f000 fc1a 	bl	8008680 <_sbrk_r>
 8007e4c:	4581      	cmp	r9, r0
 8007e4e:	d142      	bne.n	8007ed6 <_malloc_r+0xea>
 8007e50:	6821      	ldr	r1, [r4, #0]
 8007e52:	1a6d      	subs	r5, r5, r1
 8007e54:	4629      	mov	r1, r5
 8007e56:	4630      	mov	r0, r6
 8007e58:	f7ff ffa6 	bl	8007da8 <sbrk_aligned>
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d03a      	beq.n	8007ed6 <_malloc_r+0xea>
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	442b      	add	r3, r5
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	f8d8 3000 	ldr.w	r3, [r8]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	bb62      	cbnz	r2, 8007ec8 <_malloc_r+0xdc>
 8007e6e:	f8c8 7000 	str.w	r7, [r8]
 8007e72:	e00f      	b.n	8007e94 <_malloc_r+0xa8>
 8007e74:	6822      	ldr	r2, [r4, #0]
 8007e76:	1b52      	subs	r2, r2, r5
 8007e78:	d420      	bmi.n	8007ebc <_malloc_r+0xd0>
 8007e7a:	2a0b      	cmp	r2, #11
 8007e7c:	d917      	bls.n	8007eae <_malloc_r+0xc2>
 8007e7e:	1961      	adds	r1, r4, r5
 8007e80:	42a3      	cmp	r3, r4
 8007e82:	6025      	str	r5, [r4, #0]
 8007e84:	bf18      	it	ne
 8007e86:	6059      	strne	r1, [r3, #4]
 8007e88:	6863      	ldr	r3, [r4, #4]
 8007e8a:	bf08      	it	eq
 8007e8c:	f8c8 1000 	streq.w	r1, [r8]
 8007e90:	5162      	str	r2, [r4, r5]
 8007e92:	604b      	str	r3, [r1, #4]
 8007e94:	4630      	mov	r0, r6
 8007e96:	f000 f82f 	bl	8007ef8 <__malloc_unlock>
 8007e9a:	f104 000b 	add.w	r0, r4, #11
 8007e9e:	1d23      	adds	r3, r4, #4
 8007ea0:	f020 0007 	bic.w	r0, r0, #7
 8007ea4:	1ac2      	subs	r2, r0, r3
 8007ea6:	bf1c      	itt	ne
 8007ea8:	1a1b      	subne	r3, r3, r0
 8007eaa:	50a3      	strne	r3, [r4, r2]
 8007eac:	e7af      	b.n	8007e0e <_malloc_r+0x22>
 8007eae:	6862      	ldr	r2, [r4, #4]
 8007eb0:	42a3      	cmp	r3, r4
 8007eb2:	bf0c      	ite	eq
 8007eb4:	f8c8 2000 	streq.w	r2, [r8]
 8007eb8:	605a      	strne	r2, [r3, #4]
 8007eba:	e7eb      	b.n	8007e94 <_malloc_r+0xa8>
 8007ebc:	4623      	mov	r3, r4
 8007ebe:	6864      	ldr	r4, [r4, #4]
 8007ec0:	e7ae      	b.n	8007e20 <_malloc_r+0x34>
 8007ec2:	463c      	mov	r4, r7
 8007ec4:	687f      	ldr	r7, [r7, #4]
 8007ec6:	e7b6      	b.n	8007e36 <_malloc_r+0x4a>
 8007ec8:	461a      	mov	r2, r3
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	d1fb      	bne.n	8007ec8 <_malloc_r+0xdc>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	6053      	str	r3, [r2, #4]
 8007ed4:	e7de      	b.n	8007e94 <_malloc_r+0xa8>
 8007ed6:	230c      	movs	r3, #12
 8007ed8:	6033      	str	r3, [r6, #0]
 8007eda:	4630      	mov	r0, r6
 8007edc:	f000 f80c 	bl	8007ef8 <__malloc_unlock>
 8007ee0:	e794      	b.n	8007e0c <_malloc_r+0x20>
 8007ee2:	6005      	str	r5, [r0, #0]
 8007ee4:	e7d6      	b.n	8007e94 <_malloc_r+0xa8>
 8007ee6:	bf00      	nop
 8007ee8:	200004fc 	.word	0x200004fc

08007eec <__malloc_lock>:
 8007eec:	4801      	ldr	r0, [pc, #4]	@ (8007ef4 <__malloc_lock+0x8>)
 8007eee:	f7ff bee8 	b.w	8007cc2 <__retarget_lock_acquire_recursive>
 8007ef2:	bf00      	nop
 8007ef4:	200004f4 	.word	0x200004f4

08007ef8 <__malloc_unlock>:
 8007ef8:	4801      	ldr	r0, [pc, #4]	@ (8007f00 <__malloc_unlock+0x8>)
 8007efa:	f7ff bee3 	b.w	8007cc4 <__retarget_lock_release_recursive>
 8007efe:	bf00      	nop
 8007f00:	200004f4 	.word	0x200004f4

08007f04 <__ssputs_r>:
 8007f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f08:	688e      	ldr	r6, [r1, #8]
 8007f0a:	461f      	mov	r7, r3
 8007f0c:	42be      	cmp	r6, r7
 8007f0e:	680b      	ldr	r3, [r1, #0]
 8007f10:	4682      	mov	sl, r0
 8007f12:	460c      	mov	r4, r1
 8007f14:	4690      	mov	r8, r2
 8007f16:	d82d      	bhi.n	8007f74 <__ssputs_r+0x70>
 8007f18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f20:	d026      	beq.n	8007f70 <__ssputs_r+0x6c>
 8007f22:	6965      	ldr	r5, [r4, #20]
 8007f24:	6909      	ldr	r1, [r1, #16]
 8007f26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f2a:	eba3 0901 	sub.w	r9, r3, r1
 8007f2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f32:	1c7b      	adds	r3, r7, #1
 8007f34:	444b      	add	r3, r9
 8007f36:	106d      	asrs	r5, r5, #1
 8007f38:	429d      	cmp	r5, r3
 8007f3a:	bf38      	it	cc
 8007f3c:	461d      	movcc	r5, r3
 8007f3e:	0553      	lsls	r3, r2, #21
 8007f40:	d527      	bpl.n	8007f92 <__ssputs_r+0x8e>
 8007f42:	4629      	mov	r1, r5
 8007f44:	f7ff ff52 	bl	8007dec <_malloc_r>
 8007f48:	4606      	mov	r6, r0
 8007f4a:	b360      	cbz	r0, 8007fa6 <__ssputs_r+0xa2>
 8007f4c:	6921      	ldr	r1, [r4, #16]
 8007f4e:	464a      	mov	r2, r9
 8007f50:	f000 fba6 	bl	80086a0 <memcpy>
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f5e:	81a3      	strh	r3, [r4, #12]
 8007f60:	6126      	str	r6, [r4, #16]
 8007f62:	6165      	str	r5, [r4, #20]
 8007f64:	444e      	add	r6, r9
 8007f66:	eba5 0509 	sub.w	r5, r5, r9
 8007f6a:	6026      	str	r6, [r4, #0]
 8007f6c:	60a5      	str	r5, [r4, #8]
 8007f6e:	463e      	mov	r6, r7
 8007f70:	42be      	cmp	r6, r7
 8007f72:	d900      	bls.n	8007f76 <__ssputs_r+0x72>
 8007f74:	463e      	mov	r6, r7
 8007f76:	6820      	ldr	r0, [r4, #0]
 8007f78:	4632      	mov	r2, r6
 8007f7a:	4641      	mov	r1, r8
 8007f7c:	f000 fb66 	bl	800864c <memmove>
 8007f80:	68a3      	ldr	r3, [r4, #8]
 8007f82:	1b9b      	subs	r3, r3, r6
 8007f84:	60a3      	str	r3, [r4, #8]
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	4433      	add	r3, r6
 8007f8a:	6023      	str	r3, [r4, #0]
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f92:	462a      	mov	r2, r5
 8007f94:	f000 fb99 	bl	80086ca <_realloc_r>
 8007f98:	4606      	mov	r6, r0
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d1e0      	bne.n	8007f60 <__ssputs_r+0x5c>
 8007f9e:	6921      	ldr	r1, [r4, #16]
 8007fa0:	4650      	mov	r0, sl
 8007fa2:	f7ff feaf 	bl	8007d04 <_free_r>
 8007fa6:	230c      	movs	r3, #12
 8007fa8:	f8ca 3000 	str.w	r3, [sl]
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fb2:	81a3      	strh	r3, [r4, #12]
 8007fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb8:	e7e9      	b.n	8007f8e <__ssputs_r+0x8a>
	...

08007fbc <_svfiprintf_r>:
 8007fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc0:	4698      	mov	r8, r3
 8007fc2:	898b      	ldrh	r3, [r1, #12]
 8007fc4:	061b      	lsls	r3, r3, #24
 8007fc6:	b09d      	sub	sp, #116	@ 0x74
 8007fc8:	4607      	mov	r7, r0
 8007fca:	460d      	mov	r5, r1
 8007fcc:	4614      	mov	r4, r2
 8007fce:	d510      	bpl.n	8007ff2 <_svfiprintf_r+0x36>
 8007fd0:	690b      	ldr	r3, [r1, #16]
 8007fd2:	b973      	cbnz	r3, 8007ff2 <_svfiprintf_r+0x36>
 8007fd4:	2140      	movs	r1, #64	@ 0x40
 8007fd6:	f7ff ff09 	bl	8007dec <_malloc_r>
 8007fda:	6028      	str	r0, [r5, #0]
 8007fdc:	6128      	str	r0, [r5, #16]
 8007fde:	b930      	cbnz	r0, 8007fee <_svfiprintf_r+0x32>
 8007fe0:	230c      	movs	r3, #12
 8007fe2:	603b      	str	r3, [r7, #0]
 8007fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe8:	b01d      	add	sp, #116	@ 0x74
 8007fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fee:	2340      	movs	r3, #64	@ 0x40
 8007ff0:	616b      	str	r3, [r5, #20]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ff6:	2320      	movs	r3, #32
 8007ff8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008000:	2330      	movs	r3, #48	@ 0x30
 8008002:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80081a0 <_svfiprintf_r+0x1e4>
 8008006:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800800a:	f04f 0901 	mov.w	r9, #1
 800800e:	4623      	mov	r3, r4
 8008010:	469a      	mov	sl, r3
 8008012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008016:	b10a      	cbz	r2, 800801c <_svfiprintf_r+0x60>
 8008018:	2a25      	cmp	r2, #37	@ 0x25
 800801a:	d1f9      	bne.n	8008010 <_svfiprintf_r+0x54>
 800801c:	ebba 0b04 	subs.w	fp, sl, r4
 8008020:	d00b      	beq.n	800803a <_svfiprintf_r+0x7e>
 8008022:	465b      	mov	r3, fp
 8008024:	4622      	mov	r2, r4
 8008026:	4629      	mov	r1, r5
 8008028:	4638      	mov	r0, r7
 800802a:	f7ff ff6b 	bl	8007f04 <__ssputs_r>
 800802e:	3001      	adds	r0, #1
 8008030:	f000 80a7 	beq.w	8008182 <_svfiprintf_r+0x1c6>
 8008034:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008036:	445a      	add	r2, fp
 8008038:	9209      	str	r2, [sp, #36]	@ 0x24
 800803a:	f89a 3000 	ldrb.w	r3, [sl]
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 809f 	beq.w	8008182 <_svfiprintf_r+0x1c6>
 8008044:	2300      	movs	r3, #0
 8008046:	f04f 32ff 	mov.w	r2, #4294967295
 800804a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800804e:	f10a 0a01 	add.w	sl, sl, #1
 8008052:	9304      	str	r3, [sp, #16]
 8008054:	9307      	str	r3, [sp, #28]
 8008056:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800805a:	931a      	str	r3, [sp, #104]	@ 0x68
 800805c:	4654      	mov	r4, sl
 800805e:	2205      	movs	r2, #5
 8008060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008064:	484e      	ldr	r0, [pc, #312]	@ (80081a0 <_svfiprintf_r+0x1e4>)
 8008066:	f7f8 f8eb 	bl	8000240 <memchr>
 800806a:	9a04      	ldr	r2, [sp, #16]
 800806c:	b9d8      	cbnz	r0, 80080a6 <_svfiprintf_r+0xea>
 800806e:	06d0      	lsls	r0, r2, #27
 8008070:	bf44      	itt	mi
 8008072:	2320      	movmi	r3, #32
 8008074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008078:	0711      	lsls	r1, r2, #28
 800807a:	bf44      	itt	mi
 800807c:	232b      	movmi	r3, #43	@ 0x2b
 800807e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008082:	f89a 3000 	ldrb.w	r3, [sl]
 8008086:	2b2a      	cmp	r3, #42	@ 0x2a
 8008088:	d015      	beq.n	80080b6 <_svfiprintf_r+0xfa>
 800808a:	9a07      	ldr	r2, [sp, #28]
 800808c:	4654      	mov	r4, sl
 800808e:	2000      	movs	r0, #0
 8008090:	f04f 0c0a 	mov.w	ip, #10
 8008094:	4621      	mov	r1, r4
 8008096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800809a:	3b30      	subs	r3, #48	@ 0x30
 800809c:	2b09      	cmp	r3, #9
 800809e:	d94b      	bls.n	8008138 <_svfiprintf_r+0x17c>
 80080a0:	b1b0      	cbz	r0, 80080d0 <_svfiprintf_r+0x114>
 80080a2:	9207      	str	r2, [sp, #28]
 80080a4:	e014      	b.n	80080d0 <_svfiprintf_r+0x114>
 80080a6:	eba0 0308 	sub.w	r3, r0, r8
 80080aa:	fa09 f303 	lsl.w	r3, r9, r3
 80080ae:	4313      	orrs	r3, r2
 80080b0:	9304      	str	r3, [sp, #16]
 80080b2:	46a2      	mov	sl, r4
 80080b4:	e7d2      	b.n	800805c <_svfiprintf_r+0xa0>
 80080b6:	9b03      	ldr	r3, [sp, #12]
 80080b8:	1d19      	adds	r1, r3, #4
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	9103      	str	r1, [sp, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	bfbb      	ittet	lt
 80080c2:	425b      	neglt	r3, r3
 80080c4:	f042 0202 	orrlt.w	r2, r2, #2
 80080c8:	9307      	strge	r3, [sp, #28]
 80080ca:	9307      	strlt	r3, [sp, #28]
 80080cc:	bfb8      	it	lt
 80080ce:	9204      	strlt	r2, [sp, #16]
 80080d0:	7823      	ldrb	r3, [r4, #0]
 80080d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80080d4:	d10a      	bne.n	80080ec <_svfiprintf_r+0x130>
 80080d6:	7863      	ldrb	r3, [r4, #1]
 80080d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080da:	d132      	bne.n	8008142 <_svfiprintf_r+0x186>
 80080dc:	9b03      	ldr	r3, [sp, #12]
 80080de:	1d1a      	adds	r2, r3, #4
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	9203      	str	r2, [sp, #12]
 80080e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080e8:	3402      	adds	r4, #2
 80080ea:	9305      	str	r3, [sp, #20]
 80080ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80081b0 <_svfiprintf_r+0x1f4>
 80080f0:	7821      	ldrb	r1, [r4, #0]
 80080f2:	2203      	movs	r2, #3
 80080f4:	4650      	mov	r0, sl
 80080f6:	f7f8 f8a3 	bl	8000240 <memchr>
 80080fa:	b138      	cbz	r0, 800810c <_svfiprintf_r+0x150>
 80080fc:	9b04      	ldr	r3, [sp, #16]
 80080fe:	eba0 000a 	sub.w	r0, r0, sl
 8008102:	2240      	movs	r2, #64	@ 0x40
 8008104:	4082      	lsls	r2, r0
 8008106:	4313      	orrs	r3, r2
 8008108:	3401      	adds	r4, #1
 800810a:	9304      	str	r3, [sp, #16]
 800810c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008110:	4824      	ldr	r0, [pc, #144]	@ (80081a4 <_svfiprintf_r+0x1e8>)
 8008112:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008116:	2206      	movs	r2, #6
 8008118:	f7f8 f892 	bl	8000240 <memchr>
 800811c:	2800      	cmp	r0, #0
 800811e:	d036      	beq.n	800818e <_svfiprintf_r+0x1d2>
 8008120:	4b21      	ldr	r3, [pc, #132]	@ (80081a8 <_svfiprintf_r+0x1ec>)
 8008122:	bb1b      	cbnz	r3, 800816c <_svfiprintf_r+0x1b0>
 8008124:	9b03      	ldr	r3, [sp, #12]
 8008126:	3307      	adds	r3, #7
 8008128:	f023 0307 	bic.w	r3, r3, #7
 800812c:	3308      	adds	r3, #8
 800812e:	9303      	str	r3, [sp, #12]
 8008130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008132:	4433      	add	r3, r6
 8008134:	9309      	str	r3, [sp, #36]	@ 0x24
 8008136:	e76a      	b.n	800800e <_svfiprintf_r+0x52>
 8008138:	fb0c 3202 	mla	r2, ip, r2, r3
 800813c:	460c      	mov	r4, r1
 800813e:	2001      	movs	r0, #1
 8008140:	e7a8      	b.n	8008094 <_svfiprintf_r+0xd8>
 8008142:	2300      	movs	r3, #0
 8008144:	3401      	adds	r4, #1
 8008146:	9305      	str	r3, [sp, #20]
 8008148:	4619      	mov	r1, r3
 800814a:	f04f 0c0a 	mov.w	ip, #10
 800814e:	4620      	mov	r0, r4
 8008150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008154:	3a30      	subs	r2, #48	@ 0x30
 8008156:	2a09      	cmp	r2, #9
 8008158:	d903      	bls.n	8008162 <_svfiprintf_r+0x1a6>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0c6      	beq.n	80080ec <_svfiprintf_r+0x130>
 800815e:	9105      	str	r1, [sp, #20]
 8008160:	e7c4      	b.n	80080ec <_svfiprintf_r+0x130>
 8008162:	fb0c 2101 	mla	r1, ip, r1, r2
 8008166:	4604      	mov	r4, r0
 8008168:	2301      	movs	r3, #1
 800816a:	e7f0      	b.n	800814e <_svfiprintf_r+0x192>
 800816c:	ab03      	add	r3, sp, #12
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	462a      	mov	r2, r5
 8008172:	4b0e      	ldr	r3, [pc, #56]	@ (80081ac <_svfiprintf_r+0x1f0>)
 8008174:	a904      	add	r1, sp, #16
 8008176:	4638      	mov	r0, r7
 8008178:	f3af 8000 	nop.w
 800817c:	1c42      	adds	r2, r0, #1
 800817e:	4606      	mov	r6, r0
 8008180:	d1d6      	bne.n	8008130 <_svfiprintf_r+0x174>
 8008182:	89ab      	ldrh	r3, [r5, #12]
 8008184:	065b      	lsls	r3, r3, #25
 8008186:	f53f af2d 	bmi.w	8007fe4 <_svfiprintf_r+0x28>
 800818a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800818c:	e72c      	b.n	8007fe8 <_svfiprintf_r+0x2c>
 800818e:	ab03      	add	r3, sp, #12
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	462a      	mov	r2, r5
 8008194:	4b05      	ldr	r3, [pc, #20]	@ (80081ac <_svfiprintf_r+0x1f0>)
 8008196:	a904      	add	r1, sp, #16
 8008198:	4638      	mov	r0, r7
 800819a:	f000 f879 	bl	8008290 <_printf_i>
 800819e:	e7ed      	b.n	800817c <_svfiprintf_r+0x1c0>
 80081a0:	08008f3a 	.word	0x08008f3a
 80081a4:	08008f44 	.word	0x08008f44
 80081a8:	00000000 	.word	0x00000000
 80081ac:	08007f05 	.word	0x08007f05
 80081b0:	08008f40 	.word	0x08008f40

080081b4 <_printf_common>:
 80081b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b8:	4616      	mov	r6, r2
 80081ba:	4698      	mov	r8, r3
 80081bc:	688a      	ldr	r2, [r1, #8]
 80081be:	690b      	ldr	r3, [r1, #16]
 80081c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081c4:	4293      	cmp	r3, r2
 80081c6:	bfb8      	it	lt
 80081c8:	4613      	movlt	r3, r2
 80081ca:	6033      	str	r3, [r6, #0]
 80081cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081d0:	4607      	mov	r7, r0
 80081d2:	460c      	mov	r4, r1
 80081d4:	b10a      	cbz	r2, 80081da <_printf_common+0x26>
 80081d6:	3301      	adds	r3, #1
 80081d8:	6033      	str	r3, [r6, #0]
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	0699      	lsls	r1, r3, #26
 80081de:	bf42      	ittt	mi
 80081e0:	6833      	ldrmi	r3, [r6, #0]
 80081e2:	3302      	addmi	r3, #2
 80081e4:	6033      	strmi	r3, [r6, #0]
 80081e6:	6825      	ldr	r5, [r4, #0]
 80081e8:	f015 0506 	ands.w	r5, r5, #6
 80081ec:	d106      	bne.n	80081fc <_printf_common+0x48>
 80081ee:	f104 0a19 	add.w	sl, r4, #25
 80081f2:	68e3      	ldr	r3, [r4, #12]
 80081f4:	6832      	ldr	r2, [r6, #0]
 80081f6:	1a9b      	subs	r3, r3, r2
 80081f8:	42ab      	cmp	r3, r5
 80081fa:	dc26      	bgt.n	800824a <_printf_common+0x96>
 80081fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008200:	6822      	ldr	r2, [r4, #0]
 8008202:	3b00      	subs	r3, #0
 8008204:	bf18      	it	ne
 8008206:	2301      	movne	r3, #1
 8008208:	0692      	lsls	r2, r2, #26
 800820a:	d42b      	bmi.n	8008264 <_printf_common+0xb0>
 800820c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008210:	4641      	mov	r1, r8
 8008212:	4638      	mov	r0, r7
 8008214:	47c8      	blx	r9
 8008216:	3001      	adds	r0, #1
 8008218:	d01e      	beq.n	8008258 <_printf_common+0xa4>
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	6922      	ldr	r2, [r4, #16]
 800821e:	f003 0306 	and.w	r3, r3, #6
 8008222:	2b04      	cmp	r3, #4
 8008224:	bf02      	ittt	eq
 8008226:	68e5      	ldreq	r5, [r4, #12]
 8008228:	6833      	ldreq	r3, [r6, #0]
 800822a:	1aed      	subeq	r5, r5, r3
 800822c:	68a3      	ldr	r3, [r4, #8]
 800822e:	bf0c      	ite	eq
 8008230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008234:	2500      	movne	r5, #0
 8008236:	4293      	cmp	r3, r2
 8008238:	bfc4      	itt	gt
 800823a:	1a9b      	subgt	r3, r3, r2
 800823c:	18ed      	addgt	r5, r5, r3
 800823e:	2600      	movs	r6, #0
 8008240:	341a      	adds	r4, #26
 8008242:	42b5      	cmp	r5, r6
 8008244:	d11a      	bne.n	800827c <_printf_common+0xc8>
 8008246:	2000      	movs	r0, #0
 8008248:	e008      	b.n	800825c <_printf_common+0xa8>
 800824a:	2301      	movs	r3, #1
 800824c:	4652      	mov	r2, sl
 800824e:	4641      	mov	r1, r8
 8008250:	4638      	mov	r0, r7
 8008252:	47c8      	blx	r9
 8008254:	3001      	adds	r0, #1
 8008256:	d103      	bne.n	8008260 <_printf_common+0xac>
 8008258:	f04f 30ff 	mov.w	r0, #4294967295
 800825c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008260:	3501      	adds	r5, #1
 8008262:	e7c6      	b.n	80081f2 <_printf_common+0x3e>
 8008264:	18e1      	adds	r1, r4, r3
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	2030      	movs	r0, #48	@ 0x30
 800826a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800826e:	4422      	add	r2, r4
 8008270:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008274:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008278:	3302      	adds	r3, #2
 800827a:	e7c7      	b.n	800820c <_printf_common+0x58>
 800827c:	2301      	movs	r3, #1
 800827e:	4622      	mov	r2, r4
 8008280:	4641      	mov	r1, r8
 8008282:	4638      	mov	r0, r7
 8008284:	47c8      	blx	r9
 8008286:	3001      	adds	r0, #1
 8008288:	d0e6      	beq.n	8008258 <_printf_common+0xa4>
 800828a:	3601      	adds	r6, #1
 800828c:	e7d9      	b.n	8008242 <_printf_common+0x8e>
	...

08008290 <_printf_i>:
 8008290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008294:	7e0f      	ldrb	r7, [r1, #24]
 8008296:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008298:	2f78      	cmp	r7, #120	@ 0x78
 800829a:	4691      	mov	r9, r2
 800829c:	4680      	mov	r8, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	469a      	mov	sl, r3
 80082a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082a6:	d807      	bhi.n	80082b8 <_printf_i+0x28>
 80082a8:	2f62      	cmp	r7, #98	@ 0x62
 80082aa:	d80a      	bhi.n	80082c2 <_printf_i+0x32>
 80082ac:	2f00      	cmp	r7, #0
 80082ae:	f000 80d2 	beq.w	8008456 <_printf_i+0x1c6>
 80082b2:	2f58      	cmp	r7, #88	@ 0x58
 80082b4:	f000 80b9 	beq.w	800842a <_printf_i+0x19a>
 80082b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082c0:	e03a      	b.n	8008338 <_printf_i+0xa8>
 80082c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082c6:	2b15      	cmp	r3, #21
 80082c8:	d8f6      	bhi.n	80082b8 <_printf_i+0x28>
 80082ca:	a101      	add	r1, pc, #4	@ (adr r1, 80082d0 <_printf_i+0x40>)
 80082cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082d0:	08008329 	.word	0x08008329
 80082d4:	0800833d 	.word	0x0800833d
 80082d8:	080082b9 	.word	0x080082b9
 80082dc:	080082b9 	.word	0x080082b9
 80082e0:	080082b9 	.word	0x080082b9
 80082e4:	080082b9 	.word	0x080082b9
 80082e8:	0800833d 	.word	0x0800833d
 80082ec:	080082b9 	.word	0x080082b9
 80082f0:	080082b9 	.word	0x080082b9
 80082f4:	080082b9 	.word	0x080082b9
 80082f8:	080082b9 	.word	0x080082b9
 80082fc:	0800843d 	.word	0x0800843d
 8008300:	08008367 	.word	0x08008367
 8008304:	080083f7 	.word	0x080083f7
 8008308:	080082b9 	.word	0x080082b9
 800830c:	080082b9 	.word	0x080082b9
 8008310:	0800845f 	.word	0x0800845f
 8008314:	080082b9 	.word	0x080082b9
 8008318:	08008367 	.word	0x08008367
 800831c:	080082b9 	.word	0x080082b9
 8008320:	080082b9 	.word	0x080082b9
 8008324:	080083ff 	.word	0x080083ff
 8008328:	6833      	ldr	r3, [r6, #0]
 800832a:	1d1a      	adds	r2, r3, #4
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6032      	str	r2, [r6, #0]
 8008330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008334:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008338:	2301      	movs	r3, #1
 800833a:	e09d      	b.n	8008478 <_printf_i+0x1e8>
 800833c:	6833      	ldr	r3, [r6, #0]
 800833e:	6820      	ldr	r0, [r4, #0]
 8008340:	1d19      	adds	r1, r3, #4
 8008342:	6031      	str	r1, [r6, #0]
 8008344:	0606      	lsls	r6, r0, #24
 8008346:	d501      	bpl.n	800834c <_printf_i+0xbc>
 8008348:	681d      	ldr	r5, [r3, #0]
 800834a:	e003      	b.n	8008354 <_printf_i+0xc4>
 800834c:	0645      	lsls	r5, r0, #25
 800834e:	d5fb      	bpl.n	8008348 <_printf_i+0xb8>
 8008350:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008354:	2d00      	cmp	r5, #0
 8008356:	da03      	bge.n	8008360 <_printf_i+0xd0>
 8008358:	232d      	movs	r3, #45	@ 0x2d
 800835a:	426d      	negs	r5, r5
 800835c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008360:	4859      	ldr	r0, [pc, #356]	@ (80084c8 <_printf_i+0x238>)
 8008362:	230a      	movs	r3, #10
 8008364:	e011      	b.n	800838a <_printf_i+0xfa>
 8008366:	6821      	ldr	r1, [r4, #0]
 8008368:	6833      	ldr	r3, [r6, #0]
 800836a:	0608      	lsls	r0, r1, #24
 800836c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008370:	d402      	bmi.n	8008378 <_printf_i+0xe8>
 8008372:	0649      	lsls	r1, r1, #25
 8008374:	bf48      	it	mi
 8008376:	b2ad      	uxthmi	r5, r5
 8008378:	2f6f      	cmp	r7, #111	@ 0x6f
 800837a:	4853      	ldr	r0, [pc, #332]	@ (80084c8 <_printf_i+0x238>)
 800837c:	6033      	str	r3, [r6, #0]
 800837e:	bf14      	ite	ne
 8008380:	230a      	movne	r3, #10
 8008382:	2308      	moveq	r3, #8
 8008384:	2100      	movs	r1, #0
 8008386:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800838a:	6866      	ldr	r6, [r4, #4]
 800838c:	60a6      	str	r6, [r4, #8]
 800838e:	2e00      	cmp	r6, #0
 8008390:	bfa2      	ittt	ge
 8008392:	6821      	ldrge	r1, [r4, #0]
 8008394:	f021 0104 	bicge.w	r1, r1, #4
 8008398:	6021      	strge	r1, [r4, #0]
 800839a:	b90d      	cbnz	r5, 80083a0 <_printf_i+0x110>
 800839c:	2e00      	cmp	r6, #0
 800839e:	d04b      	beq.n	8008438 <_printf_i+0x1a8>
 80083a0:	4616      	mov	r6, r2
 80083a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80083a6:	fb03 5711 	mls	r7, r3, r1, r5
 80083aa:	5dc7      	ldrb	r7, [r0, r7]
 80083ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083b0:	462f      	mov	r7, r5
 80083b2:	42bb      	cmp	r3, r7
 80083b4:	460d      	mov	r5, r1
 80083b6:	d9f4      	bls.n	80083a2 <_printf_i+0x112>
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d10b      	bne.n	80083d4 <_printf_i+0x144>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	07df      	lsls	r7, r3, #31
 80083c0:	d508      	bpl.n	80083d4 <_printf_i+0x144>
 80083c2:	6923      	ldr	r3, [r4, #16]
 80083c4:	6861      	ldr	r1, [r4, #4]
 80083c6:	4299      	cmp	r1, r3
 80083c8:	bfde      	ittt	le
 80083ca:	2330      	movle	r3, #48	@ 0x30
 80083cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083d4:	1b92      	subs	r2, r2, r6
 80083d6:	6122      	str	r2, [r4, #16]
 80083d8:	f8cd a000 	str.w	sl, [sp]
 80083dc:	464b      	mov	r3, r9
 80083de:	aa03      	add	r2, sp, #12
 80083e0:	4621      	mov	r1, r4
 80083e2:	4640      	mov	r0, r8
 80083e4:	f7ff fee6 	bl	80081b4 <_printf_common>
 80083e8:	3001      	adds	r0, #1
 80083ea:	d14a      	bne.n	8008482 <_printf_i+0x1f2>
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	b004      	add	sp, #16
 80083f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	f043 0320 	orr.w	r3, r3, #32
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	4833      	ldr	r0, [pc, #204]	@ (80084cc <_printf_i+0x23c>)
 8008400:	2778      	movs	r7, #120	@ 0x78
 8008402:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	6831      	ldr	r1, [r6, #0]
 800840a:	061f      	lsls	r7, r3, #24
 800840c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008410:	d402      	bmi.n	8008418 <_printf_i+0x188>
 8008412:	065f      	lsls	r7, r3, #25
 8008414:	bf48      	it	mi
 8008416:	b2ad      	uxthmi	r5, r5
 8008418:	6031      	str	r1, [r6, #0]
 800841a:	07d9      	lsls	r1, r3, #31
 800841c:	bf44      	itt	mi
 800841e:	f043 0320 	orrmi.w	r3, r3, #32
 8008422:	6023      	strmi	r3, [r4, #0]
 8008424:	b11d      	cbz	r5, 800842e <_printf_i+0x19e>
 8008426:	2310      	movs	r3, #16
 8008428:	e7ac      	b.n	8008384 <_printf_i+0xf4>
 800842a:	4827      	ldr	r0, [pc, #156]	@ (80084c8 <_printf_i+0x238>)
 800842c:	e7e9      	b.n	8008402 <_printf_i+0x172>
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	f023 0320 	bic.w	r3, r3, #32
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	e7f6      	b.n	8008426 <_printf_i+0x196>
 8008438:	4616      	mov	r6, r2
 800843a:	e7bd      	b.n	80083b8 <_printf_i+0x128>
 800843c:	6833      	ldr	r3, [r6, #0]
 800843e:	6825      	ldr	r5, [r4, #0]
 8008440:	6961      	ldr	r1, [r4, #20]
 8008442:	1d18      	adds	r0, r3, #4
 8008444:	6030      	str	r0, [r6, #0]
 8008446:	062e      	lsls	r6, r5, #24
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	d501      	bpl.n	8008450 <_printf_i+0x1c0>
 800844c:	6019      	str	r1, [r3, #0]
 800844e:	e002      	b.n	8008456 <_printf_i+0x1c6>
 8008450:	0668      	lsls	r0, r5, #25
 8008452:	d5fb      	bpl.n	800844c <_printf_i+0x1bc>
 8008454:	8019      	strh	r1, [r3, #0]
 8008456:	2300      	movs	r3, #0
 8008458:	6123      	str	r3, [r4, #16]
 800845a:	4616      	mov	r6, r2
 800845c:	e7bc      	b.n	80083d8 <_printf_i+0x148>
 800845e:	6833      	ldr	r3, [r6, #0]
 8008460:	1d1a      	adds	r2, r3, #4
 8008462:	6032      	str	r2, [r6, #0]
 8008464:	681e      	ldr	r6, [r3, #0]
 8008466:	6862      	ldr	r2, [r4, #4]
 8008468:	2100      	movs	r1, #0
 800846a:	4630      	mov	r0, r6
 800846c:	f7f7 fee8 	bl	8000240 <memchr>
 8008470:	b108      	cbz	r0, 8008476 <_printf_i+0x1e6>
 8008472:	1b80      	subs	r0, r0, r6
 8008474:	6060      	str	r0, [r4, #4]
 8008476:	6863      	ldr	r3, [r4, #4]
 8008478:	6123      	str	r3, [r4, #16]
 800847a:	2300      	movs	r3, #0
 800847c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008480:	e7aa      	b.n	80083d8 <_printf_i+0x148>
 8008482:	6923      	ldr	r3, [r4, #16]
 8008484:	4632      	mov	r2, r6
 8008486:	4649      	mov	r1, r9
 8008488:	4640      	mov	r0, r8
 800848a:	47d0      	blx	sl
 800848c:	3001      	adds	r0, #1
 800848e:	d0ad      	beq.n	80083ec <_printf_i+0x15c>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	079b      	lsls	r3, r3, #30
 8008494:	d413      	bmi.n	80084be <_printf_i+0x22e>
 8008496:	68e0      	ldr	r0, [r4, #12]
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	4298      	cmp	r0, r3
 800849c:	bfb8      	it	lt
 800849e:	4618      	movlt	r0, r3
 80084a0:	e7a6      	b.n	80083f0 <_printf_i+0x160>
 80084a2:	2301      	movs	r3, #1
 80084a4:	4632      	mov	r2, r6
 80084a6:	4649      	mov	r1, r9
 80084a8:	4640      	mov	r0, r8
 80084aa:	47d0      	blx	sl
 80084ac:	3001      	adds	r0, #1
 80084ae:	d09d      	beq.n	80083ec <_printf_i+0x15c>
 80084b0:	3501      	adds	r5, #1
 80084b2:	68e3      	ldr	r3, [r4, #12]
 80084b4:	9903      	ldr	r1, [sp, #12]
 80084b6:	1a5b      	subs	r3, r3, r1
 80084b8:	42ab      	cmp	r3, r5
 80084ba:	dcf2      	bgt.n	80084a2 <_printf_i+0x212>
 80084bc:	e7eb      	b.n	8008496 <_printf_i+0x206>
 80084be:	2500      	movs	r5, #0
 80084c0:	f104 0619 	add.w	r6, r4, #25
 80084c4:	e7f5      	b.n	80084b2 <_printf_i+0x222>
 80084c6:	bf00      	nop
 80084c8:	08008f4b 	.word	0x08008f4b
 80084cc:	08008f5c 	.word	0x08008f5c

080084d0 <__sflush_r>:
 80084d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d8:	0716      	lsls	r6, r2, #28
 80084da:	4605      	mov	r5, r0
 80084dc:	460c      	mov	r4, r1
 80084de:	d454      	bmi.n	800858a <__sflush_r+0xba>
 80084e0:	684b      	ldr	r3, [r1, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	dc02      	bgt.n	80084ec <__sflush_r+0x1c>
 80084e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	dd48      	ble.n	800857e <__sflush_r+0xae>
 80084ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084ee:	2e00      	cmp	r6, #0
 80084f0:	d045      	beq.n	800857e <__sflush_r+0xae>
 80084f2:	2300      	movs	r3, #0
 80084f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80084f8:	682f      	ldr	r7, [r5, #0]
 80084fa:	6a21      	ldr	r1, [r4, #32]
 80084fc:	602b      	str	r3, [r5, #0]
 80084fe:	d030      	beq.n	8008562 <__sflush_r+0x92>
 8008500:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	0759      	lsls	r1, r3, #29
 8008506:	d505      	bpl.n	8008514 <__sflush_r+0x44>
 8008508:	6863      	ldr	r3, [r4, #4]
 800850a:	1ad2      	subs	r2, r2, r3
 800850c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800850e:	b10b      	cbz	r3, 8008514 <__sflush_r+0x44>
 8008510:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008512:	1ad2      	subs	r2, r2, r3
 8008514:	2300      	movs	r3, #0
 8008516:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008518:	6a21      	ldr	r1, [r4, #32]
 800851a:	4628      	mov	r0, r5
 800851c:	47b0      	blx	r6
 800851e:	1c43      	adds	r3, r0, #1
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	d106      	bne.n	8008532 <__sflush_r+0x62>
 8008524:	6829      	ldr	r1, [r5, #0]
 8008526:	291d      	cmp	r1, #29
 8008528:	d82b      	bhi.n	8008582 <__sflush_r+0xb2>
 800852a:	4a2a      	ldr	r2, [pc, #168]	@ (80085d4 <__sflush_r+0x104>)
 800852c:	410a      	asrs	r2, r1
 800852e:	07d6      	lsls	r6, r2, #31
 8008530:	d427      	bmi.n	8008582 <__sflush_r+0xb2>
 8008532:	2200      	movs	r2, #0
 8008534:	6062      	str	r2, [r4, #4]
 8008536:	04d9      	lsls	r1, r3, #19
 8008538:	6922      	ldr	r2, [r4, #16]
 800853a:	6022      	str	r2, [r4, #0]
 800853c:	d504      	bpl.n	8008548 <__sflush_r+0x78>
 800853e:	1c42      	adds	r2, r0, #1
 8008540:	d101      	bne.n	8008546 <__sflush_r+0x76>
 8008542:	682b      	ldr	r3, [r5, #0]
 8008544:	b903      	cbnz	r3, 8008548 <__sflush_r+0x78>
 8008546:	6560      	str	r0, [r4, #84]	@ 0x54
 8008548:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800854a:	602f      	str	r7, [r5, #0]
 800854c:	b1b9      	cbz	r1, 800857e <__sflush_r+0xae>
 800854e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008552:	4299      	cmp	r1, r3
 8008554:	d002      	beq.n	800855c <__sflush_r+0x8c>
 8008556:	4628      	mov	r0, r5
 8008558:	f7ff fbd4 	bl	8007d04 <_free_r>
 800855c:	2300      	movs	r3, #0
 800855e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008560:	e00d      	b.n	800857e <__sflush_r+0xae>
 8008562:	2301      	movs	r3, #1
 8008564:	4628      	mov	r0, r5
 8008566:	47b0      	blx	r6
 8008568:	4602      	mov	r2, r0
 800856a:	1c50      	adds	r0, r2, #1
 800856c:	d1c9      	bne.n	8008502 <__sflush_r+0x32>
 800856e:	682b      	ldr	r3, [r5, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d0c6      	beq.n	8008502 <__sflush_r+0x32>
 8008574:	2b1d      	cmp	r3, #29
 8008576:	d001      	beq.n	800857c <__sflush_r+0xac>
 8008578:	2b16      	cmp	r3, #22
 800857a:	d11e      	bne.n	80085ba <__sflush_r+0xea>
 800857c:	602f      	str	r7, [r5, #0]
 800857e:	2000      	movs	r0, #0
 8008580:	e022      	b.n	80085c8 <__sflush_r+0xf8>
 8008582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008586:	b21b      	sxth	r3, r3
 8008588:	e01b      	b.n	80085c2 <__sflush_r+0xf2>
 800858a:	690f      	ldr	r7, [r1, #16]
 800858c:	2f00      	cmp	r7, #0
 800858e:	d0f6      	beq.n	800857e <__sflush_r+0xae>
 8008590:	0793      	lsls	r3, r2, #30
 8008592:	680e      	ldr	r6, [r1, #0]
 8008594:	bf08      	it	eq
 8008596:	694b      	ldreq	r3, [r1, #20]
 8008598:	600f      	str	r7, [r1, #0]
 800859a:	bf18      	it	ne
 800859c:	2300      	movne	r3, #0
 800859e:	eba6 0807 	sub.w	r8, r6, r7
 80085a2:	608b      	str	r3, [r1, #8]
 80085a4:	f1b8 0f00 	cmp.w	r8, #0
 80085a8:	dde9      	ble.n	800857e <__sflush_r+0xae>
 80085aa:	6a21      	ldr	r1, [r4, #32]
 80085ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80085ae:	4643      	mov	r3, r8
 80085b0:	463a      	mov	r2, r7
 80085b2:	4628      	mov	r0, r5
 80085b4:	47b0      	blx	r6
 80085b6:	2800      	cmp	r0, #0
 80085b8:	dc08      	bgt.n	80085cc <__sflush_r+0xfc>
 80085ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085c2:	81a3      	strh	r3, [r4, #12]
 80085c4:	f04f 30ff 	mov.w	r0, #4294967295
 80085c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085cc:	4407      	add	r7, r0
 80085ce:	eba8 0800 	sub.w	r8, r8, r0
 80085d2:	e7e7      	b.n	80085a4 <__sflush_r+0xd4>
 80085d4:	dfbffffe 	.word	0xdfbffffe

080085d8 <_fflush_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	690b      	ldr	r3, [r1, #16]
 80085dc:	4605      	mov	r5, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	b913      	cbnz	r3, 80085e8 <_fflush_r+0x10>
 80085e2:	2500      	movs	r5, #0
 80085e4:	4628      	mov	r0, r5
 80085e6:	bd38      	pop	{r3, r4, r5, pc}
 80085e8:	b118      	cbz	r0, 80085f2 <_fflush_r+0x1a>
 80085ea:	6a03      	ldr	r3, [r0, #32]
 80085ec:	b90b      	cbnz	r3, 80085f2 <_fflush_r+0x1a>
 80085ee:	f7ff f9f9 	bl	80079e4 <__sinit>
 80085f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0f3      	beq.n	80085e2 <_fflush_r+0xa>
 80085fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085fc:	07d0      	lsls	r0, r2, #31
 80085fe:	d404      	bmi.n	800860a <_fflush_r+0x32>
 8008600:	0599      	lsls	r1, r3, #22
 8008602:	d402      	bmi.n	800860a <_fflush_r+0x32>
 8008604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008606:	f7ff fb5c 	bl	8007cc2 <__retarget_lock_acquire_recursive>
 800860a:	4628      	mov	r0, r5
 800860c:	4621      	mov	r1, r4
 800860e:	f7ff ff5f 	bl	80084d0 <__sflush_r>
 8008612:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008614:	07da      	lsls	r2, r3, #31
 8008616:	4605      	mov	r5, r0
 8008618:	d4e4      	bmi.n	80085e4 <_fflush_r+0xc>
 800861a:	89a3      	ldrh	r3, [r4, #12]
 800861c:	059b      	lsls	r3, r3, #22
 800861e:	d4e1      	bmi.n	80085e4 <_fflush_r+0xc>
 8008620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008622:	f7ff fb4f 	bl	8007cc4 <__retarget_lock_release_recursive>
 8008626:	e7dd      	b.n	80085e4 <_fflush_r+0xc>

08008628 <fiprintf>:
 8008628:	b40e      	push	{r1, r2, r3}
 800862a:	b503      	push	{r0, r1, lr}
 800862c:	4601      	mov	r1, r0
 800862e:	ab03      	add	r3, sp, #12
 8008630:	4805      	ldr	r0, [pc, #20]	@ (8008648 <fiprintf+0x20>)
 8008632:	f853 2b04 	ldr.w	r2, [r3], #4
 8008636:	6800      	ldr	r0, [r0, #0]
 8008638:	9301      	str	r3, [sp, #4]
 800863a:	f000 f89d 	bl	8008778 <_vfiprintf_r>
 800863e:	b002      	add	sp, #8
 8008640:	f85d eb04 	ldr.w	lr, [sp], #4
 8008644:	b003      	add	sp, #12
 8008646:	4770      	bx	lr
 8008648:	20000018 	.word	0x20000018

0800864c <memmove>:
 800864c:	4288      	cmp	r0, r1
 800864e:	b510      	push	{r4, lr}
 8008650:	eb01 0402 	add.w	r4, r1, r2
 8008654:	d902      	bls.n	800865c <memmove+0x10>
 8008656:	4284      	cmp	r4, r0
 8008658:	4623      	mov	r3, r4
 800865a:	d807      	bhi.n	800866c <memmove+0x20>
 800865c:	1e43      	subs	r3, r0, #1
 800865e:	42a1      	cmp	r1, r4
 8008660:	d008      	beq.n	8008674 <memmove+0x28>
 8008662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008666:	f803 2f01 	strb.w	r2, [r3, #1]!
 800866a:	e7f8      	b.n	800865e <memmove+0x12>
 800866c:	4402      	add	r2, r0
 800866e:	4601      	mov	r1, r0
 8008670:	428a      	cmp	r2, r1
 8008672:	d100      	bne.n	8008676 <memmove+0x2a>
 8008674:	bd10      	pop	{r4, pc}
 8008676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800867a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800867e:	e7f7      	b.n	8008670 <memmove+0x24>

08008680 <_sbrk_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4d06      	ldr	r5, [pc, #24]	@ (800869c <_sbrk_r+0x1c>)
 8008684:	2300      	movs	r3, #0
 8008686:	4604      	mov	r4, r0
 8008688:	4608      	mov	r0, r1
 800868a:	602b      	str	r3, [r5, #0]
 800868c:	f7f9 f80c 	bl	80016a8 <_sbrk>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d102      	bne.n	800869a <_sbrk_r+0x1a>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	b103      	cbz	r3, 800869a <_sbrk_r+0x1a>
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	200004f0 	.word	0x200004f0

080086a0 <memcpy>:
 80086a0:	440a      	add	r2, r1
 80086a2:	4291      	cmp	r1, r2
 80086a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80086a8:	d100      	bne.n	80086ac <memcpy+0xc>
 80086aa:	4770      	bx	lr
 80086ac:	b510      	push	{r4, lr}
 80086ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086b6:	4291      	cmp	r1, r2
 80086b8:	d1f9      	bne.n	80086ae <memcpy+0xe>
 80086ba:	bd10      	pop	{r4, pc}

080086bc <abort>:
 80086bc:	b508      	push	{r3, lr}
 80086be:	2006      	movs	r0, #6
 80086c0:	f000 fa2e 	bl	8008b20 <raise>
 80086c4:	2001      	movs	r0, #1
 80086c6:	f7f8 ff77 	bl	80015b8 <_exit>

080086ca <_realloc_r>:
 80086ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ce:	4680      	mov	r8, r0
 80086d0:	4615      	mov	r5, r2
 80086d2:	460c      	mov	r4, r1
 80086d4:	b921      	cbnz	r1, 80086e0 <_realloc_r+0x16>
 80086d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086da:	4611      	mov	r1, r2
 80086dc:	f7ff bb86 	b.w	8007dec <_malloc_r>
 80086e0:	b92a      	cbnz	r2, 80086ee <_realloc_r+0x24>
 80086e2:	f7ff fb0f 	bl	8007d04 <_free_r>
 80086e6:	2400      	movs	r4, #0
 80086e8:	4620      	mov	r0, r4
 80086ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ee:	f000 fa33 	bl	8008b58 <_malloc_usable_size_r>
 80086f2:	4285      	cmp	r5, r0
 80086f4:	4606      	mov	r6, r0
 80086f6:	d802      	bhi.n	80086fe <_realloc_r+0x34>
 80086f8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80086fc:	d8f4      	bhi.n	80086e8 <_realloc_r+0x1e>
 80086fe:	4629      	mov	r1, r5
 8008700:	4640      	mov	r0, r8
 8008702:	f7ff fb73 	bl	8007dec <_malloc_r>
 8008706:	4607      	mov	r7, r0
 8008708:	2800      	cmp	r0, #0
 800870a:	d0ec      	beq.n	80086e6 <_realloc_r+0x1c>
 800870c:	42b5      	cmp	r5, r6
 800870e:	462a      	mov	r2, r5
 8008710:	4621      	mov	r1, r4
 8008712:	bf28      	it	cs
 8008714:	4632      	movcs	r2, r6
 8008716:	f7ff ffc3 	bl	80086a0 <memcpy>
 800871a:	4621      	mov	r1, r4
 800871c:	4640      	mov	r0, r8
 800871e:	f7ff faf1 	bl	8007d04 <_free_r>
 8008722:	463c      	mov	r4, r7
 8008724:	e7e0      	b.n	80086e8 <_realloc_r+0x1e>

08008726 <__sfputc_r>:
 8008726:	6893      	ldr	r3, [r2, #8]
 8008728:	3b01      	subs	r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	b410      	push	{r4}
 800872e:	6093      	str	r3, [r2, #8]
 8008730:	da08      	bge.n	8008744 <__sfputc_r+0x1e>
 8008732:	6994      	ldr	r4, [r2, #24]
 8008734:	42a3      	cmp	r3, r4
 8008736:	db01      	blt.n	800873c <__sfputc_r+0x16>
 8008738:	290a      	cmp	r1, #10
 800873a:	d103      	bne.n	8008744 <__sfputc_r+0x1e>
 800873c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008740:	f000 b932 	b.w	80089a8 <__swbuf_r>
 8008744:	6813      	ldr	r3, [r2, #0]
 8008746:	1c58      	adds	r0, r3, #1
 8008748:	6010      	str	r0, [r2, #0]
 800874a:	7019      	strb	r1, [r3, #0]
 800874c:	4608      	mov	r0, r1
 800874e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008752:	4770      	bx	lr

08008754 <__sfputs_r>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	4606      	mov	r6, r0
 8008758:	460f      	mov	r7, r1
 800875a:	4614      	mov	r4, r2
 800875c:	18d5      	adds	r5, r2, r3
 800875e:	42ac      	cmp	r4, r5
 8008760:	d101      	bne.n	8008766 <__sfputs_r+0x12>
 8008762:	2000      	movs	r0, #0
 8008764:	e007      	b.n	8008776 <__sfputs_r+0x22>
 8008766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800876a:	463a      	mov	r2, r7
 800876c:	4630      	mov	r0, r6
 800876e:	f7ff ffda 	bl	8008726 <__sfputc_r>
 8008772:	1c43      	adds	r3, r0, #1
 8008774:	d1f3      	bne.n	800875e <__sfputs_r+0xa>
 8008776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008778 <_vfiprintf_r>:
 8008778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	460d      	mov	r5, r1
 800877e:	b09d      	sub	sp, #116	@ 0x74
 8008780:	4614      	mov	r4, r2
 8008782:	4698      	mov	r8, r3
 8008784:	4606      	mov	r6, r0
 8008786:	b118      	cbz	r0, 8008790 <_vfiprintf_r+0x18>
 8008788:	6a03      	ldr	r3, [r0, #32]
 800878a:	b90b      	cbnz	r3, 8008790 <_vfiprintf_r+0x18>
 800878c:	f7ff f92a 	bl	80079e4 <__sinit>
 8008790:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008792:	07d9      	lsls	r1, r3, #31
 8008794:	d405      	bmi.n	80087a2 <_vfiprintf_r+0x2a>
 8008796:	89ab      	ldrh	r3, [r5, #12]
 8008798:	059a      	lsls	r2, r3, #22
 800879a:	d402      	bmi.n	80087a2 <_vfiprintf_r+0x2a>
 800879c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800879e:	f7ff fa90 	bl	8007cc2 <__retarget_lock_acquire_recursive>
 80087a2:	89ab      	ldrh	r3, [r5, #12]
 80087a4:	071b      	lsls	r3, r3, #28
 80087a6:	d501      	bpl.n	80087ac <_vfiprintf_r+0x34>
 80087a8:	692b      	ldr	r3, [r5, #16]
 80087aa:	b99b      	cbnz	r3, 80087d4 <_vfiprintf_r+0x5c>
 80087ac:	4629      	mov	r1, r5
 80087ae:	4630      	mov	r0, r6
 80087b0:	f000 f938 	bl	8008a24 <__swsetup_r>
 80087b4:	b170      	cbz	r0, 80087d4 <_vfiprintf_r+0x5c>
 80087b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087b8:	07dc      	lsls	r4, r3, #31
 80087ba:	d504      	bpl.n	80087c6 <_vfiprintf_r+0x4e>
 80087bc:	f04f 30ff 	mov.w	r0, #4294967295
 80087c0:	b01d      	add	sp, #116	@ 0x74
 80087c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c6:	89ab      	ldrh	r3, [r5, #12]
 80087c8:	0598      	lsls	r0, r3, #22
 80087ca:	d4f7      	bmi.n	80087bc <_vfiprintf_r+0x44>
 80087cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087ce:	f7ff fa79 	bl	8007cc4 <__retarget_lock_release_recursive>
 80087d2:	e7f3      	b.n	80087bc <_vfiprintf_r+0x44>
 80087d4:	2300      	movs	r3, #0
 80087d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80087d8:	2320      	movs	r3, #32
 80087da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087de:	f8cd 800c 	str.w	r8, [sp, #12]
 80087e2:	2330      	movs	r3, #48	@ 0x30
 80087e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008994 <_vfiprintf_r+0x21c>
 80087e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087ec:	f04f 0901 	mov.w	r9, #1
 80087f0:	4623      	mov	r3, r4
 80087f2:	469a      	mov	sl, r3
 80087f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087f8:	b10a      	cbz	r2, 80087fe <_vfiprintf_r+0x86>
 80087fa:	2a25      	cmp	r2, #37	@ 0x25
 80087fc:	d1f9      	bne.n	80087f2 <_vfiprintf_r+0x7a>
 80087fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008802:	d00b      	beq.n	800881c <_vfiprintf_r+0xa4>
 8008804:	465b      	mov	r3, fp
 8008806:	4622      	mov	r2, r4
 8008808:	4629      	mov	r1, r5
 800880a:	4630      	mov	r0, r6
 800880c:	f7ff ffa2 	bl	8008754 <__sfputs_r>
 8008810:	3001      	adds	r0, #1
 8008812:	f000 80a7 	beq.w	8008964 <_vfiprintf_r+0x1ec>
 8008816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008818:	445a      	add	r2, fp
 800881a:	9209      	str	r2, [sp, #36]	@ 0x24
 800881c:	f89a 3000 	ldrb.w	r3, [sl]
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 809f 	beq.w	8008964 <_vfiprintf_r+0x1ec>
 8008826:	2300      	movs	r3, #0
 8008828:	f04f 32ff 	mov.w	r2, #4294967295
 800882c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008830:	f10a 0a01 	add.w	sl, sl, #1
 8008834:	9304      	str	r3, [sp, #16]
 8008836:	9307      	str	r3, [sp, #28]
 8008838:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800883c:	931a      	str	r3, [sp, #104]	@ 0x68
 800883e:	4654      	mov	r4, sl
 8008840:	2205      	movs	r2, #5
 8008842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008846:	4853      	ldr	r0, [pc, #332]	@ (8008994 <_vfiprintf_r+0x21c>)
 8008848:	f7f7 fcfa 	bl	8000240 <memchr>
 800884c:	9a04      	ldr	r2, [sp, #16]
 800884e:	b9d8      	cbnz	r0, 8008888 <_vfiprintf_r+0x110>
 8008850:	06d1      	lsls	r1, r2, #27
 8008852:	bf44      	itt	mi
 8008854:	2320      	movmi	r3, #32
 8008856:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800885a:	0713      	lsls	r3, r2, #28
 800885c:	bf44      	itt	mi
 800885e:	232b      	movmi	r3, #43	@ 0x2b
 8008860:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008864:	f89a 3000 	ldrb.w	r3, [sl]
 8008868:	2b2a      	cmp	r3, #42	@ 0x2a
 800886a:	d015      	beq.n	8008898 <_vfiprintf_r+0x120>
 800886c:	9a07      	ldr	r2, [sp, #28]
 800886e:	4654      	mov	r4, sl
 8008870:	2000      	movs	r0, #0
 8008872:	f04f 0c0a 	mov.w	ip, #10
 8008876:	4621      	mov	r1, r4
 8008878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800887c:	3b30      	subs	r3, #48	@ 0x30
 800887e:	2b09      	cmp	r3, #9
 8008880:	d94b      	bls.n	800891a <_vfiprintf_r+0x1a2>
 8008882:	b1b0      	cbz	r0, 80088b2 <_vfiprintf_r+0x13a>
 8008884:	9207      	str	r2, [sp, #28]
 8008886:	e014      	b.n	80088b2 <_vfiprintf_r+0x13a>
 8008888:	eba0 0308 	sub.w	r3, r0, r8
 800888c:	fa09 f303 	lsl.w	r3, r9, r3
 8008890:	4313      	orrs	r3, r2
 8008892:	9304      	str	r3, [sp, #16]
 8008894:	46a2      	mov	sl, r4
 8008896:	e7d2      	b.n	800883e <_vfiprintf_r+0xc6>
 8008898:	9b03      	ldr	r3, [sp, #12]
 800889a:	1d19      	adds	r1, r3, #4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	9103      	str	r1, [sp, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bfbb      	ittet	lt
 80088a4:	425b      	neglt	r3, r3
 80088a6:	f042 0202 	orrlt.w	r2, r2, #2
 80088aa:	9307      	strge	r3, [sp, #28]
 80088ac:	9307      	strlt	r3, [sp, #28]
 80088ae:	bfb8      	it	lt
 80088b0:	9204      	strlt	r2, [sp, #16]
 80088b2:	7823      	ldrb	r3, [r4, #0]
 80088b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80088b6:	d10a      	bne.n	80088ce <_vfiprintf_r+0x156>
 80088b8:	7863      	ldrb	r3, [r4, #1]
 80088ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80088bc:	d132      	bne.n	8008924 <_vfiprintf_r+0x1ac>
 80088be:	9b03      	ldr	r3, [sp, #12]
 80088c0:	1d1a      	adds	r2, r3, #4
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	9203      	str	r2, [sp, #12]
 80088c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088ca:	3402      	adds	r4, #2
 80088cc:	9305      	str	r3, [sp, #20]
 80088ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80089a4 <_vfiprintf_r+0x22c>
 80088d2:	7821      	ldrb	r1, [r4, #0]
 80088d4:	2203      	movs	r2, #3
 80088d6:	4650      	mov	r0, sl
 80088d8:	f7f7 fcb2 	bl	8000240 <memchr>
 80088dc:	b138      	cbz	r0, 80088ee <_vfiprintf_r+0x176>
 80088de:	9b04      	ldr	r3, [sp, #16]
 80088e0:	eba0 000a 	sub.w	r0, r0, sl
 80088e4:	2240      	movs	r2, #64	@ 0x40
 80088e6:	4082      	lsls	r2, r0
 80088e8:	4313      	orrs	r3, r2
 80088ea:	3401      	adds	r4, #1
 80088ec:	9304      	str	r3, [sp, #16]
 80088ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f2:	4829      	ldr	r0, [pc, #164]	@ (8008998 <_vfiprintf_r+0x220>)
 80088f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088f8:	2206      	movs	r2, #6
 80088fa:	f7f7 fca1 	bl	8000240 <memchr>
 80088fe:	2800      	cmp	r0, #0
 8008900:	d03f      	beq.n	8008982 <_vfiprintf_r+0x20a>
 8008902:	4b26      	ldr	r3, [pc, #152]	@ (800899c <_vfiprintf_r+0x224>)
 8008904:	bb1b      	cbnz	r3, 800894e <_vfiprintf_r+0x1d6>
 8008906:	9b03      	ldr	r3, [sp, #12]
 8008908:	3307      	adds	r3, #7
 800890a:	f023 0307 	bic.w	r3, r3, #7
 800890e:	3308      	adds	r3, #8
 8008910:	9303      	str	r3, [sp, #12]
 8008912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008914:	443b      	add	r3, r7
 8008916:	9309      	str	r3, [sp, #36]	@ 0x24
 8008918:	e76a      	b.n	80087f0 <_vfiprintf_r+0x78>
 800891a:	fb0c 3202 	mla	r2, ip, r2, r3
 800891e:	460c      	mov	r4, r1
 8008920:	2001      	movs	r0, #1
 8008922:	e7a8      	b.n	8008876 <_vfiprintf_r+0xfe>
 8008924:	2300      	movs	r3, #0
 8008926:	3401      	adds	r4, #1
 8008928:	9305      	str	r3, [sp, #20]
 800892a:	4619      	mov	r1, r3
 800892c:	f04f 0c0a 	mov.w	ip, #10
 8008930:	4620      	mov	r0, r4
 8008932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008936:	3a30      	subs	r2, #48	@ 0x30
 8008938:	2a09      	cmp	r2, #9
 800893a:	d903      	bls.n	8008944 <_vfiprintf_r+0x1cc>
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0c6      	beq.n	80088ce <_vfiprintf_r+0x156>
 8008940:	9105      	str	r1, [sp, #20]
 8008942:	e7c4      	b.n	80088ce <_vfiprintf_r+0x156>
 8008944:	fb0c 2101 	mla	r1, ip, r1, r2
 8008948:	4604      	mov	r4, r0
 800894a:	2301      	movs	r3, #1
 800894c:	e7f0      	b.n	8008930 <_vfiprintf_r+0x1b8>
 800894e:	ab03      	add	r3, sp, #12
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	462a      	mov	r2, r5
 8008954:	4b12      	ldr	r3, [pc, #72]	@ (80089a0 <_vfiprintf_r+0x228>)
 8008956:	a904      	add	r1, sp, #16
 8008958:	4630      	mov	r0, r6
 800895a:	f3af 8000 	nop.w
 800895e:	4607      	mov	r7, r0
 8008960:	1c78      	adds	r0, r7, #1
 8008962:	d1d6      	bne.n	8008912 <_vfiprintf_r+0x19a>
 8008964:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008966:	07d9      	lsls	r1, r3, #31
 8008968:	d405      	bmi.n	8008976 <_vfiprintf_r+0x1fe>
 800896a:	89ab      	ldrh	r3, [r5, #12]
 800896c:	059a      	lsls	r2, r3, #22
 800896e:	d402      	bmi.n	8008976 <_vfiprintf_r+0x1fe>
 8008970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008972:	f7ff f9a7 	bl	8007cc4 <__retarget_lock_release_recursive>
 8008976:	89ab      	ldrh	r3, [r5, #12]
 8008978:	065b      	lsls	r3, r3, #25
 800897a:	f53f af1f 	bmi.w	80087bc <_vfiprintf_r+0x44>
 800897e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008980:	e71e      	b.n	80087c0 <_vfiprintf_r+0x48>
 8008982:	ab03      	add	r3, sp, #12
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	462a      	mov	r2, r5
 8008988:	4b05      	ldr	r3, [pc, #20]	@ (80089a0 <_vfiprintf_r+0x228>)
 800898a:	a904      	add	r1, sp, #16
 800898c:	4630      	mov	r0, r6
 800898e:	f7ff fc7f 	bl	8008290 <_printf_i>
 8008992:	e7e4      	b.n	800895e <_vfiprintf_r+0x1e6>
 8008994:	08008f3a 	.word	0x08008f3a
 8008998:	08008f44 	.word	0x08008f44
 800899c:	00000000 	.word	0x00000000
 80089a0:	08008755 	.word	0x08008755
 80089a4:	08008f40 	.word	0x08008f40

080089a8 <__swbuf_r>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	460e      	mov	r6, r1
 80089ac:	4614      	mov	r4, r2
 80089ae:	4605      	mov	r5, r0
 80089b0:	b118      	cbz	r0, 80089ba <__swbuf_r+0x12>
 80089b2:	6a03      	ldr	r3, [r0, #32]
 80089b4:	b90b      	cbnz	r3, 80089ba <__swbuf_r+0x12>
 80089b6:	f7ff f815 	bl	80079e4 <__sinit>
 80089ba:	69a3      	ldr	r3, [r4, #24]
 80089bc:	60a3      	str	r3, [r4, #8]
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	071a      	lsls	r2, r3, #28
 80089c2:	d501      	bpl.n	80089c8 <__swbuf_r+0x20>
 80089c4:	6923      	ldr	r3, [r4, #16]
 80089c6:	b943      	cbnz	r3, 80089da <__swbuf_r+0x32>
 80089c8:	4621      	mov	r1, r4
 80089ca:	4628      	mov	r0, r5
 80089cc:	f000 f82a 	bl	8008a24 <__swsetup_r>
 80089d0:	b118      	cbz	r0, 80089da <__swbuf_r+0x32>
 80089d2:	f04f 37ff 	mov.w	r7, #4294967295
 80089d6:	4638      	mov	r0, r7
 80089d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	6922      	ldr	r2, [r4, #16]
 80089de:	1a98      	subs	r0, r3, r2
 80089e0:	6963      	ldr	r3, [r4, #20]
 80089e2:	b2f6      	uxtb	r6, r6
 80089e4:	4283      	cmp	r3, r0
 80089e6:	4637      	mov	r7, r6
 80089e8:	dc05      	bgt.n	80089f6 <__swbuf_r+0x4e>
 80089ea:	4621      	mov	r1, r4
 80089ec:	4628      	mov	r0, r5
 80089ee:	f7ff fdf3 	bl	80085d8 <_fflush_r>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d1ed      	bne.n	80089d2 <__swbuf_r+0x2a>
 80089f6:	68a3      	ldr	r3, [r4, #8]
 80089f8:	3b01      	subs	r3, #1
 80089fa:	60a3      	str	r3, [r4, #8]
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	1c5a      	adds	r2, r3, #1
 8008a00:	6022      	str	r2, [r4, #0]
 8008a02:	701e      	strb	r6, [r3, #0]
 8008a04:	6962      	ldr	r2, [r4, #20]
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d004      	beq.n	8008a16 <__swbuf_r+0x6e>
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	07db      	lsls	r3, r3, #31
 8008a10:	d5e1      	bpl.n	80089d6 <__swbuf_r+0x2e>
 8008a12:	2e0a      	cmp	r6, #10
 8008a14:	d1df      	bne.n	80089d6 <__swbuf_r+0x2e>
 8008a16:	4621      	mov	r1, r4
 8008a18:	4628      	mov	r0, r5
 8008a1a:	f7ff fddd 	bl	80085d8 <_fflush_r>
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	d0d9      	beq.n	80089d6 <__swbuf_r+0x2e>
 8008a22:	e7d6      	b.n	80089d2 <__swbuf_r+0x2a>

08008a24 <__swsetup_r>:
 8008a24:	b538      	push	{r3, r4, r5, lr}
 8008a26:	4b29      	ldr	r3, [pc, #164]	@ (8008acc <__swsetup_r+0xa8>)
 8008a28:	4605      	mov	r5, r0
 8008a2a:	6818      	ldr	r0, [r3, #0]
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	b118      	cbz	r0, 8008a38 <__swsetup_r+0x14>
 8008a30:	6a03      	ldr	r3, [r0, #32]
 8008a32:	b90b      	cbnz	r3, 8008a38 <__swsetup_r+0x14>
 8008a34:	f7fe ffd6 	bl	80079e4 <__sinit>
 8008a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3c:	0719      	lsls	r1, r3, #28
 8008a3e:	d422      	bmi.n	8008a86 <__swsetup_r+0x62>
 8008a40:	06da      	lsls	r2, r3, #27
 8008a42:	d407      	bmi.n	8008a54 <__swsetup_r+0x30>
 8008a44:	2209      	movs	r2, #9
 8008a46:	602a      	str	r2, [r5, #0]
 8008a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a4c:	81a3      	strh	r3, [r4, #12]
 8008a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a52:	e033      	b.n	8008abc <__swsetup_r+0x98>
 8008a54:	0758      	lsls	r0, r3, #29
 8008a56:	d512      	bpl.n	8008a7e <__swsetup_r+0x5a>
 8008a58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a5a:	b141      	cbz	r1, 8008a6e <__swsetup_r+0x4a>
 8008a5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a60:	4299      	cmp	r1, r3
 8008a62:	d002      	beq.n	8008a6a <__swsetup_r+0x46>
 8008a64:	4628      	mov	r0, r5
 8008a66:	f7ff f94d 	bl	8007d04 <_free_r>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a74:	81a3      	strh	r3, [r4, #12]
 8008a76:	2300      	movs	r3, #0
 8008a78:	6063      	str	r3, [r4, #4]
 8008a7a:	6923      	ldr	r3, [r4, #16]
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	f043 0308 	orr.w	r3, r3, #8
 8008a84:	81a3      	strh	r3, [r4, #12]
 8008a86:	6923      	ldr	r3, [r4, #16]
 8008a88:	b94b      	cbnz	r3, 8008a9e <__swsetup_r+0x7a>
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a94:	d003      	beq.n	8008a9e <__swsetup_r+0x7a>
 8008a96:	4621      	mov	r1, r4
 8008a98:	4628      	mov	r0, r5
 8008a9a:	f000 f88b 	bl	8008bb4 <__smakebuf_r>
 8008a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa2:	f013 0201 	ands.w	r2, r3, #1
 8008aa6:	d00a      	beq.n	8008abe <__swsetup_r+0x9a>
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	60a2      	str	r2, [r4, #8]
 8008aac:	6962      	ldr	r2, [r4, #20]
 8008aae:	4252      	negs	r2, r2
 8008ab0:	61a2      	str	r2, [r4, #24]
 8008ab2:	6922      	ldr	r2, [r4, #16]
 8008ab4:	b942      	cbnz	r2, 8008ac8 <__swsetup_r+0xa4>
 8008ab6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008aba:	d1c5      	bne.n	8008a48 <__swsetup_r+0x24>
 8008abc:	bd38      	pop	{r3, r4, r5, pc}
 8008abe:	0799      	lsls	r1, r3, #30
 8008ac0:	bf58      	it	pl
 8008ac2:	6962      	ldrpl	r2, [r4, #20]
 8008ac4:	60a2      	str	r2, [r4, #8]
 8008ac6:	e7f4      	b.n	8008ab2 <__swsetup_r+0x8e>
 8008ac8:	2000      	movs	r0, #0
 8008aca:	e7f7      	b.n	8008abc <__swsetup_r+0x98>
 8008acc:	20000018 	.word	0x20000018

08008ad0 <_raise_r>:
 8008ad0:	291f      	cmp	r1, #31
 8008ad2:	b538      	push	{r3, r4, r5, lr}
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	d904      	bls.n	8008ae4 <_raise_r+0x14>
 8008ada:	2316      	movs	r3, #22
 8008adc:	6003      	str	r3, [r0, #0]
 8008ade:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae2:	bd38      	pop	{r3, r4, r5, pc}
 8008ae4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ae6:	b112      	cbz	r2, 8008aee <_raise_r+0x1e>
 8008ae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008aec:	b94b      	cbnz	r3, 8008b02 <_raise_r+0x32>
 8008aee:	4628      	mov	r0, r5
 8008af0:	f000 f830 	bl	8008b54 <_getpid_r>
 8008af4:	4622      	mov	r2, r4
 8008af6:	4601      	mov	r1, r0
 8008af8:	4628      	mov	r0, r5
 8008afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008afe:	f000 b817 	b.w	8008b30 <_kill_r>
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d00a      	beq.n	8008b1c <_raise_r+0x4c>
 8008b06:	1c59      	adds	r1, r3, #1
 8008b08:	d103      	bne.n	8008b12 <_raise_r+0x42>
 8008b0a:	2316      	movs	r3, #22
 8008b0c:	6003      	str	r3, [r0, #0]
 8008b0e:	2001      	movs	r0, #1
 8008b10:	e7e7      	b.n	8008ae2 <_raise_r+0x12>
 8008b12:	2100      	movs	r1, #0
 8008b14:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b18:	4620      	mov	r0, r4
 8008b1a:	4798      	blx	r3
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	e7e0      	b.n	8008ae2 <_raise_r+0x12>

08008b20 <raise>:
 8008b20:	4b02      	ldr	r3, [pc, #8]	@ (8008b2c <raise+0xc>)
 8008b22:	4601      	mov	r1, r0
 8008b24:	6818      	ldr	r0, [r3, #0]
 8008b26:	f7ff bfd3 	b.w	8008ad0 <_raise_r>
 8008b2a:	bf00      	nop
 8008b2c:	20000018 	.word	0x20000018

08008b30 <_kill_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	4d07      	ldr	r5, [pc, #28]	@ (8008b50 <_kill_r+0x20>)
 8008b34:	2300      	movs	r3, #0
 8008b36:	4604      	mov	r4, r0
 8008b38:	4608      	mov	r0, r1
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	602b      	str	r3, [r5, #0]
 8008b3e:	f7f8 fd2b 	bl	8001598 <_kill>
 8008b42:	1c43      	adds	r3, r0, #1
 8008b44:	d102      	bne.n	8008b4c <_kill_r+0x1c>
 8008b46:	682b      	ldr	r3, [r5, #0]
 8008b48:	b103      	cbz	r3, 8008b4c <_kill_r+0x1c>
 8008b4a:	6023      	str	r3, [r4, #0]
 8008b4c:	bd38      	pop	{r3, r4, r5, pc}
 8008b4e:	bf00      	nop
 8008b50:	200004f0 	.word	0x200004f0

08008b54 <_getpid_r>:
 8008b54:	f7f8 bd18 	b.w	8001588 <_getpid>

08008b58 <_malloc_usable_size_r>:
 8008b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b5c:	1f18      	subs	r0, r3, #4
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	bfbc      	itt	lt
 8008b62:	580b      	ldrlt	r3, [r1, r0]
 8008b64:	18c0      	addlt	r0, r0, r3
 8008b66:	4770      	bx	lr

08008b68 <__swhatbuf_r>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b70:	2900      	cmp	r1, #0
 8008b72:	b096      	sub	sp, #88	@ 0x58
 8008b74:	4615      	mov	r5, r2
 8008b76:	461e      	mov	r6, r3
 8008b78:	da0d      	bge.n	8008b96 <__swhatbuf_r+0x2e>
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b80:	f04f 0100 	mov.w	r1, #0
 8008b84:	bf14      	ite	ne
 8008b86:	2340      	movne	r3, #64	@ 0x40
 8008b88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	6031      	str	r1, [r6, #0]
 8008b90:	602b      	str	r3, [r5, #0]
 8008b92:	b016      	add	sp, #88	@ 0x58
 8008b94:	bd70      	pop	{r4, r5, r6, pc}
 8008b96:	466a      	mov	r2, sp
 8008b98:	f000 f848 	bl	8008c2c <_fstat_r>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	dbec      	blt.n	8008b7a <__swhatbuf_r+0x12>
 8008ba0:	9901      	ldr	r1, [sp, #4]
 8008ba2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ba6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008baa:	4259      	negs	r1, r3
 8008bac:	4159      	adcs	r1, r3
 8008bae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bb2:	e7eb      	b.n	8008b8c <__swhatbuf_r+0x24>

08008bb4 <__smakebuf_r>:
 8008bb4:	898b      	ldrh	r3, [r1, #12]
 8008bb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bb8:	079d      	lsls	r5, r3, #30
 8008bba:	4606      	mov	r6, r0
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	d507      	bpl.n	8008bd0 <__smakebuf_r+0x1c>
 8008bc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	6123      	str	r3, [r4, #16]
 8008bc8:	2301      	movs	r3, #1
 8008bca:	6163      	str	r3, [r4, #20]
 8008bcc:	b003      	add	sp, #12
 8008bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bd0:	ab01      	add	r3, sp, #4
 8008bd2:	466a      	mov	r2, sp
 8008bd4:	f7ff ffc8 	bl	8008b68 <__swhatbuf_r>
 8008bd8:	9f00      	ldr	r7, [sp, #0]
 8008bda:	4605      	mov	r5, r0
 8008bdc:	4639      	mov	r1, r7
 8008bde:	4630      	mov	r0, r6
 8008be0:	f7ff f904 	bl	8007dec <_malloc_r>
 8008be4:	b948      	cbnz	r0, 8008bfa <__smakebuf_r+0x46>
 8008be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bea:	059a      	lsls	r2, r3, #22
 8008bec:	d4ee      	bmi.n	8008bcc <__smakebuf_r+0x18>
 8008bee:	f023 0303 	bic.w	r3, r3, #3
 8008bf2:	f043 0302 	orr.w	r3, r3, #2
 8008bf6:	81a3      	strh	r3, [r4, #12]
 8008bf8:	e7e2      	b.n	8008bc0 <__smakebuf_r+0xc>
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	6020      	str	r0, [r4, #0]
 8008bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c02:	81a3      	strh	r3, [r4, #12]
 8008c04:	9b01      	ldr	r3, [sp, #4]
 8008c06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c0a:	b15b      	cbz	r3, 8008c24 <__smakebuf_r+0x70>
 8008c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c10:	4630      	mov	r0, r6
 8008c12:	f000 f81d 	bl	8008c50 <_isatty_r>
 8008c16:	b128      	cbz	r0, 8008c24 <__smakebuf_r+0x70>
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	f023 0303 	bic.w	r3, r3, #3
 8008c1e:	f043 0301 	orr.w	r3, r3, #1
 8008c22:	81a3      	strh	r3, [r4, #12]
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	431d      	orrs	r5, r3
 8008c28:	81a5      	strh	r5, [r4, #12]
 8008c2a:	e7cf      	b.n	8008bcc <__smakebuf_r+0x18>

08008c2c <_fstat_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4d07      	ldr	r5, [pc, #28]	@ (8008c4c <_fstat_r+0x20>)
 8008c30:	2300      	movs	r3, #0
 8008c32:	4604      	mov	r4, r0
 8008c34:	4608      	mov	r0, r1
 8008c36:	4611      	mov	r1, r2
 8008c38:	602b      	str	r3, [r5, #0]
 8008c3a:	f7f8 fd0d 	bl	8001658 <_fstat>
 8008c3e:	1c43      	adds	r3, r0, #1
 8008c40:	d102      	bne.n	8008c48 <_fstat_r+0x1c>
 8008c42:	682b      	ldr	r3, [r5, #0]
 8008c44:	b103      	cbz	r3, 8008c48 <_fstat_r+0x1c>
 8008c46:	6023      	str	r3, [r4, #0]
 8008c48:	bd38      	pop	{r3, r4, r5, pc}
 8008c4a:	bf00      	nop
 8008c4c:	200004f0 	.word	0x200004f0

08008c50 <_isatty_r>:
 8008c50:	b538      	push	{r3, r4, r5, lr}
 8008c52:	4d06      	ldr	r5, [pc, #24]	@ (8008c6c <_isatty_r+0x1c>)
 8008c54:	2300      	movs	r3, #0
 8008c56:	4604      	mov	r4, r0
 8008c58:	4608      	mov	r0, r1
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	f7f8 fd0c 	bl	8001678 <_isatty>
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	d102      	bne.n	8008c6a <_isatty_r+0x1a>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	b103      	cbz	r3, 8008c6a <_isatty_r+0x1a>
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
 8008c6c:	200004f0 	.word	0x200004f0

08008c70 <_init>:
 8008c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c72:	bf00      	nop
 8008c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c76:	bc08      	pop	{r3}
 8008c78:	469e      	mov	lr, r3
 8008c7a:	4770      	bx	lr

08008c7c <_fini>:
 8008c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7e:	bf00      	nop
 8008c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c82:	bc08      	pop	{r3}
 8008c84:	469e      	mov	lr, r3
 8008c86:	4770      	bx	lr
