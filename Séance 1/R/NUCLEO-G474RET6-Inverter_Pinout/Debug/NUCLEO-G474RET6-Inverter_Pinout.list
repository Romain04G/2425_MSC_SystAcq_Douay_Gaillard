
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b14  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005cec  08005cec  00006cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d2c  08005d2c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d2c  08005d2c  00006d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d34  08005d34  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d34  08005d34  00006d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d38  08005d38  00006d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d3c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  2000000c  08005d48  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08005d48  0000730c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017404  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a77  00000000  00000000  0001e440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  00020eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f9e  00000000  00000000  000222b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b00  00000000  00000000  00023256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d04  00000000  00000000  0004ad56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e9a2  00000000  00000000  00061a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001703fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c8  00000000  00000000  00170440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c5  00000000  00000000  00175b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005cd4 	.word	0x08005cd4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005cd4 	.word	0x08005cd4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fefb 	bl	8001306 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f810 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fac6 	bl	8000aa4 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000518:	f000 f8ce 	bl	80006b8 <MX_ADC2_Init>
  MX_ADC1_Init();
 800051c:	f000 f854 	bl	80005c8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000520:	f000 f930 	bl	8000784 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000524:	f000 f9da 	bl	80008dc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000528:	f000 fa24 	bl	8000974 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800052c:	f000 fa6e 	bl	8000a0c <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <main+0x28>

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	@ 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0318 	add.w	r3, r7, #24
 800053e:	2238      	movs	r2, #56	@ 0x38
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f005 fb9a 	bl	8005c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000556:	2000      	movs	r0, #0
 8000558:	f002 fab4 	bl	8002ac4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055c:	2301      	movs	r3, #1
 800055e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000564:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	2303      	movs	r3, #3
 800056c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800056e:	2306      	movs	r3, #6
 8000570:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000572:	2355      	movs	r3, #85	@ 0x55
 8000574:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0318 	add.w	r3, r7, #24
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fb50 	bl	8002c2c <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000592:	f000 fb29 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2303      	movs	r3, #3
 800059c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2104      	movs	r1, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fe54 	bl	800325c <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005ba:	f000 fb15 	bl	8000be8 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	@ 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08c      	sub	sp, #48	@ 0x30
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2220      	movs	r2, #32
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f005 fb4b 	bl	8005c7c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005e6:	4b32      	ldr	r3, [pc, #200]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 80005e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ee:	4b30      	ldr	r3, [pc, #192]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 80005f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f6:	4b2e      	ldr	r3, [pc, #184]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fc:	4b2c      	ldr	r3, [pc, #176]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000602:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000608:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 8000610:	2204      	movs	r2, #4
 8000612:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000614:	4b26      	ldr	r3, [pc, #152]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800061a:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000620:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 8000622:	2201      	movs	r2, #1
 8000624:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000626:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062e:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000634:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 8000636:	2200      	movs	r2, #0
 8000638:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063a:	4b1d      	ldr	r3, [pc, #116]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000642:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000648:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000650:	4817      	ldr	r0, [pc, #92]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 8000652:	f001 f869 	bl	8001728 <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800065c:	f000 fac4 	bl	8000be8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000668:	4619      	mov	r1, r3
 800066a:	4811      	ldr	r0, [pc, #68]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 800066c:	f001 fe84 	bl	8002378 <HAL_ADCEx_MultiModeConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000676:	f000 fab7 	bl	8000be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800067a:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <MX_ADC1_Init+0xec>)
 800067c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067e:	2306      	movs	r3, #6
 8000680:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000686:	237f      	movs	r3, #127	@ 0x7f
 8000688:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800068a:	2304      	movs	r3, #4
 800068c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	@ (80006b0 <MX_ADC1_Init+0xe8>)
 8000698:	f001 fa08 	bl	8001aac <HAL_ADC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006a2:	f000 faa1 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	3730      	adds	r7, #48	@ 0x30
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000028 	.word	0x20000028
 80006b4:	21800100 	.word	0x21800100

080006b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006be:	463b      	mov	r3, r7
 80006c0:	2220      	movs	r2, #32
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f005 fad9 	bl	8005c7c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000778 <MX_ADC2_Init+0xc0>)
 80006cc:	4a2b      	ldr	r2, [pc, #172]	@ (800077c <MX_ADC2_Init+0xc4>)
 80006ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d0:	4b29      	ldr	r3, [pc, #164]	@ (8000778 <MX_ADC2_Init+0xc0>)
 80006d2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006d6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006d8:	4b27      	ldr	r3, [pc, #156]	@ (8000778 <MX_ADC2_Init+0xc0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006de:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <MX_ADC2_Init+0xc0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006e4:	4b24      	ldr	r3, [pc, #144]	@ (8000778 <MX_ADC2_Init+0xc0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ea:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <MX_ADC2_Init+0xc0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f0:	4b21      	ldr	r3, [pc, #132]	@ (8000778 <MX_ADC2_Init+0xc0>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006f6:	4b20      	ldr	r3, [pc, #128]	@ (8000778 <MX_ADC2_Init+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000778 <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000702:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <MX_ADC2_Init+0xc0>)
 8000704:	2201      	movs	r2, #1
 8000706:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000708:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <MX_ADC2_Init+0xc0>)
 800070a:	2200      	movs	r2, #0
 800070c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000710:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <MX_ADC2_Init+0xc0>)
 8000712:	2200      	movs	r2, #0
 8000714:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000716:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <MX_ADC2_Init+0xc0>)
 8000718:	2200      	movs	r2, #0
 800071a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800071c:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <MX_ADC2_Init+0xc0>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_ADC2_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800072a:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_ADC2_Init+0xc0>)
 800072c:	2200      	movs	r2, #0
 800072e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000732:	4811      	ldr	r0, [pc, #68]	@ (8000778 <MX_ADC2_Init+0xc0>)
 8000734:	f000 fff8 	bl	8001728 <HAL_ADC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800073e:	f000 fa53 	bl	8000be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000742:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_ADC2_Init+0xc8>)
 8000744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000746:	2306      	movs	r3, #6
 8000748:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074e:	237f      	movs	r3, #127	@ 0x7f
 8000750:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000752:	2304      	movs	r3, #4
 8000754:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	@ (8000778 <MX_ADC2_Init+0xc0>)
 8000760:	f001 f9a4 	bl	8001aac <HAL_ADC_ConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800076a:	f000 fa3d 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	3720      	adds	r7, #32
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000094 	.word	0x20000094
 800077c:	50000100 	.word	0x50000100
 8000780:	19200040 	.word	0x19200040

08000784 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b098      	sub	sp, #96	@ 0x60
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000796:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
 80007a6:	615a      	str	r2, [r3, #20]
 80007a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2234      	movs	r2, #52	@ 0x34
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f005 fa63 	bl	8005c7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b6:	4b47      	ldr	r3, [pc, #284]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80007b8:	4a47      	ldr	r2, [pc, #284]	@ (80008d8 <MX_TIM1_Init+0x154>)
 80007ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007bc:	4b45      	ldr	r3, [pc, #276]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c2:	4b44      	ldr	r3, [pc, #272]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007c8:	4b42      	ldr	r3, [pc, #264]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80007ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d0:	4b40      	ldr	r3, [pc, #256]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d6:	4b3f      	ldr	r3, [pc, #252]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007dc:	4b3d      	ldr	r3, [pc, #244]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007e2:	483c      	ldr	r0, [pc, #240]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80007e4:	f003 fab0 	bl	8003d48 <HAL_TIM_PWM_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80007ee:	f000 f9fb 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f2:	2300      	movs	r3, #0
 80007f4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007f6:	2300      	movs	r3, #0
 80007f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000802:	4619      	mov	r1, r3
 8000804:	4833      	ldr	r0, [pc, #204]	@ (80008d4 <MX_TIM1_Init+0x150>)
 8000806:	f004 faa7 	bl	8004d58 <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000810:	f000 f9ea 	bl	8000be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000814:	2360      	movs	r3, #96	@ 0x60
 8000816:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081c:	2300      	movs	r3, #0
 800081e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000820:	2300      	movs	r3, #0
 8000822:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000830:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000834:	2200      	movs	r2, #0
 8000836:	4619      	mov	r1, r3
 8000838:	4826      	ldr	r0, [pc, #152]	@ (80008d4 <MX_TIM1_Init+0x150>)
 800083a:	f003 fc5b 	bl	80040f4 <HAL_TIM_PWM_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000844:	f000 f9d0 	bl	8000be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000848:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800084c:	2204      	movs	r2, #4
 800084e:	4619      	mov	r1, r3
 8000850:	4820      	ldr	r0, [pc, #128]	@ (80008d4 <MX_TIM1_Init+0x150>)
 8000852:	f003 fc4f 	bl	80040f4 <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800085c:	f000 f9c4 	bl	8000be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000860:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000864:	2208      	movs	r2, #8
 8000866:	4619      	mov	r1, r3
 8000868:	481a      	ldr	r0, [pc, #104]	@ (80008d4 <MX_TIM1_Init+0x150>)
 800086a:	f003 fc43 	bl	80040f4 <HAL_TIM_PWM_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000874:	f000 f9b8 	bl	8000be8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800088c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000890:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800089e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4807      	ldr	r0, [pc, #28]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80008b6:	f004 fae5 	bl	8004e84 <HAL_TIMEx_ConfigBreakDeadTime>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80008c0:	f000 f992 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008c4:	4803      	ldr	r0, [pc, #12]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80008c6:	f000 fb35 	bl	8000f34 <HAL_TIM_MspPostInit>

}
 80008ca:	bf00      	nop
 80008cc:	3760      	adds	r7, #96	@ 0x60
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000100 	.word	0x20000100
 80008d8:	40012c00 	.word	0x40012c00

080008dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008fa:	4b1c      	ldr	r3, [pc, #112]	@ (800096c <MX_TIM3_Init+0x90>)
 80008fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000970 <MX_TIM3_Init+0x94>)
 80008fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000900:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <MX_TIM3_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000906:	4b19      	ldr	r3, [pc, #100]	@ (800096c <MX_TIM3_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800090c:	4b17      	ldr	r3, [pc, #92]	@ (800096c <MX_TIM3_Init+0x90>)
 800090e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000912:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000914:	4b15      	ldr	r3, [pc, #84]	@ (800096c <MX_TIM3_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091a:	4b14      	ldr	r3, [pc, #80]	@ (800096c <MX_TIM3_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	4619      	mov	r1, r3
 8000936:	480d      	ldr	r0, [pc, #52]	@ (800096c <MX_TIM3_Init+0x90>)
 8000938:	f004 f95e 	bl	8004bf8 <HAL_TIMEx_HallSensor_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000942:	f000 f951 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000946:	2350      	movs	r3, #80	@ 0x50
 8000948:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	@ (800096c <MX_TIM3_Init+0x90>)
 8000954:	f004 fa00 	bl	8004d58 <HAL_TIMEx_MasterConfigSynchronization>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800095e:	f000 f943 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000014c 	.word	0x2000014c
 8000970:	40000400 	.word	0x40000400

08000974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b22      	ldr	r3, [pc, #136]	@ (8000a04 <MX_USART2_UART_Init+0x90>)
 800097a:	4a23      	ldr	r2, [pc, #140]	@ (8000a08 <MX_USART2_UART_Init+0x94>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b21      	ldr	r3, [pc, #132]	@ (8000a04 <MX_USART2_UART_Init+0x90>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b1f      	ldr	r3, [pc, #124]	@ (8000a04 <MX_USART2_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a04 <MX_USART2_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <MX_USART2_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <MX_USART2_UART_Init+0x90>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <MX_USART2_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <MX_USART2_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <MX_USART2_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b0:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <MX_USART2_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b6:	4b13      	ldr	r3, [pc, #76]	@ (8000a04 <MX_USART2_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009bc:	4811      	ldr	r0, [pc, #68]	@ (8000a04 <MX_USART2_UART_Init+0x90>)
 80009be:	f004 fb59 	bl	8005074 <HAL_UART_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009c8:	f000 f90e 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009cc:	2100      	movs	r1, #0
 80009ce:	480d      	ldr	r0, [pc, #52]	@ (8000a04 <MX_USART2_UART_Init+0x90>)
 80009d0:	f005 f88a 	bl	8005ae8 <HAL_UARTEx_SetTxFifoThreshold>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009da:	f000 f905 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009de:	2100      	movs	r1, #0
 80009e0:	4808      	ldr	r0, [pc, #32]	@ (8000a04 <MX_USART2_UART_Init+0x90>)
 80009e2:	f005 f8bf 	bl	8005b64 <HAL_UARTEx_SetRxFifoThreshold>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009ec:	f000 f8fc 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009f0:	4804      	ldr	r0, [pc, #16]	@ (8000a04 <MX_USART2_UART_Init+0x90>)
 80009f2:	f005 f840 	bl	8005a76 <HAL_UARTEx_DisableFifoMode>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009fc:	f000 f8f4 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000198 	.word	0x20000198
 8000a08:	40004400 	.word	0x40004400

08000a0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a10:	4b22      	ldr	r3, [pc, #136]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a12:	4a23      	ldr	r2, [pc, #140]	@ (8000aa0 <MX_USART3_UART_Init+0x94>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a16:	4b21      	ldr	r3, [pc, #132]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a48:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a54:	4811      	ldr	r0, [pc, #68]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a56:	f004 fb0d 	bl	8005074 <HAL_UART_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a60:	f000 f8c2 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	480d      	ldr	r0, [pc, #52]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a68:	f005 f83e 	bl	8005ae8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a72:	f000 f8b9 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4808      	ldr	r0, [pc, #32]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a7a:	f005 f873 	bl	8005b64 <HAL_UARTEx_SetRxFifoThreshold>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a84:	f000 f8b0 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a8a:	f004 fff4 	bl	8005a76 <HAL_UARTEx_DisableFifoMode>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a94:	f000 f8a8 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000228 	.word	0x20000228
 8000aa0:	40004800 	.word	0x40004800

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	@ 0x28
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb8 <MX_GPIO_Init+0x114>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	4a3e      	ldr	r2, [pc, #248]	@ (8000bb8 <MX_GPIO_Init+0x114>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8000bb8 <MX_GPIO_Init+0x114>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	4b39      	ldr	r3, [pc, #228]	@ (8000bb8 <MX_GPIO_Init+0x114>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad6:	4a38      	ldr	r2, [pc, #224]	@ (8000bb8 <MX_GPIO_Init+0x114>)
 8000ad8:	f043 0320 	orr.w	r3, r3, #32
 8000adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ade:	4b36      	ldr	r3, [pc, #216]	@ (8000bb8 <MX_GPIO_Init+0x114>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	f003 0320 	and.w	r3, r3, #32
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b33      	ldr	r3, [pc, #204]	@ (8000bb8 <MX_GPIO_Init+0x114>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	4a32      	ldr	r2, [pc, #200]	@ (8000bb8 <MX_GPIO_Init+0x114>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af6:	4b30      	ldr	r3, [pc, #192]	@ (8000bb8 <MX_GPIO_Init+0x114>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb8 <MX_GPIO_Init+0x114>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	4a2c      	ldr	r2, [pc, #176]	@ (8000bb8 <MX_GPIO_Init+0x114>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb8 <MX_GPIO_Init+0x114>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1a:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <MX_GPIO_Init+0x114>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	4a26      	ldr	r2, [pc, #152]	@ (8000bb8 <MX_GPIO_Init+0x114>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b26:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <MX_GPIO_Init+0x114>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2120      	movs	r1, #32
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b3a:	f001 ff87 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2104      	movs	r1, #4
 8000b42:	481e      	ldr	r0, [pc, #120]	@ (8000bbc <MX_GPIO_Init+0x118>)
 8000b44:	f001 ff82 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000b48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4818      	ldr	r0, [pc, #96]	@ (8000bc0 <MX_GPIO_Init+0x11c>)
 8000b60:	f001 fdf2 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000b64:	2320      	movs	r3, #32
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b7e:	f001 fde3 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_SafetyUC_Pin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000b82:	2304      	movs	r3, #4
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <MX_GPIO_Init+0x118>)
 8000b9a:	f001 fdd5 	bl	8002748 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2028      	movs	r0, #40	@ 0x28
 8000ba4:	f001 fda8 	bl	80026f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ba8:	2028      	movs	r0, #40	@ 0x28
 8000baa:	f001 fdbf 	bl	800272c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	@ 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	48000c00 	.word	0x48000c00
 8000bc0:	48000800 	.word	0x48000800

08000bc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d101      	bne.n	8000bda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bd6:	f000 fbaf 	bl	8001338 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40001000 	.word	0x40001000

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <Error_Handler+0x8>

08000bf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <HAL_MspInit+0x44>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8000c38 <HAL_MspInit+0x44>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c06:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <HAL_MspInit+0x44>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <HAL_MspInit+0x44>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <HAL_MspInit+0x44>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_MspInit+0x44>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c2a:	f001 ffef 	bl	8002c0c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0a4      	sub	sp, #144	@ 0x90
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c58:	2254      	movs	r2, #84	@ 0x54
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f005 f80d 	bl	8005c7c <memset>
  if(hadc->Instance==ADC1)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c6a:	d174      	bne.n	8000d56 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c72:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000c76:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 fd3b 	bl	80036f8 <HAL_RCCEx_PeriphCLKConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c88:	f7ff ffae 	bl	8000be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c8c:	4b63      	ldr	r3, [pc, #396]	@ (8000e1c <HAL_ADC_MspInit+0x1e0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	4a62      	ldr	r2, [pc, #392]	@ (8000e1c <HAL_ADC_MspInit+0x1e0>)
 8000c94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c96:	4b61      	ldr	r3, [pc, #388]	@ (8000e1c <HAL_ADC_MspInit+0x1e0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d10b      	bne.n	8000cb6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c9e:	4b60      	ldr	r3, [pc, #384]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	4a5f      	ldr	r2, [pc, #380]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000ca4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000caa:	4b5d      	ldr	r3, [pc, #372]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	4b5a      	ldr	r3, [pc, #360]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cba:	4a59      	ldr	r2, [pc, #356]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc2:	4b57      	ldr	r3, [pc, #348]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	623b      	str	r3, [r7, #32]
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b54      	ldr	r3, [pc, #336]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	4a53      	ldr	r2, [pc, #332]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cda:	4b51      	ldr	r3, [pc, #324]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	61fb      	str	r3, [r7, #28]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b4e      	ldr	r3, [pc, #312]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	4a4d      	ldr	r2, [pc, #308]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
 8000cfc:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d02:	2303      	movs	r3, #3
 8000d04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000d12:	4619      	mov	r1, r3
 8000d14:	4843      	ldr	r0, [pc, #268]	@ (8000e24 <HAL_ADC_MspInit+0x1e8>)
 8000d16:	f001 fd17 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d34:	f001 fd08 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4836      	ldr	r0, [pc, #216]	@ (8000e28 <HAL_ADC_MspInit+0x1ec>)
 8000d50:	f001 fcfa 	bl	8002748 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d54:	e05e      	b.n	8000e14 <HAL_ADC_MspInit+0x1d8>
  else if(hadc->Instance==ADC2)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a34      	ldr	r2, [pc, #208]	@ (8000e2c <HAL_ADC_MspInit+0x1f0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d159      	bne.n	8000e14 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d64:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d66:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 fcc1 	bl	80036f8 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8000d7c:	f7ff ff34 	bl	8000be8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d80:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <HAL_ADC_MspInit+0x1e0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3301      	adds	r3, #1
 8000d86:	4a25      	ldr	r2, [pc, #148]	@ (8000e1c <HAL_ADC_MspInit+0x1e0>)
 8000d88:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d8a:	4b24      	ldr	r3, [pc, #144]	@ (8000e1c <HAL_ADC_MspInit+0x1e0>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d10b      	bne.n	8000daa <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d92:	4b23      	ldr	r3, [pc, #140]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	4a22      	ldr	r2, [pc, #136]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000d98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9e:	4b20      	ldr	r3, [pc, #128]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	4a1c      	ldr	r2, [pc, #112]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000db0:	f043 0304 	orr.w	r3, r3, #4
 8000db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	4a16      	ldr	r2, [pc, #88]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dce:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <HAL_ADC_MspInit+0x1e4>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000dda:	230b      	movs	r3, #11
 8000ddc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dde:	2303      	movs	r3, #3
 8000de0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dea:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000dee:	4619      	mov	r1, r3
 8000df0:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <HAL_ADC_MspInit+0x1e8>)
 8000df2:	f001 fca9 	bl	8002748 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000df6:	2301      	movs	r3, #1
 8000df8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e10:	f001 fc9a 	bl	8002748 <HAL_GPIO_Init>
}
 8000e14:	bf00      	nop
 8000e16:	3790      	adds	r7, #144	@ 0x90
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200002b8 	.word	0x200002b8
 8000e20:	40021000 	.word	0x40021000
 8000e24:	48000800 	.word	0x48000800
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	50000100 	.word	0x50000100

08000e30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <HAL_TIM_PWM_MspInit+0x38>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d10b      	bne.n	8000e5a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e46:	4a09      	ldr	r2, [pc, #36]	@ (8000e6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000e48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e4e:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40012c00 	.word	0x40012c00
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM3)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a26      	ldr	r2, [pc, #152]	@ (8000f28 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d145      	bne.n	8000f1e <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e92:	4b26      	ldr	r3, [pc, #152]	@ (8000f2c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e96:	4a25      	ldr	r2, [pc, #148]	@ (8000f2c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e9e:	4b23      	ldr	r3, [pc, #140]	@ (8000f2c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b20      	ldr	r3, [pc, #128]	@ (8000f2c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	4a1f      	ldr	r2, [pc, #124]	@ (8000f2c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a19      	ldr	r2, [pc, #100]	@ (8000f2c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000eda:	2350      	movs	r3, #80	@ 0x50
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eea:	2302      	movs	r3, #2
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef8:	f001 fc26 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000efc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8000f1a:	f001 fc15 	bl	8002748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f1e:	bf00      	nop
 8000f20:	3728      	adds	r7, #40	@ 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40000400 	.word	0x40000400
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	48000800 	.word	0x48000800

08000f34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	@ 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a29      	ldr	r2, [pc, #164]	@ (8000ff8 <HAL_TIM_MspPostInit+0xc4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d14b      	bne.n	8000fee <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b29      	ldr	r3, [pc, #164]	@ (8000ffc <HAL_TIM_MspPostInit+0xc8>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5a:	4a28      	ldr	r2, [pc, #160]	@ (8000ffc <HAL_TIM_MspPostInit+0xc8>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f62:	4b26      	ldr	r3, [pc, #152]	@ (8000ffc <HAL_TIM_MspPostInit+0xc8>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b23      	ldr	r3, [pc, #140]	@ (8000ffc <HAL_TIM_MspPostInit+0xc8>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	4a22      	ldr	r2, [pc, #136]	@ (8000ffc <HAL_TIM_MspPostInit+0xc8>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7a:	4b20      	ldr	r3, [pc, #128]	@ (8000ffc <HAL_TIM_MspPostInit+0xc8>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8000f86:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f98:	2306      	movs	r3, #6
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4817      	ldr	r0, [pc, #92]	@ (8001000 <HAL_TIM_MspPostInit+0xcc>)
 8000fa4:	f001 fbd0 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8000fa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480e      	ldr	r0, [pc, #56]	@ (8001000 <HAL_TIM_MspPostInit+0xcc>)
 8000fc6:	f001 fbbf 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8000fca:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fdc:	2306      	movs	r3, #6
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fea:	f001 fbad 	bl	8002748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	@ 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40012c00 	.word	0x40012c00
 8000ffc:	40021000 	.word	0x40021000
 8001000:	48000400 	.word	0x48000400

08001004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b0a0      	sub	sp, #128	@ 0x80
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	2254      	movs	r2, #84	@ 0x54
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f004 fe29 	bl	8005c7c <memset>
  if(huart->Instance==USART2)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a3d      	ldr	r2, [pc, #244]	@ (8001124 <HAL_UART_MspInit+0x120>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d137      	bne.n	80010a4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	4618      	mov	r0, r3
 8001042:	f002 fb59 	bl	80036f8 <HAL_RCCEx_PeriphCLKConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800104c:	f7ff fdcc 	bl	8000be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001050:	4b35      	ldr	r3, [pc, #212]	@ (8001128 <HAL_UART_MspInit+0x124>)
 8001052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001054:	4a34      	ldr	r2, [pc, #208]	@ (8001128 <HAL_UART_MspInit+0x124>)
 8001056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800105a:	6593      	str	r3, [r2, #88]	@ 0x58
 800105c:	4b32      	ldr	r3, [pc, #200]	@ (8001128 <HAL_UART_MspInit+0x124>)
 800105e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <HAL_UART_MspInit+0x124>)
 800106a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106c:	4a2e      	ldr	r2, [pc, #184]	@ (8001128 <HAL_UART_MspInit+0x124>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001074:	4b2c      	ldr	r3, [pc, #176]	@ (8001128 <HAL_UART_MspInit+0x124>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001080:	230c      	movs	r3, #12
 8001082:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001090:	2307      	movs	r3, #7
 8001092:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109e:	f001 fb53 	bl	8002748 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010a2:	e03b      	b.n	800111c <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART3)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a20      	ldr	r2, [pc, #128]	@ (800112c <HAL_UART_MspInit+0x128>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d136      	bne.n	800111c <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010ae:	2304      	movs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 fb1c 	bl	80036f8 <HAL_RCCEx_PeriphCLKConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80010c6:	f7ff fd8f 	bl	8000be8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ca:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <HAL_UART_MspInit+0x124>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ce:	4a16      	ldr	r2, [pc, #88]	@ (8001128 <HAL_UART_MspInit+0x124>)
 80010d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <HAL_UART_MspInit+0x124>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <HAL_UART_MspInit+0x124>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a10      	ldr	r2, [pc, #64]	@ (8001128 <HAL_UART_MspInit+0x124>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <HAL_UART_MspInit+0x124>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800110c:	2307      	movs	r3, #7
 800110e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001110:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <HAL_UART_MspInit+0x12c>)
 8001118:	f001 fb16 	bl	8002748 <HAL_GPIO_Init>
}
 800111c:	bf00      	nop
 800111e:	3780      	adds	r7, #128	@ 0x80
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40004400 	.word	0x40004400
 8001128:	40021000 	.word	0x40021000
 800112c:	40004800 	.word	0x40004800
 8001130:	48000800 	.word	0x48000800

08001134 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	@ 0x30
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001144:	4b2c      	ldr	r3, [pc, #176]	@ (80011f8 <HAL_InitTick+0xc4>)
 8001146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001148:	4a2b      	ldr	r2, [pc, #172]	@ (80011f8 <HAL_InitTick+0xc4>)
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001150:	4b29      	ldr	r3, [pc, #164]	@ (80011f8 <HAL_InitTick+0xc4>)
 8001152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800115c:	f107 020c 	add.w	r2, r7, #12
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f002 fa4e 	bl	8003608 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800116c:	f002 fa20 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 8001170:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001174:	4a21      	ldr	r2, [pc, #132]	@ (80011fc <HAL_InitTick+0xc8>)
 8001176:	fba2 2303 	umull	r2, r3, r2, r3
 800117a:	0c9b      	lsrs	r3, r3, #18
 800117c:	3b01      	subs	r3, #1
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <HAL_InitTick+0xcc>)
 8001182:	4a20      	ldr	r2, [pc, #128]	@ (8001204 <HAL_InitTick+0xd0>)
 8001184:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <HAL_InitTick+0xcc>)
 8001188:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800118c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800118e:	4a1c      	ldr	r2, [pc, #112]	@ (8001200 <HAL_InitTick+0xcc>)
 8001190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001192:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <HAL_InitTick+0xcc>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <HAL_InitTick+0xcc>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80011a0:	4817      	ldr	r0, [pc, #92]	@ (8001200 <HAL_InitTick+0xcc>)
 80011a2:	f002 fcf7 	bl	8003b94 <HAL_TIM_Base_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80011ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d11b      	bne.n	80011ec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011b4:	4812      	ldr	r0, [pc, #72]	@ (8001200 <HAL_InitTick+0xcc>)
 80011b6:	f002 fd4f 	bl	8003c58 <HAL_TIM_Base_Start_IT>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80011c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d111      	bne.n	80011ec <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011c8:	2036      	movs	r0, #54	@ 0x36
 80011ca:	f001 faaf 	bl	800272c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d808      	bhi.n	80011e6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	2036      	movs	r0, #54	@ 0x36
 80011da:	f001 fa8d 	bl	80026f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011de:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <HAL_InitTick+0xd4>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	e002      	b.n	80011ec <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80011ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3730      	adds	r7, #48	@ 0x30
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000
 80011fc:	431bde83 	.word	0x431bde83
 8001200:	200002bc 	.word	0x200002bc
 8001204:	40001000 	.word	0x40001000
 8001208:	20000004 	.word	0x20000004

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <NMI_Handler+0x4>

08001214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <MemManage_Handler+0x4>

08001224 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <UsageFault_Handler+0x4>

08001234 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001270:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001274:	f001 fc02 	bl	8002a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001280:	4802      	ldr	r0, [pc, #8]	@ (800128c <TIM6_DAC_IRQHandler+0x10>)
 8001282:	f002 fdb8 	bl	8003df6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200002bc 	.word	0x200002bc

08001290 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <SystemInit+0x20>)
 8001296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800129a:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <SystemInit+0x20>)
 800129c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012b4:	480d      	ldr	r0, [pc, #52]	@ (80012ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b8:	480d      	ldr	r0, [pc, #52]	@ (80012f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ba:	490e      	ldr	r1, [pc, #56]	@ (80012f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012bc:	4a0e      	ldr	r2, [pc, #56]	@ (80012f8 <LoopForever+0xe>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a0b      	ldr	r2, [pc, #44]	@ (80012fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d0:	4c0b      	ldr	r4, [pc, #44]	@ (8001300 <LoopForever+0x16>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012de:	f7ff ffd7 	bl	8001290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e2:	f004 fcd3 	bl	8005c8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012e6:	f7ff f90f 	bl	8000508 <main>

080012ea <LoopForever>:

LoopForever:
    b LoopForever
 80012ea:	e7fe      	b.n	80012ea <LoopForever>
  ldr   r0, =_estack
 80012ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012f8:	08005d3c 	.word	0x08005d3c
  ldr r2, =_sbss
 80012fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001300:	2000030c 	.word	0x2000030c

08001304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC1_2_IRQHandler>

08001306 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001310:	2003      	movs	r0, #3
 8001312:	f001 f9e6 	bl	80026e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001316:	200f      	movs	r0, #15
 8001318:	f7ff ff0c 	bl	8001134 <HAL_InitTick>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	e001      	b.n	800132c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001328:	f7ff fc64 	bl	8000bf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800132c:	79fb      	ldrb	r3, [r7, #7]

}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_IncTick+0x1c>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <HAL_IncTick+0x20>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4413      	add	r3, r2
 8001346:	4a03      	ldr	r2, [pc, #12]	@ (8001354 <HAL_IncTick+0x1c>)
 8001348:	6013      	str	r3, [r2, #0]
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	20000308 	.word	0x20000308
 8001358:	20000008 	.word	0x20000008

0800135c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <HAL_GetTick+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000308 	.word	0x20000308

08001374 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	609a      	str	r2, [r3, #8]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	609a      	str	r2, [r3, #8]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	3360      	adds	r3, #96	@ 0x60
 80013ee:	461a      	mov	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <LL_ADC_SetOffset+0x44>)
 80013fe:	4013      	ands	r3, r2
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	4313      	orrs	r3, r2
 800140c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001414:	bf00      	nop
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	03fff000 	.word	0x03fff000

08001424 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3360      	adds	r3, #96	@ 0x60
 8001432:	461a      	mov	r2, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3360      	adds	r3, #96	@ 0x60
 8001460:	461a      	mov	r2, r3
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	431a      	orrs	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800147a:	bf00      	nop
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001486:	b480      	push	{r7}
 8001488:	b087      	sub	sp, #28
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3360      	adds	r3, #96	@ 0x60
 8001496:	461a      	mov	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	431a      	orrs	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80014b0:	bf00      	nop
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3360      	adds	r3, #96	@ 0x60
 80014cc:	461a      	mov	r2, r3
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	431a      	orrs	r2, r3
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80014e6:	bf00      	nop
 80014e8:	371c      	adds	r7, #28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	615a      	str	r2, [r3, #20]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3330      	adds	r3, #48	@ 0x30
 8001528:	461a      	mov	r2, r3
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	f003 030c 	and.w	r3, r3, #12
 8001534:	4413      	add	r3, r2
 8001536:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	f003 031f 	and.w	r3, r3, #31
 8001542:	211f      	movs	r1, #31
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	401a      	ands	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	0e9b      	lsrs	r3, r3, #26
 8001550:	f003 011f 	and.w	r1, r3, #31
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	f003 031f 	and.w	r3, r3, #31
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	431a      	orrs	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001564:	bf00      	nop
 8001566:	371c      	adds	r7, #28
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3314      	adds	r3, #20
 8001580:	461a      	mov	r2, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	0e5b      	lsrs	r3, r3, #25
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	4413      	add	r3, r2
 800158e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	0d1b      	lsrs	r3, r3, #20
 8001598:	f003 031f 	and.w	r3, r3, #31
 800159c:	2107      	movs	r1, #7
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	401a      	ands	r2, r3
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	0d1b      	lsrs	r3, r3, #20
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	431a      	orrs	r2, r3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015ba:	bf00      	nop
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001614 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d10a      	bne.n	80015f2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015e8:	431a      	orrs	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80015f0:	e00a      	b.n	8001608 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015fe:	43db      	mvns	r3, r3
 8001600:	401a      	ands	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	407f0000 	.word	0x407f0000

08001618 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001628:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6093      	str	r3, [r2, #8]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800164c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001650:	d101      	bne.n	8001656 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001674:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001678:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016a0:	d101      	bne.n	80016a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d101      	bne.n	80016cc <LL_ADC_IsEnabled+0x18>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <LL_ADC_IsEnabled+0x1a>
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d101      	bne.n	80016f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b08      	cmp	r3, #8
 8001712:	d101      	bne.n	8001718 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b089      	sub	sp, #36	@ 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e1af      	b.n	8001aa2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800174c:	2b00      	cmp	r3, #0
 800174e:	d109      	bne.n	8001764 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fa73 	bl	8000c3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff67 	bl	800163c <LL_ADC_IsDeepPowerDownEnabled>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff4d 	bl	8001618 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff82 	bl	800168c <LL_ADC_IsInternalRegulatorEnabled>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d115      	bne.n	80017ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff66 	bl	8001664 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001798:	4b9f      	ldr	r3, [pc, #636]	@ (8001a18 <HAL_ADC_Init+0x2f0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	099b      	lsrs	r3, r3, #6
 800179e:	4a9f      	ldr	r2, [pc, #636]	@ (8001a1c <HAL_ADC_Init+0x2f4>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	099b      	lsrs	r3, r3, #6
 80017a6:	3301      	adds	r3, #1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017ac:	e002      	b.n	80017b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f9      	bne.n	80017ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff64 	bl	800168c <LL_ADC_IsInternalRegulatorEnabled>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10d      	bne.n	80017e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ce:	f043 0210 	orr.w	r2, r3, #16
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017da:	f043 0201 	orr.w	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff75 	bl	80016da <LL_ADC_REG_IsConversionOngoing>
 80017f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 8148 	bne.w	8001a90 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 8144 	bne.w	8001a90 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800180c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001810:	f043 0202 	orr.w	r2, r3, #2
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff49 	bl	80016b4 <LL_ADC_IsEnabled>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d141      	bne.n	80018ac <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001830:	d004      	beq.n	800183c <HAL_ADC_Init+0x114>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a7a      	ldr	r2, [pc, #488]	@ (8001a20 <HAL_ADC_Init+0x2f8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d10f      	bne.n	800185c <HAL_ADC_Init+0x134>
 800183c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001840:	f7ff ff38 	bl	80016b4 <LL_ADC_IsEnabled>
 8001844:	4604      	mov	r4, r0
 8001846:	4876      	ldr	r0, [pc, #472]	@ (8001a20 <HAL_ADC_Init+0x2f8>)
 8001848:	f7ff ff34 	bl	80016b4 <LL_ADC_IsEnabled>
 800184c:	4603      	mov	r3, r0
 800184e:	4323      	orrs	r3, r4
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf0c      	ite	eq
 8001854:	2301      	moveq	r3, #1
 8001856:	2300      	movne	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	e012      	b.n	8001882 <HAL_ADC_Init+0x15a>
 800185c:	4871      	ldr	r0, [pc, #452]	@ (8001a24 <HAL_ADC_Init+0x2fc>)
 800185e:	f7ff ff29 	bl	80016b4 <LL_ADC_IsEnabled>
 8001862:	4604      	mov	r4, r0
 8001864:	4870      	ldr	r0, [pc, #448]	@ (8001a28 <HAL_ADC_Init+0x300>)
 8001866:	f7ff ff25 	bl	80016b4 <LL_ADC_IsEnabled>
 800186a:	4603      	mov	r3, r0
 800186c:	431c      	orrs	r4, r3
 800186e:	486f      	ldr	r0, [pc, #444]	@ (8001a2c <HAL_ADC_Init+0x304>)
 8001870:	f7ff ff20 	bl	80016b4 <LL_ADC_IsEnabled>
 8001874:	4603      	mov	r3, r0
 8001876:	4323      	orrs	r3, r4
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d012      	beq.n	80018ac <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800188e:	d004      	beq.n	800189a <HAL_ADC_Init+0x172>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a62      	ldr	r2, [pc, #392]	@ (8001a20 <HAL_ADC_Init+0x2f8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <HAL_ADC_Init+0x176>
 800189a:	4a65      	ldr	r2, [pc, #404]	@ (8001a30 <HAL_ADC_Init+0x308>)
 800189c:	e000      	b.n	80018a0 <HAL_ADC_Init+0x178>
 800189e:	4a65      	ldr	r2, [pc, #404]	@ (8001a34 <HAL_ADC_Init+0x30c>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	4619      	mov	r1, r3
 80018a6:	4610      	mov	r0, r2
 80018a8:	f7ff fd64 	bl	8001374 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7f5b      	ldrb	r3, [r3, #29]
 80018b0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018b6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80018bc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80018c2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018ca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d106      	bne.n	80018e8 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018de:	3b01      	subs	r3, #1
 80018e0:	045b      	lsls	r3, r3, #17
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d009      	beq.n	8001904 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a38 <HAL_ADC_Init+0x310>)
 800190c:	4013      	ands	r3, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	69b9      	ldr	r1, [r7, #24]
 8001914:	430b      	orrs	r3, r1
 8001916:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fed1 	bl	80016da <LL_ADC_REG_IsConversionOngoing>
 8001938:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fede 	bl	8001700 <LL_ADC_INJ_IsConversionOngoing>
 8001944:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d17f      	bne.n	8001a4c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d17c      	bne.n	8001a4c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001956:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800195e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800196e:	f023 0302 	bic.w	r3, r3, #2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	69b9      	ldr	r1, [r7, #24]
 8001978:	430b      	orrs	r3, r1
 800197a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d017      	beq.n	80019b4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	691a      	ldr	r2, [r3, #16]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001992:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800199c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6911      	ldr	r1, [r2, #16]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	430b      	orrs	r3, r1
 80019ae:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80019b2:	e013      	b.n	80019dc <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80019c2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019d8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d12a      	bne.n	8001a3c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80019f0:	f023 0304 	bic.w	r3, r3, #4
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019fc:	4311      	orrs	r1, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001a02:	4311      	orrs	r1, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	611a      	str	r2, [r3, #16]
 8001a16:	e019      	b.n	8001a4c <HAL_ADC_Init+0x324>
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	053e2d63 	.word	0x053e2d63
 8001a20:	50000100 	.word	0x50000100
 8001a24:	50000400 	.word	0x50000400
 8001a28:	50000500 	.word	0x50000500
 8001a2c:	50000600 	.word	0x50000600
 8001a30:	50000300 	.word	0x50000300
 8001a34:	50000700 	.word	0x50000700
 8001a38:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691a      	ldr	r2, [r3, #16]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d10c      	bne.n	8001a6e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	f023 010f 	bic.w	r1, r3, #15
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	1e5a      	subs	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a6c:	e007      	b.n	8001a7e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 020f 	bic.w	r2, r2, #15
 8001a7c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a82:	f023 0303 	bic.w	r3, r3, #3
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a8e:	e007      	b.n	8001aa0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a94:	f043 0210 	orr.w	r2, r3, #16
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001aa0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	@ 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd90      	pop	{r4, r7, pc}
 8001aaa:	bf00      	nop

08001aac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b0b6      	sub	sp, #216	@ 0xd8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d102      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x24>
 8001aca:	2302      	movs	r3, #2
 8001acc:	f000 bc13 	b.w	80022f6 <HAL_ADC_ConfigChannel+0x84a>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fdfc 	bl	80016da <LL_ADC_REG_IsConversionOngoing>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f040 83f3 	bne.w	80022d0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	6859      	ldr	r1, [r3, #4]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	f7ff fd0e 	bl	8001518 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fdea 	bl	80016da <LL_ADC_REG_IsConversionOngoing>
 8001b06:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fdf6 	bl	8001700 <LL_ADC_INJ_IsConversionOngoing>
 8001b14:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f040 81d9 	bne.w	8001ed4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f040 81d4 	bne.w	8001ed4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b34:	d10f      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7ff fd15 	bl	8001570 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fccf 	bl	80014f2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001b54:	e00e      	b.n	8001b74 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6819      	ldr	r1, [r3, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	461a      	mov	r2, r3
 8001b64:	f7ff fd04 	bl	8001570 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fcbf 	bl	80014f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	08db      	lsrs	r3, r3, #3
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d022      	beq.n	8001bdc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6919      	ldr	r1, [r3, #16]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ba6:	f7ff fc19 	bl	80013dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6919      	ldr	r1, [r3, #16]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f7ff fc65 	bl	8001486 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6919      	ldr	r1, [r3, #16]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	7f1b      	ldrb	r3, [r3, #28]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d102      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x126>
 8001bcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bd0:	e000      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x128>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	f7ff fc71 	bl	80014bc <LL_ADC_SetOffsetSaturation>
 8001bda:	e17b      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fc1e 	bl	8001424 <LL_ADC_GetOffsetChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10a      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x15c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fc13 	bl	8001424 <LL_ADC_GetOffsetChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	0e9b      	lsrs	r3, r3, #26
 8001c02:	f003 021f 	and.w	r2, r3, #31
 8001c06:	e01e      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x19a>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fc08 	bl	8001424 <LL_ADC_GetOffsetChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001c36:	2320      	movs	r3, #32
 8001c38:	e004      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001c3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c3e:	fab3 f383 	clz	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d105      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x1b2>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0e9b      	lsrs	r3, r3, #26
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	e018      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x1e4>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001c7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001c82:	2320      	movs	r3, #32
 8001c84:	e004      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001c86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d106      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fbd7 	bl	8001450 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fbbb 	bl	8001424 <LL_ADC_GetOffsetChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10a      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x222>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fbb0 	bl	8001424 <LL_ADC_GetOffsetChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	0e9b      	lsrs	r3, r3, #26
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	e01e      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x260>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fba5 	bl	8001424 <LL_ADC_GetOffsetChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001cec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001cf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	e004      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001d00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d04:	fab3 f383 	clz	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d105      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x278>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0e9b      	lsrs	r3, r3, #26
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	e018      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x2aa>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001d38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001d48:	2320      	movs	r3, #32
 8001d4a:	e004      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d106      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2101      	movs	r1, #1
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fb74 	bl	8001450 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2102      	movs	r1, #2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fb58 	bl	8001424 <LL_ADC_GetOffsetChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10a      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x2e8>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2102      	movs	r1, #2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fb4d 	bl	8001424 <LL_ADC_GetOffsetChannel>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	0e9b      	lsrs	r3, r3, #26
 8001d8e:	f003 021f 	and.w	r2, r3, #31
 8001d92:	e01e      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x326>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2102      	movs	r1, #2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fb42 	bl	8001424 <LL_ADC_GetOffsetChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001db2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001db6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001dba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001dc2:	2320      	movs	r3, #32
 8001dc4:	e004      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001dc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d105      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x33e>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0e9b      	lsrs	r3, r3, #26
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	e016      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x36c>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001dfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001dfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001e02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001e0a:	2320      	movs	r3, #32
 8001e0c:	e004      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001e0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d106      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2200      	movs	r2, #0
 8001e22:	2102      	movs	r1, #2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fb13 	bl	8001450 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2103      	movs	r1, #3
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff faf7 	bl	8001424 <LL_ADC_GetOffsetChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10a      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x3aa>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2103      	movs	r1, #3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff faec 	bl	8001424 <LL_ADC_GetOffsetChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	0e9b      	lsrs	r3, r3, #26
 8001e50:	f003 021f 	and.w	r2, r3, #31
 8001e54:	e017      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x3da>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2103      	movs	r1, #3
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fae1 	bl	8001424 <LL_ADC_GetOffsetChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e68:	fa93 f3a3 	rbit	r3, r3
 8001e6c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001e6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e70:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001e72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001e78:	2320      	movs	r3, #32
 8001e7a:	e003      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001e7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d105      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x3f2>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	0e9b      	lsrs	r3, r3, #26
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	e011      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x416>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001eac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001eae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001eb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001eb6:	2320      	movs	r3, #32
 8001eb8:	e003      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001eba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d106      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2103      	movs	r1, #3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fabe 	bl	8001450 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fbeb 	bl	80016b4 <LL_ADC_IsEnabled>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f040 813d 	bne.w	8002160 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6819      	ldr	r1, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f7ff fb68 	bl	80015c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4aa2      	ldr	r2, [pc, #648]	@ (8002188 <HAL_ADC_ConfigChannel+0x6dc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	f040 812e 	bne.w	8002160 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10b      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x480>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0e9b      	lsrs	r3, r3, #26
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	2b09      	cmp	r3, #9
 8001f22:	bf94      	ite	ls
 8001f24:	2301      	movls	r3, #1
 8001f26:	2300      	movhi	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	e019      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x4b4>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001f3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f3c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001f3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001f44:	2320      	movs	r3, #32
 8001f46:	e003      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001f48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f4a:	fab3 f383 	clz	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	3301      	adds	r3, #1
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	2b09      	cmp	r3, #9
 8001f58:	bf94      	ite	ls
 8001f5a:	2301      	movls	r3, #1
 8001f5c:	2300      	movhi	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d079      	beq.n	8002058 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d107      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x4d4>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0e9b      	lsrs	r3, r3, #26
 8001f76:	3301      	adds	r3, #1
 8001f78:	069b      	lsls	r3, r3, #26
 8001f7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f7e:	e015      	b.n	8001fac <HAL_ADC_ConfigChannel+0x500>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f88:	fa93 f3a3 	rbit	r3, r3
 8001f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f90:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001f98:	2320      	movs	r3, #32
 8001f9a:	e003      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	069b      	lsls	r3, r3, #26
 8001fa8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d109      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x520>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0e9b      	lsrs	r3, r3, #26
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	e017      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x550>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd4:	fa93 f3a3 	rbit	r3, r3
 8001fd8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001fe4:	2320      	movs	r3, #32
 8001fe6:	e003      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001fe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f003 031f 	and.w	r3, r3, #31
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	ea42 0103 	orr.w	r1, r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10a      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x576>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0e9b      	lsrs	r3, r3, #26
 8002012:	3301      	adds	r3, #1
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	051b      	lsls	r3, r3, #20
 8002020:	e018      	b.n	8002054 <HAL_ADC_ConfigChannel+0x5a8>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002032:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800203a:	2320      	movs	r3, #32
 800203c:	e003      	b.n	8002046 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800203e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002040:	fab3 f383 	clz	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	3301      	adds	r3, #1
 8002048:	f003 021f 	and.w	r2, r3, #31
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002054:	430b      	orrs	r3, r1
 8002056:	e07e      	b.n	8002156 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x5c8>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0e9b      	lsrs	r3, r3, #26
 800206a:	3301      	adds	r3, #1
 800206c:	069b      	lsls	r3, r3, #26
 800206e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002072:	e015      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x5f4>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002084:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800208c:	2320      	movs	r3, #32
 800208e:	e003      	b.n	8002098 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	3301      	adds	r3, #1
 800209a:	069b      	lsls	r3, r3, #26
 800209c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d109      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x614>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0e9b      	lsrs	r3, r3, #26
 80020b2:	3301      	adds	r3, #1
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	e017      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x644>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	61fb      	str	r3, [r7, #28]
  return result;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80020d8:	2320      	movs	r3, #32
 80020da:	e003      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80020dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	3301      	adds	r3, #1
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	2101      	movs	r1, #1
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	ea42 0103 	orr.w	r1, r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10d      	bne.n	800211c <HAL_ADC_ConfigChannel+0x670>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0e9b      	lsrs	r3, r3, #26
 8002106:	3301      	adds	r3, #1
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	3b1e      	subs	r3, #30
 8002114:	051b      	lsls	r3, r3, #20
 8002116:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800211a:	e01b      	b.n	8002154 <HAL_ADC_ConfigChannel+0x6a8>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	613b      	str	r3, [r7, #16]
  return result;
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002134:	2320      	movs	r3, #32
 8002136:	e003      	b.n	8002140 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	3301      	adds	r3, #1
 8002142:	f003 021f 	and.w	r2, r3, #31
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	3b1e      	subs	r3, #30
 800214e:	051b      	lsls	r3, r3, #20
 8002150:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002154:	430b      	orrs	r3, r1
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	6892      	ldr	r2, [r2, #8]
 800215a:	4619      	mov	r1, r3
 800215c:	f7ff fa08 	bl	8001570 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b09      	ldr	r3, [pc, #36]	@ (800218c <HAL_ADC_ConfigChannel+0x6e0>)
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80be 	beq.w	80022ea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002176:	d004      	beq.n	8002182 <HAL_ADC_ConfigChannel+0x6d6>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a04      	ldr	r2, [pc, #16]	@ (8002190 <HAL_ADC_ConfigChannel+0x6e4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d10a      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x6ec>
 8002182:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <HAL_ADC_ConfigChannel+0x6e8>)
 8002184:	e009      	b.n	800219a <HAL_ADC_ConfigChannel+0x6ee>
 8002186:	bf00      	nop
 8002188:	407f0000 	.word	0x407f0000
 800218c:	80080000 	.word	0x80080000
 8002190:	50000100 	.word	0x50000100
 8002194:	50000300 	.word	0x50000300
 8002198:	4b59      	ldr	r3, [pc, #356]	@ (8002300 <HAL_ADC_ConfigChannel+0x854>)
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff f910 	bl	80013c0 <LL_ADC_GetCommonPathInternalCh>
 80021a0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a56      	ldr	r2, [pc, #344]	@ (8002304 <HAL_ADC_ConfigChannel+0x858>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d004      	beq.n	80021b8 <HAL_ADC_ConfigChannel+0x70c>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a55      	ldr	r2, [pc, #340]	@ (8002308 <HAL_ADC_ConfigChannel+0x85c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d13a      	bne.n	800222e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d134      	bne.n	800222e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021cc:	d005      	beq.n	80021da <HAL_ADC_ConfigChannel+0x72e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a4e      	ldr	r2, [pc, #312]	@ (800230c <HAL_ADC_ConfigChannel+0x860>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	f040 8085 	bne.w	80022e4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021e2:	d004      	beq.n	80021ee <HAL_ADC_ConfigChannel+0x742>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a49      	ldr	r2, [pc, #292]	@ (8002310 <HAL_ADC_ConfigChannel+0x864>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x746>
 80021ee:	4a49      	ldr	r2, [pc, #292]	@ (8002314 <HAL_ADC_ConfigChannel+0x868>)
 80021f0:	e000      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x748>
 80021f2:	4a43      	ldr	r2, [pc, #268]	@ (8002300 <HAL_ADC_ConfigChannel+0x854>)
 80021f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021fc:	4619      	mov	r1, r3
 80021fe:	4610      	mov	r0, r2
 8002200:	f7ff f8cb 	bl	800139a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002204:	4b44      	ldr	r3, [pc, #272]	@ (8002318 <HAL_ADC_ConfigChannel+0x86c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	099b      	lsrs	r3, r3, #6
 800220a:	4a44      	ldr	r2, [pc, #272]	@ (800231c <HAL_ADC_ConfigChannel+0x870>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800221e:	e002      	b.n	8002226 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3b01      	subs	r3, #1
 8002224:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f9      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800222c:	e05a      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a3b      	ldr	r2, [pc, #236]	@ (8002320 <HAL_ADC_ConfigChannel+0x874>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d125      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x7d8>
 8002238:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800223c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d11f      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a31      	ldr	r2, [pc, #196]	@ (8002310 <HAL_ADC_ConfigChannel+0x864>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d104      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x7ac>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a34      	ldr	r2, [pc, #208]	@ (8002324 <HAL_ADC_ConfigChannel+0x878>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d047      	beq.n	80022e8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002260:	d004      	beq.n	800226c <HAL_ADC_ConfigChannel+0x7c0>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a2a      	ldr	r2, [pc, #168]	@ (8002310 <HAL_ADC_ConfigChannel+0x864>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d101      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x7c4>
 800226c:	4a29      	ldr	r2, [pc, #164]	@ (8002314 <HAL_ADC_ConfigChannel+0x868>)
 800226e:	e000      	b.n	8002272 <HAL_ADC_ConfigChannel+0x7c6>
 8002270:	4a23      	ldr	r2, [pc, #140]	@ (8002300 <HAL_ADC_ConfigChannel+0x854>)
 8002272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002276:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800227a:	4619      	mov	r1, r3
 800227c:	4610      	mov	r0, r2
 800227e:	f7ff f88c 	bl	800139a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002282:	e031      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a27      	ldr	r2, [pc, #156]	@ (8002328 <HAL_ADC_ConfigChannel+0x87c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d12d      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800228e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d127      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1c      	ldr	r2, [pc, #112]	@ (8002310 <HAL_ADC_ConfigChannel+0x864>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d022      	beq.n	80022ea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022ac:	d004      	beq.n	80022b8 <HAL_ADC_ConfigChannel+0x80c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a17      	ldr	r2, [pc, #92]	@ (8002310 <HAL_ADC_ConfigChannel+0x864>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x810>
 80022b8:	4a16      	ldr	r2, [pc, #88]	@ (8002314 <HAL_ADC_ConfigChannel+0x868>)
 80022ba:	e000      	b.n	80022be <HAL_ADC_ConfigChannel+0x812>
 80022bc:	4a10      	ldr	r2, [pc, #64]	@ (8002300 <HAL_ADC_ConfigChannel+0x854>)
 80022be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022c6:	4619      	mov	r1, r3
 80022c8:	4610      	mov	r0, r2
 80022ca:	f7ff f866 	bl	800139a <LL_ADC_SetCommonPathInternalCh>
 80022ce:	e00c      	b.n	80022ea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d4:	f043 0220 	orr.w	r2, r3, #32
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80022e2:	e002      	b.n	80022ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022e4:	bf00      	nop
 80022e6:	e000      	b.n	80022ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80022f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	37d8      	adds	r7, #216	@ 0xd8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	50000700 	.word	0x50000700
 8002304:	c3210000 	.word	0xc3210000
 8002308:	90c00010 	.word	0x90c00010
 800230c:	50000600 	.word	0x50000600
 8002310:	50000100 	.word	0x50000100
 8002314:	50000300 	.word	0x50000300
 8002318:	20000000 	.word	0x20000000
 800231c:	053e2d63 	.word	0x053e2d63
 8002320:	c7520000 	.word	0xc7520000
 8002324:	50000500 	.word	0x50000500
 8002328:	cb840000 	.word	0xcb840000

0800232c <LL_ADC_IsEnabled>:
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <LL_ADC_IsEnabled+0x18>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <LL_ADC_IsEnabled+0x1a>
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <LL_ADC_REG_IsConversionOngoing>:
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b04      	cmp	r3, #4
 8002364:	d101      	bne.n	800236a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b0a1      	sub	sp, #132	@ 0x84
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002392:	2302      	movs	r3, #2
 8002394:	e0e7      	b.n	8002566 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800239e:	2300      	movs	r3, #0
 80023a0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80023a2:	2300      	movs	r3, #0
 80023a4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023ae:	d102      	bne.n	80023b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80023b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002570 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	e009      	b.n	80023ca <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a6e      	ldr	r2, [pc, #440]	@ (8002574 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d102      	bne.n	80023c6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80023c0:	4b6d      	ldr	r3, [pc, #436]	@ (8002578 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	e001      	b.n	80023ca <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10b      	bne.n	80023e8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d4:	f043 0220 	orr.w	r2, r3, #32
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0be      	b.n	8002566 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ffb1 	bl	8002352 <LL_ADC_REG_IsConversionOngoing>
 80023f0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff ffab 	bl	8002352 <LL_ADC_REG_IsConversionOngoing>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f040 80a0 	bne.w	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002404:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002406:	2b00      	cmp	r3, #0
 8002408:	f040 809c 	bne.w	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002414:	d004      	beq.n	8002420 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a55      	ldr	r2, [pc, #340]	@ (8002570 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d101      	bne.n	8002424 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002420:	4b56      	ldr	r3, [pc, #344]	@ (800257c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002422:	e000      	b.n	8002426 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002424:	4b56      	ldr	r3, [pc, #344]	@ (8002580 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002426:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d04b      	beq.n	80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002430:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002442:	035b      	lsls	r3, r3, #13
 8002444:	430b      	orrs	r3, r1
 8002446:	431a      	orrs	r2, r3
 8002448:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800244a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002454:	d004      	beq.n	8002460 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a45      	ldr	r2, [pc, #276]	@ (8002570 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d10f      	bne.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002460:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002464:	f7ff ff62 	bl	800232c <LL_ADC_IsEnabled>
 8002468:	4604      	mov	r4, r0
 800246a:	4841      	ldr	r0, [pc, #260]	@ (8002570 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800246c:	f7ff ff5e 	bl	800232c <LL_ADC_IsEnabled>
 8002470:	4603      	mov	r3, r0
 8002472:	4323      	orrs	r3, r4
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf0c      	ite	eq
 8002478:	2301      	moveq	r3, #1
 800247a:	2300      	movne	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	e012      	b.n	80024a6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002480:	483c      	ldr	r0, [pc, #240]	@ (8002574 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002482:	f7ff ff53 	bl	800232c <LL_ADC_IsEnabled>
 8002486:	4604      	mov	r4, r0
 8002488:	483b      	ldr	r0, [pc, #236]	@ (8002578 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800248a:	f7ff ff4f 	bl	800232c <LL_ADC_IsEnabled>
 800248e:	4603      	mov	r3, r0
 8002490:	431c      	orrs	r4, r3
 8002492:	483c      	ldr	r0, [pc, #240]	@ (8002584 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002494:	f7ff ff4a 	bl	800232c <LL_ADC_IsEnabled>
 8002498:	4603      	mov	r3, r0
 800249a:	4323      	orrs	r3, r4
 800249c:	2b00      	cmp	r3, #0
 800249e:	bf0c      	ite	eq
 80024a0:	2301      	moveq	r3, #1
 80024a2:	2300      	movne	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d056      	beq.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80024b2:	f023 030f 	bic.w	r3, r3, #15
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	6811      	ldr	r1, [r2, #0]
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	6892      	ldr	r2, [r2, #8]
 80024be:	430a      	orrs	r2, r1
 80024c0:	431a      	orrs	r2, r3
 80024c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024c4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024c6:	e047      	b.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024d2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024dc:	d004      	beq.n	80024e8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a23      	ldr	r2, [pc, #140]	@ (8002570 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d10f      	bne.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80024e8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80024ec:	f7ff ff1e 	bl	800232c <LL_ADC_IsEnabled>
 80024f0:	4604      	mov	r4, r0
 80024f2:	481f      	ldr	r0, [pc, #124]	@ (8002570 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024f4:	f7ff ff1a 	bl	800232c <LL_ADC_IsEnabled>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4323      	orrs	r3, r4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e012      	b.n	800252e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002508:	481a      	ldr	r0, [pc, #104]	@ (8002574 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800250a:	f7ff ff0f 	bl	800232c <LL_ADC_IsEnabled>
 800250e:	4604      	mov	r4, r0
 8002510:	4819      	ldr	r0, [pc, #100]	@ (8002578 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002512:	f7ff ff0b 	bl	800232c <LL_ADC_IsEnabled>
 8002516:	4603      	mov	r3, r0
 8002518:	431c      	orrs	r4, r3
 800251a:	481a      	ldr	r0, [pc, #104]	@ (8002584 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800251c:	f7ff ff06 	bl	800232c <LL_ADC_IsEnabled>
 8002520:	4603      	mov	r3, r0
 8002522:	4323      	orrs	r3, r4
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d012      	beq.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002532:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800253a:	f023 030f 	bic.w	r3, r3, #15
 800253e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002540:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002542:	e009      	b.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002548:	f043 0220 	orr.w	r2, r3, #32
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002556:	e000      	b.n	800255a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002558:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002562:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002566:	4618      	mov	r0, r3
 8002568:	3784      	adds	r7, #132	@ 0x84
 800256a:	46bd      	mov	sp, r7
 800256c:	bd90      	pop	{r4, r7, pc}
 800256e:	bf00      	nop
 8002570:	50000100 	.word	0x50000100
 8002574:	50000400 	.word	0x50000400
 8002578:	50000500 	.word	0x50000500
 800257c:	50000300 	.word	0x50000300
 8002580:	50000700 	.word	0x50000700
 8002584:	50000600 	.word	0x50000600

08002588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002598:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <__NVIC_SetPriorityGrouping+0x44>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025a4:	4013      	ands	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ba:	4a04      	ldr	r2, [pc, #16]	@ (80025cc <__NVIC_SetPriorityGrouping+0x44>)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	60d3      	str	r3, [r2, #12]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d4:	4b04      	ldr	r3, [pc, #16]	@ (80025e8 <__NVIC_GetPriorityGrouping+0x18>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	f003 0307 	and.w	r3, r3, #7
}
 80025de:	4618      	mov	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	db0b      	blt.n	8002616 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	4907      	ldr	r1, [pc, #28]	@ (8002624 <__NVIC_EnableIRQ+0x38>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	2001      	movs	r0, #1
 800260e:	fa00 f202 	lsl.w	r2, r0, r2
 8002612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000e100 	.word	0xe000e100

08002628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	6039      	str	r1, [r7, #0]
 8002632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002638:	2b00      	cmp	r3, #0
 800263a:	db0a      	blt.n	8002652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	490c      	ldr	r1, [pc, #48]	@ (8002674 <__NVIC_SetPriority+0x4c>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	0112      	lsls	r2, r2, #4
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	440b      	add	r3, r1
 800264c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002650:	e00a      	b.n	8002668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4908      	ldr	r1, [pc, #32]	@ (8002678 <__NVIC_SetPriority+0x50>)
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	3b04      	subs	r3, #4
 8002660:	0112      	lsls	r2, r2, #4
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	440b      	add	r3, r1
 8002666:	761a      	strb	r2, [r3, #24]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000e100 	.word	0xe000e100
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	@ 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f1c3 0307 	rsb	r3, r3, #7
 8002696:	2b04      	cmp	r3, #4
 8002698:	bf28      	it	cs
 800269a:	2304      	movcs	r3, #4
 800269c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d902      	bls.n	80026ac <NVIC_EncodePriority+0x30>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3b03      	subs	r3, #3
 80026aa:	e000      	b.n	80026ae <NVIC_EncodePriority+0x32>
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	401a      	ands	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c4:	f04f 31ff 	mov.w	r1, #4294967295
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	43d9      	mvns	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	4313      	orrs	r3, r2
         );
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3724      	adds	r7, #36	@ 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ff4c 	bl	8002588 <__NVIC_SetPriorityGrouping>
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002706:	f7ff ff63 	bl	80025d0 <__NVIC_GetPriorityGrouping>
 800270a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	6978      	ldr	r0, [r7, #20]
 8002712:	f7ff ffb3 	bl	800267c <NVIC_EncodePriority>
 8002716:	4602      	mov	r2, r0
 8002718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff ff82 	bl	8002628 <__NVIC_SetPriority>
}
 8002724:	bf00      	nop
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ff56 	bl	80025ec <__NVIC_EnableIRQ>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002756:	e15a      	b.n	8002a0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	2101      	movs	r1, #1
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	4013      	ands	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 814c 	beq.w	8002a08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d005      	beq.n	8002788 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002784:	2b02      	cmp	r3, #2
 8002786:	d130      	bne.n	80027ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027be:	2201      	movs	r2, #1
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	f003 0201 	and.w	r2, r3, #1
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d017      	beq.n	8002826 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	2203      	movs	r2, #3
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4013      	ands	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d123      	bne.n	800287a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	08da      	lsrs	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3208      	adds	r2, #8
 800283a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	08da      	lsrs	r2, r3, #3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3208      	adds	r2, #8
 8002874:	6939      	ldr	r1, [r7, #16]
 8002876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0203 	and.w	r2, r3, #3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80a6 	beq.w	8002a08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028bc:	4b5b      	ldr	r3, [pc, #364]	@ (8002a2c <HAL_GPIO_Init+0x2e4>)
 80028be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c0:	4a5a      	ldr	r2, [pc, #360]	@ (8002a2c <HAL_GPIO_Init+0x2e4>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80028c8:	4b58      	ldr	r3, [pc, #352]	@ (8002a2c <HAL_GPIO_Init+0x2e4>)
 80028ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028d4:	4a56      	ldr	r2, [pc, #344]	@ (8002a30 <HAL_GPIO_Init+0x2e8>)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	3302      	adds	r3, #2
 80028dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	220f      	movs	r2, #15
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80028fe:	d01f      	beq.n	8002940 <HAL_GPIO_Init+0x1f8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a4c      	ldr	r2, [pc, #304]	@ (8002a34 <HAL_GPIO_Init+0x2ec>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d019      	beq.n	800293c <HAL_GPIO_Init+0x1f4>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a4b      	ldr	r2, [pc, #300]	@ (8002a38 <HAL_GPIO_Init+0x2f0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d013      	beq.n	8002938 <HAL_GPIO_Init+0x1f0>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a4a      	ldr	r2, [pc, #296]	@ (8002a3c <HAL_GPIO_Init+0x2f4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00d      	beq.n	8002934 <HAL_GPIO_Init+0x1ec>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a49      	ldr	r2, [pc, #292]	@ (8002a40 <HAL_GPIO_Init+0x2f8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d007      	beq.n	8002930 <HAL_GPIO_Init+0x1e8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a48      	ldr	r2, [pc, #288]	@ (8002a44 <HAL_GPIO_Init+0x2fc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <HAL_GPIO_Init+0x1e4>
 8002928:	2305      	movs	r3, #5
 800292a:	e00a      	b.n	8002942 <HAL_GPIO_Init+0x1fa>
 800292c:	2306      	movs	r3, #6
 800292e:	e008      	b.n	8002942 <HAL_GPIO_Init+0x1fa>
 8002930:	2304      	movs	r3, #4
 8002932:	e006      	b.n	8002942 <HAL_GPIO_Init+0x1fa>
 8002934:	2303      	movs	r3, #3
 8002936:	e004      	b.n	8002942 <HAL_GPIO_Init+0x1fa>
 8002938:	2302      	movs	r3, #2
 800293a:	e002      	b.n	8002942 <HAL_GPIO_Init+0x1fa>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_GPIO_Init+0x1fa>
 8002940:	2300      	movs	r3, #0
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	f002 0203 	and.w	r2, r2, #3
 8002948:	0092      	lsls	r2, r2, #2
 800294a:	4093      	lsls	r3, r2
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002952:	4937      	ldr	r1, [pc, #220]	@ (8002a30 <HAL_GPIO_Init+0x2e8>)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	3302      	adds	r3, #2
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002960:	4b39      	ldr	r3, [pc, #228]	@ (8002a48 <HAL_GPIO_Init+0x300>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	43db      	mvns	r3, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002984:	4a30      	ldr	r2, [pc, #192]	@ (8002a48 <HAL_GPIO_Init+0x300>)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800298a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a48 <HAL_GPIO_Init+0x300>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029ae:	4a26      	ldr	r2, [pc, #152]	@ (8002a48 <HAL_GPIO_Init+0x300>)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80029b4:	4b24      	ldr	r3, [pc, #144]	@ (8002a48 <HAL_GPIO_Init+0x300>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	43db      	mvns	r3, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a48 <HAL_GPIO_Init+0x300>)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029de:	4b1a      	ldr	r3, [pc, #104]	@ (8002a48 <HAL_GPIO_Init+0x300>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4013      	ands	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a02:	4a11      	ldr	r2, [pc, #68]	@ (8002a48 <HAL_GPIO_Init+0x300>)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f47f ae9d 	bne.w	8002758 <HAL_GPIO_Init+0x10>
  }
}
 8002a1e:	bf00      	nop
 8002a20:	bf00      	nop
 8002a22:	371c      	adds	r7, #28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40010000 	.word	0x40010000
 8002a34:	48000400 	.word	0x48000400
 8002a38:	48000800 	.word	0x48000800
 8002a3c:	48000c00 	.word	0x48000c00
 8002a40:	48001000 	.word	0x48001000
 8002a44:	48001400 	.word	0x48001400
 8002a48:	40010400 	.word	0x40010400

08002a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a5c:	787b      	ldrb	r3, [r7, #1]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a62:	887a      	ldrh	r2, [r7, #2]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a68:	e002      	b.n	8002a70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a86:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d006      	beq.n	8002aa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a92:	4a05      	ldr	r2, [pc, #20]	@ (8002aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f806 	bl	8002aac <HAL_GPIO_EXTI_Callback>
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40010400 	.word	0x40010400

08002aac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d141      	bne.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ade:	d131      	bne.n	8002b44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ae0:	4b47      	ldr	r3, [pc, #284]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ae6:	4a46      	ldr	r2, [pc, #280]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002af0:	4b43      	ldr	r3, [pc, #268]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002af8:	4a41      	ldr	r2, [pc, #260]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002afe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b00:	4b40      	ldr	r3, [pc, #256]	@ (8002c04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2232      	movs	r2, #50	@ 0x32
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	0c9b      	lsrs	r3, r3, #18
 8002b12:	3301      	adds	r3, #1
 8002b14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b16:	e002      	b.n	8002b1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b1e:	4b38      	ldr	r3, [pc, #224]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b2a:	d102      	bne.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f2      	bne.n	8002b18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b32:	4b33      	ldr	r3, [pc, #204]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3e:	d158      	bne.n	8002bf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e057      	b.n	8002bf4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b44:	4b2e      	ldr	r3, [pc, #184]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b4a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b54:	e04d      	b.n	8002bf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b5c:	d141      	bne.n	8002be2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b5e:	4b28      	ldr	r3, [pc, #160]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b6a:	d131      	bne.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b6c:	4b24      	ldr	r3, [pc, #144]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b72:	4a23      	ldr	r2, [pc, #140]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b7c:	4b20      	ldr	r3, [pc, #128]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b84:	4a1e      	ldr	r2, [pc, #120]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2232      	movs	r2, #50	@ 0x32
 8002b92:	fb02 f303 	mul.w	r3, r2, r3
 8002b96:	4a1c      	ldr	r2, [pc, #112]	@ (8002c08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	0c9b      	lsrs	r3, r3, #18
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ba2:	e002      	b.n	8002baa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002baa:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bb6:	d102      	bne.n	8002bbe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f2      	bne.n	8002ba4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bbe:	4b10      	ldr	r3, [pc, #64]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bca:	d112      	bne.n	8002bf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e011      	b.n	8002bf4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002be0:	e007      	b.n	8002bf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002be2:	4b07      	ldr	r3, [pc, #28]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bea:	4a05      	ldr	r2, [pc, #20]	@ (8002c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bf0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	40007000 	.word	0x40007000
 8002c04:	20000000 	.word	0x20000000
 8002c08:	431bde83 	.word	0x431bde83

08002c0c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002c10:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a04      	ldr	r2, [pc, #16]	@ (8002c28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c1a:	6093      	str	r3, [r2, #8]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40007000 	.word	0x40007000

08002c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e306      	b.n	800324c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d075      	beq.n	8002d36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c4a:	4b97      	ldr	r3, [pc, #604]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c54:	4b94      	ldr	r3, [pc, #592]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d102      	bne.n	8002c6a <HAL_RCC_OscConfig+0x3e>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d002      	beq.n	8002c70 <HAL_RCC_OscConfig+0x44>
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d10b      	bne.n	8002c88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c70:	4b8d      	ldr	r3, [pc, #564]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d05b      	beq.n	8002d34 <HAL_RCC_OscConfig+0x108>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d157      	bne.n	8002d34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e2e1      	b.n	800324c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c90:	d106      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x74>
 8002c92:	4b85      	ldr	r3, [pc, #532]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a84      	ldr	r2, [pc, #528]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e01d      	b.n	8002cdc <HAL_RCC_OscConfig+0xb0>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x98>
 8002caa:	4b7f      	ldr	r3, [pc, #508]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a7e      	ldr	r2, [pc, #504]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002cb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a7b      	ldr	r2, [pc, #492]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0xb0>
 8002cc4:	4b78      	ldr	r3, [pc, #480]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a77      	ldr	r2, [pc, #476]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b75      	ldr	r3, [pc, #468]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a74      	ldr	r2, [pc, #464]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d013      	beq.n	8002d0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fb3a 	bl	800135c <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe fb36 	bl	800135c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	@ 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e2a6      	b.n	800324c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0xc0>
 8002d0a:	e014      	b.n	8002d36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fb26 	bl	800135c <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d14:	f7fe fb22 	bl	800135c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	@ 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e292      	b.n	800324c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d26:	4b60      	ldr	r3, [pc, #384]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0xe8>
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d075      	beq.n	8002e2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d42:	4b59      	ldr	r3, [pc, #356]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d4c:	4b56      	ldr	r3, [pc, #344]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b0c      	cmp	r3, #12
 8002d5a:	d102      	bne.n	8002d62 <HAL_RCC_OscConfig+0x136>
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d002      	beq.n	8002d68 <HAL_RCC_OscConfig+0x13c>
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d11f      	bne.n	8002da8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d68:	4b4f      	ldr	r3, [pc, #316]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_OscConfig+0x154>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e265      	b.n	800324c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d80:	4b49      	ldr	r3, [pc, #292]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	4946      	ldr	r1, [pc, #280]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d94:	4b45      	ldr	r3, [pc, #276]	@ (8002eac <HAL_RCC_OscConfig+0x280>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe f9cb 	bl	8001134 <HAL_InitTick>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d043      	beq.n	8002e2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e251      	b.n	800324c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d023      	beq.n	8002df8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a3c      	ldr	r2, [pc, #240]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fe face 	bl	800135c <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc4:	f7fe faca 	bl	800135c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e23a      	b.n	800324c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd6:	4b34      	ldr	r3, [pc, #208]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de2:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	061b      	lsls	r3, r3, #24
 8002df0:	492d      	ldr	r1, [pc, #180]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
 8002df6:	e01a      	b.n	8002e2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002dfe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe faaa 	bl	800135c <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e0c:	f7fe faa6 	bl	800135c <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e216      	b.n	800324c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e1e:	4b22      	ldr	r3, [pc, #136]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x1e0>
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d041      	beq.n	8002ebe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d01c      	beq.n	8002e7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e42:	4b19      	ldr	r3, [pc, #100]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e48:	4a17      	ldr	r2, [pc, #92]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e52:	f7fe fa83 	bl	800135c <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e5a:	f7fe fa7f 	bl	800135c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e1ef      	b.n	800324c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0ef      	beq.n	8002e5a <HAL_RCC_OscConfig+0x22e>
 8002e7a:	e020      	b.n	8002ebe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e82:	4a09      	ldr	r2, [pc, #36]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8c:	f7fe fa66 	bl	800135c <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e92:	e00d      	b.n	8002eb0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e94:	f7fe fa62 	bl	800135c <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d906      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e1d2      	b.n	800324c <HAL_RCC_OscConfig+0x620>
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eb0:	4b8c      	ldr	r3, [pc, #560]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1ea      	bne.n	8002e94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 80a6 	beq.w	8003018 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ed0:	4b84      	ldr	r3, [pc, #528]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x2b4>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <HAL_RCC_OscConfig+0x2b6>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00d      	beq.n	8002f02 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee6:	4b7f      	ldr	r3, [pc, #508]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eea:	4a7e      	ldr	r2, [pc, #504]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ef2:	4b7c      	ldr	r3, [pc, #496]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002efe:	2301      	movs	r3, #1
 8002f00:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f02:	4b79      	ldr	r3, [pc, #484]	@ (80030e8 <HAL_RCC_OscConfig+0x4bc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d118      	bne.n	8002f40 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f0e:	4b76      	ldr	r3, [pc, #472]	@ (80030e8 <HAL_RCC_OscConfig+0x4bc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a75      	ldr	r2, [pc, #468]	@ (80030e8 <HAL_RCC_OscConfig+0x4bc>)
 8002f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe fa1f 	bl	800135c <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f22:	f7fe fa1b 	bl	800135c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e18b      	b.n	800324c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f34:	4b6c      	ldr	r3, [pc, #432]	@ (80030e8 <HAL_RCC_OscConfig+0x4bc>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d108      	bne.n	8002f5a <HAL_RCC_OscConfig+0x32e>
 8002f48:	4b66      	ldr	r3, [pc, #408]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4e:	4a65      	ldr	r2, [pc, #404]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f58:	e024      	b.n	8002fa4 <HAL_RCC_OscConfig+0x378>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b05      	cmp	r3, #5
 8002f60:	d110      	bne.n	8002f84 <HAL_RCC_OscConfig+0x358>
 8002f62:	4b60      	ldr	r3, [pc, #384]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f68:	4a5e      	ldr	r2, [pc, #376]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002f6a:	f043 0304 	orr.w	r3, r3, #4
 8002f6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f72:	4b5c      	ldr	r3, [pc, #368]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f78:	4a5a      	ldr	r2, [pc, #360]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f82:	e00f      	b.n	8002fa4 <HAL_RCC_OscConfig+0x378>
 8002f84:	4b57      	ldr	r3, [pc, #348]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f8a:	4a56      	ldr	r2, [pc, #344]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f94:	4b53      	ldr	r3, [pc, #332]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9a:	4a52      	ldr	r2, [pc, #328]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002f9c:	f023 0304 	bic.w	r3, r3, #4
 8002fa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d016      	beq.n	8002fda <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fe f9d6 	bl	800135c <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f7fe f9d2 	bl	800135c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e140      	b.n	800324c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fca:	4b46      	ldr	r3, [pc, #280]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0ed      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x388>
 8002fd8:	e015      	b.n	8003006 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fda:	f7fe f9bf 	bl	800135c <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fe0:	e00a      	b.n	8002ff8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe2:	f7fe f9bb 	bl	800135c <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e129      	b.n	800324c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ff8:	4b3a      	ldr	r3, [pc, #232]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1ed      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003006:	7ffb      	ldrb	r3, [r7, #31]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800300c:	4b35      	ldr	r3, [pc, #212]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003010:	4a34      	ldr	r2, [pc, #208]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8003012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003016:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b00      	cmp	r3, #0
 8003022:	d03c      	beq.n	800309e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01c      	beq.n	8003066 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800302c:	4b2d      	ldr	r3, [pc, #180]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 800302e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003032:	4a2c      	ldr	r2, [pc, #176]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fe f98e 	bl	800135c <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003044:	f7fe f98a 	bl	800135c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e0fa      	b.n	800324c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003056:	4b23      	ldr	r3, [pc, #140]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8003058:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0ef      	beq.n	8003044 <HAL_RCC_OscConfig+0x418>
 8003064:	e01b      	b.n	800309e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003066:	4b1f      	ldr	r3, [pc, #124]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8003068:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800306c:	4a1d      	ldr	r2, [pc, #116]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003076:	f7fe f971 	bl	800135c <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800307e:	f7fe f96d 	bl	800135c <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e0dd      	b.n	800324c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003090:	4b14      	ldr	r3, [pc, #80]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 8003092:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1ef      	bne.n	800307e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80d1 	beq.w	800324a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a8:	4b0e      	ldr	r3, [pc, #56]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	f000 808b 	beq.w	80031cc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d15e      	bne.n	800317c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030be:	4b09      	ldr	r3, [pc, #36]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a08      	ldr	r2, [pc, #32]	@ (80030e4 <HAL_RCC_OscConfig+0x4b8>)
 80030c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe f947 	bl	800135c <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d0:	e00c      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fe f943 	bl	800135c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d905      	bls.n	80030ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e0b3      	b.n	800324c <HAL_RCC_OscConfig+0x620>
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ec:	4b59      	ldr	r3, [pc, #356]	@ (8003254 <HAL_RCC_OscConfig+0x628>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ec      	bne.n	80030d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030f8:	4b56      	ldr	r3, [pc, #344]	@ (8003254 <HAL_RCC_OscConfig+0x628>)
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	4b56      	ldr	r3, [pc, #344]	@ (8003258 <HAL_RCC_OscConfig+0x62c>)
 80030fe:	4013      	ands	r3, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6a11      	ldr	r1, [r2, #32]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003108:	3a01      	subs	r2, #1
 800310a:	0112      	lsls	r2, r2, #4
 800310c:	4311      	orrs	r1, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003112:	0212      	lsls	r2, r2, #8
 8003114:	4311      	orrs	r1, r2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800311a:	0852      	lsrs	r2, r2, #1
 800311c:	3a01      	subs	r2, #1
 800311e:	0552      	lsls	r2, r2, #21
 8003120:	4311      	orrs	r1, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003126:	0852      	lsrs	r2, r2, #1
 8003128:	3a01      	subs	r2, #1
 800312a:	0652      	lsls	r2, r2, #25
 800312c:	4311      	orrs	r1, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003132:	06d2      	lsls	r2, r2, #27
 8003134:	430a      	orrs	r2, r1
 8003136:	4947      	ldr	r1, [pc, #284]	@ (8003254 <HAL_RCC_OscConfig+0x628>)
 8003138:	4313      	orrs	r3, r2
 800313a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800313c:	4b45      	ldr	r3, [pc, #276]	@ (8003254 <HAL_RCC_OscConfig+0x628>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a44      	ldr	r2, [pc, #272]	@ (8003254 <HAL_RCC_OscConfig+0x628>)
 8003142:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003146:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003148:	4b42      	ldr	r3, [pc, #264]	@ (8003254 <HAL_RCC_OscConfig+0x628>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a41      	ldr	r2, [pc, #260]	@ (8003254 <HAL_RCC_OscConfig+0x628>)
 800314e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003152:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fe f902 	bl	800135c <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315c:	f7fe f8fe 	bl	800135c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e06e      	b.n	800324c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316e:	4b39      	ldr	r3, [pc, #228]	@ (8003254 <HAL_RCC_OscConfig+0x628>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x530>
 800317a:	e066      	b.n	800324a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317c:	4b35      	ldr	r3, [pc, #212]	@ (8003254 <HAL_RCC_OscConfig+0x628>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a34      	ldr	r2, [pc, #208]	@ (8003254 <HAL_RCC_OscConfig+0x628>)
 8003182:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003186:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003188:	4b32      	ldr	r3, [pc, #200]	@ (8003254 <HAL_RCC_OscConfig+0x628>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4a31      	ldr	r2, [pc, #196]	@ (8003254 <HAL_RCC_OscConfig+0x628>)
 800318e:	f023 0303 	bic.w	r3, r3, #3
 8003192:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003194:	4b2f      	ldr	r3, [pc, #188]	@ (8003254 <HAL_RCC_OscConfig+0x628>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4a2e      	ldr	r2, [pc, #184]	@ (8003254 <HAL_RCC_OscConfig+0x628>)
 800319a:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800319e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe f8da 	bl	800135c <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fe f8d6 	bl	800135c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e046      	b.n	800324c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031be:	4b25      	ldr	r3, [pc, #148]	@ (8003254 <HAL_RCC_OscConfig+0x628>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x580>
 80031ca:	e03e      	b.n	800324a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e039      	b.n	800324c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80031d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003254 <HAL_RCC_OscConfig+0x628>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f003 0203 	and.w	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d12c      	bne.n	8003246 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	3b01      	subs	r3, #1
 80031f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d123      	bne.n	8003246 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003208:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d11b      	bne.n	8003246 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003218:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d113      	bne.n	8003246 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	3b01      	subs	r3, #1
 800322c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d109      	bne.n	8003246 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	3b01      	subs	r3, #1
 8003240:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d001      	beq.n	800324a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3720      	adds	r7, #32
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40021000 	.word	0x40021000
 8003258:	019f800c 	.word	0x019f800c

0800325c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e11e      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b91      	ldr	r3, [pc, #580]	@ (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d910      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b8e      	ldr	r3, [pc, #568]	@ (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 020f 	bic.w	r2, r3, #15
 800328a:	498c      	ldr	r1, [pc, #560]	@ (80034bc <HAL_RCC_ClockConfig+0x260>)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b8a      	ldr	r3, [pc, #552]	@ (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e106      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d073      	beq.n	8003398 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d129      	bne.n	800330c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b8:	4b81      	ldr	r3, [pc, #516]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0f4      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80032c8:	f000 f9d0 	bl	800366c <RCC_GetSysClockFreqFromPLLSource>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4a7c      	ldr	r2, [pc, #496]	@ (80034c4 <HAL_RCC_ClockConfig+0x268>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d93f      	bls.n	8003356 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032d6:	4b7a      	ldr	r3, [pc, #488]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d033      	beq.n	8003356 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d12f      	bne.n	8003356 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032f6:	4b72      	ldr	r3, [pc, #456]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032fe:	4a70      	ldr	r2, [pc, #448]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003304:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003306:	2380      	movs	r3, #128	@ 0x80
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e024      	b.n	8003356 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d107      	bne.n	8003324 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003314:	4b6a      	ldr	r3, [pc, #424]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0c6      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003324:	4b66      	ldr	r3, [pc, #408]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0be      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003334:	f000 f8ce 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 8003338:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4a61      	ldr	r2, [pc, #388]	@ (80034c4 <HAL_RCC_ClockConfig+0x268>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d909      	bls.n	8003356 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003342:	4b5f      	ldr	r3, [pc, #380]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800334a:	4a5d      	ldr	r2, [pc, #372]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 800334c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003350:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003352:	2380      	movs	r3, #128	@ 0x80
 8003354:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003356:	4b5a      	ldr	r3, [pc, #360]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4957      	ldr	r1, [pc, #348]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003368:	f7fd fff8 	bl	800135c <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	e00a      	b.n	8003386 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003370:	f7fd fff4 	bl	800135c <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e095      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	4b4e      	ldr	r3, [pc, #312]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 020c 	and.w	r2, r3, #12
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	429a      	cmp	r2, r3
 8003396:	d1eb      	bne.n	8003370 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d023      	beq.n	80033ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b0:	4b43      	ldr	r3, [pc, #268]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a42      	ldr	r2, [pc, #264]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80033c8:	4b3d      	ldr	r3, [pc, #244]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033d0:	4a3b      	ldr	r2, [pc, #236]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d8:	4b39      	ldr	r3, [pc, #228]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4936      	ldr	r1, [pc, #216]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
 80033ea:	e008      	b.n	80033fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b80      	cmp	r3, #128	@ 0x80
 80033f0:	d105      	bne.n	80033fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033f2:	4b33      	ldr	r3, [pc, #204]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	4a32      	ldr	r2, [pc, #200]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033fe:	4b2f      	ldr	r3, [pc, #188]	@ (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d21d      	bcs.n	8003448 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340c:	4b2b      	ldr	r3, [pc, #172]	@ (80034bc <HAL_RCC_ClockConfig+0x260>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f023 020f 	bic.w	r2, r3, #15
 8003414:	4929      	ldr	r1, [pc, #164]	@ (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	4313      	orrs	r3, r2
 800341a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800341c:	f7fd ff9e 	bl	800135c <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003422:	e00a      	b.n	800343a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fd ff9a 	bl	800135c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e03b      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b20      	ldr	r3, [pc, #128]	@ (80034bc <HAL_RCC_ClockConfig+0x260>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d1ed      	bne.n	8003424 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003454:	4b1a      	ldr	r3, [pc, #104]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4917      	ldr	r1, [pc, #92]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003472:	4b13      	ldr	r3, [pc, #76]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	490f      	ldr	r1, [pc, #60]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003486:	f000 f825 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 800348a:	4602      	mov	r2, r0
 800348c:	4b0c      	ldr	r3, [pc, #48]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	490c      	ldr	r1, [pc, #48]	@ (80034c8 <HAL_RCC_ClockConfig+0x26c>)
 8003498:	5ccb      	ldrb	r3, [r1, r3]
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	fa22 f303 	lsr.w	r3, r2, r3
 80034a2:	4a0a      	ldr	r2, [pc, #40]	@ (80034cc <HAL_RCC_ClockConfig+0x270>)
 80034a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034a6:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <HAL_RCC_ClockConfig+0x274>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd fe42 	bl	8001134 <HAL_InitTick>
 80034b0:	4603      	mov	r3, r0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40022000 	.word	0x40022000
 80034c0:	40021000 	.word	0x40021000
 80034c4:	04c4b400 	.word	0x04c4b400
 80034c8:	08005cec 	.word	0x08005cec
 80034cc:	20000000 	.word	0x20000000
 80034d0:	20000004 	.word	0x20000004

080034d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034da:	4b2c      	ldr	r3, [pc, #176]	@ (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d102      	bne.n	80034ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003590 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	e047      	b.n	800357c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034ec:	4b27      	ldr	r3, [pc, #156]	@ (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 030c 	and.w	r3, r3, #12
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d102      	bne.n	80034fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034f8:	4b26      	ldr	r3, [pc, #152]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	e03e      	b.n	800357c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80034fe:	4b23      	ldr	r3, [pc, #140]	@ (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b0c      	cmp	r3, #12
 8003508:	d136      	bne.n	8003578 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800350a:	4b20      	ldr	r3, [pc, #128]	@ (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003514:	4b1d      	ldr	r3, [pc, #116]	@ (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	3301      	adds	r3, #1
 8003520:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d10c      	bne.n	8003542 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003528:	4a1a      	ldr	r2, [pc, #104]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xc0>)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	4a16      	ldr	r2, [pc, #88]	@ (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003532:	68d2      	ldr	r2, [r2, #12]
 8003534:	0a12      	lsrs	r2, r2, #8
 8003536:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800353a:	fb02 f303 	mul.w	r3, r2, r3
 800353e:	617b      	str	r3, [r7, #20]
      break;
 8003540:	e00c      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003542:	4a13      	ldr	r2, [pc, #76]	@ (8003590 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	4a10      	ldr	r2, [pc, #64]	@ (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 800354c:	68d2      	ldr	r2, [r2, #12]
 800354e:	0a12      	lsrs	r2, r2, #8
 8003550:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	617b      	str	r3, [r7, #20]
      break;
 800355a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800355c:	4b0b      	ldr	r3, [pc, #44]	@ (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	0e5b      	lsrs	r3, r3, #25
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	3301      	adds	r3, #1
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	e001      	b.n	800357c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800357c:	693b      	ldr	r3, [r7, #16]
}
 800357e:	4618      	mov	r0, r3
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000
 8003590:	00f42400 	.word	0x00f42400
 8003594:	016e3600 	.word	0x016e3600

08003598 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800359c:	4b03      	ldr	r3, [pc, #12]	@ (80035ac <HAL_RCC_GetHCLKFreq+0x14>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000000 	.word	0x20000000

080035b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035b4:	f7ff fff0 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4904      	ldr	r1, [pc, #16]	@ (80035d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40021000 	.word	0x40021000
 80035d8:	08005cfc 	.word	0x08005cfc

080035dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035e0:	f7ff ffda 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b06      	ldr	r3, [pc, #24]	@ (8003600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	0adb      	lsrs	r3, r3, #11
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	4904      	ldr	r1, [pc, #16]	@ (8003604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000
 8003604:	08005cfc 	.word	0x08005cfc

08003608 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	220f      	movs	r2, #15
 8003616:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003618:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <HAL_RCC_GetClockConfig+0x5c>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0203 	and.w	r2, r3, #3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003624:	4b0f      	ldr	r3, [pc, #60]	@ (8003664 <HAL_RCC_GetClockConfig+0x5c>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003630:	4b0c      	ldr	r3, [pc, #48]	@ (8003664 <HAL_RCC_GetClockConfig+0x5c>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800363c:	4b09      	ldr	r3, [pc, #36]	@ (8003664 <HAL_RCC_GetClockConfig+0x5c>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	08db      	lsrs	r3, r3, #3
 8003642:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800364a:	4b07      	ldr	r3, [pc, #28]	@ (8003668 <HAL_RCC_GetClockConfig+0x60>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 020f 	and.w	r2, r3, #15
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	601a      	str	r2, [r3, #0]
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	40022000 	.word	0x40022000

0800366c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003672:	4b1e      	ldr	r3, [pc, #120]	@ (80036ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800367c:	4b1b      	ldr	r3, [pc, #108]	@ (80036ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	3301      	adds	r3, #1
 8003688:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d10c      	bne.n	80036aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003690:	4a17      	ldr	r2, [pc, #92]	@ (80036f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	4a14      	ldr	r2, [pc, #80]	@ (80036ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800369a:	68d2      	ldr	r2, [r2, #12]
 800369c:	0a12      	lsrs	r2, r2, #8
 800369e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036a2:	fb02 f303 	mul.w	r3, r2, r3
 80036a6:	617b      	str	r3, [r7, #20]
    break;
 80036a8:	e00c      	b.n	80036c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036aa:	4a12      	ldr	r2, [pc, #72]	@ (80036f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	4a0e      	ldr	r2, [pc, #56]	@ (80036ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036b4:	68d2      	ldr	r2, [r2, #12]
 80036b6:	0a12      	lsrs	r2, r2, #8
 80036b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036bc:	fb02 f303 	mul.w	r3, r2, r3
 80036c0:	617b      	str	r3, [r7, #20]
    break;
 80036c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036c4:	4b09      	ldr	r3, [pc, #36]	@ (80036ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	0e5b      	lsrs	r3, r3, #25
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	3301      	adds	r3, #1
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80036de:	687b      	ldr	r3, [r7, #4]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	40021000 	.word	0x40021000
 80036f0:	016e3600 	.word	0x016e3600
 80036f4:	00f42400 	.word	0x00f42400

080036f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003700:	2300      	movs	r3, #0
 8003702:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003704:	2300      	movs	r3, #0
 8003706:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 8098 	beq.w	8003846 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003716:	2300      	movs	r3, #0
 8003718:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371a:	4b43      	ldr	r3, [pc, #268]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800371c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10d      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003726:	4b40      	ldr	r3, [pc, #256]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372a:	4a3f      	ldr	r2, [pc, #252]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800372c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003730:	6593      	str	r3, [r2, #88]	@ 0x58
 8003732:	4b3d      	ldr	r3, [pc, #244]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373a:	60bb      	str	r3, [r7, #8]
 800373c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800373e:	2301      	movs	r3, #1
 8003740:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003742:	4b3a      	ldr	r3, [pc, #232]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a39      	ldr	r2, [pc, #228]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800374e:	f7fd fe05 	bl	800135c <HAL_GetTick>
 8003752:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003754:	e009      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003756:	f7fd fe01 	bl	800135c <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d902      	bls.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	74fb      	strb	r3, [r7, #19]
        break;
 8003768:	e005      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800376a:	4b30      	ldr	r3, [pc, #192]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0ef      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d159      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800377c:	4b2a      	ldr	r3, [pc, #168]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003786:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01e      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	429a      	cmp	r2, r3
 8003796:	d019      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003798:	4b23      	ldr	r3, [pc, #140]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037a4:	4b20      	ldr	r3, [pc, #128]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037c4:	4a18      	ldr	r2, [pc, #96]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d016      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fd fdc1 	bl	800135c <HAL_GetTick>
 80037da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037dc:	e00b      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fd fdbd 	bl	800135c <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d902      	bls.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	74fb      	strb	r3, [r7, #19]
            break;
 80037f4:	e006      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0ec      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10b      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800380a:	4b07      	ldr	r3, [pc, #28]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003810:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003818:	4903      	ldr	r1, [pc, #12]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003820:	e008      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003822:	7cfb      	ldrb	r3, [r7, #19]
 8003824:	74bb      	strb	r3, [r7, #18]
 8003826:	e005      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003828:	40021000 	.word	0x40021000
 800382c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003834:	7c7b      	ldrb	r3, [r7, #17]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d105      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383a:	4ba7      	ldr	r3, [pc, #668]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800383c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383e:	4aa6      	ldr	r2, [pc, #664]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003844:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003852:	4ba1      	ldr	r3, [pc, #644]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003858:	f023 0203 	bic.w	r2, r3, #3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	499d      	ldr	r1, [pc, #628]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003874:	4b98      	ldr	r3, [pc, #608]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387a:	f023 020c 	bic.w	r2, r3, #12
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	4995      	ldr	r1, [pc, #596]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003896:	4b90      	ldr	r3, [pc, #576]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	498c      	ldr	r1, [pc, #560]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038b8:	4b87      	ldr	r3, [pc, #540]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	4984      	ldr	r1, [pc, #528]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038da:	4b7f      	ldr	r3, [pc, #508]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	497b      	ldr	r1, [pc, #492]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038fc:	4b76      	ldr	r3, [pc, #472]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003902:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	4973      	ldr	r1, [pc, #460]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800391e:	4b6e      	ldr	r3, [pc, #440]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003924:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	496a      	ldr	r1, [pc, #424]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003940:	4b65      	ldr	r3, [pc, #404]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003946:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	4962      	ldr	r1, [pc, #392]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003962:	4b5d      	ldr	r3, [pc, #372]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003968:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	4959      	ldr	r1, [pc, #356]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003984:	4b54      	ldr	r3, [pc, #336]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003986:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800398a:	f023 0203 	bic.w	r2, r3, #3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003992:	4951      	ldr	r1, [pc, #324]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039a6:	4b4c      	ldr	r3, [pc, #304]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b4:	4948      	ldr	r1, [pc, #288]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d015      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039c8:	4b43      	ldr	r3, [pc, #268]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	4940      	ldr	r1, [pc, #256]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039e6:	d105      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4a3a      	ldr	r2, [pc, #232]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d015      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a00:	4b35      	ldr	r3, [pc, #212]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a0e:	4932      	ldr	r1, [pc, #200]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a1e:	d105      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a20:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a2a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d015      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a38:	4b27      	ldr	r3, [pc, #156]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a46:	4924      	ldr	r1, [pc, #144]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a56:	d105      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a58:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a62:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d015      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a70:	4b19      	ldr	r3, [pc, #100]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7e:	4916      	ldr	r1, [pc, #88]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a8e:	d105      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a90:	4b11      	ldr	r3, [pc, #68]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4a10      	ldr	r2, [pc, #64]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a9a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d019      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	4908      	ldr	r1, [pc, #32]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ac6:	d109      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ac8:	4b03      	ldr	r3, [pc, #12]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4a02      	ldr	r2, [pc, #8]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ace:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ad2:	60d3      	str	r3, [r2, #12]
 8003ad4:	e002      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d015      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ae8:	4b29      	ldr	r3, [pc, #164]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	4926      	ldr	r1, [pc, #152]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b06:	d105      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b08:	4b21      	ldr	r3, [pc, #132]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4a20      	ldr	r2, [pc, #128]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b12:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d015      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b20:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b26:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b2e:	4918      	ldr	r1, [pc, #96]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b3e:	d105      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b40:	4b13      	ldr	r3, [pc, #76]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a12      	ldr	r2, [pc, #72]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d015      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b58:	4b0d      	ldr	r3, [pc, #52]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b66:	490a      	ldr	r1, [pc, #40]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b76:	d105      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b78:	4b05      	ldr	r3, [pc, #20]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4a04      	ldr	r2, [pc, #16]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b84:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000

08003b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e049      	b.n	8003c3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f841 	bl	8003c42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	f000 fbca 	bl	800436c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d001      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e054      	b.n	8003d1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a26      	ldr	r2, [pc, #152]	@ (8003d28 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d022      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c9a:	d01d      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a22      	ldr	r2, [pc, #136]	@ (8003d2c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d018      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a21      	ldr	r2, [pc, #132]	@ (8003d30 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d013      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d34 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00e      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8003d38 <HAL_TIM_Base_Start_IT+0xe0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d009      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d3c <HAL_TIM_Base_Start_IT+0xe4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d004      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8003d40 <HAL_TIM_Base_Start_IT+0xe8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d115      	bne.n	8003d04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	4b19      	ldr	r3, [pc, #100]	@ (8003d44 <HAL_TIM_Base_Start_IT+0xec>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b06      	cmp	r3, #6
 8003ce8:	d015      	beq.n	8003d16 <HAL_TIM_Base_Start_IT+0xbe>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf0:	d011      	beq.n	8003d16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0201 	orr.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d02:	e008      	b.n	8003d16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	e000      	b.n	8003d18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40012c00 	.word	0x40012c00
 8003d2c:	40000400 	.word	0x40000400
 8003d30:	40000800 	.word	0x40000800
 8003d34:	40000c00 	.word	0x40000c00
 8003d38:	40013400 	.word	0x40013400
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	40015000 	.word	0x40015000
 8003d44:	00010007 	.word	0x00010007

08003d48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e049      	b.n	8003dee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd f85e 	bl	8000e30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3304      	adds	r3, #4
 8003d84:	4619      	mov	r1, r3
 8003d86:	4610      	mov	r0, r2
 8003d88:	f000 faf0 	bl	800436c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d122      	bne.n	8003e52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d11b      	bne.n	8003e52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f06f 0202 	mvn.w	r2, #2
 8003e22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fa79 	bl	8004330 <HAL_TIM_IC_CaptureCallback>
 8003e3e:	e005      	b.n	8003e4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fa6b 	bl	800431c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fa7c 	bl	8004344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d122      	bne.n	8003ea6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d11b      	bne.n	8003ea6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f06f 0204 	mvn.w	r2, #4
 8003e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fa4f 	bl	8004330 <HAL_TIM_IC_CaptureCallback>
 8003e92:	e005      	b.n	8003ea0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fa41 	bl	800431c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fa52 	bl	8004344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d122      	bne.n	8003efa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d11b      	bne.n	8003efa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f06f 0208 	mvn.w	r2, #8
 8003eca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2204      	movs	r2, #4
 8003ed0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fa25 	bl	8004330 <HAL_TIM_IC_CaptureCallback>
 8003ee6:	e005      	b.n	8003ef4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fa17 	bl	800431c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa28 	bl	8004344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b10      	cmp	r3, #16
 8003f06:	d122      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	2b10      	cmp	r3, #16
 8003f14:	d11b      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f06f 0210 	mvn.w	r2, #16
 8003f1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2208      	movs	r2, #8
 8003f24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f9fb 	bl	8004330 <HAL_TIM_IC_CaptureCallback>
 8003f3a:	e005      	b.n	8003f48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f9ed 	bl	800431c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f9fe 	bl	8004344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d10e      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d107      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f06f 0201 	mvn.w	r2, #1
 8003f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7fc fe25 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f84:	2b80      	cmp	r3, #128	@ 0x80
 8003f86:	d10e      	bne.n	8003fa6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f92:	2b80      	cmp	r3, #128	@ 0x80
 8003f94:	d107      	bne.n	8003fa6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f001 f82b 	bl	8004ffc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fb4:	d10e      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc0:	2b80      	cmp	r3, #128	@ 0x80
 8003fc2:	d107      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f001 f81e 	bl	8005010 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fde:	2b40      	cmp	r3, #64	@ 0x40
 8003fe0:	d10e      	bne.n	8004000 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fec:	2b40      	cmp	r3, #64	@ 0x40
 8003fee:	d107      	bne.n	8004000 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f9ac 	bl	8004358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b20      	cmp	r3, #32
 800400c:	d10e      	bne.n	800402c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b20      	cmp	r3, #32
 800401a:	d107      	bne.n	800402c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0220 	mvn.w	r2, #32
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 ffde 	bl	8004fe8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800403a:	d10f      	bne.n	800405c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004046:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800404a:	d107      	bne.n	800405c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 ffe4 	bl	8005024 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004066:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800406a:	d10f      	bne.n	800408c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004076:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800407a:	d107      	bne.n	800408c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 ffd6 	bl	8005038 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004096:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800409a:	d10f      	bne.n	80040bc <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040aa:	d107      	bne.n	80040bc <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80040b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 ffc8 	bl	800504c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040ca:	d10f      	bne.n	80040ec <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040da:	d107      	bne.n	80040ec <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80040e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 ffba 	bl	8005060 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800410e:	2302      	movs	r3, #2
 8004110:	e0ff      	b.n	8004312 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b14      	cmp	r3, #20
 800411e:	f200 80f0 	bhi.w	8004302 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004122:	a201      	add	r2, pc, #4	@ (adr r2, 8004128 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	0800417d 	.word	0x0800417d
 800412c:	08004303 	.word	0x08004303
 8004130:	08004303 	.word	0x08004303
 8004134:	08004303 	.word	0x08004303
 8004138:	080041bd 	.word	0x080041bd
 800413c:	08004303 	.word	0x08004303
 8004140:	08004303 	.word	0x08004303
 8004144:	08004303 	.word	0x08004303
 8004148:	080041ff 	.word	0x080041ff
 800414c:	08004303 	.word	0x08004303
 8004150:	08004303 	.word	0x08004303
 8004154:	08004303 	.word	0x08004303
 8004158:	0800423f 	.word	0x0800423f
 800415c:	08004303 	.word	0x08004303
 8004160:	08004303 	.word	0x08004303
 8004164:	08004303 	.word	0x08004303
 8004168:	08004281 	.word	0x08004281
 800416c:	08004303 	.word	0x08004303
 8004170:	08004303 	.word	0x08004303
 8004174:	08004303 	.word	0x08004303
 8004178:	080042c1 	.word	0x080042c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f99a 	bl	80044bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0208 	orr.w	r2, r2, #8
 8004196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0204 	bic.w	r2, r2, #4
 80041a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6999      	ldr	r1, [r3, #24]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	619a      	str	r2, [r3, #24]
      break;
 80041ba:	e0a5      	b.n	8004308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fa14 	bl	80045f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6999      	ldr	r1, [r3, #24]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	021a      	lsls	r2, r3, #8
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	619a      	str	r2, [r3, #24]
      break;
 80041fc:	e084      	b.n	8004308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fa87 	bl	8004718 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0208 	orr.w	r2, r2, #8
 8004218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0204 	bic.w	r2, r2, #4
 8004228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69d9      	ldr	r1, [r3, #28]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	61da      	str	r2, [r3, #28]
      break;
 800423c:	e064      	b.n	8004308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 faf9 	bl	800483c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69d9      	ldr	r1, [r3, #28]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	021a      	lsls	r2, r3, #8
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	61da      	str	r2, [r3, #28]
      break;
 800427e:	e043      	b.n	8004308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fb6c 	bl	8004964 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0208 	orr.w	r2, r2, #8
 800429a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0204 	bic.w	r2, r2, #4
 80042aa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80042be:	e023      	b.n	8004308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fbb6 	bl	8004a38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	021a      	lsls	r2, r3, #8
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004300:	e002      	b.n	8004308 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	75fb      	strb	r3, [r7, #23]
      break;
 8004306:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004310:	7dfb      	ldrb	r3, [r7, #23]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop

0800431c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a46      	ldr	r2, [pc, #280]	@ (8004498 <TIM_Base_SetConfig+0x12c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d017      	beq.n	80043b4 <TIM_Base_SetConfig+0x48>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800438a:	d013      	beq.n	80043b4 <TIM_Base_SetConfig+0x48>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a43      	ldr	r2, [pc, #268]	@ (800449c <TIM_Base_SetConfig+0x130>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00f      	beq.n	80043b4 <TIM_Base_SetConfig+0x48>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a42      	ldr	r2, [pc, #264]	@ (80044a0 <TIM_Base_SetConfig+0x134>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00b      	beq.n	80043b4 <TIM_Base_SetConfig+0x48>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a41      	ldr	r2, [pc, #260]	@ (80044a4 <TIM_Base_SetConfig+0x138>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d007      	beq.n	80043b4 <TIM_Base_SetConfig+0x48>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a40      	ldr	r2, [pc, #256]	@ (80044a8 <TIM_Base_SetConfig+0x13c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <TIM_Base_SetConfig+0x48>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3f      	ldr	r2, [pc, #252]	@ (80044ac <TIM_Base_SetConfig+0x140>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d108      	bne.n	80043c6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a33      	ldr	r2, [pc, #204]	@ (8004498 <TIM_Base_SetConfig+0x12c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d023      	beq.n	8004416 <TIM_Base_SetConfig+0xaa>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d4:	d01f      	beq.n	8004416 <TIM_Base_SetConfig+0xaa>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a30      	ldr	r2, [pc, #192]	@ (800449c <TIM_Base_SetConfig+0x130>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d01b      	beq.n	8004416 <TIM_Base_SetConfig+0xaa>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a2f      	ldr	r2, [pc, #188]	@ (80044a0 <TIM_Base_SetConfig+0x134>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d017      	beq.n	8004416 <TIM_Base_SetConfig+0xaa>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a2e      	ldr	r2, [pc, #184]	@ (80044a4 <TIM_Base_SetConfig+0x138>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <TIM_Base_SetConfig+0xaa>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a2d      	ldr	r2, [pc, #180]	@ (80044a8 <TIM_Base_SetConfig+0x13c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00f      	beq.n	8004416 <TIM_Base_SetConfig+0xaa>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a2d      	ldr	r2, [pc, #180]	@ (80044b0 <TIM_Base_SetConfig+0x144>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00b      	beq.n	8004416 <TIM_Base_SetConfig+0xaa>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a2c      	ldr	r2, [pc, #176]	@ (80044b4 <TIM_Base_SetConfig+0x148>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d007      	beq.n	8004416 <TIM_Base_SetConfig+0xaa>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a2b      	ldr	r2, [pc, #172]	@ (80044b8 <TIM_Base_SetConfig+0x14c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d003      	beq.n	8004416 <TIM_Base_SetConfig+0xaa>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a26      	ldr	r2, [pc, #152]	@ (80044ac <TIM_Base_SetConfig+0x140>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d108      	bne.n	8004428 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800441c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a12      	ldr	r2, [pc, #72]	@ (8004498 <TIM_Base_SetConfig+0x12c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <TIM_Base_SetConfig+0x110>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a14      	ldr	r2, [pc, #80]	@ (80044a8 <TIM_Base_SetConfig+0x13c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00f      	beq.n	800447c <TIM_Base_SetConfig+0x110>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a14      	ldr	r2, [pc, #80]	@ (80044b0 <TIM_Base_SetConfig+0x144>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00b      	beq.n	800447c <TIM_Base_SetConfig+0x110>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a13      	ldr	r2, [pc, #76]	@ (80044b4 <TIM_Base_SetConfig+0x148>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d007      	beq.n	800447c <TIM_Base_SetConfig+0x110>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a12      	ldr	r2, [pc, #72]	@ (80044b8 <TIM_Base_SetConfig+0x14c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d003      	beq.n	800447c <TIM_Base_SetConfig+0x110>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a0d      	ldr	r2, [pc, #52]	@ (80044ac <TIM_Base_SetConfig+0x140>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d103      	bne.n	8004484 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	615a      	str	r2, [r3, #20]
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40012c00 	.word	0x40012c00
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40013400 	.word	0x40013400
 80044ac:	40015000 	.word	0x40015000
 80044b0:	40014000 	.word	0x40014000
 80044b4:	40014400 	.word	0x40014400
 80044b8:	40014800 	.word	0x40014800

080044bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f023 0201 	bic.w	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0303 	bic.w	r3, r3, #3
 80044f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f023 0302 	bic.w	r3, r3, #2
 8004508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a30      	ldr	r2, [pc, #192]	@ (80045d8 <TIM_OC1_SetConfig+0x11c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d013      	beq.n	8004544 <TIM_OC1_SetConfig+0x88>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a2f      	ldr	r2, [pc, #188]	@ (80045dc <TIM_OC1_SetConfig+0x120>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00f      	beq.n	8004544 <TIM_OC1_SetConfig+0x88>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a2e      	ldr	r2, [pc, #184]	@ (80045e0 <TIM_OC1_SetConfig+0x124>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00b      	beq.n	8004544 <TIM_OC1_SetConfig+0x88>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a2d      	ldr	r2, [pc, #180]	@ (80045e4 <TIM_OC1_SetConfig+0x128>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d007      	beq.n	8004544 <TIM_OC1_SetConfig+0x88>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a2c      	ldr	r2, [pc, #176]	@ (80045e8 <TIM_OC1_SetConfig+0x12c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d003      	beq.n	8004544 <TIM_OC1_SetConfig+0x88>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a2b      	ldr	r2, [pc, #172]	@ (80045ec <TIM_OC1_SetConfig+0x130>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10c      	bne.n	800455e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f023 0308 	bic.w	r3, r3, #8
 800454a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f023 0304 	bic.w	r3, r3, #4
 800455c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a1d      	ldr	r2, [pc, #116]	@ (80045d8 <TIM_OC1_SetConfig+0x11c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <TIM_OC1_SetConfig+0xd2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a1c      	ldr	r2, [pc, #112]	@ (80045dc <TIM_OC1_SetConfig+0x120>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00f      	beq.n	800458e <TIM_OC1_SetConfig+0xd2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a1b      	ldr	r2, [pc, #108]	@ (80045e0 <TIM_OC1_SetConfig+0x124>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00b      	beq.n	800458e <TIM_OC1_SetConfig+0xd2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a1a      	ldr	r2, [pc, #104]	@ (80045e4 <TIM_OC1_SetConfig+0x128>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d007      	beq.n	800458e <TIM_OC1_SetConfig+0xd2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a19      	ldr	r2, [pc, #100]	@ (80045e8 <TIM_OC1_SetConfig+0x12c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d003      	beq.n	800458e <TIM_OC1_SetConfig+0xd2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a18      	ldr	r2, [pc, #96]	@ (80045ec <TIM_OC1_SetConfig+0x130>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d111      	bne.n	80045b2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800459c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	621a      	str	r2, [r3, #32]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	40012c00 	.word	0x40012c00
 80045dc:	40013400 	.word	0x40013400
 80045e0:	40014000 	.word	0x40014000
 80045e4:	40014400 	.word	0x40014400
 80045e8:	40014800 	.word	0x40014800
 80045ec:	40015000 	.word	0x40015000

080045f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f023 0210 	bic.w	r2, r3, #16
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800461e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800462a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f023 0320 	bic.w	r3, r3, #32
 800463e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a2c      	ldr	r2, [pc, #176]	@ (8004700 <TIM_OC2_SetConfig+0x110>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d007      	beq.n	8004664 <TIM_OC2_SetConfig+0x74>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a2b      	ldr	r2, [pc, #172]	@ (8004704 <TIM_OC2_SetConfig+0x114>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d003      	beq.n	8004664 <TIM_OC2_SetConfig+0x74>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a2a      	ldr	r2, [pc, #168]	@ (8004708 <TIM_OC2_SetConfig+0x118>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d10d      	bne.n	8004680 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800466a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800467e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a1f      	ldr	r2, [pc, #124]	@ (8004700 <TIM_OC2_SetConfig+0x110>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d013      	beq.n	80046b0 <TIM_OC2_SetConfig+0xc0>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a1e      	ldr	r2, [pc, #120]	@ (8004704 <TIM_OC2_SetConfig+0x114>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00f      	beq.n	80046b0 <TIM_OC2_SetConfig+0xc0>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a1e      	ldr	r2, [pc, #120]	@ (800470c <TIM_OC2_SetConfig+0x11c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00b      	beq.n	80046b0 <TIM_OC2_SetConfig+0xc0>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a1d      	ldr	r2, [pc, #116]	@ (8004710 <TIM_OC2_SetConfig+0x120>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d007      	beq.n	80046b0 <TIM_OC2_SetConfig+0xc0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004714 <TIM_OC2_SetConfig+0x124>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_OC2_SetConfig+0xc0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a17      	ldr	r2, [pc, #92]	@ (8004708 <TIM_OC2_SetConfig+0x118>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d113      	bne.n	80046d8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	621a      	str	r2, [r3, #32]
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40012c00 	.word	0x40012c00
 8004704:	40013400 	.word	0x40013400
 8004708:	40015000 	.word	0x40015000
 800470c:	40014000 	.word	0x40014000
 8004710:	40014400 	.word	0x40014400
 8004714:	40014800 	.word	0x40014800

08004718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800474a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0303 	bic.w	r3, r3, #3
 8004752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a2b      	ldr	r2, [pc, #172]	@ (8004824 <TIM_OC3_SetConfig+0x10c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d007      	beq.n	800478a <TIM_OC3_SetConfig+0x72>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a2a      	ldr	r2, [pc, #168]	@ (8004828 <TIM_OC3_SetConfig+0x110>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_OC3_SetConfig+0x72>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a29      	ldr	r2, [pc, #164]	@ (800482c <TIM_OC3_SetConfig+0x114>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d10d      	bne.n	80047a6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004824 <TIM_OC3_SetConfig+0x10c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <TIM_OC3_SetConfig+0xbe>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004828 <TIM_OC3_SetConfig+0x110>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00f      	beq.n	80047d6 <TIM_OC3_SetConfig+0xbe>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004830 <TIM_OC3_SetConfig+0x118>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00b      	beq.n	80047d6 <TIM_OC3_SetConfig+0xbe>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004834 <TIM_OC3_SetConfig+0x11c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <TIM_OC3_SetConfig+0xbe>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004838 <TIM_OC3_SetConfig+0x120>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <TIM_OC3_SetConfig+0xbe>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a16      	ldr	r2, [pc, #88]	@ (800482c <TIM_OC3_SetConfig+0x114>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d113      	bne.n	80047fe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	621a      	str	r2, [r3, #32]
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40013400 	.word	0x40013400
 800482c:	40015000 	.word	0x40015000
 8004830:	40014000 	.word	0x40014000
 8004834:	40014400 	.word	0x40014400
 8004838:	40014800 	.word	0x40014800

0800483c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800486a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800486e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800488a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	031b      	lsls	r3, r3, #12
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a2c      	ldr	r2, [pc, #176]	@ (800494c <TIM_OC4_SetConfig+0x110>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d007      	beq.n	80048b0 <TIM_OC4_SetConfig+0x74>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a2b      	ldr	r2, [pc, #172]	@ (8004950 <TIM_OC4_SetConfig+0x114>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d003      	beq.n	80048b0 <TIM_OC4_SetConfig+0x74>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004954 <TIM_OC4_SetConfig+0x118>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d10d      	bne.n	80048cc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80048b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	031b      	lsls	r3, r3, #12
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a1f      	ldr	r2, [pc, #124]	@ (800494c <TIM_OC4_SetConfig+0x110>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d013      	beq.n	80048fc <TIM_OC4_SetConfig+0xc0>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004950 <TIM_OC4_SetConfig+0x114>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00f      	beq.n	80048fc <TIM_OC4_SetConfig+0xc0>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a1e      	ldr	r2, [pc, #120]	@ (8004958 <TIM_OC4_SetConfig+0x11c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00b      	beq.n	80048fc <TIM_OC4_SetConfig+0xc0>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a1d      	ldr	r2, [pc, #116]	@ (800495c <TIM_OC4_SetConfig+0x120>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d007      	beq.n	80048fc <TIM_OC4_SetConfig+0xc0>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004960 <TIM_OC4_SetConfig+0x124>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_OC4_SetConfig+0xc0>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a17      	ldr	r2, [pc, #92]	@ (8004954 <TIM_OC4_SetConfig+0x118>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d113      	bne.n	8004924 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004902:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800490a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	019b      	lsls	r3, r3, #6
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	019b      	lsls	r3, r3, #6
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	621a      	str	r2, [r3, #32]
}
 800493e:	bf00      	nop
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40012c00 	.word	0x40012c00
 8004950:	40013400 	.word	0x40013400
 8004954:	40015000 	.word	0x40015000
 8004958:	40014000 	.word	0x40014000
 800495c:	40014400 	.word	0x40014400
 8004960:	40014800 	.word	0x40014800

08004964 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80049a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	041b      	lsls	r3, r3, #16
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a19      	ldr	r2, [pc, #100]	@ (8004a20 <TIM_OC5_SetConfig+0xbc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <TIM_OC5_SetConfig+0x82>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a18      	ldr	r2, [pc, #96]	@ (8004a24 <TIM_OC5_SetConfig+0xc0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00f      	beq.n	80049e6 <TIM_OC5_SetConfig+0x82>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a17      	ldr	r2, [pc, #92]	@ (8004a28 <TIM_OC5_SetConfig+0xc4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00b      	beq.n	80049e6 <TIM_OC5_SetConfig+0x82>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a16      	ldr	r2, [pc, #88]	@ (8004a2c <TIM_OC5_SetConfig+0xc8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d007      	beq.n	80049e6 <TIM_OC5_SetConfig+0x82>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a15      	ldr	r2, [pc, #84]	@ (8004a30 <TIM_OC5_SetConfig+0xcc>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d003      	beq.n	80049e6 <TIM_OC5_SetConfig+0x82>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a14      	ldr	r2, [pc, #80]	@ (8004a34 <TIM_OC5_SetConfig+0xd0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d109      	bne.n	80049fa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	621a      	str	r2, [r3, #32]
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	40012c00 	.word	0x40012c00
 8004a24:	40013400 	.word	0x40013400
 8004a28:	40014000 	.word	0x40014000
 8004a2c:	40014400 	.word	0x40014400
 8004a30:	40014800 	.word	0x40014800
 8004a34:	40015000 	.word	0x40015000

08004a38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	051b      	lsls	r3, r3, #20
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8004af8 <TIM_OC6_SetConfig+0xc0>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d013      	beq.n	8004abc <TIM_OC6_SetConfig+0x84>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a19      	ldr	r2, [pc, #100]	@ (8004afc <TIM_OC6_SetConfig+0xc4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00f      	beq.n	8004abc <TIM_OC6_SetConfig+0x84>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a18      	ldr	r2, [pc, #96]	@ (8004b00 <TIM_OC6_SetConfig+0xc8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00b      	beq.n	8004abc <TIM_OC6_SetConfig+0x84>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a17      	ldr	r2, [pc, #92]	@ (8004b04 <TIM_OC6_SetConfig+0xcc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d007      	beq.n	8004abc <TIM_OC6_SetConfig+0x84>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a16      	ldr	r2, [pc, #88]	@ (8004b08 <TIM_OC6_SetConfig+0xd0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d003      	beq.n	8004abc <TIM_OC6_SetConfig+0x84>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a15      	ldr	r2, [pc, #84]	@ (8004b0c <TIM_OC6_SetConfig+0xd4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d109      	bne.n	8004ad0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	029b      	lsls	r3, r3, #10
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	621a      	str	r2, [r3, #32]
}
 8004aea:	bf00      	nop
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40013400 	.word	0x40013400
 8004b00:	40014000 	.word	0x40014000
 8004b04:	40014400 	.word	0x40014400
 8004b08:	40014800 	.word	0x40014800
 8004b0c:	40015000 	.word	0x40015000

08004b10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	f023 0201 	bic.w	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4a28      	ldr	r2, [pc, #160]	@ (8004bdc <TIM_TI1_SetConfig+0xcc>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d01b      	beq.n	8004b76 <TIM_TI1_SetConfig+0x66>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b44:	d017      	beq.n	8004b76 <TIM_TI1_SetConfig+0x66>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4a25      	ldr	r2, [pc, #148]	@ (8004be0 <TIM_TI1_SetConfig+0xd0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <TIM_TI1_SetConfig+0x66>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4a24      	ldr	r2, [pc, #144]	@ (8004be4 <TIM_TI1_SetConfig+0xd4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00f      	beq.n	8004b76 <TIM_TI1_SetConfig+0x66>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4a23      	ldr	r2, [pc, #140]	@ (8004be8 <TIM_TI1_SetConfig+0xd8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00b      	beq.n	8004b76 <TIM_TI1_SetConfig+0x66>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4a22      	ldr	r2, [pc, #136]	@ (8004bec <TIM_TI1_SetConfig+0xdc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d007      	beq.n	8004b76 <TIM_TI1_SetConfig+0x66>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a21      	ldr	r2, [pc, #132]	@ (8004bf0 <TIM_TI1_SetConfig+0xe0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d003      	beq.n	8004b76 <TIM_TI1_SetConfig+0x66>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a20      	ldr	r2, [pc, #128]	@ (8004bf4 <TIM_TI1_SetConfig+0xe4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d101      	bne.n	8004b7a <TIM_TI1_SetConfig+0x6a>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <TIM_TI1_SetConfig+0x6c>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f023 0303 	bic.w	r3, r3, #3
 8004b86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	e003      	b.n	8004b9a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ba0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f023 030a 	bic.w	r3, r3, #10
 8004bb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f003 030a 	and.w	r3, r3, #10
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	621a      	str	r2, [r3, #32]
}
 8004bce:	bf00      	nop
 8004bd0:	371c      	adds	r7, #28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40012c00 	.word	0x40012c00
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800
 8004be8:	40000c00 	.word	0x40000c00
 8004bec:	40013400 	.word	0x40013400
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40015000 	.word	0x40015000

08004bf8 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	@ 0x28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0a0      	b.n	8004d4e <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d106      	bne.n	8004c26 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7fc f925 	bl	8000e70 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f7ff fb97 	bl	800436c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6819      	ldr	r1, [r3, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	f7ff ff60 	bl	8004b10 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 020c 	bic.w	r2, r2, #12
 8004c5e:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6999      	ldr	r1, [r3, #24]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c80:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6812      	ldr	r2, [r2, #0]
 8004c8c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c94:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ca4:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cb4:	f023 0307 	bic.w	r3, r3, #7
 8004cb8:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0204 	orr.w	r2, r2, #4
 8004cc8:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004cd2:	2370      	movs	r3, #112	@ 0x70
 8004cd4:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f107 020c 	add.w	r2, r7, #12
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff fc7c 	bl	80045f0 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6812      	ldr	r2, [r2, #0]
 8004d02:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d0a:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8004d1a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3728      	adds	r7, #40	@ 0x28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e074      	b.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a34      	ldr	r2, [pc, #208]	@ (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d009      	beq.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a33      	ldr	r2, [pc, #204]	@ (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a31      	ldr	r2, [pc, #196]	@ (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d108      	bne.n	8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004db4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a21      	ldr	r2, [pc, #132]	@ (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d022      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df0:	d01d      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d018      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1d      	ldr	r2, [pc, #116]	@ (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d013      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00e      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a15      	ldr	r2, [pc, #84]	@ (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d009      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a18      	ldr	r2, [pc, #96]	@ (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d004      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a11      	ldr	r2, [pc, #68]	@ (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d10c      	bne.n	8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40012c00 	.word	0x40012c00
 8004e6c:	40013400 	.word	0x40013400
 8004e70:	40015000 	.word	0x40015000
 8004e74:	40000400 	.word	0x40000400
 8004e78:	40000800 	.word	0x40000800
 8004e7c:	40000c00 	.word	0x40000c00
 8004e80:	40014000 	.word	0x40014000

08004e84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e096      	b.n	8004fce <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8004fdc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d009      	beq.n	8004f38 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d004      	beq.n	8004f38 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a2c      	ldr	r2, [pc, #176]	@ (8004fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d106      	bne.n	8004f46 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a24      	ldr	r2, [pc, #144]	@ (8004fdc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d009      	beq.n	8004f64 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a22      	ldr	r2, [pc, #136]	@ (8004fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d004      	beq.n	8004f64 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a21      	ldr	r2, [pc, #132]	@ (8004fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d12b      	bne.n	8004fbc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6e:	051b      	lsls	r3, r3, #20
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a11      	ldr	r2, [pc, #68]	@ (8004fdc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d009      	beq.n	8004fae <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a10      	ldr	r2, [pc, #64]	@ (8004fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d004      	beq.n	8004fae <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8004fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d106      	bne.n	8004fbc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40012c00 	.word	0x40012c00
 8004fe0:	40013400 	.word	0x40013400
 8004fe4:	40015000 	.word	0x40015000

08004fe8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e042      	b.n	800510c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7fb ffb3 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2224      	movs	r2, #36	@ 0x24
 80050a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0201 	bic.w	r2, r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f82c 	bl	8005114 <UART_SetConfig>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e022      	b.n	800510c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fb1c 	bl	800570c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fba3 	bl	8005850 <UART_CheckIdleState>
 800510a:	4603      	mov	r3, r0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005118:	b08c      	sub	sp, #48	@ 0x30
 800511a:	af00      	add	r7, sp, #0
 800511c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	431a      	orrs	r2, r3
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	431a      	orrs	r2, r3
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	4313      	orrs	r3, r2
 800513a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4baa      	ldr	r3, [pc, #680]	@ (80053ec <UART_SetConfig+0x2d8>)
 8005144:	4013      	ands	r3, r2
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800514c:	430b      	orrs	r3, r1
 800514e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a9f      	ldr	r2, [pc, #636]	@ (80053f0 <UART_SetConfig+0x2dc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800517c:	4313      	orrs	r3, r2
 800517e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800518a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005194:	430b      	orrs	r3, r1
 8005196:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519e:	f023 010f 	bic.w	r1, r3, #15
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a90      	ldr	r2, [pc, #576]	@ (80053f4 <UART_SetConfig+0x2e0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d125      	bne.n	8005204 <UART_SetConfig+0xf0>
 80051b8:	4b8f      	ldr	r3, [pc, #572]	@ (80053f8 <UART_SetConfig+0x2e4>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d81a      	bhi.n	80051fc <UART_SetConfig+0xe8>
 80051c6:	a201      	add	r2, pc, #4	@ (adr r2, 80051cc <UART_SetConfig+0xb8>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	080051dd 	.word	0x080051dd
 80051d0:	080051ed 	.word	0x080051ed
 80051d4:	080051e5 	.word	0x080051e5
 80051d8:	080051f5 	.word	0x080051f5
 80051dc:	2301      	movs	r3, #1
 80051de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051e2:	e116      	b.n	8005412 <UART_SetConfig+0x2fe>
 80051e4:	2302      	movs	r3, #2
 80051e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ea:	e112      	b.n	8005412 <UART_SetConfig+0x2fe>
 80051ec:	2304      	movs	r3, #4
 80051ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051f2:	e10e      	b.n	8005412 <UART_SetConfig+0x2fe>
 80051f4:	2308      	movs	r3, #8
 80051f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051fa:	e10a      	b.n	8005412 <UART_SetConfig+0x2fe>
 80051fc:	2310      	movs	r3, #16
 80051fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005202:	e106      	b.n	8005412 <UART_SetConfig+0x2fe>
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a7c      	ldr	r2, [pc, #496]	@ (80053fc <UART_SetConfig+0x2e8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d138      	bne.n	8005280 <UART_SetConfig+0x16c>
 800520e:	4b7a      	ldr	r3, [pc, #488]	@ (80053f8 <UART_SetConfig+0x2e4>)
 8005210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005214:	f003 030c 	and.w	r3, r3, #12
 8005218:	2b0c      	cmp	r3, #12
 800521a:	d82d      	bhi.n	8005278 <UART_SetConfig+0x164>
 800521c:	a201      	add	r2, pc, #4	@ (adr r2, 8005224 <UART_SetConfig+0x110>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005259 	.word	0x08005259
 8005228:	08005279 	.word	0x08005279
 800522c:	08005279 	.word	0x08005279
 8005230:	08005279 	.word	0x08005279
 8005234:	08005269 	.word	0x08005269
 8005238:	08005279 	.word	0x08005279
 800523c:	08005279 	.word	0x08005279
 8005240:	08005279 	.word	0x08005279
 8005244:	08005261 	.word	0x08005261
 8005248:	08005279 	.word	0x08005279
 800524c:	08005279 	.word	0x08005279
 8005250:	08005279 	.word	0x08005279
 8005254:	08005271 	.word	0x08005271
 8005258:	2300      	movs	r3, #0
 800525a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800525e:	e0d8      	b.n	8005412 <UART_SetConfig+0x2fe>
 8005260:	2302      	movs	r3, #2
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005266:	e0d4      	b.n	8005412 <UART_SetConfig+0x2fe>
 8005268:	2304      	movs	r3, #4
 800526a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800526e:	e0d0      	b.n	8005412 <UART_SetConfig+0x2fe>
 8005270:	2308      	movs	r3, #8
 8005272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005276:	e0cc      	b.n	8005412 <UART_SetConfig+0x2fe>
 8005278:	2310      	movs	r3, #16
 800527a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800527e:	e0c8      	b.n	8005412 <UART_SetConfig+0x2fe>
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a5e      	ldr	r2, [pc, #376]	@ (8005400 <UART_SetConfig+0x2ec>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d125      	bne.n	80052d6 <UART_SetConfig+0x1c2>
 800528a:	4b5b      	ldr	r3, [pc, #364]	@ (80053f8 <UART_SetConfig+0x2e4>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005290:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005294:	2b30      	cmp	r3, #48	@ 0x30
 8005296:	d016      	beq.n	80052c6 <UART_SetConfig+0x1b2>
 8005298:	2b30      	cmp	r3, #48	@ 0x30
 800529a:	d818      	bhi.n	80052ce <UART_SetConfig+0x1ba>
 800529c:	2b20      	cmp	r3, #32
 800529e:	d00a      	beq.n	80052b6 <UART_SetConfig+0x1a2>
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d814      	bhi.n	80052ce <UART_SetConfig+0x1ba>
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <UART_SetConfig+0x19a>
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	d008      	beq.n	80052be <UART_SetConfig+0x1aa>
 80052ac:	e00f      	b.n	80052ce <UART_SetConfig+0x1ba>
 80052ae:	2300      	movs	r3, #0
 80052b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052b4:	e0ad      	b.n	8005412 <UART_SetConfig+0x2fe>
 80052b6:	2302      	movs	r3, #2
 80052b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052bc:	e0a9      	b.n	8005412 <UART_SetConfig+0x2fe>
 80052be:	2304      	movs	r3, #4
 80052c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c4:	e0a5      	b.n	8005412 <UART_SetConfig+0x2fe>
 80052c6:	2308      	movs	r3, #8
 80052c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052cc:	e0a1      	b.n	8005412 <UART_SetConfig+0x2fe>
 80052ce:	2310      	movs	r3, #16
 80052d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d4:	e09d      	b.n	8005412 <UART_SetConfig+0x2fe>
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a4a      	ldr	r2, [pc, #296]	@ (8005404 <UART_SetConfig+0x2f0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d125      	bne.n	800532c <UART_SetConfig+0x218>
 80052e0:	4b45      	ldr	r3, [pc, #276]	@ (80053f8 <UART_SetConfig+0x2e4>)
 80052e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80052ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80052ec:	d016      	beq.n	800531c <UART_SetConfig+0x208>
 80052ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80052f0:	d818      	bhi.n	8005324 <UART_SetConfig+0x210>
 80052f2:	2b80      	cmp	r3, #128	@ 0x80
 80052f4:	d00a      	beq.n	800530c <UART_SetConfig+0x1f8>
 80052f6:	2b80      	cmp	r3, #128	@ 0x80
 80052f8:	d814      	bhi.n	8005324 <UART_SetConfig+0x210>
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <UART_SetConfig+0x1f0>
 80052fe:	2b40      	cmp	r3, #64	@ 0x40
 8005300:	d008      	beq.n	8005314 <UART_SetConfig+0x200>
 8005302:	e00f      	b.n	8005324 <UART_SetConfig+0x210>
 8005304:	2300      	movs	r3, #0
 8005306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800530a:	e082      	b.n	8005412 <UART_SetConfig+0x2fe>
 800530c:	2302      	movs	r3, #2
 800530e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005312:	e07e      	b.n	8005412 <UART_SetConfig+0x2fe>
 8005314:	2304      	movs	r3, #4
 8005316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800531a:	e07a      	b.n	8005412 <UART_SetConfig+0x2fe>
 800531c:	2308      	movs	r3, #8
 800531e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005322:	e076      	b.n	8005412 <UART_SetConfig+0x2fe>
 8005324:	2310      	movs	r3, #16
 8005326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800532a:	e072      	b.n	8005412 <UART_SetConfig+0x2fe>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a35      	ldr	r2, [pc, #212]	@ (8005408 <UART_SetConfig+0x2f4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d12a      	bne.n	800538c <UART_SetConfig+0x278>
 8005336:	4b30      	ldr	r3, [pc, #192]	@ (80053f8 <UART_SetConfig+0x2e4>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005340:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005344:	d01a      	beq.n	800537c <UART_SetConfig+0x268>
 8005346:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800534a:	d81b      	bhi.n	8005384 <UART_SetConfig+0x270>
 800534c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005350:	d00c      	beq.n	800536c <UART_SetConfig+0x258>
 8005352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005356:	d815      	bhi.n	8005384 <UART_SetConfig+0x270>
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <UART_SetConfig+0x250>
 800535c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005360:	d008      	beq.n	8005374 <UART_SetConfig+0x260>
 8005362:	e00f      	b.n	8005384 <UART_SetConfig+0x270>
 8005364:	2300      	movs	r3, #0
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536a:	e052      	b.n	8005412 <UART_SetConfig+0x2fe>
 800536c:	2302      	movs	r3, #2
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005372:	e04e      	b.n	8005412 <UART_SetConfig+0x2fe>
 8005374:	2304      	movs	r3, #4
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800537a:	e04a      	b.n	8005412 <UART_SetConfig+0x2fe>
 800537c:	2308      	movs	r3, #8
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005382:	e046      	b.n	8005412 <UART_SetConfig+0x2fe>
 8005384:	2310      	movs	r3, #16
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800538a:	e042      	b.n	8005412 <UART_SetConfig+0x2fe>
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a17      	ldr	r2, [pc, #92]	@ (80053f0 <UART_SetConfig+0x2dc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d13a      	bne.n	800540c <UART_SetConfig+0x2f8>
 8005396:	4b18      	ldr	r3, [pc, #96]	@ (80053f8 <UART_SetConfig+0x2e4>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80053a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053a4:	d01a      	beq.n	80053dc <UART_SetConfig+0x2c8>
 80053a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053aa:	d81b      	bhi.n	80053e4 <UART_SetConfig+0x2d0>
 80053ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053b0:	d00c      	beq.n	80053cc <UART_SetConfig+0x2b8>
 80053b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053b6:	d815      	bhi.n	80053e4 <UART_SetConfig+0x2d0>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <UART_SetConfig+0x2b0>
 80053bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053c0:	d008      	beq.n	80053d4 <UART_SetConfig+0x2c0>
 80053c2:	e00f      	b.n	80053e4 <UART_SetConfig+0x2d0>
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ca:	e022      	b.n	8005412 <UART_SetConfig+0x2fe>
 80053cc:	2302      	movs	r3, #2
 80053ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d2:	e01e      	b.n	8005412 <UART_SetConfig+0x2fe>
 80053d4:	2304      	movs	r3, #4
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053da:	e01a      	b.n	8005412 <UART_SetConfig+0x2fe>
 80053dc:	2308      	movs	r3, #8
 80053de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053e2:	e016      	b.n	8005412 <UART_SetConfig+0x2fe>
 80053e4:	2310      	movs	r3, #16
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ea:	e012      	b.n	8005412 <UART_SetConfig+0x2fe>
 80053ec:	cfff69f3 	.word	0xcfff69f3
 80053f0:	40008000 	.word	0x40008000
 80053f4:	40013800 	.word	0x40013800
 80053f8:	40021000 	.word	0x40021000
 80053fc:	40004400 	.word	0x40004400
 8005400:	40004800 	.word	0x40004800
 8005404:	40004c00 	.word	0x40004c00
 8005408:	40005000 	.word	0x40005000
 800540c:	2310      	movs	r3, #16
 800540e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4aae      	ldr	r2, [pc, #696]	@ (80056d0 <UART_SetConfig+0x5bc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	f040 8097 	bne.w	800554c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800541e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005422:	2b08      	cmp	r3, #8
 8005424:	d823      	bhi.n	800546e <UART_SetConfig+0x35a>
 8005426:	a201      	add	r2, pc, #4	@ (adr r2, 800542c <UART_SetConfig+0x318>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	08005451 	.word	0x08005451
 8005430:	0800546f 	.word	0x0800546f
 8005434:	08005459 	.word	0x08005459
 8005438:	0800546f 	.word	0x0800546f
 800543c:	0800545f 	.word	0x0800545f
 8005440:	0800546f 	.word	0x0800546f
 8005444:	0800546f 	.word	0x0800546f
 8005448:	0800546f 	.word	0x0800546f
 800544c:	08005467 	.word	0x08005467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005450:	f7fe f8ae 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 8005454:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005456:	e010      	b.n	800547a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005458:	4b9e      	ldr	r3, [pc, #632]	@ (80056d4 <UART_SetConfig+0x5c0>)
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800545c:	e00d      	b.n	800547a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800545e:	f7fe f839 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 8005462:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005464:	e009      	b.n	800547a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800546a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800546c:	e005      	b.n	800547a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005478:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 8130 	beq.w	80056e2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	4a94      	ldr	r2, [pc, #592]	@ (80056d8 <UART_SetConfig+0x5c4>)
 8005488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800548c:	461a      	mov	r2, r3
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	fbb3 f3f2 	udiv	r3, r3, r2
 8005494:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	4413      	add	r3, r2
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d305      	bcc.n	80054b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d903      	bls.n	80054ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054b8:	e113      	b.n	80056e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	2200      	movs	r2, #0
 80054be:	60bb      	str	r3, [r7, #8]
 80054c0:	60fa      	str	r2, [r7, #12]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c6:	4a84      	ldr	r2, [pc, #528]	@ (80056d8 <UART_SetConfig+0x5c4>)
 80054c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2200      	movs	r2, #0
 80054d0:	603b      	str	r3, [r7, #0]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054dc:	f7fa fe9c 	bl	8000218 <__aeabi_uldivmod>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4610      	mov	r0, r2
 80054e6:	4619      	mov	r1, r3
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	020b      	lsls	r3, r1, #8
 80054f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054f6:	0202      	lsls	r2, r0, #8
 80054f8:	6979      	ldr	r1, [r7, #20]
 80054fa:	6849      	ldr	r1, [r1, #4]
 80054fc:	0849      	lsrs	r1, r1, #1
 80054fe:	2000      	movs	r0, #0
 8005500:	460c      	mov	r4, r1
 8005502:	4605      	mov	r5, r0
 8005504:	eb12 0804 	adds.w	r8, r2, r4
 8005508:	eb43 0905 	adc.w	r9, r3, r5
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	469a      	mov	sl, r3
 8005514:	4693      	mov	fp, r2
 8005516:	4652      	mov	r2, sl
 8005518:	465b      	mov	r3, fp
 800551a:	4640      	mov	r0, r8
 800551c:	4649      	mov	r1, r9
 800551e:	f7fa fe7b 	bl	8000218 <__aeabi_uldivmod>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4613      	mov	r3, r2
 8005528:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005530:	d308      	bcc.n	8005544 <UART_SetConfig+0x430>
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005538:	d204      	bcs.n	8005544 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6a3a      	ldr	r2, [r7, #32]
 8005540:	60da      	str	r2, [r3, #12]
 8005542:	e0ce      	b.n	80056e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800554a:	e0ca      	b.n	80056e2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005554:	d166      	bne.n	8005624 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005556:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800555a:	2b08      	cmp	r3, #8
 800555c:	d827      	bhi.n	80055ae <UART_SetConfig+0x49a>
 800555e:	a201      	add	r2, pc, #4	@ (adr r2, 8005564 <UART_SetConfig+0x450>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	08005589 	.word	0x08005589
 8005568:	08005591 	.word	0x08005591
 800556c:	08005599 	.word	0x08005599
 8005570:	080055af 	.word	0x080055af
 8005574:	0800559f 	.word	0x0800559f
 8005578:	080055af 	.word	0x080055af
 800557c:	080055af 	.word	0x080055af
 8005580:	080055af 	.word	0x080055af
 8005584:	080055a7 	.word	0x080055a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005588:	f7fe f812 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 800558c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800558e:	e014      	b.n	80055ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005590:	f7fe f824 	bl	80035dc <HAL_RCC_GetPCLK2Freq>
 8005594:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005596:	e010      	b.n	80055ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005598:	4b4e      	ldr	r3, [pc, #312]	@ (80056d4 <UART_SetConfig+0x5c0>)
 800559a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800559c:	e00d      	b.n	80055ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800559e:	f7fd ff99 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 80055a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055a4:	e009      	b.n	80055ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055ac:	e005      	b.n	80055ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 8090 	beq.w	80056e2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c6:	4a44      	ldr	r2, [pc, #272]	@ (80056d8 <UART_SetConfig+0x5c4>)
 80055c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055cc:	461a      	mov	r2, r3
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80055d4:	005a      	lsls	r2, r3, #1
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	085b      	lsrs	r3, r3, #1
 80055dc:	441a      	add	r2, r3
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	2b0f      	cmp	r3, #15
 80055ec:	d916      	bls.n	800561c <UART_SetConfig+0x508>
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055f4:	d212      	bcs.n	800561c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f023 030f 	bic.w	r3, r3, #15
 80055fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	085b      	lsrs	r3, r3, #1
 8005604:	b29b      	uxth	r3, r3
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	b29a      	uxth	r2, r3
 800560c:	8bfb      	ldrh	r3, [r7, #30]
 800560e:	4313      	orrs	r3, r2
 8005610:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	8bfa      	ldrh	r2, [r7, #30]
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	e062      	b.n	80056e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005622:	e05e      	b.n	80056e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005624:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005628:	2b08      	cmp	r3, #8
 800562a:	d828      	bhi.n	800567e <UART_SetConfig+0x56a>
 800562c:	a201      	add	r2, pc, #4	@ (adr r2, 8005634 <UART_SetConfig+0x520>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	08005659 	.word	0x08005659
 8005638:	08005661 	.word	0x08005661
 800563c:	08005669 	.word	0x08005669
 8005640:	0800567f 	.word	0x0800567f
 8005644:	0800566f 	.word	0x0800566f
 8005648:	0800567f 	.word	0x0800567f
 800564c:	0800567f 	.word	0x0800567f
 8005650:	0800567f 	.word	0x0800567f
 8005654:	08005677 	.word	0x08005677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005658:	f7fd ffaa 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 800565c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800565e:	e014      	b.n	800568a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005660:	f7fd ffbc 	bl	80035dc <HAL_RCC_GetPCLK2Freq>
 8005664:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005666:	e010      	b.n	800568a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005668:	4b1a      	ldr	r3, [pc, #104]	@ (80056d4 <UART_SetConfig+0x5c0>)
 800566a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800566c:	e00d      	b.n	800568a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800566e:	f7fd ff31 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 8005672:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005674:	e009      	b.n	800568a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800567a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800567c:	e005      	b.n	800568a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005688:	bf00      	nop
    }

    if (pclk != 0U)
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	2b00      	cmp	r3, #0
 800568e:	d028      	beq.n	80056e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005694:	4a10      	ldr	r2, [pc, #64]	@ (80056d8 <UART_SetConfig+0x5c4>)
 8005696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800569a:	461a      	mov	r2, r3
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	fbb3 f2f2 	udiv	r2, r3, r2
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	441a      	add	r2, r3
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	2b0f      	cmp	r3, #15
 80056b8:	d910      	bls.n	80056dc <UART_SetConfig+0x5c8>
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056c0:	d20c      	bcs.n	80056dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	60da      	str	r2, [r3, #12]
 80056cc:	e009      	b.n	80056e2 <UART_SetConfig+0x5ce>
 80056ce:	bf00      	nop
 80056d0:	40008000 	.word	0x40008000
 80056d4:	00f42400 	.word	0x00f42400
 80056d8:	08005d04 	.word	0x08005d04
      }
      else
      {
        ret = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2200      	movs	r2, #0
 80056fc:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 80056fe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005702:	4618      	mov	r0, r3
 8005704:	3730      	adds	r7, #48	@ 0x30
 8005706:	46bd      	mov	sp, r7
 8005708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800570c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a0:	f003 0310 	and.w	r3, r3, #16
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d01a      	beq.n	8005822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800580a:	d10a      	bne.n	8005822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	605a      	str	r2, [r3, #4]
  }
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af02      	add	r7, sp, #8
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005860:	f7fb fd7c 	bl	800135c <HAL_GetTick>
 8005864:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0308 	and.w	r3, r3, #8
 8005870:	2b08      	cmp	r3, #8
 8005872:	d10e      	bne.n	8005892 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005874:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f82f 	bl	80058e6 <UART_WaitOnFlagUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e025      	b.n	80058de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b04      	cmp	r3, #4
 800589e:	d10e      	bne.n	80058be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f819 	bl	80058e6 <UART_WaitOnFlagUntilTimeout>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e00f      	b.n	80058de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b09c      	sub	sp, #112	@ 0x70
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	603b      	str	r3, [r7, #0]
 80058f2:	4613      	mov	r3, r2
 80058f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058f6:	e0a9      	b.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fe:	f000 80a5 	beq.w	8005a4c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005902:	f7fb fd2b 	bl	800135c <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800590e:	429a      	cmp	r2, r3
 8005910:	d302      	bcc.n	8005918 <UART_WaitOnFlagUntilTimeout+0x32>
 8005912:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005914:	2b00      	cmp	r3, #0
 8005916:	d140      	bne.n	800599a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005928:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800592c:	667b      	str	r3, [r7, #100]	@ 0x64
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005936:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005938:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800593c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e6      	bne.n	8005918 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3308      	adds	r3, #8
 8005950:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800595a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800595c:	f023 0301 	bic.w	r3, r3, #1
 8005960:	663b      	str	r3, [r7, #96]	@ 0x60
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3308      	adds	r3, #8
 8005968:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800596a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800596c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005970:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005978:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e5      	bne.n	800594a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2220      	movs	r2, #32
 8005982:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2220      	movs	r2, #32
 800598a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e069      	b.n	8005a6e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d051      	beq.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059b6:	d149      	bne.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80059d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059e2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80059ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e6      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3308      	adds	r3, #8
 80059fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	e853 3f00 	ldrex	r3, [r3]
 8005a02:	613b      	str	r3, [r7, #16]
   return(result);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f023 0301 	bic.w	r3, r3, #1
 8005a0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3308      	adds	r3, #8
 8005a12:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005a14:	623a      	str	r2, [r7, #32]
 8005a16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a18:	69f9      	ldr	r1, [r7, #28]
 8005a1a:	6a3a      	ldr	r2, [r7, #32]
 8005a1c:	e841 2300 	strex	r3, r2, [r1]
 8005a20:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e5      	bne.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e010      	b.n	8005a6e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69da      	ldr	r2, [r3, #28]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	4013      	ands	r3, r2
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	bf0c      	ite	eq
 8005a5c:	2301      	moveq	r3, #1
 8005a5e:	2300      	movne	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	461a      	mov	r2, r3
 8005a64:	79fb      	ldrb	r3, [r7, #7]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	f43f af46 	beq.w	80058f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3770      	adds	r7, #112	@ 0x70
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b085      	sub	sp, #20
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d101      	bne.n	8005a8c <HAL_UARTEx_DisableFifoMode+0x16>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	e027      	b.n	8005adc <HAL_UARTEx_DisableFifoMode+0x66>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2224      	movs	r2, #36	@ 0x24
 8005a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0201 	bic.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005aba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e02d      	b.n	8005b5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2224      	movs	r2, #36	@ 0x24
 8005b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0201 	bic.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f84f 	bl	8005be0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e02d      	b.n	8005bd8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2224      	movs	r2, #36	@ 0x24
 8005b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0201 	bic.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f811 	bl	8005be0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d108      	bne.n	8005c02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c00:	e031      	b.n	8005c66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c02:	2308      	movs	r3, #8
 8005c04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c06:	2308      	movs	r3, #8
 8005c08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	0e5b      	lsrs	r3, r3, #25
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	0f5b      	lsrs	r3, r3, #29
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c2a:	7bbb      	ldrb	r3, [r7, #14]
 8005c2c:	7b3a      	ldrb	r2, [r7, #12]
 8005c2e:	4911      	ldr	r1, [pc, #68]	@ (8005c74 <UARTEx_SetNbDataToProcess+0x94>)
 8005c30:	5c8a      	ldrb	r2, [r1, r2]
 8005c32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c36:	7b3a      	ldrb	r2, [r7, #12]
 8005c38:	490f      	ldr	r1, [pc, #60]	@ (8005c78 <UARTEx_SetNbDataToProcess+0x98>)
 8005c3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	7b7a      	ldrb	r2, [r7, #13]
 8005c4c:	4909      	ldr	r1, [pc, #36]	@ (8005c74 <UARTEx_SetNbDataToProcess+0x94>)
 8005c4e:	5c8a      	ldrb	r2, [r1, r2]
 8005c50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c54:	7b7a      	ldrb	r2, [r7, #13]
 8005c56:	4908      	ldr	r1, [pc, #32]	@ (8005c78 <UARTEx_SetNbDataToProcess+0x98>)
 8005c58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	08005d1c 	.word	0x08005d1c
 8005c78:	08005d24 	.word	0x08005d24

08005c7c <memset>:
 8005c7c:	4402      	add	r2, r0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d100      	bne.n	8005c86 <memset+0xa>
 8005c84:	4770      	bx	lr
 8005c86:	f803 1b01 	strb.w	r1, [r3], #1
 8005c8a:	e7f9      	b.n	8005c80 <memset+0x4>

08005c8c <__libc_init_array>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8005cc4 <__libc_init_array+0x38>)
 8005c90:	4c0d      	ldr	r4, [pc, #52]	@ (8005cc8 <__libc_init_array+0x3c>)
 8005c92:	1b64      	subs	r4, r4, r5
 8005c94:	10a4      	asrs	r4, r4, #2
 8005c96:	2600      	movs	r6, #0
 8005c98:	42a6      	cmp	r6, r4
 8005c9a:	d109      	bne.n	8005cb0 <__libc_init_array+0x24>
 8005c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8005ccc <__libc_init_array+0x40>)
 8005c9e:	4c0c      	ldr	r4, [pc, #48]	@ (8005cd0 <__libc_init_array+0x44>)
 8005ca0:	f000 f818 	bl	8005cd4 <_init>
 8005ca4:	1b64      	subs	r4, r4, r5
 8005ca6:	10a4      	asrs	r4, r4, #2
 8005ca8:	2600      	movs	r6, #0
 8005caa:	42a6      	cmp	r6, r4
 8005cac:	d105      	bne.n	8005cba <__libc_init_array+0x2e>
 8005cae:	bd70      	pop	{r4, r5, r6, pc}
 8005cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb4:	4798      	blx	r3
 8005cb6:	3601      	adds	r6, #1
 8005cb8:	e7ee      	b.n	8005c98 <__libc_init_array+0xc>
 8005cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cbe:	4798      	blx	r3
 8005cc0:	3601      	adds	r6, #1
 8005cc2:	e7f2      	b.n	8005caa <__libc_init_array+0x1e>
 8005cc4:	08005d34 	.word	0x08005d34
 8005cc8:	08005d34 	.word	0x08005d34
 8005ccc:	08005d34 	.word	0x08005d34
 8005cd0:	08005d38 	.word	0x08005d38

08005cd4 <_init>:
 8005cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd6:	bf00      	nop
 8005cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cda:	bc08      	pop	{r3}
 8005cdc:	469e      	mov	lr, r3
 8005cde:	4770      	bx	lr

08005ce0 <_fini>:
 8005ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce2:	bf00      	nop
 8005ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce6:	bc08      	pop	{r3}
 8005ce8:	469e      	mov	lr, r3
 8005cea:	4770      	bx	lr
